<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="337c0dfc53fd303d550b5b9161734953e0f07c58" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36469945" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <TypeSignature Language="F#" Value="type DynamicMethod = class&#xA;    inherit MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="09dd9-101">定義及代表可以編譯、執行和捨棄的動態方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="09dd9-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span>
      </span>
      <span data-ttu-id="09dd9-102">已捨棄的方法可供記憶體回收所用。</span>
      <span class="sxs-lookup">
        <span data-stu-id="09dd9-102">Discarded methods are available for garbage collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-103">您可以使用<xref:System.Reflection.Emit.DynamicMethod>類別來產生，並在執行階段，執行方法，而不需產生動態組件和動態的型別包含方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="09dd9-104">在 just-in-time (JIT) 編譯器所建立的可執行程式碼會回收時<xref:System.Reflection.Emit.DynamicMethod>收回物件。</span><span class="sxs-lookup"><span data-stu-id="09dd9-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="09dd9-105">動態方法是最有效率的方式來產生並執行程式碼的資訊量很少。</span><span class="sxs-lookup"><span data-stu-id="09dd9-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="09dd9-106">可以匿名裝載動態方法，或可以是邏輯上相關聯的模組或型別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-106">A dynamic method can be anonymously hosted, or it can be logically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="09dd9-107">如果匿名裝載動態方法，它是系統提供的組件，位於，因此與其他程式碼分開。</span><span class="sxs-lookup"><span data-stu-id="09dd9-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="09dd9-108">根據預設，它沒有任何非公用資料的存取權。</span><span class="sxs-lookup"><span data-stu-id="09dd9-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="09dd9-109">匿名裝載的動態方法可以限制略過 JIT 編譯器可見度檢查，如果被授與能力<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="09dd9-110">動態方法所存取其非公用成員的組件的信任層級必須相同或發出動態方法的呼叫堆疊的信任層級的子集。</span><span class="sxs-lookup"><span data-stu-id="09dd9-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="09dd9-111">如需匿名裝載動態方法的詳細資訊，請參閱[逐步解說： 在部分信任案例中發出的程式碼](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="09dd9-112">如果您指定的模組相關聯的動態方法，動態方法在有效的全域模組。</span><span class="sxs-lookup"><span data-stu-id="09dd9-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="09dd9-113">它可以存取模組中的所有類型和所有`internal`(`Friend`在 Visual Basic 中) 的類型的成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="09dd9-114">您可以將動態方法與任何模組，不論您建立模組，但前提是要求<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>旗標都可藉由呼叫堆疊，其中包含您的程式碼。</span><span class="sxs-lookup"><span data-stu-id="09dd9-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="09dd9-115">如果<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>旗標包含授權、 動態方法可以略過 JIT 編譯器可見度檢查，並且存取所有類型宣告為任何組件中的任何其他模組或模組中的私用資料。</span><span class="sxs-lookup"><span data-stu-id="09dd9-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="09dd9-116">當您指定動態方法在相關聯的模組時，該模組不能用於匿名裝載的系統提供組件中。</span><span class="sxs-lookup"><span data-stu-id="09dd9-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="09dd9-117">如果您指定的型別相關聯的動態方法，其型別的所有成員的存取權不論存取層級。</span><span class="sxs-lookup"><span data-stu-id="09dd9-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="09dd9-118">此外，可以略過 JIT 可見度檢查。</span><span class="sxs-lookup"><span data-stu-id="09dd9-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="09dd9-119">這可讓在相同的模組或任何組件中的任何其他模組中宣告其他類型的私用資料的動態方法存取。</span><span class="sxs-lookup"><span data-stu-id="09dd9-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="09dd9-120">您可以將動態方法與任何類型，但您的程式碼必須被授與<xref:System.Security.Permissions.ReflectionPermission>兼具<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>和<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="09dd9-121">下表顯示哪些類型和成員可以存取匿名裝載的動態方法，與 JIT 可見度檢查，取決於是否不<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess>旗標會授與。</span><span class="sxs-lookup"><span data-stu-id="09dd9-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="09dd9-122">不使用 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="09dd9-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="09dd9-123">包含 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="09dd9-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="09dd9-124">不需略過 JIT 可見度檢查</span><span class="sxs-lookup"><span data-stu-id="09dd9-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="09dd9-125">任何組件中的公用類型的公用成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="09dd9-126">任何組件中的公用類型的公用成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="09dd9-127">正在略過 JIT 可見度檢查，以限制</span><span class="sxs-lookup"><span data-stu-id="09dd9-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="09dd9-128">任何組件中的公用類型的公用成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="09dd9-129">只有在其信任層級會等於或小於發出動態方法的組件的信任層級的組件中的所有型別的所有成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-130">之前[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，發出程式碼所需<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="09dd9-131">此權限會包含預設在完全信任和 LocalIntranet 具名使用權限集合中，但是不在網際網路權限集合。</span><span class="sxs-lookup"><span data-stu-id="09dd9-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="09dd9-132">因此，在舊版的[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]程式庫可以使用具有網際網路權限，只有當<xref:System.Security.SecurityCriticalAttribute>屬性，也會執行<xref:System.Security.PermissionSet.Assert%2A>如<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="09dd9-133">這類程式庫需要仔細的安全性檢閱，因為編碼錯誤可能會造成安全性漏洞。</span><span class="sxs-lookup"><span data-stu-id="09dd9-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="09dd9-134">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] 允許在部分信任案例中發出程式碼，而不需提出任何安全性要求，因為產生的程式碼本質上並非有權限的作業。</span><span class="sxs-lookup"><span data-stu-id="09dd9-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="09dd9-135">也就是產生的程式碼之權限不會比發出程式碼的組件還多。</span><span class="sxs-lookup"><span data-stu-id="09dd9-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="09dd9-136">這可讓程式庫發出安全性透明的程式碼，並可免除 <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit> 判斷提示的需要，這可簡化撰寫安全程式庫的工作。</span><span class="sxs-lookup"><span data-stu-id="09dd9-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="09dd9-137">若要使用這項功能，您的應用程式應將目標設[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]或更新版本。</span><span class="sxs-lookup"><span data-stu-id="09dd9-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="09dd9-138">下表顯示哪些類型和成員都可以與模組或模組中的類型相關聯的動態方法存取。</span><span class="sxs-lookup"><span data-stu-id="09dd9-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="09dd9-139">模組相關聯</span><span class="sxs-lookup"><span data-stu-id="09dd9-139">Associated with module</span></span>|<span data-ttu-id="09dd9-140">與類型相關聯</span><span class="sxs-lookup"><span data-stu-id="09dd9-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="09dd9-141">不需略過 JIT 可見度檢查</span><span class="sxs-lookup"><span data-stu-id="09dd9-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="09dd9-142">模組中的公用、 內部和私用類型的公用和內部成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="09dd9-143">任何組件中的公用類型的公用成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="09dd9-144">所有成員相關聯的類型。</span><span class="sxs-lookup"><span data-stu-id="09dd9-144">All members of the associated type.</span></span> <span data-ttu-id="09dd9-145">模組中的所有其他類型的公用和內部成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="09dd9-146">任何組件中的公用類型的公用成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="09dd9-147">正在略過 JIT 可見度檢查</span><span class="sxs-lookup"><span data-stu-id="09dd9-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="09dd9-148">任何組件中的所有型別的所有成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="09dd9-149">任何組件中的所有型別的所有成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="09dd9-150">與模組相關聯的動態方法會具有該模組的權限。</span><span class="sxs-lookup"><span data-stu-id="09dd9-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="09dd9-151">與類型相關聯的動態方法已包含該類型的模組的權限。</span><span class="sxs-lookup"><span data-stu-id="09dd9-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="09dd9-152">動態方法和它們的參數不需要加以命名，但您可以指定名稱，以協助偵錯。</span><span class="sxs-lookup"><span data-stu-id="09dd9-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="09dd9-153">動態方法或其參數上不支援自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="09dd9-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="09dd9-154">動態方法雖然`static`方法 (`Shared`方法，在 Visual Basic 中的)，則放寬規則，委派繫結中導入的[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]讓繫結至物件的動態方法，這樣它就像是執行個體方法時呼叫使用該委派執行個體。</span><span class="sxs-lookup"><span data-stu-id="09dd9-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="09dd9-155">提供範例示範這<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="09dd9-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-156">在[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]，動態方法並不支援的符號資訊、 本機變數名稱和行號對應。</span><span class="sxs-lookup"><span data-stu-id="09dd9-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="09dd9-157">這項限制可能會在未來版本中移除。</span><span class="sxs-lookup"><span data-stu-id="09dd9-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="09dd9-158">您可以使用<xref:System.Reflection.Emit.AssemblyBuilder>簡化偵錯的產生的 Microsoft intermediate language (MSIL)，然後再切換至動態方法最後在部署期間，因為在開發期間<xref:System.Reflection.Emit.ILGenerator>呼叫是這兩種情況中的相同。</span><span class="sxs-lookup"><span data-stu-id="09dd9-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="09dd9-159">驗證</span><span class="sxs-lookup"><span data-stu-id="09dd9-159">Verification</span></span>  
 <span data-ttu-id="09dd9-160">下列清單摘要說明的動態方法可以包含無法驗證程式碼的狀況。</span><span class="sxs-lookup"><span data-stu-id="09dd9-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="09dd9-161">(例如，動態方法，將無法驗證如果其<xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A>屬性設定為`false`。)</span><span class="sxs-lookup"><span data-stu-id="09dd9-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="09dd9-162">安全性關鍵組件相關聯的動態方法也是安全性關鍵，而且可以略過驗證。</span><span class="sxs-lookup"><span data-stu-id="09dd9-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="09dd9-163">例如，沒有安全性屬性當做桌面應用程式執行的組件視為為安全性關鍵的執行階段。</span><span class="sxs-lookup"><span data-stu-id="09dd9-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="09dd9-164">如果您將動態方法與組件產生關聯，動態方法包含無法驗證程式碼。</span><span class="sxs-lookup"><span data-stu-id="09dd9-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="09dd9-165">如果具有層級 1 透明度的組件相關聯的動態方法含有未經驗證的程式碼，在 just-in-time (JIT) 編譯器會插入安全性要求。</span><span class="sxs-lookup"><span data-stu-id="09dd9-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="09dd9-166">只有當完全信任的程式碼執行動態方法，要求就會成功。</span><span class="sxs-lookup"><span data-stu-id="09dd9-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="09dd9-167">請參閱[安全性透明程式碼，層級 1](~/docs/framework/misc/security-transparent-code-level-1.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="09dd9-168">如果具有層級 2 透明度 （例如 mscorlib.dll) 的組件相關聯的動態方法含有未經驗證的程式碼，它就會擲回例外狀況 （由 JIT 編譯器插入） 而不是進行安全性要求。</span><span class="sxs-lookup"><span data-stu-id="09dd9-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="09dd9-169">請參閱[安全性透明程式碼，層級 2](~/docs/framework/misc/security-transparent-code-level-2.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="09dd9-170">匿名裝載的動態方法包含無法驗證的程式碼一律會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="09dd9-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="09dd9-171">它永遠不可以略過驗證，即使它是建立並執行完全信任的程式碼。</span><span class="sxs-lookup"><span data-stu-id="09dd9-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="09dd9-172">無法驗證程式碼，會擲回的例外狀況會叫用動態方法的方式而有所不同。</span><span class="sxs-lookup"><span data-stu-id="09dd9-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="09dd9-173">如果您使用叫用動態方法所傳回的委派<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>方法，<xref:System.Security.VerificationException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="09dd9-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="09dd9-174">如果您使用叫用動態方法<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>方法，<xref:System.Reflection.TargetInvocationException>會擲回內部<xref:System.Security.VerificationException>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-175">下列程式碼範例會建立動態方法採用兩個參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="09dd9-176">這個範例會發出列印至主控台時，第一個參數的簡單函式主體，此範例會使用做為方法的傳回值的第二個參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="09dd9-177">此範例完成藉由建立委派的方法、 叫用使用不同的參數，委派和最後會叫用動態方法使用<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-178">建立動態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-178">Creates a dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09dd9-179">動態方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-179">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-180">這可以是零長度的字串，但不能是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-180">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="09dd9-181">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-181">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="09dd9-182">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-182">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-183">初始化匿名裝載的動態方法，並指定方法名稱、傳回類型和參數類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-183">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-184">動態方法所建立的這個建構函式是匿名的組件，而不是現有的類型或模組相關聯。</span><span class="sxs-lookup"><span data-stu-id="09dd9-184">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="09dd9-185">匿名的組件存在只用來提供沙箱環境的動態方法，也就是，以將它們與其他程式碼隔離。</span><span class="sxs-lookup"><span data-stu-id="09dd9-185">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="09dd9-186">這個環境可讓您更安全的動態方法發出及執行部分信任程式碼。</span><span class="sxs-lookup"><span data-stu-id="09dd9-186">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="09dd9-187">這個建構函式指定在 just-in-time (JIT) 可見度檢查將會強制執行的 Microsoft intermediate language (MSIL) 的動態方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-187">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="09dd9-188">也就是動態方法中的程式碼可以存取公用類別的公用方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-188">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="09dd9-189">如果該方法嘗試存取類型或成員，會擲回例外狀況`private`， `protected`，或`internal`(`Friend`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-189">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="09dd9-190">若要建立具有限制略過 JIT 可見度檢查能力的動態方法，使用<xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29>建構函式。</span><span class="sxs-lookup"><span data-stu-id="09dd9-190">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="09dd9-191">建構匿名裝載的動態方法時，發出的組件的呼叫堆疊會包含在內。</span><span class="sxs-lookup"><span data-stu-id="09dd9-191">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="09dd9-192">叫用方法時，發出的組件的權限可用而不是實際呼叫者的權限。</span><span class="sxs-lookup"><span data-stu-id="09dd9-192">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="09dd9-193">因此，無法執行動態方法，在發出，即使它是傳遞給方法以及具有較高的信任層級的組件所執行的組件的權限的較高層級。</span><span class="sxs-lookup"><span data-stu-id="09dd9-193">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="09dd9-194">這個建構函式指定方法屬性<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>和<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>，和呼叫慣例<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-194">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-195">中引進這個建構函式[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]或更新版本。</span><span class="sxs-lookup"><span data-stu-id="09dd9-195">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09dd9-196">
            <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-196">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09dd9-197">
            <paramref name="name" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-197">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="09dd9-198">
            <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-198">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, restrictedSkipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09dd9-199">動態方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-199">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-200">這可以是零長度的字串，但不能是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-200">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="09dd9-201">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-201">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="09dd9-202">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-202">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="restrictedSkipVisibility">
          <span data-ttu-id="09dd9-203">
            <see langword="true" /> 則略過對動態方法的 MSIL 所存取之類型和成員的 JIT 可視性檢查，但有此限制：包含這些類型和成員的組件的信任層級，必須等於或小於發出動態方法的呼叫堆疊的信任層級；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-203">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-204">初始化匿名裝載的動態方法，並指定方法名稱、傳回類型、參數類型、以及是否應該略過動態方法的 Microsoft Intermediate Language (MSIL) 所存取之類型和成員的 Just-In-Time (JIT) 可見度檢查。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-204">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-205">動態方法所建立的這個建構函式是匿名的組件，而不是現有的類型或模組相關聯。</span><span class="sxs-lookup"><span data-stu-id="09dd9-205">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="09dd9-206">匿名的組件存在只用來提供沙箱環境的動態方法，也就是，以將它們與其他程式碼隔離。</span><span class="sxs-lookup"><span data-stu-id="09dd9-206">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="09dd9-207">這個環境可讓您更安全的動態方法發出及執行部分信任程式碼。</span><span class="sxs-lookup"><span data-stu-id="09dd9-207">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="09dd9-208">匿名裝載動態方法沒有任何類型或成員會自動存取`private`， `protected`，或`internal`(`Friend`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-208">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="09dd9-209">這是不同的動態方法與現有的類型或模組，相關聯的相關聯的範圍中具有隱藏成員的存取權。</span><span class="sxs-lookup"><span data-stu-id="09dd9-209">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="09dd9-210">指定`true`如`restrictedSkipVisibility`動態方法是否存取類型或成員`private`， `protected`，或`internal`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-210">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="09dd9-211">這會提供給這些成員的動態方法，限制存取。</span><span class="sxs-lookup"><span data-stu-id="09dd9-211">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="09dd9-212">也就是符合下列條件時，才可以存取成員：</span><span class="sxs-lookup"><span data-stu-id="09dd9-212">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="09dd9-213">目標成員屬於具有等於或小於發出動態方法的呼叫堆疊的信任層級的組件。</span><span class="sxs-lookup"><span data-stu-id="09dd9-213">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="09dd9-214">發出動態方法的呼叫堆疊會授與<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-214">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="09dd9-215">以完全信任執行的程式碼時，這是永遠為 true。</span><span class="sxs-lookup"><span data-stu-id="09dd9-215">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="09dd9-216">部分信任的程式碼，它才為 true 主機明確授與權限。</span><span class="sxs-lookup"><span data-stu-id="09dd9-216">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="09dd9-217">如果未授與權限，安全性例外狀況時擲回<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>稱為或叫用動態方法時，不這個建構函式呼叫時。</span><span class="sxs-lookup"><span data-stu-id="09dd9-217">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="09dd9-218">發出動態方法不需要任何特殊權限。</span><span class="sxs-lookup"><span data-stu-id="09dd9-218">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="09dd9-219">例如，動態方法用來建立`restrictedSkipVisibility`設`true`可以存取在呼叫堆疊上的任何組件的私用成員，如果呼叫堆疊授與限制的成員存取。</span><span class="sxs-lookup"><span data-stu-id="09dd9-219">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="09dd9-220">如果呼叫堆疊上的部分信任程式碼會建立動態方法，它無法存取私用成員中的型別的[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]組件，因為這類組件是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="09dd9-220">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="09dd9-221">如果`restrictedSkipVisibility`是`false`，會強制執行的 JIT 可見度檢查。</span><span class="sxs-lookup"><span data-stu-id="09dd9-221">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="09dd9-222">動態方法中的程式碼可以存取公用類別的公用方法，而且如果它嘗試存取類型或成員，會擲回例外狀況`private`， `protected`，或`internal`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-222">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="09dd9-223">建構匿名裝載的動態方法時，發出的組件的呼叫堆疊會包含在內。</span><span class="sxs-lookup"><span data-stu-id="09dd9-223">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="09dd9-224">叫用方法時，會使用發出的呼叫堆疊的權限，而不是實際呼叫者的權限。</span><span class="sxs-lookup"><span data-stu-id="09dd9-224">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="09dd9-225">因此，無法執行動態方法，在發出，即使它是傳遞給方法以及具有較高的信任層級的組件所執行的組件的權限的較高層級。</span><span class="sxs-lookup"><span data-stu-id="09dd9-225">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="09dd9-226">這個建構函式指定方法屬性<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>和<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>，和呼叫慣例<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-226">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-227">中引進這個建構函式[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]或更新版本。</span><span class="sxs-lookup"><span data-stu-id="09dd9-227">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09dd9-228">
            <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-228">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09dd9-229">
            <paramref name="name" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-229">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="09dd9-230">
            <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-230">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09dd9-231">動態方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-231">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-232">這可以是零長度的字串，但不能是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-232">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="09dd9-233">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-233">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="09dd9-234">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-234">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="09dd9-235">
            <see cref="T:System.Reflection.Module" />，代表動態方法在邏輯上相關聯的模組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-235">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-236">建立對模組通用的動態方法，並指定方法名稱、傳回類型、參數類型和模組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-236">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-237">這個建構函式指定方法屬性<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>和<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>，呼叫慣例<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>，並不會略過在 just-in-time (JIT) 可見度檢查。</span><span class="sxs-lookup"><span data-stu-id="09dd9-237">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="09dd9-238">這個建構函式以建立動態方法可存取公用和`internal`(`Friend`在 Visual Basic 中) 包含在模組中的所有型別的成員`m`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-238">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-239">回溯相容性，這個建構函式要求<xref:System.Security.Permissions.SecurityPermission>與<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>旗標，如果下列條件都為 true:`m`是模組之外呼叫模組，以及需求的<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>旗標失敗。</span><span class="sxs-lookup"><span data-stu-id="09dd9-239">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="09dd9-240">如果要求<xref:System.Security.Permissions.SecurityPermission>成功時，允許此作業。</span><span class="sxs-lookup"><span data-stu-id="09dd9-240">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-241">從開始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，不再需要此成員<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-241">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="09dd9-242">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="09dd9-242">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-243">下列程式碼範例會建立動態方法採用兩個參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-243">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="09dd9-244">這個範例會發出列印至主控台時，第一個參數的簡單函式主體，此範例會使用做為方法的傳回值的第二個參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-244">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="09dd9-245">此範例完成藉由建立委派的方法、 叫用使用不同的參數，委派和最後會叫用動態方法使用<xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29>方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-245">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09dd9-246">
            <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-246">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="09dd9-247">-或-  <paramref name="m" /> 是為動態方法提供匿名裝載的模組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-247">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09dd9-248">
            <paramref name="name" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-248">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="09dd9-249">-或-  <paramref name="m" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-249">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="09dd9-250">
            <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-250">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="09dd9-251">若要將動態方法產生關聯以外呼叫模組的模組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-251">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="09dd9-252">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-252">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09dd9-253">動態方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-253">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-254">這可以是零長度的字串，但不能是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-254">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="09dd9-255">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-255">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="09dd9-256">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-256">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="09dd9-257">動態方法在邏輯方面相關聯的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-257">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="09dd9-258">動態方法可存取該類型的所有成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-258">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-259">建立動態方法，指定方法名稱、傳回類型、參數類型及與動態方法在邏輯上相關聯的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-259">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-260">使用這個建構函式建立此動態方法沒有型別的所有成員的存取權`owner`，並為 public 和`internal`(`Friend`在 Visual Basic 中) 包含的模組中的所有其他類型的成員`owner`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-260">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="09dd9-261">這個建構函式指定方法屬性<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>和<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>，呼叫慣例<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>，並不會略過在 just-in-time (JIT) 可見度檢查。</span><span class="sxs-lookup"><span data-stu-id="09dd9-261">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-262">回溯相容性，這個建構函式要求<xref:System.Security.Permissions.SecurityPermission>與<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>旗標，如果下列條件都為 true:`owner`以外呼叫模組，以及需求的模組中<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>旗標失敗。</span><span class="sxs-lookup"><span data-stu-id="09dd9-262">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="09dd9-263">如果要求<xref:System.Security.Permissions.SecurityPermission>成功時，允許此作業。</span><span class="sxs-lookup"><span data-stu-id="09dd9-263">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-264">從開始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，不再需要此成員<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-264">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="09dd9-265">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="09dd9-265">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-266">下列程式碼範例會建立<xref:System.Reflection.Emit.DynamicMethod>邏輯上相關聯的類型。</span><span class="sxs-lookup"><span data-stu-id="09dd9-266">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="09dd9-267">此關聯可讓它存取該類型的私用成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-267">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="09dd9-268">程式碼範例定義名為類別`Example`私用欄位，與類別名稱為`DerivedFromxample`衍生自第一個類別，名為委派類型`UseLikeStatic`傳回<xref:System.Int32>且具有參數的型別`Example`和<xref:System.Int32>，和名為委派類型`UseLikeInstance`傳回<xref:System.Int32>且具有一個參數的型別<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-268">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="09dd9-269">範例程式碼接著會建立<xref:System.Reflection.Emit.DynamicMethod>變更執行個體的私用欄位`Example`並傳回先前的值。</span><span class="sxs-lookup"><span data-stu-id="09dd9-269">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-270">一般情況下，變更類別的內部欄位不是良好的物件導向程式設計方式。</span><span class="sxs-lookup"><span data-stu-id="09dd9-270">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="09dd9-271">範例程式碼建立的執行個體`Example`，然後建立兩個委派。</span><span class="sxs-lookup"><span data-stu-id="09dd9-271">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="09dd9-272">第一個是類型的`UseLikeStatic`，具有相同的動態方法的參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-272">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="09dd9-273">第二個是型別`UseLikeInstance`，缺少第一個參數 (型別`Example`)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-273">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="09dd9-274">這個委派會使用建立<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>方法多載; 第二個參數，該方法多載是的執行個體`Example`，在此情況下建立的執行個體只，為繫結到新建立的委派。</span><span class="sxs-lookup"><span data-stu-id="09dd9-274">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="09dd9-275">動態方法時叫用委派時，處理程式碼的繫結的執行個體`Example`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-275">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-276">這是比較不嚴謹的規則的範例，委派繫結中導入的[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]，以及新的多載<xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-276">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="09dd9-277">如需詳細資訊，請參閱 <xref:System.Delegate> 類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-277">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="09dd9-278">`UseLikeStatic`叫用委派，在執行個體中傳遞`Example`繫結至`UseLikeInstance`委派。</span><span class="sxs-lookup"><span data-stu-id="09dd9-278">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="09dd9-279">然後在`UseLikeInstance`叫用委派，使這兩個相同的執行個體的代理人`Example`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-279">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="09dd9-280">每次呼叫之後，會顯示內部欄位的值中的變更。</span><span class="sxs-lookup"><span data-stu-id="09dd9-280">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="09dd9-281">最後，`UseLikeInstance`委派繫結的執行個體`DerivedFromxample`，和委派呼叫，會重複。</span><span class="sxs-lookup"><span data-stu-id="09dd9-281">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09dd9-282">
            <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-282">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="09dd9-283">-或-  <paramref name="owner" /> 是介面、陣列、開放式泛型型別，或者是泛型型別或方法的型別參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-283">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09dd9-284">
            <paramref name="name" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-284">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="09dd9-285">-或-  <paramref name="owner" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-285">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="09dd9-286">
            <paramref name="returnType" /> 為 <see langword="null" />，或屬於 <see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" /> 的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-286">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="09dd9-287">若要動態方法關聯以外呼叫模組的模組中的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-287">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="09dd9-288">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-288">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09dd9-289">動態方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-289">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-290">這可以是零長度的字串，但不能是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-290">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="09dd9-291">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-291">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="09dd9-292">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-292">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="09dd9-293">
            <see cref="T:System.Reflection.Module" />，代表動態方法在邏輯上相關聯的模組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-293">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="09dd9-294">
            <see langword="true" /> 表示要略過動態方法的 MSIL 所存取之類型和成員的 JIT 可見度檢查。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-294">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-295">建立對模組而言全域的動態方法，並指定方法名稱、傳回類型、參數類型、模組，以及是否應該略過動態方法的 Microsoft Intermediate Language (MSIL) 所存取之類型和成員的 Just-In-Time (JIT) 可見度檢查。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-295">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-296">這個建構函式指定方法屬性<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>和<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>，和呼叫慣例<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-296">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="09dd9-297">這個建構函式以建立動態方法可存取公用和`internal`(`Friend`在 Visual Basic 中) 所包含的模組中的所有型別的成員`m`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-297">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="09dd9-298">略過 JIT 編譯器的可見性檢查可讓動態方法存取的所有其他型別的 private 和 protected 成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-298">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="09dd9-299">例如，撰寫程式碼來將物件序列化時，這十分有用。</span><span class="sxs-lookup"><span data-stu-id="09dd9-299">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-300">回溯相容性，這個建構函式要求<xref:System.Security.Permissions.SecurityPermission>與<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>旗標，如果下列條件都為 true:`m`是模組之外呼叫模組，以及需求的<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>旗標失敗。</span><span class="sxs-lookup"><span data-stu-id="09dd9-300">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="09dd9-301">如果要求<xref:System.Security.Permissions.SecurityPermission>成功時，允許此作業。</span><span class="sxs-lookup"><span data-stu-id="09dd9-301">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-302">從開始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，不再需要此成員<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-302">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="09dd9-303">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="09dd9-303">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09dd9-304">
            <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-304">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="09dd9-305">-或-  <paramref name="m" /> 是為動態方法提供匿名裝載的模組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-305">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09dd9-306">
            <paramref name="name" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-306">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="09dd9-307">-或-  <paramref name="m" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-307">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="09dd9-308">
            <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-308">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="09dd9-309">若要將動態方法產生關聯以外呼叫模組的模組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-309">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="09dd9-310">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-310">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09dd9-311">動態方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-311">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-312">這可以是零長度的字串，但不能是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-312">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="09dd9-313">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-313">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="09dd9-314">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-314">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="09dd9-315">動態方法在邏輯方面相關聯的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-315">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="09dd9-316">動態方法可存取該類型的所有成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-316">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="09dd9-317">
            <see langword="true" /> 表示要略過動態方法的 MSIL 所存取之類型和成員的 JIT 可見度檢查，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-317">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-318">建立動態方法，並指定方法名稱、傳回類型、參數類型、動態方法在邏輯上相關聯的類型，以及是否應該略過動態方法的 Microsoft Intermediate Language (MSIL) 所存取之類型和成員的 Just-In-Time (JIT) 可見度檢查。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-318">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-319">使用這個建構函式建立此動態方法沒有型別的所有成員的存取權`owner`，並為 public 和`internal`(`Friend`在 Visual Basic 中) 包含的模組中的所有其他類型的成員`owner`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-319">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="09dd9-320">略過 JIT 編譯器的可見性檢查可讓動態方法存取的所有其他型別的 private 和 protected 成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-320">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="09dd9-321">例如，撰寫程式碼來將物件序列化時，這十分有用。</span><span class="sxs-lookup"><span data-stu-id="09dd9-321">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="09dd9-322">這個建構函式指定方法屬性<xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType>和<xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>，和呼叫慣例<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-322">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-323">回溯相容性，這個建構函式要求<xref:System.Security.Permissions.SecurityPermission>與<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>旗標，如果下列條件都為 true:`owner`以外呼叫模組，以及需求的模組中<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>旗標失敗。</span><span class="sxs-lookup"><span data-stu-id="09dd9-323">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="09dd9-324">如果要求<xref:System.Security.Permissions.SecurityPermission>成功時，允許此作業。</span><span class="sxs-lookup"><span data-stu-id="09dd9-324">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-325">從開始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，不再需要此成員<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-325">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="09dd9-326">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="09dd9-326">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09dd9-327">
            <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-327">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="09dd9-328">-或-  <paramref name="owner" /> 是介面、陣列、開放式泛型型別，或者是泛型型別或方法的型別參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-328">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09dd9-329">
            <paramref name="name" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-329">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="09dd9-330">-或-  <paramref name="owner" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-330">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="09dd9-331">
            <paramref name="returnType" /> 為 <see langword="null" />，或屬於 <see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" /> 的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-331">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="09dd9-332">若要動態方法關聯以外呼叫模組的模組中的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-332">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="09dd9-333">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-333">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09dd9-334">動態方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-334">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-335">可以是零長度字串，但不可為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-335">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="09dd9-336">指定動態方法屬性的 <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-336">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-337">唯一允許的組合是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-337">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="09dd9-338">動態方法的的呼叫慣例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-338">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-339">必須是 <see cref="F:System.Reflection.CallingConventions.Standard" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-339">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="09dd9-340">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-340">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="09dd9-341">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-341">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">To be added.</param>
        <param name="skipVisibility">
          <span data-ttu-id="09dd9-342">
            <see langword="true" /> 表示要略過動態方法的 MSIL 所存取之類型和成員的 JIT 可見度檢查，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-342">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-343">建立對模組而言全域的動態方法，並指定方法名稱、屬性、呼叫慣例、傳回類型、參數類型、模組，以及是否應該略過動態方法的 Microsoft Intermediate Language (MSIL) 所存取之類型和成員的 Just-In-Time (JIT) 可見度檢查。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-343">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-344">這個建構函式以建立動態方法可存取公用和`internal`(`Friend`在 Visual Basic 中) 的所有公用及內部類型包含在模組中的成員`m`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-344">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="09dd9-345">略過 JIT 編譯器的可見性檢查可讓動態方法存取的所有其他類型和所有其他組件中模組的 private 和 protected 成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-345">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="09dd9-346">例如，撰寫程式碼來將物件序列化時，這十分有用。</span><span class="sxs-lookup"><span data-stu-id="09dd9-346">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-347">回溯相容性，這個建構函式要求<xref:System.Security.Permissions.SecurityPermission>與<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>旗標，如果下列條件都為 true:`m`是模組之外呼叫模組，以及需求的<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>旗標失敗。</span><span class="sxs-lookup"><span data-stu-id="09dd9-347">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="09dd9-348">如果要求<xref:System.Security.Permissions.SecurityPermission>成功時，允許此作業。</span><span class="sxs-lookup"><span data-stu-id="09dd9-348">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-349">從開始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，不再需要此成員<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-349">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="09dd9-350">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="09dd9-350">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09dd9-351">
            <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-351">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="09dd9-352">-或-  <paramref name="m" /> 是為動態方法提供匿名裝載的模組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-352">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09dd9-353">
            <paramref name="name" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-353">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="09dd9-354">-或-  <paramref name="m" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-354">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="09dd9-355">
            <paramref name="attributes" /> 是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" /> 以外的旗標組合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-355">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="09dd9-356">-或-  <paramref name="callingConvention" /> 不是 <see cref="F:System.Reflection.CallingConventions.Standard" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-356">-or-  <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="09dd9-357">-或-  <paramref name="returnType" /> 是 <see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" /> 的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-357">-or-  <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="09dd9-358">若要將動態方法產生關聯以外呼叫模組的模組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-358">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="09dd9-359">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-359">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="09dd9-360">動態方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-360">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-361">可以是零長度字串，但不可為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-361">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="09dd9-362">指定動態方法屬性的 <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-362">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-363">唯一允許的組合是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-363">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="09dd9-364">動態方法的的呼叫慣例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-364">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="09dd9-365">必須是 <see cref="F:System.Reflection.CallingConventions.Standard" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-365">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="09dd9-366">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-366">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="09dd9-367">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-367">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="09dd9-368">動態方法在邏輯方面相關聯的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-368">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="09dd9-369">動態方法可存取該類型的所有成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-369">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="09dd9-370">
            <see langword="true" /> 表示要略過動態方法的 MSIL 所存取之類型和成員的 JIT 可見度檢查，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-370">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-371">建立動態方法、指定方法名稱、屬性、呼叫慣例、傳回類型、參數類型、動態方法在邏輯上相關聯的類型，以及是否應該略過動態方法的 Microsoft Intermediate Language (MSIL) 所存取之類型和成員的 Just-In-Time (JIT) 可見度檢查。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-371">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-372">動態方法在全域範圍中包含的類型的模組`owner`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-372">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="09dd9-373">存取類型的所有成員`owner`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-373">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="09dd9-374">使用這個建構函式建立此動態方法沒有型別的所有成員的存取權`owner`，和為 public 和`internal`(`Friend`在 Visual Basic 中) 包含的模組中所包含的所有型別的成員`owner`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-374">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="09dd9-375">略過 JIT 編譯器的可見性檢查可讓動態方法存取的所有其他型別的 private 和 protected 成員。</span><span class="sxs-lookup"><span data-stu-id="09dd9-375">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="09dd9-376">例如，撰寫程式碼來將物件序列化時，這十分有用。</span><span class="sxs-lookup"><span data-stu-id="09dd9-376">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-377">回溯相容性，這個建構函式要求<xref:System.Security.Permissions.SecurityPermission>與<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>旗標，如果下列條件都為 true:`owner`以外呼叫模組，以及需求的模組中<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>旗標失敗。</span><span class="sxs-lookup"><span data-stu-id="09dd9-377">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="09dd9-378">如果要求<xref:System.Security.Permissions.SecurityPermission>成功時，允許此作業。</span><span class="sxs-lookup"><span data-stu-id="09dd9-378">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-379">從開始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，不再需要此成員<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-379">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="09dd9-380">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="09dd9-380">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09dd9-381">
            <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-381">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="09dd9-382">-或-  <paramref name="owner" /> 是介面、陣列、開放式泛型型別，或者是泛型型別或方法的型別參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-382">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09dd9-383">
            <paramref name="name" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-383">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="09dd9-384">-或-  <paramref name="owner" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-384">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="09dd9-385">
            <paramref name="attributes" /> 是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" /> 以外的旗標組合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-385">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="09dd9-386">-或-  <paramref name="callingConvention" /> 不是 <see cref="F:System.Reflection.CallingConventions.Standard" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-386">-or-  <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="09dd9-387">-或-  <paramref name="returnType" /> 是 <see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" /> 的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-387">-or-  <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="09dd9-388">若要動態方法關聯以外呼叫模組的模組中的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-388">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="09dd9-389">關聯的列舉型別：<see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-389">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-390">取得建立動態方法時所指定的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-390">Gets the attributes specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-391">
            <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合，代表此方法的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-391">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-392">目前動態方法的方法屬性都<xref:System.Reflection.MethodAttributes.Public>和<xref:System.Reflection.MethodAttributes.Static>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-392">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-393">下列程式碼範例會顯示動態方法的方法屬性。</span><span class="sxs-lookup"><span data-stu-id="09dd9-393">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="09dd9-394">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-394">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-395">取得建立動態方法時所指定的呼叫慣例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-395">Gets the calling convention specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-396">
            <see cref="T:System.Reflection.CallingConventions" /> 值的其中一個，表示該方法的呼叫慣例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-396">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-397">目前動態方法的呼叫慣例是一律<xref:System.Reflection.CallingConventions.Standard>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-397">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-398">下列程式碼範例會顯示動態方法的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="09dd9-398">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="09dd9-399">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-399">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-400">完成動態方法，並建立可用來執行此動態方法的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-400">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type -&gt; Delegate" Usage="dynamicMethod.CreateDelegate delegateType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="09dd9-401">一種委派類型，其簽章符合動態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-401">A delegate type whose signature matches that of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-402">完成動態方法，並建立可用來執行此動態方法的委派。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-402">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-403">指定類型的委派，可用於執行動態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-403">A delegate of the specified type, which can be used to execute the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-404">呼叫<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>方法或<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>方法完成動態方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-404">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="09dd9-405">任何進一步嘗試改變動態方法，例如修改參數定義或發出多個 Microsoft 中繼語言 (MSIL)，則會忽略;擲不回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="09dd9-405">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="09dd9-406">若要建立動態方法之方法主體，當您有自己的 MSIL 產生器時，呼叫<xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A>方法，以取得<xref:System.Reflection.Emit.DynamicILInfo>物件。</span><span class="sxs-lookup"><span data-stu-id="09dd9-406">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="09dd9-407">如果您沒有自己的 MSIL 產生器，呼叫<xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A>方法，以取得<xref:System.Reflection.Emit.ILGenerator>可以用來產生方法主體的物件。</span><span class="sxs-lookup"><span data-stu-id="09dd9-407">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-408">下列程式碼範例會建立動態方法採用兩個參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-408">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="09dd9-409">這個範例會發出列印至主控台時，第一個參數的簡單函式主體，此範例會使用做為方法的傳回值的第二個參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-409">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="09dd9-410">此範例完成藉由建立委派的方法、 叫用使用不同的參數，委派和最後會叫用動態方法使用<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-410">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="09dd9-411">此動態方法沒有任何方法主體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-411">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09dd9-412">
            <paramref name="delegateType" /> 的參數數目錯誤或參數類型錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-412">
              <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type * obj -&gt; Delegate" Usage="dynamicMethod.CreateDelegate (delegateType, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="09dd9-413">一種委派類型，其簽章符合減去第一個參數的動態方法簽章。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-413">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="09dd9-414">委派繫結至的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-414">An object the delegate is bound to.</span>
          </span>
          <span data-ttu-id="09dd9-415">必須是與動態方法的第一個參數相同類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-415">Must be of the same type as the first parameter of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-416">完成動態方法並建立可以用來執行它的委派，同時指定委派類型和委派繫結至的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-416">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-417">指定類型的委派，可用於對指定目標物件執行動態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-417">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-418">這個方法多載建立委派繫結至特定的物件。</span><span class="sxs-lookup"><span data-stu-id="09dd9-418">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="09dd9-419">這類委派會在其第一個引數上關閉。</span><span class="sxs-lookup"><span data-stu-id="09dd9-419">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="09dd9-420">雖然這個方法是靜態的它可如同一般的執行個體方法。執行個體是`target`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-420">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="09dd9-421">這個方法多載都需要`target`是相同類型的第一個參數的動態方法，或要指派給該型別 （例如，在衍生類別）。</span><span class="sxs-lookup"><span data-stu-id="09dd9-421">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="09dd9-422">簽章`delegateType`動態方法的第一個以外的所有參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-422">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="09dd9-423">例如，如果此動態方法沒有參數<xref:System.String>， <xref:System.Int32>，和<xref:System.Byte>，然後`delegateType`具有參數<xref:System.Int32>和<xref:System.Byte>;`target`的型別<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-423">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="09dd9-424">呼叫<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>方法或<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>方法完成動態方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-424">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="09dd9-425">任何進一步嘗試改變動態方法，例如修改參數定義或發出多個 Microsoft 中繼語言 (MSIL)，則會忽略;擲不回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="09dd9-425">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="09dd9-426">若要建立動態方法之方法主體，當您有自己的 MSIL 產生器時，呼叫<xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A>方法，以取得<xref:System.Reflection.Emit.DynamicILInfo>物件。</span><span class="sxs-lookup"><span data-stu-id="09dd9-426">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="09dd9-427">如果您沒有自己的 MSIL 產生器，呼叫<xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A>方法，以取得<xref:System.Reflection.Emit.ILGenerator>可以用來產生方法主體的物件。</span><span class="sxs-lookup"><span data-stu-id="09dd9-427">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-428">下列程式碼範例會建立繫結的委派<xref:System.Reflection.Emit.DynamicMethod>型別的執行個體，使方法的運作將相同的執行個體上每次叫用它。</span><span class="sxs-lookup"><span data-stu-id="09dd9-428">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="09dd9-429">程式碼範例定義名為類別`Example`私用欄位，與類別名稱為`DerivedFromxample`衍生自第一個類別，名為委派類型`UseLikeStatic`傳回<xref:System.Int32>且具有參數的型別`Example`和<xref:System.Int32>，和名為委派類型`UseLikeInstance`傳回<xref:System.Int32>且具有一個參數的型別<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-429">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="09dd9-430">範例程式碼接著會建立<xref:System.Reflection.Emit.DynamicMethod>變更執行個體的私用欄位`Example`並傳回先前的值。</span><span class="sxs-lookup"><span data-stu-id="09dd9-430">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-431">一般情況下，變更類別的內部欄位不是良好的物件導向程式設計方式。</span><span class="sxs-lookup"><span data-stu-id="09dd9-431">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="09dd9-432">範例程式碼建立的執行個體`Example`，然後建立兩個委派。</span><span class="sxs-lookup"><span data-stu-id="09dd9-432">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="09dd9-433">第一個是類型的`UseLikeStatic`，具有相同的動態方法的參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-433">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="09dd9-434">第二個是型別`UseLikeInstance`，缺少第一個參數 (型別`Example`)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-434">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="09dd9-435">這個委派會使用建立<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>方法多載; 第二個參數，該方法多載是的執行個體`Example`，在此情況下建立的執行個體只，為繫結到新建立的委派。</span><span class="sxs-lookup"><span data-stu-id="09dd9-435">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="09dd9-436">動態方法時叫用委派時，處理程式碼的繫結的執行個體`Example`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-436">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-437">這是比較不嚴謹的規則的範例，委派繫結中導入的[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]，以及新的多載<xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-437">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="09dd9-438">如需詳細資訊，請參閱 <xref:System.Delegate> 類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-438">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="09dd9-439">`UseLikeStatic`叫用委派，在執行個體中傳遞`Example`繫結至`UseLikeInstance`委派。</span><span class="sxs-lookup"><span data-stu-id="09dd9-439">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="09dd9-440">然後在`UseLikeInstance`叫用委派，使這兩個相同的執行個體的代理人`Example`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-440">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="09dd9-441">每次呼叫之後，會顯示內部欄位的值中的變更。</span><span class="sxs-lookup"><span data-stu-id="09dd9-441">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="09dd9-442">最後，`UseLikeInstance`委派繫結的執行個體`DerivedFromxample`，和委派呼叫，會重複。</span><span class="sxs-lookup"><span data-stu-id="09dd9-442">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="09dd9-443">此動態方法沒有任何方法主體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-443">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09dd9-444">
            <paramref name="target" /> 與動態方法的第一個參數不是相同類型，且無法指派給該類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-444">
              <paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span>
          </span>
          <span data-ttu-id="09dd9-445">-或-  <paramref name="delegateType" /> 的參數數目錯誤或參數類型錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-445">-or-  <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-446">取得宣告方法的類型，如果是動態方法，則一律為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-446">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-447">一定是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-447">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-448">這個屬性永遠傳回`null`動態方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-448">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="09dd9-449">動態方法在邏輯上相關的類型項目，即使它不是由宣告型別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-449">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-450">下列程式碼範例會顯示動態方法的宣告型別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-450">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="09dd9-451">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-451">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="member this.DefineParameter : int * System.Reflection.ParameterAttributes * string -&gt; System.Reflection.Emit.ParameterBuilder" Usage="dynamicMethod.DefineParameter (position, attributes, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position">
          <span data-ttu-id="09dd9-452">在參數清單中參數的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-452">The position of the parameter in the parameter list.</span>
          </span>
          <span data-ttu-id="09dd9-453">第一個參數的參數索引從數字 1 開始。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-453">Parameters are indexed beginning with the number 1 for the first parameter.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="09dd9-454">指定參數屬性的 <see cref="T:System.Reflection.ParameterAttributes" /> 值的位元組合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-454">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span>
          </span>
        </param>
        <param name="parameterName">
          <span data-ttu-id="09dd9-455">參數名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-455">The name of the parameter.</span>
          </span>
          <span data-ttu-id="09dd9-456">名稱可以是零長度字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-456">The name can be a zero-length string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-457">定義動態方法的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-457">Defines a parameter of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-458">一律傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-458">Always returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-459">如果`position`為 0，<xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A>方法是指傳回的值。</span><span class="sxs-lookup"><span data-stu-id="09dd9-459">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="09dd9-460">設定參數資訊有不會影響傳回的值。</span><span class="sxs-lookup"><span data-stu-id="09dd9-460">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="09dd9-461">如果動態方法已完成，藉由呼叫<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>或<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>方法，<xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A>方法沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="09dd9-461">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="09dd9-462">不會有例外狀況擲回。</span><span class="sxs-lookup"><span data-stu-id="09dd9-462">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-463">下列程式碼範例示範如何定義的動態方法的參數資訊。</span><span class="sxs-lookup"><span data-stu-id="09dd9-463">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="09dd9-464">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-464">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="09dd9-465">這個方法沒有參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-465">The method has no parameters.</span>
          </span>
          <span data-ttu-id="09dd9-466">-或-  <paramref name="position" /> 小於 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-466">-or-  <paramref name="position" /> is less than 0.</span>
          </span>
          <span data-ttu-id="09dd9-467">-或-  <paramref name="position" /> 大於方法參數的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-467">-or-  <paramref name="position" /> is greater than the number of the method's parameters.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetBaseDefinition : unit -&gt; System.Reflection.MethodInfo" Usage="dynamicMethod.GetBaseDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-468">傳回此方法的基底實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-468">Returns the base implementation for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-469">此方法的基底實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-469">The base implementation of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-470">這個方法一律會傳回目前`DynamicMethod`物件。</span><span class="sxs-lookup"><span data-stu-id="09dd9-470">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-471">傳回套用至方法的自訂屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-471">Returns the custom attributes applied to the method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="09dd9-472">
            <see langword="true" /> 表示搜尋方法的繼承鏈結以尋找自訂屬性，<see langword="false" /> 表示只檢查目前的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-472">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-473">傳回為這個方法定義的所有自訂屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-473">Returns all the custom attributes defined for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-474">代表這個方法所有自訂屬性的物件陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-474">An array of objects representing all the custom attributes of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-475">動態方法，指定`true`如`inherit`沒有任何作用，因為型別中未宣告為方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-475">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-476">自訂屬性目前不支援動態方法上。</span><span class="sxs-lookup"><span data-stu-id="09dd9-476">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="09dd9-477">唯一的屬性會傳回為<xref:System.Runtime.CompilerServices.MethodImplAttribute>; 您可以取得該方法實作旗標更輕鬆地使用<xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-477">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="09dd9-478">
            <see cref="T:System.Type" />，表示要傳回之自訂屬性的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-478">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="09dd9-479">
            <see langword="true" /> 表示搜尋方法的繼承鏈結以尋找自訂屬性，<see langword="false" /> 表示只檢查目前的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-479">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-480">傳回已套用至該方法之指定類型的自訂屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-480">Returns the custom attributes of the specified type that have been applied to the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-481">物件的陣列，表示型別為 <paramref name="attributeType" /> 或衍生自型別 <paramref name="attributeType" /> 之方法的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-481">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-482">動態方法，指定`true`如`inherit`沒有任何作用，因為型別中未宣告為方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-482">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-483">自訂屬性目前不支援動態方法上。</span><span class="sxs-lookup"><span data-stu-id="09dd9-483">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="09dd9-484">唯一的屬性會傳回為<xref:System.Runtime.CompilerServices.MethodImplAttribute>; 您可以取得該方法實作旗標更輕鬆地使用<xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-484">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="09dd9-485">
            <paramref name="attributeType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-485">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberSignature Language="F#" Value="member this.GetDynamicILInfo : unit -&gt; System.Reflection.Emit.DynamicILInfo" Usage="dynamicMethod.GetDynamicILInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-486">傳回 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件，該物件可用於從中繼資料語彙基元 (Metadata Token)、範圍和 Microsoft Intermediate Language (MSIL) 資料流產生方法主體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-486">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-487">
            <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件，可用於從中繼資料語彙基元、範圍和 MSIL 資料流產生方法主體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-487">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-488"><xref:System.Reflection.Emit.DynamicILInfo>類別提供來支援 unmanaged 程式碼產生。</span><span class="sxs-lookup"><span data-stu-id="09dd9-488">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="09dd9-489">執行 unmanaged 程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-489">to execute unmanaged code.</span>
          </span>
          <span data-ttu-id="09dd9-490">關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-490">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-491">傳回可以用來發出動態方法之主體的 MSIL 產生器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-491">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : unit -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-492">針對方法，傳回具有預設 Microsoft Intermediate Language (MSIL) 資料流大小 64 位元組的 MSIL 產生器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-492">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-493">方法的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-493">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-494">已完成動態方法，藉由呼叫之後<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>或<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>方法中，任何進一步嘗試加入 MSIL 會被忽略。</span><span class="sxs-lookup"><span data-stu-id="09dd9-494">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="09dd9-495">不會有例外狀況擲回。</span><span class="sxs-lookup"><span data-stu-id="09dd9-495">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-496">有一些限制在動態方法中，甚至在某些完全信任情況下無法驗證的程式碼。</span><span class="sxs-lookup"><span data-stu-id="09dd9-496">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="09dd9-497">如需了解 <xref:System.Reflection.Emit.DynamicMethod>，請參閱＜備註＞中的＜驗證＞一節。</span><span class="sxs-lookup"><span data-stu-id="09dd9-497">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-498">下列程式碼範例會建立動態方法採用兩個參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-498">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="09dd9-499">這個範例會發出列印至主控台時，第一個參數的簡單函式主體，此範例會使用做為方法的傳回值的第二個參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-499">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="09dd9-500">此範例完成藉由建立委派的方法、 叫用使用不同的參數，委派和最後會叫用動態方法使用<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-500">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : int -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator streamSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize">
          <span data-ttu-id="09dd9-501">MSIL 資料流的大小，以位元組為單位。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-501">The size of the MSIL stream, in bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-502">針對方法，傳回具有指定 Microsoft Intermediate Language (MSIL) 資料流大小的 MSIL 產生器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-502">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-503">方法的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 物件，具有指定的 MSIL 資料流大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-503">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-504">已完成動態方法，藉由呼叫之後<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>或<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>方法中，任何進一步嘗試加入 MSIL 會被忽略。</span><span class="sxs-lookup"><span data-stu-id="09dd9-504">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="09dd9-505">不會有例外狀況擲回。</span><span class="sxs-lookup"><span data-stu-id="09dd9-505">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-506">有一些限制在動態方法中，甚至在某些完全信任情況下無法驗證的程式碼。</span><span class="sxs-lookup"><span data-stu-id="09dd9-506">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="09dd9-507">如需了解 <xref:System.Reflection.Emit.DynamicMethod>，請參閱＜備註＞中的＜驗證＞一節。</span><span class="sxs-lookup"><span data-stu-id="09dd9-507">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-508">下列程式碼範例會示範這個方法多載。</span><span class="sxs-lookup"><span data-stu-id="09dd9-508">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="09dd9-509">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-509">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="override this.GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="dynamicMethod.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-510">傳回方法的實作旗標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-510">Returns the implementation flags for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-511">
            <see cref="T:System.Reflection.MethodImplAttributes" /> 值的位元組合，表示方法的實作旗標。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-511">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-512">目前動態方法的方法實作屬性都<xref:System.Reflection.MethodImplAttributes.IL>和<xref:System.Reflection.MethodImplAttributes.NoInlining>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-512">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="override this.GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="dynamicMethod.GetParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-513">傳回動態方法的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-513">Returns the parameters of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-514">
            <see cref="T:System.Reflection.ParameterInfo" /> 物件的陣列，代表動態方法的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-514">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-515"><xref:System.Reflection.ParameterInfo>這個方法所傳回的物件是僅提供資訊。</span><span class="sxs-lookup"><span data-stu-id="09dd9-515">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="09dd9-516">使用<xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A>方法來設定或變更的參數特性。</span><span class="sxs-lookup"><span data-stu-id="09dd9-516">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-517">下列程式碼範例會顯示動態方法的參數。</span><span class="sxs-lookup"><span data-stu-id="09dd9-517">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="09dd9-518">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-518">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool with get, set" Usage="System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-519">取得或設定值，表示在此方法中的區域變數是否以零起始。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-519">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-520">如果在此方法中的區域變數以零起始，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-520">
              <see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="09dd9-521">預設值為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-521">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-522">如果這個屬性設定為`true`，發出的 Microsoft 中繼語言 (MSIL) 包含本機變數的初始化。</span><span class="sxs-lookup"><span data-stu-id="09dd9-522">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="09dd9-523">如果設定為`false`、 未初始化的區域變數和產生的程式碼，將無法驗證。</span><span class="sxs-lookup"><span data-stu-id="09dd9-523">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-524">下列程式碼範例顯示<xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A>動態方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="09dd9-524">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="09dd9-525">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-525">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.Invoke : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="dynamicMethod.Invoke (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="09dd9-526">由於這個參數是靜態的，因此動態方法會予以忽略。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-526">This parameter is ignored for dynamic methods, because they are static.</span>
          </span>
          <span data-ttu-id="09dd9-527">請指定 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-527">Specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="09dd9-528">
            <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-528">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="09dd9-529">
            <see cref="T:System.Reflection.Binder" /> 物件，它透過反映啟用繫結、引數型別的強制型轉 (Coercion)、成員的引動過程，和 <see cref="T:System.Reflection.MemberInfo" /> 物件的擷取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-529">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          </span>
          <span data-ttu-id="09dd9-530">如果 <c>Binder</c> 為 <see langword="null" />，則會使用預設 Binder。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-530">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="09dd9-531">如需詳細資訊，請參閱 <see cref="T:System.Reflection.Binder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-531">For more details, see <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="09dd9-532">引數清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-532">An argument list.</span>
          </span>
          <span data-ttu-id="09dd9-533">這是引數陣列，其數目、順序和類型與要叫用的方法參數相同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-533">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span>
          </span>
          <span data-ttu-id="09dd9-534">如果沒有參數，則這個參數應該是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-534">If there are no parameters this parameter should be <see langword="null" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="09dd9-535">
            <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用於管理類型的強制型轉。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-535">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="09dd9-536">如果這是 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-536">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="09dd9-537">例如，必須有這個資訊，才能將表示 1000 的 <see cref="T:System.String" /> 正確地轉換為 <see cref="T:System.Double" /> 值，因為 1000 在不同文化特性中有不同的表示方式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-537">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-538">使用指定的文化特性資訊，在指定繫結器的條件約束下，以指定的參數叫用動態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-538">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-539">
            <see cref="T:System.Object" />，包含叫用方法的傳回值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-539">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-540">除了列出的例外狀況，呼叫程式碼應該準備好攔截動態方法所擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="09dd9-540">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="09dd9-541">執行動態方法所建立的委派<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>方法會更有效率，比執行它與<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-541">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="09dd9-542">呼叫<xref:System.Reflection.Emit.DynamicMethod.Invoke%2A>方法或<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>方法完成動態方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-542">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="09dd9-543">任何進一步嘗試改變動態方法，例如修改參數定義或發出多個 Microsoft 中繼語言 (MSIL)，則會忽略;擲不回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="09dd9-543">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="09dd9-544">所有的動態方法是靜態的所以`obj`參數會被忽略。</span><span class="sxs-lookup"><span data-stu-id="09dd9-544">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="09dd9-545">若要將動態方法，就好像執行個體方法，使用<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29>接受物件執行個體的多載。</span><span class="sxs-lookup"><span data-stu-id="09dd9-545">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="09dd9-546">如果動態方法沒有參數，值`parameters`應該`null`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-546">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="09dd9-547">否則數字、 類型和參數陣列中項目的順序應該與數字、 類型和參數的動態方法的順序相同。</span><span class="sxs-lookup"><span data-stu-id="09dd9-547">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-548">這個方法多載會呼叫<xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29>方法多載繼承自<xref:System.Reflection.MethodBase>類別中，因此上述的 < 備註 > 一套用於兩個多載。</span><span class="sxs-lookup"><span data-stu-id="09dd9-548">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="09dd9-549">這個方法不會直接要求權限，但叫用動態方法時，可能導致安全性要求，根據的方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-549">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="09dd9-550">例如，會提出任何要求的匿名裝載動態方法，以建立`restrictedSkipVisibility`參數設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="09dd9-550">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="09dd9-551">另一方面，如果您建立的方法與`restrictedSkipVisibility`設`true`讓它可存取的目標組件的隱藏的成員，方法會導致目標組件加上的權限的要求<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-551">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-552">之前[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個方法所需<xref:System.Security.Permissions.ReflectionPermission>與<xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess>旗標。</span><span class="sxs-lookup"><span data-stu-id="09dd9-552">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-553">下列程式碼範例中，會叫用動態方法與完全繫結，使用英文 （美國） 文化特性。</span><span class="sxs-lookup"><span data-stu-id="09dd9-553">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="09dd9-554">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-554">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="09dd9-555">不支援 <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 呼叫慣例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-555">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="09dd9-556">
            <paramref name="parameters" /> 中的項目數不符合動態方法中的參數數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-556">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="09dd9-557">
            <paramref name="parameters" /> 之一個或多個項目的型別不符合動態方法的對應參數型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-557">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="09dd9-558">動態方法是與模組相關聯，不是匿名裝載，而且建構時 <paramref name="skipVisibility" /> 設為 <see langword="false" />，但是動態方法會存取不是 <see langword="public" /> 或 <see langword="internal" /> (Visual Basic 中為 <see langword="Friend" />) 的成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-558">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span>
          </span>
          <span data-ttu-id="09dd9-559">-或-  動態方法已匿名裝載，而且建構已將 <paramref name="skipVisibility" /> 設定為 <see langword="false" />，但其所存取的成員不是 <see langword="public" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-559">-or-  The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span>
          </span>
          <span data-ttu-id="09dd9-560">-或-  動態方法含有未經驗證的程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-560">-or-  The dynamic method contains unverifiable code.</span>
          </span>
          <span data-ttu-id="09dd9-561">如需了解 <see cref="T:System.Reflection.Emit.DynamicMethod" />，請參閱＜備註＞中的＜驗證＞一節。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-561">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="dynamicMethod.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="09dd9-562">
            <see cref="T:System.Type" />，表示要搜尋之自訂屬性的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-562">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="09dd9-563">
            <see langword="true" /> 表示搜尋方法的繼承鏈結以尋找自訂屬性，<see langword="false" /> 表示只檢查目前的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-563">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="09dd9-564">指出是否已定義指定的自訂屬性類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-564">Indicates whether the specified custom attribute type is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-565">如果指定的自訂屬性型別已定義，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-565">
              <see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-566">動態方法，指定`true`如`inherit`沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="09dd9-566">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="09dd9-567">動態方法可以有任何的繼承鏈結。</span><span class="sxs-lookup"><span data-stu-id="09dd9-567">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-568">自訂屬性目前不支援動態方法上。</span><span class="sxs-lookup"><span data-stu-id="09dd9-568">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-569">取得值，這個值表示目前動態方法是否為安全性關鍵或安全性安全關鍵，因而可以執行重要的作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-569">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-570">如果目前動態方法為安全性關鍵或安全性安全關鍵，則為 <see langword="true" />，如果它是透明，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-570">
              <see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-571"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>， <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A>屬性報告 common language runtime (CLR) 所決定的動態方法的透明度。</span><span class="sxs-lookup"><span data-stu-id="09dd9-571">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="09dd9-572">這些屬性的組合是下表所示：</span><span class="sxs-lookup"><span data-stu-id="09dd9-572">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="09dd9-573">安全性層級</span><span class="sxs-lookup"><span data-stu-id="09dd9-573">Security level</span></span>|<span data-ttu-id="09dd9-574">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="09dd9-574">IsSecurityCritical</span></span>|<span data-ttu-id="09dd9-575">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="09dd9-575">IsSecuritySafeCritical</span></span>|<span data-ttu-id="09dd9-576">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="09dd9-576">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="09dd9-577">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-577">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="09dd9-578">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="09dd9-578">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="09dd9-579">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-579">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="09dd9-580">使用這些屬性會比檢查組件及其類型的安全性註釋、檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="09dd9-580">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="09dd9-581">動態方法的透明度，取決於其相關聯的模組。</span><span class="sxs-lookup"><span data-stu-id="09dd9-581">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="09dd9-582">如果動態方法的型別，而不是模組與相關聯，其透明度相依於此模組包含的型別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-582">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="09dd9-583">動態方法沒有安全性註釋，因此就會指派預設的透明度相關聯的模組。</span><span class="sxs-lookup"><span data-stu-id="09dd9-583">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="09dd9-584">匿名裝載動態方法永遠是透明的因為它們包含的系統提供模組而言是透明。</span><span class="sxs-lookup"><span data-stu-id="09dd9-584">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="09dd9-585">下表描述與受信任的組件 （也就是強式名稱組件安裝在全域組件快取） 相關聯的動態方法的透明度。</span><span class="sxs-lookup"><span data-stu-id="09dd9-585">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="09dd9-586">組件註解</span><span class="sxs-lookup"><span data-stu-id="09dd9-586">Assembly annotation</span></span>|<span data-ttu-id="09dd9-587">層級 1 透明度</span><span class="sxs-lookup"><span data-stu-id="09dd9-587">Level 1 transparency</span></span>|<span data-ttu-id="09dd9-588">層級 2 透明度</span><span class="sxs-lookup"><span data-stu-id="09dd9-588">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="09dd9-589">完全透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-589">Fully transparent</span></span>|<span data-ttu-id="09dd9-590">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-590">Transparent</span></span>|<span data-ttu-id="09dd9-591">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-591">Transparent</span></span>|  
    |<span data-ttu-id="09dd9-592">完全重大</span><span class="sxs-lookup"><span data-stu-id="09dd9-592">Fully critical</span></span>|<span data-ttu-id="09dd9-593">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-593">Critical</span></span>|<span data-ttu-id="09dd9-594">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-594">Critical</span></span>|  
    |<span data-ttu-id="09dd9-595">混合的透明度</span><span class="sxs-lookup"><span data-stu-id="09dd9-595">Mixed transparency</span></span>|<span data-ttu-id="09dd9-596">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-596">Transparent</span></span>|<span data-ttu-id="09dd9-597">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-597">Transparent</span></span>|  
    |<span data-ttu-id="09dd9-598">無從驗證的安全性</span><span class="sxs-lookup"><span data-stu-id="09dd9-598">Security-agnostic</span></span>|<span data-ttu-id="09dd9-599">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="09dd9-599">Safe-critical</span></span>|<span data-ttu-id="09dd9-600">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-600">Critical</span></span>|  
  
     <span data-ttu-id="09dd9-601">例如，如果您將動態方法關聯 mscorlib.dll 中，有層級 2 混合的透明度，其中的型別動態方法是透明的並無法執行重要的程式碼。</span><span class="sxs-lookup"><span data-stu-id="09dd9-601">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="09dd9-602">透明度層級的相關資訊，請參閱[安全性透明程式碼，層級 1](~/docs/framework/misc/security-transparent-code-level-1.md)和[安全性透明程式碼，層級 2](~/docs/framework/misc/security-transparent-code-level-2.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-602">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="09dd9-603">動態方法關聯中與安全性無關，（例如 system.dll），是信任層級 1 組件的模組不允許提高權限的信任。</span><span class="sxs-lookup"><span data-stu-id="09dd9-603">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="09dd9-604">如果呼叫的動態方法的程式碼的授權集不包含 System.dll （也就是完全信任） 的授權集<xref:System.Security.SecurityException>動態方法呼叫時擲回。</span><span class="sxs-lookup"><span data-stu-id="09dd9-604">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="09dd9-605">載入組件的方式取決於部分信任組件相關聯的動態方法的透明度。</span><span class="sxs-lookup"><span data-stu-id="09dd9-605">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="09dd9-606">如果組件已載入以部分信任 （例如，插入的沙箱化應用程式定義域），執行階段就會忽略組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="09dd9-606">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="09dd9-607">組件和所有類型和成員，包括動態方法，會都視為透明的。</span><span class="sxs-lookup"><span data-stu-id="09dd9-607">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="09dd9-608">只有部分信任組件是以完全信任 （例如，插入的桌面應用程式的預設應用程式網域） 來載入執行階段會付款注意安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="09dd9-608">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="09dd9-609">在此情況下，執行階段指派的動態方法預設透明度根據組件的註解的方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-609">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="09dd9-610">如需有關反映發出和透明度，請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-610">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="09dd9-611">透明度的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-611">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="09dd9-612">此動態方法沒有方法主體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-612">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-613">取得值，這個值表示目前動態方法在目前信任層級上是否為安全性安全關鍵，也就是說，它是否能執行重要作業並由安全性透明的程式碼存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-613">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-614">如果動態方法在目前信任層級上為安全性安全關鍵，則為 <see langword="true" />，如果它是安全性關鍵或透明，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-614">
              <see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-615"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>， <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A>屬性報告 common language runtime (CLR) 所決定的動態方法的透明度。</span><span class="sxs-lookup"><span data-stu-id="09dd9-615">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="09dd9-616">這些屬性的組合是下表所示：</span><span class="sxs-lookup"><span data-stu-id="09dd9-616">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="09dd9-617">安全性層級</span><span class="sxs-lookup"><span data-stu-id="09dd9-617">Security level</span></span>|<span data-ttu-id="09dd9-618">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="09dd9-618">IsSecurityCritical</span></span>|<span data-ttu-id="09dd9-619">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="09dd9-619">IsSecuritySafeCritical</span></span>|<span data-ttu-id="09dd9-620">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="09dd9-620">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="09dd9-621">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-621">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="09dd9-622">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="09dd9-622">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="09dd9-623">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-623">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="09dd9-624">使用這些屬性會比檢查組件及其類型的安全性註釋、檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="09dd9-624">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="09dd9-625">動態方法的透明度，取決於其相關聯的模組。</span><span class="sxs-lookup"><span data-stu-id="09dd9-625">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="09dd9-626">如果動態方法的型別，而不是模組與相關聯，其透明度相依於此模組包含的型別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-626">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="09dd9-627">動態方法沒有安全性註釋，因此就會指派預設的透明度相關聯的模組。</span><span class="sxs-lookup"><span data-stu-id="09dd9-627">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="09dd9-628">匿名裝載動態方法永遠是透明的因為它們包含的系統提供模組而言是透明。</span><span class="sxs-lookup"><span data-stu-id="09dd9-628">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="09dd9-629">下表描述與受信任的組件 （也就是強式名稱組件安裝在全域組件快取） 相關聯的動態方法的透明度。</span><span class="sxs-lookup"><span data-stu-id="09dd9-629">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="09dd9-630">組件註解</span><span class="sxs-lookup"><span data-stu-id="09dd9-630">Assembly annotation</span></span>|<span data-ttu-id="09dd9-631">層級 1 透明度</span><span class="sxs-lookup"><span data-stu-id="09dd9-631">Level 1 transparency</span></span>|<span data-ttu-id="09dd9-632">層級 2 透明度</span><span class="sxs-lookup"><span data-stu-id="09dd9-632">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="09dd9-633">完全透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-633">Fully transparent</span></span>|<span data-ttu-id="09dd9-634">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-634">Transparent</span></span>|<span data-ttu-id="09dd9-635">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-635">Transparent</span></span>|  
    |<span data-ttu-id="09dd9-636">完全重大</span><span class="sxs-lookup"><span data-stu-id="09dd9-636">Fully critical</span></span>|<span data-ttu-id="09dd9-637">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-637">Critical</span></span>|<span data-ttu-id="09dd9-638">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-638">Critical</span></span>|  
    |<span data-ttu-id="09dd9-639">混合的透明度</span><span class="sxs-lookup"><span data-stu-id="09dd9-639">Mixed transparency</span></span>|<span data-ttu-id="09dd9-640">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-640">Transparent</span></span>|<span data-ttu-id="09dd9-641">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-641">Transparent</span></span>|  
    |<span data-ttu-id="09dd9-642">無從驗證的安全性</span><span class="sxs-lookup"><span data-stu-id="09dd9-642">Security-agnostic</span></span>|<span data-ttu-id="09dd9-643">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="09dd9-643">Safe-critical</span></span>|<span data-ttu-id="09dd9-644">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-644">Critical</span></span>|  
  
     <span data-ttu-id="09dd9-645">例如，如果您將動態方法關聯 mscorlib.dll 中，有層級 2 混合的透明度，其中的型別動態方法是透明的並無法執行重要的程式碼。</span><span class="sxs-lookup"><span data-stu-id="09dd9-645">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="09dd9-646">透明度層級的相關資訊，請參閱[安全性透明程式碼，層級 1](~/docs/framework/misc/security-transparent-code-level-1.md)和[安全性透明程式碼，層級 2](~/docs/framework/misc/security-transparent-code-level-2.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-646">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="09dd9-647">動態方法關聯中與安全性無關，（例如 system.dll），是信任層級 1 組件的模組不允許提高權限的信任。</span><span class="sxs-lookup"><span data-stu-id="09dd9-647">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="09dd9-648">如果呼叫的動態方法的程式碼的授權集不包含 System.dll （也就是完全信任） 的授權集<xref:System.Security.SecurityException>動態方法呼叫時擲回。</span><span class="sxs-lookup"><span data-stu-id="09dd9-648">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="09dd9-649">載入組件的方式取決於部分信任組件相關聯的動態方法的透明度。</span><span class="sxs-lookup"><span data-stu-id="09dd9-649">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="09dd9-650">如果組件已載入以部分信任 （例如，插入的沙箱化應用程式定義域），執行階段就會忽略組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="09dd9-650">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="09dd9-651">組件和所有類型和成員，包括動態方法，會都視為透明的。</span><span class="sxs-lookup"><span data-stu-id="09dd9-651">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="09dd9-652">只有部分信任組件是以完全信任 （例如，插入的桌面應用程式的預設應用程式網域） 來載入執行階段會付款注意安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="09dd9-652">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="09dd9-653">在此情況下，執行階段指派的動態方法預設透明度根據組件的註解的方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-653">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="09dd9-654">如需有關反映發出和透明度，請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-654">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="09dd9-655">透明度的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-655">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="09dd9-656">此動態方法沒有方法主體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-656">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-657">取得值，這個值表示目前動態方法在目前信任層級上是否為安全性透明，因此無法執行重要作業。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-657">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-658">如果動態方法在目前信任層級上為安全性透明，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-658">
              <see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-659"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>， <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A>屬性報告 common language runtime (CLR) 所決定的動態方法的透明度。</span><span class="sxs-lookup"><span data-stu-id="09dd9-659">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="09dd9-660">這些屬性的組合是下表所示：</span><span class="sxs-lookup"><span data-stu-id="09dd9-660">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="09dd9-661">安全性層級</span><span class="sxs-lookup"><span data-stu-id="09dd9-661">Security level</span></span>|<span data-ttu-id="09dd9-662">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="09dd9-662">IsSecurityCritical</span></span>|<span data-ttu-id="09dd9-663">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="09dd9-663">IsSecuritySafeCritical</span></span>|<span data-ttu-id="09dd9-664">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="09dd9-664">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="09dd9-665">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-665">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="09dd9-666">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="09dd9-666">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="09dd9-667">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-667">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="09dd9-668">使用這些屬性會比檢查組件及其類型的安全性註釋、檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="09dd9-668">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="09dd9-669">動態方法的透明度，取決於其相關聯的模組。</span><span class="sxs-lookup"><span data-stu-id="09dd9-669">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="09dd9-670">如果動態方法的型別，而不是模組與相關聯，其透明度相依於此模組包含的型別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-670">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="09dd9-671">動態方法沒有安全性註釋，因此就會指派預設的透明度相關聯的模組。</span><span class="sxs-lookup"><span data-stu-id="09dd9-671">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="09dd9-672">匿名裝載動態方法永遠是透明的因為它們包含的系統提供模組而言是透明。</span><span class="sxs-lookup"><span data-stu-id="09dd9-672">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="09dd9-673">下表描述與受信任的組件 （也就是強式名稱組件安裝在全域組件快取） 相關聯的動態方法的透明度。</span><span class="sxs-lookup"><span data-stu-id="09dd9-673">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="09dd9-674">組件註解</span><span class="sxs-lookup"><span data-stu-id="09dd9-674">Assembly annotation</span></span>|<span data-ttu-id="09dd9-675">層級 1 透明度</span><span class="sxs-lookup"><span data-stu-id="09dd9-675">Level 1 transparency</span></span>|<span data-ttu-id="09dd9-676">層級 2 透明度</span><span class="sxs-lookup"><span data-stu-id="09dd9-676">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="09dd9-677">完全透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-677">Fully transparent</span></span>|<span data-ttu-id="09dd9-678">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-678">Transparent</span></span>|<span data-ttu-id="09dd9-679">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-679">Transparent</span></span>|  
    |<span data-ttu-id="09dd9-680">完全重大</span><span class="sxs-lookup"><span data-stu-id="09dd9-680">Fully critical</span></span>|<span data-ttu-id="09dd9-681">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-681">Critical</span></span>|<span data-ttu-id="09dd9-682">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-682">Critical</span></span>|  
    |<span data-ttu-id="09dd9-683">混合的透明度</span><span class="sxs-lookup"><span data-stu-id="09dd9-683">Mixed transparency</span></span>|<span data-ttu-id="09dd9-684">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-684">Transparent</span></span>|<span data-ttu-id="09dd9-685">透明</span><span class="sxs-lookup"><span data-stu-id="09dd9-685">Transparent</span></span>|  
    |<span data-ttu-id="09dd9-686">無從驗證的安全性</span><span class="sxs-lookup"><span data-stu-id="09dd9-686">Security-agnostic</span></span>|<span data-ttu-id="09dd9-687">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="09dd9-687">Safe-critical</span></span>|<span data-ttu-id="09dd9-688">Critical</span><span class="sxs-lookup"><span data-stu-id="09dd9-688">Critical</span></span>|  
  
     <span data-ttu-id="09dd9-689">例如，如果您將動態方法關聯 mscorlib.dll 中，有層級 2 混合的透明度，其中的型別動態方法是透明的並無法執行重要的程式碼。</span><span class="sxs-lookup"><span data-stu-id="09dd9-689">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="09dd9-690">透明度層級的相關資訊，請參閱[安全性透明程式碼，層級 1](~/docs/framework/misc/security-transparent-code-level-1.md)和[安全性透明程式碼，層級 2](~/docs/framework/misc/security-transparent-code-level-2.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-690">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="09dd9-691">動態方法關聯中與安全性無關，（例如 system.dll），是信任層級 1 組件的模組不允許提高權限的信任。</span><span class="sxs-lookup"><span data-stu-id="09dd9-691">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="09dd9-692">如果呼叫的動態方法的程式碼的授權集不包含 System.dll （也就是完全信任） 的授權集<xref:System.Security.SecurityException>動態方法呼叫時擲回。</span><span class="sxs-lookup"><span data-stu-id="09dd9-692">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="09dd9-693">載入組件的方式取決於部分信任組件相關聯的動態方法的透明度。</span><span class="sxs-lookup"><span data-stu-id="09dd9-693">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="09dd9-694">如果組件已載入以部分信任 （例如，插入的沙箱化應用程式定義域），執行階段就會忽略組件的安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="09dd9-694">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="09dd9-695">組件和所有類型和成員，包括動態方法，會都視為透明的。</span><span class="sxs-lookup"><span data-stu-id="09dd9-695">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="09dd9-696">只有部分信任組件是以完全信任 （例如，插入的桌面應用程式的預設應用程式網域） 來載入執行階段會付款注意安全性註釋。</span><span class="sxs-lookup"><span data-stu-id="09dd9-696">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="09dd9-697">在此情況下，執行階段指派的動態方法預設透明度根據組件的註解的方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-697">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="09dd9-698">如需有關反映發出和透明度，請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-698">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="09dd9-699">透明度的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="09dd9-699">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="09dd9-700">此動態方法沒有方法主體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-700">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-701">不支援動態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-701">Not supported for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-702">不支援動態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-702">Not supported for dynamic methods.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="09dd9-703">不允許動態方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-703">Not allowed for dynamic methods.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodImplementationFlags : System.Reflection.MethodImplAttributes" Usage="System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.DynamicMethod.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-704">取得動態方法在邏輯上相關聯的模組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-704">Gets the module with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-705">目前的動態方法與其相關聯的 <see cref="T:System.Reflection.Module" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-705">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-706">如果指定了模組建立動態方法時，這個屬性會傳回該模組。</span><span class="sxs-lookup"><span data-stu-id="09dd9-706">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="09dd9-707">如果建立動態方法時，已指定為擁有者的類型，這個屬性會傳回包含該類型的模組。</span><span class="sxs-lookup"><span data-stu-id="09dd9-707">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-708">下列程式碼範例顯示<xref:System.Reflection.Emit.DynamicMethod.Module%2A>動態方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="09dd9-708">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="09dd9-709">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-709">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.DynamicMethod.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-710">取得動態方法的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-710">Gets the name of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-711">方法的簡單名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-711">The simple name of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="09dd9-712">您不需要動態方法的名稱。</span><span class="sxs-lookup"><span data-stu-id="09dd9-712">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-713">下列程式碼範例會顯示動態方法的名稱。</span><span class="sxs-lookup"><span data-stu-id="09dd9-713">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="09dd9-714">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-714">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-715">取得用於反映中以取得方法的類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-715">Gets the class that was used in reflection to obtain the method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-716">一定是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-716">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-717">這個屬性永遠傳回`null`動態方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-717">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-718">下列程式碼範例會顯示動態方法的反映型別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-718">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="09dd9-719">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-719">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnParameter : System.Reflection.ParameterInfo" Usage="System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-720">取得動態方法的傳回參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-720">Gets the return parameter of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-721">一定是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-721">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-722">這個屬性永遠傳回`null`動態方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-722">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-723">取得此動態方法傳回值的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-723">Gets the type of return value for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-724">
            <see cref="T:System.Type" /> 代表目前方法之傳回值的類型；如果此方法沒有傳回類型，則為 <see cref="T:System.Void" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-724">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-725">如果`null`時建立動態方法，這個屬性會傳回所指定的傳回型別的<xref:System.Void?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="09dd9-725">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-726">下列程式碼範例會顯示動態方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-726">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="09dd9-727">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-727">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnTypeCustomAttributes : System.Reflection.ICustomAttributeProvider" Usage="System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-728">取得動態方法之傳回型別的自訂屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-728">Gets the custom attributes of the return type for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="09dd9-729">
            <see cref="T:System.Reflection.ICustomAttributeProvider" />，表示動態方法之傳回型別的自訂屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-729">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-730">自訂屬性不支援之傳回類型的動態方法，因此所傳回的自訂屬性陣列<xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A>方法永遠為空白。</span><span class="sxs-lookup"><span data-stu-id="09dd9-730">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-731">下列程式碼範例示範如何顯示之自訂屬性的動態方法的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-731">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="09dd9-732">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-732">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dynamicMethod.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="09dd9-733">傳回方法的簽章，以字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-733">Returns the signature of the method, represented as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="09dd9-734">表示方法簽章的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="09dd9-734">A string representing the method signature.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="09dd9-735">簽章僅包含類型和方法名稱，如果有的話。</span><span class="sxs-lookup"><span data-stu-id="09dd9-735">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="09dd9-736">不包含參數名稱。</span><span class="sxs-lookup"><span data-stu-id="09dd9-736">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="09dd9-737">下列程式碼範例顯示<xref:System.Reflection.Emit.DynamicMethod.ToString%2A>動態方法的方法。</span><span class="sxs-lookup"><span data-stu-id="09dd9-737">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="09dd9-738">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Reflection.Emit.DynamicMethod>類別。</span><span class="sxs-lookup"><span data-stu-id="09dd9-738">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>