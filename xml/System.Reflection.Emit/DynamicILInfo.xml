<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DynamicILInfo.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5027718ba7331018405b1f33c2a7cd8dbe961edfe.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">027718ba7331018405b1f33c2a7cd8dbe961edfe</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</source>
          <target state="translated">提供產生動態方法之 Microsoft Intermediate Language (MSIL) 和中繼資料 (Metadata) 的替代方式支援，包括用以建立語彙基元 (Token) 和插入程式碼的方法、例外狀況處理 (Exception Handling) 以及區域變數簽章 Blob (二進位大型物件)。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class allows developers to write their own MSIL generators instead of using <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>類別可讓開發人員撰寫自己的 MSIL 產生器，而不是使用<ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.</source>
          <target state="translated">若要建立其他類型的執行個體，呼叫方法，以及其他您產生的 MSIL 必須包含語彙基元的這些實體。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class provides several overloads of the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> method, which return tokens valid in the scope of the current <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>類別提供數個多載的<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph>方法，這個方法會傳回在目前的範圍內的有效權杖<ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>For example, if you need to call an overload of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> method, you can obtain a <ph id="ph2">&lt;xref:System.RuntimeMethodHandle&gt;</ph> for that overload and pass it to the <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> method to obtain a token to embed in your MSIL.</source>
          <target state="translated">例如，如果您需要呼叫的多載<ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph>方法，您可以取得<ph id="ph2">&lt;xref:System.RuntimeMethodHandle&gt;</ph>的多載，並將它傳遞給<ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph>方法，以取得要內嵌在您的 MSIL 的語彙基元。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Once you have created <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays for your local variable signature, exceptions, and code body, you can use the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt;</ph> methods to insert them into the <ph id="ph5">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> associated with your <ph id="ph6">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">一旦您建立<ph id="ph1">&lt;xref:System.Byte&gt;</ph>陣列以進行您的區域變數簽章、 例外狀況，以及程式碼主體，您可以使用<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt;</ph>方法來插入到<ph id="ph5">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>聯您<ph id="ph6">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">產生您自己的中繼資料和 MSIL 必須熟悉的通用語言基礎結構 (CLI) 文件，尤其是 &lt; 磁碟分割第二部分： 中繼資料定義和語意 &gt; 以及 &lt; 磁碟分割 iii 部分： CIL 指令集 」。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Do not use <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.</source>
          <target state="translated">請勿使用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>來產生建立另一個動態方法的委派直接呼叫的委派建構函式的程式碼。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Instead, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method to create the delegate.</source>
          <target state="translated">請改用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph>方法來建立委派。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.</source>
          <target state="translated">委派建構函式來建立委派沒有目標動態方法的參考。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</source>
          <target state="translated">動態方法可能會回收進行回收，委派仍在使用中時。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>Gets the dynamic method whose body is generated by the current instance.</source>
          <target state="translated">取得動態方法，其主體是由目前的執行個體所產生。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> object representing the dynamic method for which the current <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object is generating code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> 物件，表示目前 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 物件產生程式碼所針對的動態方法。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object is always associated with a dynamic method.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>物件永遠是動態方法相關聯。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>The purpose of the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> class.</source>
          <target state="translated">目的<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>類別是要提供另一種方法的 MSIL 資料流、 例外狀況處理和區域變數簽章插入動態方法，開發人員想要產生 MSIL，而不使用<ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a string, field, method, type, or signature in the MSIL stream for the associated dynamic method.</source>
          <target state="translated">取得在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 範圍內有效的語彙基元，表示關聯動態方法之 MSIL 資料流中的字串、欄位、方法、型別或簽章。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>An array that contains the signature.</source>
          <target state="translated">包含簽章的陣列。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing the signature for the associated dynamic method.</source>
          <target state="translated">取得在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 範圍內有效的語彙基元，表示關聯動態方法的簽章。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</source>
          <target state="translated">語彙基元，可嵌入關聯動態方法的中繼資料和 MSIL 資料流中。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">簽章的 blob 上的資訊，請參閱 Common Language Infrastructure (CLI) 文件，尤其是 &lt; 磁碟分割 II： 中繼資料定義和語意 &gt;。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>The dynamic method to call.</source>
          <target state="translated">要呼叫的動態方法。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a dynamic method to be called from the associated method.</source>
          <target state="translated">取得在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 範圍內有效的語彙基元，表示要從關聯的方法呼叫的動態方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</source>
          <target state="translated">語彙基元，可當做 MSIL 指令的目標，嵌入關聯動態方法的 MSIL 資料流中。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">這個方法多載所傳回的權杖可讓您從與目前相關聯的動態方法呼叫的動態方法<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>To call the associated dynamic method recursively, pass the value of the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt;</ph> property.</source>
          <target state="translated">若要呼叫相關聯的動態方法以遞迴方式，將值傳遞<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>The field to be accessed.</source>
          <target state="translated">要存取的欄位。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a field to be accessed from the associated dynamic method.</source>
          <target state="translated">取得在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 範圍內有效的語彙基元，表示要從關聯的動態方法存取的欄位。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">語彙基元，可在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 物件的範圍內，當做存取欄位之 MSIL 指令的運算元。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>You must obtain a token for any field that will be accessed by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">您必須取得的任何欄位，將目前相關聯的動態方法所存取的語彙基元<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field you want to access, then use the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph>方法來取得<ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph>您想要存取的欄位，然後使用<ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph>屬性來取得<ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>The method to be accessed.</source>
          <target state="translated">要存取的方法。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a method to be accessed from the associated dynamic method.</source>
          <target state="translated">取得在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 範圍內有效的語彙基元，表示要從關聯的動態方法存取的方法。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses methods, such as <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph>, in the scope of the current <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">語彙基元，可在目前 <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph> 物件的範圍內，當做存取方法 (例如 <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>) 之 MSIL 指令的運算元。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>You must obtain a token for any method that will be accessed by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">您必須取得的任何方法，將目前相關聯的動態方法所存取的語彙基元<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the method you want to access, and then use the <ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph>方法來取得<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>方法您想要存取，然後使用<ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph>屬性來取得<ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>For a method that belongs to a generic type, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt;</ph> method overload and specify a <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> for the generic type.</source>
          <target state="translated">方法屬於泛型型別，請使用<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt;</ph>方法多載，並指定<ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph>泛型型別。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>The type to be used.</source>
          <target state="translated">要使用的型別。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a type to be used in the associated dynamic method.</source>
          <target state="translated">取得在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 範圍內有效的語彙基元，表示要用於關聯的動態方法中的型別。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">語彙基元，可在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 物件的範圍內，當做需要型別之 MSIL 指令的運算元。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">這個方法多載所傳回的權杖可讓您定義本機變數的類型，並發出在目前相關聯的動態方法中建立類型的執行個體的 MSIL<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>To get a <ph id="ph1">&lt;xref:System.RuntimeTypeHandle&gt;</ph> representing a type, use the <ph id="ph2">&lt;xref:System.Type.TypeHandle%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.RuntimeTypeHandle&gt;</ph>代表的類型，使用<ph id="ph2">&lt;xref:System.Type.TypeHandle%2A?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
          <source>The string to be used.</source>
          <target state="translated">要使用的字串。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a string literal to be used in the associated dynamic method.</source>
          <target state="translated">取得在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 範圍內有效的語彙基元，表示要用於關聯的動態方法中的字串常值 (String Literal)。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
          <source>A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">語彙基元，可在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 物件的範圍內，當做需要字串之 MSIL 指令的運算元。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The field to be accessed.</source>
          <target state="translated">要存取的欄位。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The generic type the field belongs to.</source>
          <target state="translated">欄位所屬的泛型型別。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</source>
          <target state="translated">取得在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 範圍內有效的語彙基元，表示要從關聯的動態方法存取的欄位；該欄位是在指定的泛型型別上。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">語彙基元，可在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 物件的範圍內，當做存取欄位之 MSIL 指令的運算元。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>You must obtain a token for any field that will be accessed by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">您必須取得的任何欄位，將目前相關聯的動態方法所存取的語彙基元<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field you want to access, and then use the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph>方法來取得<ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph>您想要存取，然後使用欄位<ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph>屬性來取得<ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>The method.</source>
          <target state="translated">方法。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>The generic type the method belongs to.</source>
          <target state="translated">方法所屬的泛型型別。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a method on a generic type.</source>
          <target state="translated">取得在目前 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> 範圍內有效的語彙基元，表示泛型型別的方法。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses methods, such as <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph>, in the scope of the current <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">語彙基元，可在目前 <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph> 物件的範圍內，當做存取方法 (例如 <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>) 之 MSIL 指令的運算元。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>You must obtain a token for any method that will be called by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">您必須取得與目前相關聯的動態方法會呼叫任何方法的語彙基元<ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the method you want to call, and then use the <ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph>方法來取得<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>方法您想要呼叫，然後再使用<ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph>屬性來取得<ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">設定關聯之動態方法的程式碼主體。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>An array that contains the MSIL stream.</source>
          <target state="translated">包含 MSIL 資料流的陣列。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>The maximum number of items on the operand stack when the method is executing.</source>
          <target state="translated">執行此方法時，運算元堆疊上的最大項目數。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">設定關聯之動態方法的程式碼主體。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>No validity checks are performed on the MSIL stream.</source>
          <target state="translated">MSIL 資料流上，會不執行任何有效性檢查。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>Calling this method a second time replaces the first MSIL stream with the second.</source>
          <target state="translated">第二次呼叫這個方法的第二個取代第一個的 MSIL 資料流。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">產生您自己的中繼資料和 MSIL 必須熟悉的通用語言基礎結構 (CLI) 文件，尤其是 &lt; 磁碟分割第二部分： 中繼資料定義和語意 &gt; 以及 &lt; 磁碟分割 iii 部分： CIL 指令集 」。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>A pointer to a byte array containing the MSIL stream.</source>
          <target state="translated">指標，指向包含 MSIL 資料流的位元組陣列。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>The number of bytes in the MSIL stream.</source>
          <target state="translated">在 MSIL 資料流中的位元組數目。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>The maximum number of items on the operand stack when the method is executing.</source>
          <target state="translated">執行此方法時，運算元堆疊上的最大項目數。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">設定關聯之動態方法的程式碼主體。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>No validity checks are performed on the MSIL stream.</source>
          <target state="translated">MSIL 資料流上，會不執行任何有效性檢查。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Calling this method a second time replaces the first MSIL stream with the second.</source>
          <target state="translated">第二次呼叫這個方法的第二個取代第一個的 MSIL 資料流。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set."</source>
          <target state="translated">產生您自己的中繼資料和 MSIL 必須熟悉的通用語言基礎結構 (CLI) 文件，特別是 &lt; II： 中繼資料定義和語意 」 和 「 第三部分： CIL 指令集。 」</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="code" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="codeSize" /&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="code" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 且 <ph id="ph3">&lt;paramref name="codeSize" /&gt;</ph> 大於 0。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="codeSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="codeSize" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任立即呼叫者。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">這個成員無法供部分信任或安全性透明程式碼。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">設定關聯之動態方法的例外狀況中繼資料。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>An array that contains the exception metadata.</source>
          <target state="translated">包含例外狀況中繼資料的陣列。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">設定關聯之動態方法的例外狀況中繼資料。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>The exception metadata for a method defines the location and size of all <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filter, and fault blocks.</source>
          <target state="translated">方法的例外狀況中繼資料定義的位置和大小的所有<ph id="ph1">`try`</ph>， <ph id="ph2">`catch`</ph>， <ph id="ph3">`finally`</ph>、 篩選和錯誤區塊。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">此中繼資料的配置資訊，請參閱 Common Language Infrastructure (CLI) 文件，尤其是 &lt; 磁碟分割 II： 中繼資料定義和語意 &gt;。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>A pointer to a byte array containing the exception metadata.</source>
          <target state="translated">指標，指向包含例外狀況中繼資料的位元組陣列。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>The number of bytes of exception metadata.</source>
          <target state="translated">例外狀況中繼資料的位元組數目。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">設定關聯之動態方法的例外狀況中繼資料。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>The exception metadata for a method defines the location and size of all <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filter, and fault blocks.</source>
          <target state="translated">方法的例外狀況中繼資料定義的位置和大小的所有<ph id="ph1">`try`</ph>， <ph id="ph2">`catch`</ph>， <ph id="ph3">`finally`</ph>、 篩選和錯誤區塊。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">此中繼資料的配置資訊，請參閱 Common Language Infrastructure (CLI) 文件，尤其是 &lt; 磁碟分割第二部分： 中繼資料定義和語意 &gt; 以及 &lt; 磁碟分割 iii 部分： CIL 指令集 」。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="exceptionSize" /&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 且 <ph id="ph3">&lt;paramref name="exceptionSize" /&gt;</ph> 大於 0。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="exceptionSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptionSize" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任立即呼叫者。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">這個成員無法供部分信任或安全性透明程式碼。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">設定區域變數簽章，描述關聯之動態方法的區域變數配置。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>An array that contains the layout of local variables for the associated <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">陣列，其中包含相關 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> 之區域變數的配置。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">設定區域變數簽章，描述關聯之動態方法的區域變數配置。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>The local variable signature describes the layout of a method's local variables.</source>
          <target state="translated">區域變數簽章描述方法的本機變數的配置。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>To simplify construction of the local variable signature, use the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> for the local signature.</source>
          <target state="translated">若要簡化的區域變數簽章的建構，使用<ph id="ph1">`static`</ph>(<ph id="ph2">`Shared`</ph>在 Visual Basic 中)<ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph>方法來取得<ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph>簽章。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">本機變數的簽章的資訊，請參閱 Common Language Infrastructure (CLI) 文件，尤其是 &lt; 磁碟分割 II： 中繼資料定義和語意 &gt;。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>An array that contains the layout of local variables for the associated <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">陣列，其中包含相關 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> 之區域變數的配置。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>The number of bytes in the signature.</source>
          <target state="translated">簽章中的位元組數目。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">設定區域變數簽章，描述關聯之動態方法的區域變數配置。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>The local variable signature describes the layout of a method's local variables.</source>
          <target state="translated">區域變數簽章描述方法的本機變數的配置。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>To simplify construction of the local variable signature, use the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> for the local signature.</source>
          <target state="translated">若要簡化的區域變數簽章的建構，使用<ph id="ph1">`static`</ph>(<ph id="ph2">`Shared`</ph>在 Visual Basic 中)<ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph>方法來取得<ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph>簽章。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">本機變數的簽章的資訊，請參閱 Common Language Infrastructure (CLI) 文件，尤其是 &lt; 磁碟分割 II： 中繼資料定義和語意 &gt;。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">您可以線上取得這份文件；請參閱 MSDN 上的 <bpt id="p1">[</bpt>ECMA C# 和通用語言基礎結構標準<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept>，以及 Ecma International 網站上的<bpt id="p2">[</bpt>標準 ECMA-335 - 通用語言基礎結構 (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="localSignature" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="signatureSize" /&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localSignature" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 且 <ph id="ph3">&lt;paramref name="signatureSize" /&gt;</ph> 大於 0。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="signatureSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="signatureSize" /&gt;</ph> 小於 0。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任立即呼叫者。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">這個成員無法供部分信任或安全性透明程式碼。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>