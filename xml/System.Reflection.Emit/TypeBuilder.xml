<Type Name="TypeBuilder" FullName="System.Reflection.Emit.TypeBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b136d33672d3676473ad75c5fba7be56988a9a86" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53229918" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeBuilder : System.Reflection.TypeInfo, System.Runtime.InteropServices._TypeBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit TypeBuilder extends System.Reflection.TypeInfo implements class System.Runtime.InteropServices._TypeBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.TypeBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeBuilder&#xA;Inherits TypeInfo&#xA;Implements _TypeBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeBuilder sealed : System::Reflection::TypeInfo, System::Runtime::InteropServices::_TypeBuilder" />
  <TypeSignature Language="F#" Value="type TypeBuilder = class&#xA;    inherit TypeInfo&#xA;    interface _TypeBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.TypeInfo</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-2.0">System.Type</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._TypeBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._TypeBuilder))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="13e28-101">在執行階段定義和建立類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="13e28-101">Defines and creates new instances of classes during run time.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-102"><xref:System.Reflection.Emit.TypeBuilder> 根類別用來控制在執行階段動態類別的建立。</span><span class="sxs-lookup"><span data-stu-id="13e28-102"><xref:System.Reflection.Emit.TypeBuilder> is the root class used to control the creation of dynamic classes in the runtime.</span></span> <span data-ttu-id="13e28-103">它提供一組用來定義類別、 方法和欄位，加上建立的類別模組內的常式。</span><span class="sxs-lookup"><span data-stu-id="13e28-103">It provides a set of routines that are used to define classes, add methods and fields, and create the class inside a module.</span></span> <span data-ttu-id="13e28-104">新<xref:System.Reflection.Emit.TypeBuilder>可以建立從動態模組，藉由呼叫<xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=nameWithType>方法，以傳回<xref:System.Reflection.Emit.TypeBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-104">A new <xref:System.Reflection.Emit.TypeBuilder> can be created from a dynamic module by calling the <xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=nameWithType> method, which returns a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="13e28-105">反映發出提供下列選項，可定義類型：</span><span class="sxs-lookup"><span data-stu-id="13e28-105">Reflection emit provides the following options for defining types:</span></span>  
  
-   <span data-ttu-id="13e28-106">定義類別或介面，以指定的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-106">Define a class or interface with the given name.</span></span>  
  
-   <span data-ttu-id="13e28-107">定義類別或介面的指定名稱和屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-107">Define a class or interface with the given name and attributes.</span></span>  
  
-   <span data-ttu-id="13e28-108">定義具有指定名稱、 屬性和基底類別的類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-108">Define a class with the given name, attributes, and base class.</span></span>  
  
-   <span data-ttu-id="13e28-109">定義具有指定名稱、 屬性、 基底類別和類別實作的介面的集合的類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-109">Define a class with the given name, attributes, base class, and the set of interfaces that the class implements.</span></span>  
  
-   <span data-ttu-id="13e28-110">定義具有指定名稱、 屬性、 基底類別和封裝大小的類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-110">Define a class with the given name, attributes, base class, and packing size.</span></span>  
  
-   <span data-ttu-id="13e28-111">為整體來定義具有指定名稱、 屬性、 基底類別和類別大小的類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-111">Define a class with the given name, attributes, base class, and the class size as a whole.</span></span>  
  
-   <span data-ttu-id="13e28-112">為整體來定義具有指定名稱、 屬性、 基底類別、 封裝大小和類別大小的類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-112">Define a class with the given name, attributes, base class, packing size, and the class size as a whole.</span></span>  
  
 <span data-ttu-id="13e28-113">若要建立的陣列類型、 指標類型或不完整的型別所表示的 byref 類型<xref:System.Reflection.Emit.TypeBuilder>物件，請使用<xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A>方法，<xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A>方法，或<xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A>方法，分別。</span><span class="sxs-lookup"><span data-stu-id="13e28-113">To create an array type, pointer type, or byref type for an incomplete type that is represented by a <xref:System.Reflection.Emit.TypeBuilder> object, use the <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method, or <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method, respectively.</span></span>  
  
 <span data-ttu-id="13e28-114">在使用型別之前，<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>必須呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-114">Before a type is used, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType> method must be called.</span></span> <span data-ttu-id="13e28-115">**CreateType**完成的型別建立。</span><span class="sxs-lookup"><span data-stu-id="13e28-115">**CreateType** completes the creation of the type.</span></span> <span data-ttu-id="13e28-116">下列呼叫**CreateType**，呼叫端可以使用具現化型別<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>方法，並使用叫用型別的成員<xref:System.Type.InvokeMember%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-116">Following the call to **CreateType**, the caller can instantiate the type by using the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and invoke members of the type by using the <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="13e28-117">它是叫用變更後的類型實作的方法時發生**CreateType**已呼叫。</span><span class="sxs-lookup"><span data-stu-id="13e28-117">It is an error to invoke methods that change the implementation of a type after **CreateType** has been called.</span></span> <span data-ttu-id="13e28-118">如果呼叫端嘗試將新成員加入至類型中，比方說，common language runtime 會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="13e28-118">For example, the common language runtime throws an exception if the caller tries to add new members to a type.</span></span>  
  
 <span data-ttu-id="13e28-119">類別初始設定式由使用<xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-119">A class initializer is created by using the <xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="13e28-120">**DefineTypeInitializer**傳回<xref:System.Reflection.Emit.ConstructorBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-120">**DefineTypeInitializer** returns a <xref:System.Reflection.Emit.ConstructorBuilder> object.</span></span>  
  
 <span data-ttu-id="13e28-121">巢狀型別由呼叫其中一個定義<xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-121">Nested types are defined by calling one of the <xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=nameWithType> methods.</span></span>  
  
## <a name="attributes"></a><span data-ttu-id="13e28-122">屬性</span><span class="sxs-lookup"><span data-stu-id="13e28-122">Attributes</span></span>  
 <span data-ttu-id="13e28-123"><xref:System.Reflection.Emit.TypeBuilder>類別會使用<xref:System.Reflection.TypeAttributes>列舉，來進一步指定要建立類型的特性：</span><span class="sxs-lookup"><span data-stu-id="13e28-123">The <xref:System.Reflection.Emit.TypeBuilder> class uses the <xref:System.Reflection.TypeAttributes> enumeration to further specify the characteristics of the type to be created:</span></span>  
  
-   <span data-ttu-id="13e28-124">使用指定的介面<xref:System.Reflection.TypeAttributes.Interface?displayProperty=nameWithType>和<xref:System.Reflection.TypeAttributes.Abstract?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-124">Interfaces are specified using the <xref:System.Reflection.TypeAttributes.Interface?displayProperty=nameWithType> and <xref:System.Reflection.TypeAttributes.Abstract?displayProperty=nameWithType> attributes.</span></span>  
  
-   <span data-ttu-id="13e28-125">使用指定實體類別 （無法擴充的類別）<xref:System.Reflection.TypeAttributes.Sealed?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-125">Concrete classes (classes that cannot be extended) are specified using the <xref:System.Reflection.TypeAttributes.Sealed?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="13e28-126">數個屬性會決定型別可視性。</span><span class="sxs-lookup"><span data-stu-id="13e28-126">Several attributes determine type visibility.</span></span> <span data-ttu-id="13e28-127">請參閱描述<xref:System.Reflection.TypeAttributes>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-127">See the description of the <xref:System.Reflection.TypeAttributes> enumeration.</span></span>  
  
-   <span data-ttu-id="13e28-128">如果<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>指定，則類別載入器配置它們從中繼資料的讀取的順序中的欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-128">If <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is specified, the class loader lays out fields in the order they are read from metadata.</span></span> <span data-ttu-id="13e28-129">類別載入器會考慮指定的封裝大小，但會忽略任何指定的欄位位移。</span><span class="sxs-lookup"><span data-stu-id="13e28-129">The class loader considers the specified packing size but ignores any specified field offsets.</span></span> <span data-ttu-id="13e28-130">中繼資料會保留在其中的欄位定義會發出的順序。</span><span class="sxs-lookup"><span data-stu-id="13e28-130">The metadata preserves the order in which the field definitions are emitted.</span></span> <span data-ttu-id="13e28-131">即使是跨合併，中繼資料不會重新排列欄位定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-131">Even across a merge, the metadata will not reorder the field definitions.</span></span> <span data-ttu-id="13e28-132">載入器將會採用指定的欄位位移才<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>指定。</span><span class="sxs-lookup"><span data-stu-id="13e28-132">The loader will honor the specified field offsets only if <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is specified.</span></span>  
  
## <a name="known-issues"></a><span data-ttu-id="13e28-133">已知問題</span><span class="sxs-lookup"><span data-stu-id="13e28-133">Known Issues</span></span>  
  
-   <span data-ttu-id="13e28-134">反映發出不會驗證是否實作介面的非抽象類別已實作介面中所宣告的所有方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-134">Reflection emit does not verify whether a non-abstract class that implements an interface has implemented all the methods declared in the interface.</span></span> <span data-ttu-id="13e28-135">不過，如果類別未實作介面中宣告的所有方法，執行階段未載入的類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-135">However, if the class does not implement all the methods declared in an interface, the runtime does not load the class.</span></span>  
  
-   <span data-ttu-id="13e28-136">雖然<xref:System.Reflection.Emit.TypeBuilder>衍生自<xref:System.Type>中, 定義的抽象方法的一些<xref:System.Type>類別中不會完全實作<xref:System.Reflection.Emit.TypeBuilder>類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-136">Although <xref:System.Reflection.Emit.TypeBuilder> is derived from <xref:System.Type>, some of the abstract methods defined in the <xref:System.Type> class are not fully implemented in the <xref:System.Reflection.Emit.TypeBuilder> class.</span></span> <span data-ttu-id="13e28-137">呼叫這些<xref:System.Reflection.Emit.TypeBuilder>方法會擲回<xref:System.NotSupportedException>例外狀況。</span><span class="sxs-lookup"><span data-stu-id="13e28-137">Calls to these <xref:System.Reflection.Emit.TypeBuilder> methods throw a <xref:System.NotSupportedException> exception.</span></span> <span data-ttu-id="13e28-138">您可以取得所需的功能建立的類型使用擷取<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>並反映所擷取類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-138">The desired functionality can be obtained by retrieving the created type using the <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and reflecting on the retrieved type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-139">本節包含兩個程式碼範例。</span><span class="sxs-lookup"><span data-stu-id="13e28-139">This section contains two code examples.</span></span> <span data-ttu-id="13e28-140">第一個範例示範如何建立動態型別欄位中，建構函式、 屬性和方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-140">The first example shows how to create a dynamic type with a field, constructor, property, and method.</span></span> <span data-ttu-id="13e28-141">第二個範例為基礎的方法，以動態方式從使用者輸入。</span><span class="sxs-lookup"><span data-stu-id="13e28-141">The second example builds a method dynamically from user input.</span></span>  
  
 <span data-ttu-id="13e28-142">**其中一個範例**</span><span class="sxs-lookup"><span data-stu-id="13e28-142">**Example one**</span></span>  
  
 <span data-ttu-id="13e28-143">下列程式碼範例示範如何定義具有一個模組的動態組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-143">The following code example shows how to define a dynamic assembly with one module.</span></span> <span data-ttu-id="13e28-144">範例組件中的模組包含一種類型， `MyDynamicType`，其具有私用欄位、 取得和設定私用欄位的屬性、 建構函式會初始化私用欄位及將使用者提供的點數的私用欄位的方法值，並傳回結果。</span><span class="sxs-lookup"><span data-stu-id="13e28-144">The module in the example assembly contains one type, `MyDynamicType`, which has a private field, a property that gets and sets the private field, constructors that initialize the private field, and a method that multiplies a user-supplied number by the private field value and returns the result.</span></span>  
  
 <span data-ttu-id="13e28-145"><xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType>欄位會指定在建立組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-145">The <xref:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave?displayProperty=nameWithType> field is specified when the assembly is created.</span></span> <span data-ttu-id="13e28-146">立即使用的組件程式碼及組件也會儲存至磁碟，以便它可以與檢查[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)或用於另一個程式。</span><span class="sxs-lookup"><span data-stu-id="13e28-146">The assembly code is used immediately, and the assembly is also saved to disk so that it can be examined with [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) or used in another program.</span></span>  
  
 [!code-cpp[AssemblyBuilderClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilderClass/cpp/24895.cpp#1)]
 [!code-csharp[AssemblyBuilderClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilderClass/cs/24895.cs#1)]
 [!code-vb[AssemblyBuilderClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilderClass/vb/24895.vb#1)]  
  
 <span data-ttu-id="13e28-147">**範例二**</span><span class="sxs-lookup"><span data-stu-id="13e28-147">**Example two**</span></span>  
  
 <span data-ttu-id="13e28-148">下列程式碼範例示範如何使用建置動態的型別`TypeBuilder`。</span><span class="sxs-lookup"><span data-stu-id="13e28-148">The following code sample demonstrates how to build a dynamic type by using `TypeBuilder`.</span></span>  
  
 [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/07d5f01a-7b5b-40ea-9b15-f21561098fe4"><span data-ttu-id="13e28-149">如何：使用反映發出定義泛型類型</span><span class="sxs-lookup"><span data-stu-id="13e28-149">How to: Define a Generic Type with Reflection Emit</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDeclarativeSecurity">
      <MemberSignature Language="C#" Value="public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddDeclarativeSecurity(valuetype System.Security.Permissions.SecurityAction action, class System.Security.PermissionSet pset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddDeclarativeSecurity (action As SecurityAction, pset As PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet ^ pset);" />
      <MemberSignature Language="F#" Value="member this.AddDeclarativeSecurity : System.Security.Permissions.SecurityAction * System.Security.PermissionSet -&gt; unit" Usage="typeBuilder.AddDeclarativeSecurity (action, pset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Security.Permissions.SecurityAction" />
        <Parameter Name="pset" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="13e28-150">採取如要求、判斷提示等安全性動作。</span><span class="sxs-lookup"><span data-stu-id="13e28-150">The security action to be taken such as Demand, Assert, and so on.</span></span></param>
        <param name="pset"><span data-ttu-id="13e28-151">此動作適用的權限集。</span><span class="sxs-lookup"><span data-stu-id="13e28-151">The set of permissions the action applies to.</span></span></param>
        <summary><span data-ttu-id="13e28-152">加入此類型的宣告式安全性。</span><span class="sxs-lookup"><span data-stu-id="13e28-152">Adds declarative security to this type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-153">`AddDeclarativeSecurity` 可呼叫多次指定安全性動作 （例如要求、 判斷提示或拒絕） 和一組套用至動作的權限的每次呼叫。</span><span class="sxs-lookup"><span data-stu-id="13e28-153">`AddDeclarativeSecurity` may be called several times with each call specifying a security action (such as Demand, Assert, or Deny) and a set of permissions that apply to the action.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-154">在.NET framework 1.0、 1.1 和 2.0 版中，使用此方法套用至類型的宣告式安全性屬性會儲存在舊的 XML 中繼資料格式。</span><span class="sxs-lookup"><span data-stu-id="13e28-154">In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a type by using this method are stored in the old XML metadata format.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-155">下列範例示範如何使用`AddDeclarativeSecurity`方法來加入安全性要求<xref:System.Security.Permissions.SecurityPermission>具有<xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType>旗標，以動態類型，名為`MyDynamicClass`，名為 EmittedExample.dll 組件中。</span><span class="sxs-lookup"><span data-stu-id="13e28-155">The following example demonstrates the use of the `AddDeclarativeSecurity` method to add a security demand for <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag to a dynamic type named `MyDynamicClass`, in an assembly named EmittedExample.dll.</span></span> <span data-ttu-id="13e28-156">此範例會產生任何主控台輸出;您在執行之後，您可以使用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)檢查 EmittedExample.dll。</span><span class="sxs-lookup"><span data-stu-id="13e28-156">The example produces no console output; after you run it, you can use [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine EmittedExample.dll.</span></span> <span data-ttu-id="13e28-157">在  `MyDynamicClass`，開啟`.class public auto ansi`宣告式的權限的陳述式。</span><span class="sxs-lookup"><span data-stu-id="13e28-157">In `MyDynamicClass`, open the `.class public auto ansi` statement to see the declarative permission.</span></span>  
  
 [!code-cpp[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/CPP/typebuilder_adddeclarativesecurity.cpp#1)]
 [!code-csharp[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/CS/typebuilder_adddeclarativesecurity.cs#1)]
 [!code-vb[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/VB/typebuilder_adddeclarativesecurity.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="13e28-158"><paramref name="action" /> 無效 (<see langword="RequestMinimum" />、<see langword="RequestOptional" /> 和 <see langword="RequestRefuse" /> 無效)。</span><span class="sxs-lookup"><span data-stu-id="13e28-158">The <paramref name="action" /> is invalid (<see langword="RequestMinimum" />, <see langword="RequestOptional" />, and <see langword="RequestRefuse" /> are invalid).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-159">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-159">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
<span data-ttu-id="13e28-160">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-160">-or-</span></span> 
<span data-ttu-id="13e28-161">權限集合 <paramref name="pset" /> 包含稍早 <see langword="AddDeclarativeSecurity" /> 所加入的動作。</span><span class="sxs-lookup"><span data-stu-id="13e28-161">The permission set <paramref name="pset" /> contains an action that was added earlier by <see langword="AddDeclarativeSecurity" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-162"><paramref name="pset" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-162"><paramref name="pset" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddInterfaceImplementation">
      <MemberSignature Language="C#" Value="public void AddInterfaceImplementation (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddInterfaceImplementation(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddInterfaceImplementation (interfaceType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddInterfaceImplementation(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="member this.AddInterfaceImplementation : Type -&gt; unit" Usage="typeBuilder.AddInterfaceImplementation interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="13e28-163">這個類型所實作的介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-163">The interface that this type implements.</span></span></param>
        <summary><span data-ttu-id="13e28-164">加入這個類型所實作的介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-164">Adds an interface that this type implements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="13e28-165">下列程式碼範例示範如何動態建立型別使用介面的實作`AddInterfaceImplementation`。</span><span class="sxs-lookup"><span data-stu-id="13e28-165">The following code sample demonstrates the implementation of an interface on a dynamically created type using `AddInterfaceImplementation`.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#3](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#3)]
 [!code-csharp[TypeBuilder_Sample_4#3](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#3)]
 [!code-vb[TypeBuilder_Sample_4#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-166"><paramref name="interfaceType" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-166"><paramref name="interfaceType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-167">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-167">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Reflection.Emit.TypeBuilder.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-168">擷取包含這個類型定義的動態組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-168">Retrieves the dynamic assembly that contains this type definition.</span></span></summary>
        <value><span data-ttu-id="13e28-169">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-169">Read-only.</span></span> <span data-ttu-id="13e28-170">擷取包含這個類型定義的動態組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-170">Retrieves the dynamic assembly that contains this type definition.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public override string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-171">傳回這個類型的完整名稱，該名稱是由組件的顯示名稱所限定。</span><span class="sxs-lookup"><span data-stu-id="13e28-171">Returns the full name of this type qualified by the display name of the assembly.</span></span></summary>
        <value><span data-ttu-id="13e28-172">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-172">Read-only.</span></span> <span data-ttu-id="13e28-173">這個類型的完整名稱，該名稱是由組件的顯示名稱所限定。</span><span class="sxs-lookup"><span data-stu-id="13e28-173">The full name of this type qualified by the display name of the assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-174">傳回字串的格式是類型的完整名稱的串連 (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) 和組件的顯示名稱 (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=nameWithType>)，以逗號和空格分隔。</span><span class="sxs-lookup"><span data-stu-id="13e28-174">The format of the returned string is the concatenation of the full name of the type (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) and the display name of the assembly (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=nameWithType>), separated by a comma and a space.</span></span>  
  
 <span data-ttu-id="13e28-175">請參閱<xref:System.Reflection.AssemblyName>的組件的顯示名稱格式的說明。</span><span class="sxs-lookup"><span data-stu-id="13e28-175">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="13e28-176">版本資訊</span><span class="sxs-lookup"><span data-stu-id="13e28-176">Version Information</span></span>  
 <span data-ttu-id="13e28-177">在.NET framework 1.0 和 1.1 版中，這個屬性的值不包含文化特性或公開金鑰。</span><span class="sxs-lookup"><span data-stu-id="13e28-177">In the .NET Framework versions 1.0 and 1.1, the value of this property does not include the culture or public key.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Reflection.Emit.TypeBuilder.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public override Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Reflection.Emit.TypeBuilder.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-178">擷取這個類型的基底類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-178">Retrieves the base type of this type.</span></span></summary>
        <value><span data-ttu-id="13e28-179">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-179">Read-only.</span></span> <span data-ttu-id="13e28-180">擷取這個類型的基底類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-180">Retrieves the base type of this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public override bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Reflection.Emit.TypeBuilder.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateType">
      <MemberSignature Language="C#" Value="public Type CreateType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type CreateType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.CreateType" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ CreateType();" />
      <MemberSignature Language="F#" Value="member this.CreateType : unit -&gt; Type" Usage="typeBuilder.CreateType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-181">建立這個類別的 <see cref="T:System.Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-181">Creates a <see cref="T:System.Type" /> object for the class.</span></span> <span data-ttu-id="13e28-182">定義類別上的欄位和方法之後，呼叫 <see langword="CreateType" /> 以載入其 <see langword="Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-182">After defining fields and methods on the class, <see langword="CreateType" /> is called in order to load its <see langword="Type" /> object.</span></span></summary>
        <returns><span data-ttu-id="13e28-183">傳回這個類別的新 <see cref="T:System.Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-183">Returns the new <see cref="T:System.Type" /> object for this class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-184">如果此類型是巢狀的類型，<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>巢狀型別上被呼叫之前，必須在封入類型上呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-184">If this type is a nested type, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method must be called on the enclosing type before it is called on the nested type.</span></span>  
  
 <span data-ttu-id="13e28-185">如果目前的型別衍生自不完整的類型，或實作不完整的介面，呼叫<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>父型別和介面類型，然後再呼叫目前的類型上的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-185">If the current type derives from an incomplete type or implements incomplete interfaces, call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the parent type and the interface types before calling it on the current type.</span></span>  
  
 <span data-ttu-id="13e28-186">如果封入類型包含的欄位，是定義為巢狀類型 （例如，欄位是列舉型別定義為巢狀型別），實值型別呼叫<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>封入型別上的方法會產生<xref:System.AppDomain.TypeResolve?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="13e28-186">If the enclosing type contains a field that is a value type defined as a nested type (for example, a field that is an enumeration defined as a nested type), calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the enclosing type will generate a <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="13e28-187">這是因為載入器無法判斷封入類型的大小，直到完成為止的巢狀的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-187">This is because the loader cannot determine the size of the enclosing type until the nested type has been completed.</span></span> <span data-ttu-id="13e28-188">呼叫端應該定義的處理常式<xref:System.AppDomain.TypeResolve>藉由呼叫完成的巢狀型別定義的事件<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>上<xref:System.Reflection.Emit.TypeBuilder>物件，表示巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-188">The caller should define a handler for the <xref:System.AppDomain.TypeResolve> event to complete the definition of the nested type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> on the <xref:System.Reflection.Emit.TypeBuilder> object that represents the nested type.</span></span> <span data-ttu-id="13e28-189">本主題的程式碼範例示範如何定義這類事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="13e28-189">The code example for this topic shows how to define such an event handler.</span></span>  
  
 <span data-ttu-id="13e28-190">型別只建立一次，不論多次<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-190">A type is created only once, no matter how many times the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span> <span data-ttu-id="13e28-191">所有的呼叫會傳回相同<xref:System.Type>物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-191">All calls return the same <xref:System.Type> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-192">下列程式碼範例示範如何定義的事件處理常式<xref:System.AppDomain.TypeResolve?displayProperty=nameWithType>事件，才能呼叫<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>期間的巢狀型別上的方法<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>封入類型上呼叫。</span><span class="sxs-lookup"><span data-stu-id="13e28-192">The following code example shows how to define an event handler for the <xref:System.AppDomain.TypeResolve?displayProperty=nameWithType> event, in order to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on a nested type during a <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> call on the enclosing type.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/CPP/nestedenum.cpp#1)]
 [!code-csharp[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/CS/nestedenum.cs#1)]
 [!code-vb[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/VB/nestedenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-193">尚未建立封入類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-193">The enclosing type has not been created.</span></span>  
  
<span data-ttu-id="13e28-194">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-194">-or-</span></span> 
<span data-ttu-id="13e28-195">這個類型為非抽象，而且包含抽象方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-195">This type is non-abstract and contains an abstract method.</span></span>  
  
<span data-ttu-id="13e28-196">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-196">-or-</span></span> 
<span data-ttu-id="13e28-197">這個類型不是抽象類別或介面，而且包含沒有方法主體的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-197">This type is not an abstract class or an interface and has a method without a method body.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-198">這個類型包含無效的 Microsoft Intermediate Language (MSIL) 程式碼。</span><span class="sxs-lookup"><span data-stu-id="13e28-198">The type contains invalid Microsoft intermediate language (MSIL) code.</span></span>  
  
<span data-ttu-id="13e28-199">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-199">-or-</span></span> 
<span data-ttu-id="13e28-200">使用 1 個位元組位移指定分支目標，但目標與分支的距離大於 127 個位元組。</span><span class="sxs-lookup"><span data-stu-id="13e28-200">The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="13e28-201">無法載入這個類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-201">The type cannot be loaded.</span></span> <span data-ttu-id="13e28-202">例如，其包含的 <see langword="static" /> 方法具有呼叫慣例 <see cref="F:System.Reflection.CallingConventions.HasThis" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-202">For example, it contains a <see langword="static" /> method that has the calling convention <see cref="F:System.Reflection.CallingConventions.HasThis" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTypeInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeInfo CreateTypeInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.TypeInfo CreateTypeInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTypeInfo () As TypeInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::TypeInfo ^ CreateTypeInfo();" />
      <MemberSignature Language="F#" Value="member this.CreateTypeInfo : unit -&gt; System.Reflection.TypeInfo" Usage="typeBuilder.CreateTypeInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-203">取得代表這個類型的 <see cref="T:System.Reflection.TypeInfo" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-203">Gets a <see cref="T:System.Reflection.TypeInfo" /> object that represents this type.</span></span></summary>
        <returns><span data-ttu-id="13e28-204">代表這個類型的物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-204">An object that represents this type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringMethod : System.Reflection.MethodBase" Usage="System.Reflection.Emit.TypeBuilder.DeclaringMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-205">取得宣告目前泛型類型參數的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-205">Gets the method that declared the current generic type parameter.</span></span></summary>
        <value><span data-ttu-id="13e28-206">如果目前的類型是泛型類型參數，<see cref="T:System.Reflection.MethodBase" /> 表示宣告目前類型的方法；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-206">A <see cref="T:System.Reflection.MethodBase" /> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="13e28-207">當發出程式碼，表示泛型類型參數<xref:System.Reflection.Emit.GenericTypeParameterBuilder>物件而非以<xref:System.Reflection.Emit.TypeBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-207">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.TypeBuilder.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-208">傳回宣告這個類型的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-208">Returns the type that declared this type.</span></span></summary>
        <value><span data-ttu-id="13e28-209">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-209">Read-only.</span></span> <span data-ttu-id="13e28-210">宣告這個類型的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-210">The type that declared this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineConstructor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-211">將新建構函式加入動態類型中。</span><span class="sxs-lookup"><span data-stu-id="13e28-211">Adds a new constructor to the dynamic type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineConstructor(valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineConstructor (attributes As MethodAttributes, callingConvention As CallingConventions, parameterTypes As Type()) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineConstructor(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="member this.DefineConstructor : System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type[] -&gt; System.Reflection.Emit.ConstructorBuilder" Usage="typeBuilder.DefineConstructor (attributes, callingConvention, parameterTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="13e28-212">建構函式的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-212">The attributes of the constructor.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="13e28-213">建構函式的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-213">The calling convention of the constructor.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-214">建構函式的參數類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-214">The parameter types of the constructor.</span></span></param>
        <summary><span data-ttu-id="13e28-215">將新的建構函式加入此類型，並指定屬性和簽章。</span><span class="sxs-lookup"><span data-stu-id="13e28-215">Adds a new constructor to the type, with the given attributes and signature.</span></span></summary>
        <returns><span data-ttu-id="13e28-216">定義的建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-216">The defined constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-217">如果您沒有定義建構函式適用於您的動態類型，自動提供預設建構函式，而且它會呼叫基底類別的預設建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-217">If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.</span></span>  
  
 <span data-ttu-id="13e28-218">如果您針對您動態型別定義建構函式，未提供預設建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-218">If you define a constructor for your dynamic type, a default constructor is not provided.</span></span> <span data-ttu-id="13e28-219">您有下列選項來提供預設建構函式，除了您定義的建構函式：</span><span class="sxs-lookup"><span data-stu-id="13e28-219">You have the following options for providing a default constructor in addition to the constructor you defined:</span></span>  
  
-   <span data-ttu-id="13e28-220">如果您想只會呼叫基底類別的預設建構函式的預設建構函式時，您可以使用<xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A>方法來建立一個 （並選擇性地限制存取）。</span><span class="sxs-lookup"><span data-stu-id="13e28-220">If you want a default constructor that simply calls the default constructor of the base class, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A> method to create one (and optionally restrict access to it).</span></span> <span data-ttu-id="13e28-221">不提供此預設建構函式的實作。</span><span class="sxs-lookup"><span data-stu-id="13e28-221">Do not provide an implementation for this default constructor.</span></span> <span data-ttu-id="13e28-222">如果您這樣做，當您嘗試使用建構函式時，會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="13e28-222">If you do, an exception is thrown when you try to use the constructor.</span></span> <span data-ttu-id="13e28-223">沒有例外狀況時擲回<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-223">No exception is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span>  
  
-   <span data-ttu-id="13e28-224">如果您想要的預設建構函式，不會發生多個呼叫預設建構函式的基底類別，或呼叫的另一個建構函式的基底類別，或執行其他動作完全，您必須使用<xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=nameWithType>方法用來建立一個，並提供您自己的實作。</span><span class="sxs-lookup"><span data-stu-id="13e28-224">If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=nameWithType> method to create one, and provide your own implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-225">下列程式碼範例示範如何使用`DefineConstructor`來設定動態型別建構函式的特定的簽章和屬性，並傳回對應<xref:System.Reflection.Emit.ConstructorBuilder>MSIL 母體擴展。</span><span class="sxs-lookup"><span data-stu-id="13e28-225">The following code sample demonstrates the use of `DefineConstructor` to set a constructor's particular signature and attributes on a dynamic type and return a corresponding <xref:System.Reflection.Emit.ConstructorBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#2)]
 [!code-csharp[TypeBuilder_Sample_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#2)]
 [!code-vb[TypeBuilder_Sample_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-226">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-226">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineConstructor(valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type[] parameterTypes, class System.Type[][] requiredCustomModifiers, class System.Type[][] optionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineConstructor (attributes As MethodAttributes, callingConvention As CallingConventions, parameterTypes As Type(), requiredCustomModifiers As Type()(), optionalCustomModifiers As Type()()) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineConstructor(System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ requiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ optionalCustomModifiers);" />
      <MemberSignature Language="F#" Value="member this.DefineConstructor : System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type[] * Type[][] * Type[][] -&gt; System.Reflection.Emit.ConstructorBuilder" Usage="typeBuilder.DefineConstructor (attributes, callingConvention, parameterTypes, requiredCustomModifiers, optionalCustomModifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="requiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="optionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="13e28-227">建構函式的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-227">The attributes of the constructor.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="13e28-228">建構函式的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-228">The calling convention of the constructor.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-229">建構函式的參數類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-229">The parameter types of the constructor.</span></span></param>
        <param name="requiredCustomModifiers"><span data-ttu-id="13e28-230">類型陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-230">An array of arrays of types.</span></span> <span data-ttu-id="13e28-231">每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-231">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="13e28-232">如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-232">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="13e28-233">如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-233">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="optionalCustomModifiers"><span data-ttu-id="13e28-234">類型陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-234">An array of arrays of types.</span></span> <span data-ttu-id="13e28-235">每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-235">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="13e28-236">如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-236">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="13e28-237">如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-237">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="13e28-238">將新的建構函式加入此類型，並指定屬性、簽章和自訂修飾詞。</span><span class="sxs-lookup"><span data-stu-id="13e28-238">Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="13e28-239">定義的建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-239">The defined constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-240">這個多載可供設計工具的 managed 編譯器。</span><span class="sxs-lookup"><span data-stu-id="13e28-240">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-241">如需有關自訂修飾詞的詳細資訊，請參閱 ECMA 分割 II 中繼資料文件。</span><span class="sxs-lookup"><span data-stu-id="13e28-241">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="13e28-242">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="13e28-242">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-243"><paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-243">The size of <paramref name="requiredCustomModifiers" /> or <paramref name="optionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-244">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-244">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
<span data-ttu-id="13e28-245">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-245">-or-</span></span> 
<span data-ttu-id="13e28-246">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-246">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDefaultConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor (System.Reflection.MethodAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor(valuetype System.Reflection.MethodAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDefaultConstructor (attributes As MethodAttributes) As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineDefaultConstructor(System::Reflection::MethodAttributes attributes);" />
      <MemberSignature Language="F#" Value="member this.DefineDefaultConstructor : System.Reflection.MethodAttributes -&gt; System.Reflection.Emit.ConstructorBuilder" Usage="typeBuilder.DefineDefaultConstructor attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="13e28-247">表示要套用至建構函式之屬性的 <see langword="MethodAttributes" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-247">A <see langword="MethodAttributes" /> object representing the attributes to be applied to the constructor.</span></span></param>
        <summary><span data-ttu-id="13e28-248">定義預設建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-248">Defines the default constructor.</span></span> <span data-ttu-id="13e28-249">這裡定義的建構函式只會呼叫父代的預設建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-249">The constructor defined here will simply call the default constructor of the parent.</span></span></summary>
        <returns><span data-ttu-id="13e28-250">傳回建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-250">Returns the constructor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-251">因為自動定義的預設建構函式，就必須呼叫這個方法只有在下列情況：</span><span class="sxs-lookup"><span data-stu-id="13e28-251">Because the default constructor is automatically defined, it is necessary to call this method only in the following situations:</span></span>  
  
-   <span data-ttu-id="13e28-252">您已定義另一個建構函式，而且也想只會呼叫基底類別建構函式的預設建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-252">You have defined another constructor and you also want a default constructor that simply calls the base class constructor.</span></span>  
  
-   <span data-ttu-id="13e28-253">您想要為預設建構函式上設定的屬性時，也將以外<xref:System.Reflection.MethodAttributes.PrivateScope>， <xref:System.Reflection.MethodAttributes.Public>， <xref:System.Reflection.MethodAttributes.HideBySig>， <xref:System.Reflection.MethodAttributes.SpecialName>，和<xref:System.Reflection.MethodAttributes.RTSpecialName>。</span><span class="sxs-lookup"><span data-stu-id="13e28-253">You want to set the attributes on the default constructor to something other than <xref:System.Reflection.MethodAttributes.PrivateScope>, <xref:System.Reflection.MethodAttributes.Public>, <xref:System.Reflection.MethodAttributes.HideBySig>, <xref:System.Reflection.MethodAttributes.SpecialName>, and <xref:System.Reflection.MethodAttributes.RTSpecialName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-254">下列程式碼範例示範如何使用`DefineConstructor`來設定動態型別建構函式的特定的簽章和屬性，並傳回對應<xref:System.Reflection.Emit.ConstructorBuilder>MSIL 母體擴展。</span><span class="sxs-lookup"><span data-stu-id="13e28-254">The following code sample demonstrates the use of `DefineConstructor` to set a constructor's particular signature and attributes on a dynamic type and return a corresponding <xref:System.Reflection.Emit.ConstructorBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_Sample_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#2)]
 [!code-csharp[TypeBuilder_Sample_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#2)]
 [!code-vb[TypeBuilder_Sample_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-255">父類型 (基底類型) 沒有預設建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-255">The parent type (base type) does not have a default constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-256">之前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-256">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
<span data-ttu-id="13e28-257">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-257">-or-</span></span> 
<span data-ttu-id="13e28-258">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-258">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.EventBuilder DefineEvent (string name, System.Reflection.EventAttributes attributes, Type eventtype);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.EventBuilder DefineEvent(string name, valuetype System.Reflection.EventAttributes attributes, class System.Type eventtype) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineEvent (name As String, attributes As EventAttributes, eventtype As Type) As EventBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::EventBuilder ^ DefineEvent(System::String ^ name, System::Reflection::EventAttributes attributes, Type ^ eventtype);" />
      <MemberSignature Language="F#" Value="member this.DefineEvent : string * System.Reflection.EventAttributes * Type -&gt; System.Reflection.Emit.EventBuilder" Usage="typeBuilder.DefineEvent (name, attributes, eventtype)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.EventBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.EventAttributes" />
        <Parameter Name="eventtype" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-259">事件的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-259">The name of the event.</span></span> <span data-ttu-id="13e28-260"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-260"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-261">事件的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-261">The attributes of the event.</span></span></param>
        <param name="eventtype"><span data-ttu-id="13e28-262">事件的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-262">The type of the event.</span></span></param>
        <summary><span data-ttu-id="13e28-263">將新事件加入此類型，並指定其名稱、屬性和事件類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-263">Adds a new event to the type, with the given name, attributes and event type.</span></span></summary>
        <returns><span data-ttu-id="13e28-264">定義的事件。</span><span class="sxs-lookup"><span data-stu-id="13e28-264">The defined event.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-265"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-265">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-266"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-266"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="13e28-267">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-267">-or-</span></span> 
 <span data-ttu-id="13e28-268"><paramref name="eventtype" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-268"><paramref name="eventtype" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-269">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-269">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineField">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-270">將新欄位加入動態類型中。</span><span class="sxs-lookup"><span data-stu-id="13e28-270">Adds a new field to the dynamic type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineField">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineField(string fieldName, class System.Type type, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineField(System::String ^ fieldName, Type ^ type, System::Reflection::FieldAttributes attributes);" />
      <MemberSignature Language="F#" Value="member this.DefineField : string * Type * System.Reflection.FieldAttributes -&gt; System.Reflection.Emit.FieldBuilder" Usage="typeBuilder.DefineField (fieldName, type, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="fieldName"><span data-ttu-id="13e28-271">欄位的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-271">The name of the field.</span></span> <span data-ttu-id="13e28-272"><paramref name="fieldName" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-272"><paramref name="fieldName" /> cannot contain embedded nulls.</span></span></param>
        <param name="type"><span data-ttu-id="13e28-273">欄位的類型</span><span class="sxs-lookup"><span data-stu-id="13e28-273">The type of the field</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-274">欄位的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-274">The attributes of the field.</span></span></param>
        <summary><span data-ttu-id="13e28-275">將新欄位加入類型，指定其名稱、屬性和欄位類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-275">Adds a new field to the type, with the given name, attributes, and field type.</span></span></summary>
        <returns><span data-ttu-id="13e28-276">定義的欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-276">The defined field.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-277"><paramref name="fieldName" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-277">The length of <paramref name="fieldName" /> is zero.</span></span>  
  
<span data-ttu-id="13e28-278">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-278">-or-</span></span> 
 <span data-ttu-id="13e28-279"><paramref name="type" /> 為 System.Void。</span><span class="sxs-lookup"><span data-stu-id="13e28-279"><paramref name="type" /> is System.Void.</span></span>  
  
<span data-ttu-id="13e28-280">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-280">-or-</span></span> 
<span data-ttu-id="13e28-281">為這個欄位的父類別指定了總大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-281">A total size was specified for the parent class of this field.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-282"><paramref name="fieldName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-282"><paramref name="fieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-283">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-283">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineField">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineField(string fieldName, class System.Type type, class System.Type[] requiredCustomModifiers, class System.Type[] optionalCustomModifiers, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineField(System::String ^ fieldName, Type ^ type, cli::array &lt;Type ^&gt; ^ requiredCustomModifiers, cli::array &lt;Type ^&gt; ^ optionalCustomModifiers, System::Reflection::FieldAttributes attributes);" />
      <MemberSignature Language="F#" Value="member this.DefineField : string * Type * Type[] * Type[] * System.Reflection.FieldAttributes -&gt; System.Reflection.Emit.FieldBuilder" Usage="typeBuilder.DefineField (fieldName, type, requiredCustomModifiers, optionalCustomModifiers, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="requiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="optionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="fieldName"><span data-ttu-id="13e28-284">欄位的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-284">The name of the field.</span></span> <span data-ttu-id="13e28-285"><paramref name="fieldName" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-285"><paramref name="fieldName" /> cannot contain embedded nulls.</span></span></param>
        <param name="type"><span data-ttu-id="13e28-286">欄位的類型</span><span class="sxs-lookup"><span data-stu-id="13e28-286">The type of the field</span></span></param>
        <param name="requiredCustomModifiers"><span data-ttu-id="13e28-287">類型陣列，代表欄位的必要自訂修飾詞，例如 <see cref="T:Microsoft.VisualC.IsConstModifier" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-287">An array of types representing the required custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span></span></param>
        <param name="optionalCustomModifiers"><span data-ttu-id="13e28-288">類型陣列，代表欄位的選擇性自訂修飾詞，例如 <see cref="T:Microsoft.VisualC.IsConstModifier" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-288">An array of types representing the optional custom modifiers for the field, such as <see cref="T:Microsoft.VisualC.IsConstModifier" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-289">欄位的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-289">The attributes of the field.</span></span></param>
        <summary><span data-ttu-id="13e28-290">將新欄位加入此類型，並指定其名稱、屬性、欄位類型和自訂修飾詞。</span><span class="sxs-lookup"><span data-stu-id="13e28-290">Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="13e28-291">定義的欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-291">The defined field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-292">這個多載可供設計工具的 managed 編譯器。</span><span class="sxs-lookup"><span data-stu-id="13e28-292">This overload is provided for designers of managed compilers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-293"><paramref name="fieldName" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-293">The length of <paramref name="fieldName" /> is zero.</span></span>  
  
<span data-ttu-id="13e28-294">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-294">-or-</span></span> 
 <span data-ttu-id="13e28-295"><paramref name="type" /> 為 System.Void。</span><span class="sxs-lookup"><span data-stu-id="13e28-295"><paramref name="type" /> is System.Void.</span></span>  
  
<span data-ttu-id="13e28-296">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-296">-or-</span></span> 
<span data-ttu-id="13e28-297">為這個欄位的父類別指定了總大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-297">A total size was specified for the parent class of this field.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-298"><paramref name="fieldName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-298"><paramref name="fieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-299">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-299">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineGenericParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (params string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(string[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineGenericParameters (ParamArray names As String()) As GenericTypeParameterBuilder()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::Emit::GenericTypeParameterBuilder ^&gt; ^ DefineGenericParameters(... cli::array &lt;System::String ^&gt; ^ names);" />
      <MemberSignature Language="F#" Value="member this.DefineGenericParameters : string[] -&gt; System.Reflection.Emit.GenericTypeParameterBuilder[]" Usage="typeBuilder.DefineGenericParameters names" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.GenericTypeParameterBuilder[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names"><span data-ttu-id="13e28-300">泛型類型參數的名稱陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-300">An array of names for the generic type parameters.</span></span></param>
        <summary><span data-ttu-id="13e28-301">定義目前類型的泛型類型參數，即指定其數目和名稱，並傳回可設定其條件約束的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-301">Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to set their constraints.</span></span></summary>
        <returns><span data-ttu-id="13e28-302"><see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件的陣列可用來定義目前類型的泛型型別參數的條件約束。</span><span class="sxs-lookup"><span data-stu-id="13e28-302">An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to define the constraints of the generic type parameters for the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-303">呼叫這個方法可讓目前的類型是泛型型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-303">Calling this method makes the current type a generic type.</span></span> <span data-ttu-id="13e28-304">如果在相同的型別，再次呼叫這個方法<xref:System.InvalidOperationException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="13e28-304">If the method is called again on the same type, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-305">下列程式碼範例會建立具有兩個類型參數的泛型型別，並將其儲存 GenericEmitExample1.dll 的組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-305">The following code example creates a generic type with two type parameters and saves them in the assembly GenericEmitExample1.dll.</span></span> <span data-ttu-id="13e28-306">您可以使用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)若要檢視產生的型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-306">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types.</span></span> <span data-ttu-id="13e28-307">定義動態的泛型型別所需的步驟的更詳細說明，請參閱[How to:定義泛型類型使用反映發出](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)。</span><span class="sxs-lookup"><span data-stu-id="13e28-307">For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]
 [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]
 [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-308">已定義這個類型的泛型類型參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-308">Generic type parameters have already been defined for this type.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-309"><paramref name="names" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-309"><paramref name="names" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="13e28-310">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-310">-or-</span></span> 
<span data-ttu-id="13e28-311"><paramref name="names" /> 的項目是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-311">An element of <paramref name="names" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-312"><paramref name="names" /> 是空陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-312"><paramref name="names" /> is an empty array.</span></span></exception>
        <altmember cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
        <related type="Article" href="https://msdn.microsoft.com/library/07d5f01a-7b5b-40ea-9b15-f21561098fe4"><span data-ttu-id="13e28-313">如何：使用反映發出定義泛型類型</span><span class="sxs-lookup"><span data-stu-id="13e28-313">How to: Define a Generic Type with Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DefineInitializedData">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineInitializedData (string name, byte[] data, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineInitializedData(string name, unsigned int8[] data, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineInitializedData (name As String, data As Byte(), attributes As FieldAttributes) As FieldBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineInitializedData(System::String ^ name, cli::array &lt;System::Byte&gt; ^ data, System::Reflection::FieldAttributes attributes);" />
      <MemberSignature Language="F#" Value="member this.DefineInitializedData : string * byte[] * System.Reflection.FieldAttributes -&gt; System.Reflection.Emit.FieldBuilder" Usage="typeBuilder.DefineInitializedData (name, data, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-314">用來參考資料的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-314">The name used to refer to the data.</span></span> <span data-ttu-id="13e28-315"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-315"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="data"><span data-ttu-id="13e28-316">資料的 blob。</span><span class="sxs-lookup"><span data-stu-id="13e28-316">The blob of data.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-317">欄位的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-317">The attributes for the field.</span></span></param>
        <summary><span data-ttu-id="13e28-318">在可攜式執行檔 (PE) 的 .sdata 區段中定義初始化資料欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-318">Defines initialized data field in the .sdata section of the portable executable (PE) file.</span></span></summary>
        <returns><span data-ttu-id="13e28-319">要參考資料的欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-319">A field to reference the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-320">您使用這個方法所建立的欄位會`static`，即使您未包含`FieldAttributes.Static`在`attributes`參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-320">The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-321"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-321">Length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="13e28-322">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-322">-or-</span></span> 
<span data-ttu-id="13e28-323">資料的大小小於或等於零，或者大於或等於 0x3f0000。</span><span class="sxs-lookup"><span data-stu-id="13e28-323">The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-324"><paramref name="name" /> 或 <paramref name="data" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-324"><paramref name="name" /> or <paramref name="data" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-325">之前已呼叫過 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-325"><see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been previously called.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-326">將方法加入類型中。</span><span class="sxs-lookup"><span data-stu-id="13e28-326">Adds a method to the type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes);" />
      <MemberSignature Language="F#" Value="member this.DefineMethod : string * System.Reflection.MethodAttributes -&gt; System.Reflection.Emit.MethodBuilder" Usage="typeBuilder.DefineMethod (name, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-327">方法的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-327">The name of the method.</span></span> <span data-ttu-id="13e28-328"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-328"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-329">方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-329">The attributes of the method.</span></span></param>
        <summary><span data-ttu-id="13e28-330">將新方法加入此類型，並指定其名稱和方法屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-330">Adds a new method to the type, with the specified name and method attributes.</span></span></summary>
        <returns><span data-ttu-id="13e28-331"><see cref="T:System.Reflection.Emit.MethodBuilder" /> 代表新定義的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-331">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-332">當您不知道在您將方法定義方法簽章時，請使用這個方法多載。</span><span class="sxs-lookup"><span data-stu-id="13e28-332">Use this method overload when you do not know the method signature at the time you define the method.</span></span> <span data-ttu-id="13e28-333">例如，參數型別和泛型方法的傳回型別可能指定之方法的泛型型別參數，必須在之後的方法已加入至類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-333">For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type.</span></span> <span data-ttu-id="13e28-334">參數之方法的傳回型別可以設定和更新版本使用<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-334">The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="13e28-335">這個方法多載定義的方法與<xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="13e28-335">This method overload defines a method with <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span> <span data-ttu-id="13e28-336">如果您需要定義的方法，而不需要簽章，請使用不同的呼叫慣例時，使用<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="13e28-336">If you need to define a method without a signature, with a different calling convention, use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-337">下列程式碼範例會定義泛型方法，名為`DemoMethod`其泛型型別參數所指定的參數類型和傳回型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-337">The following code example defines a generic method named `DemoMethod` whose parameter type and return type are specified by its generic type parameters.</span></span> <span data-ttu-id="13e28-338">這個方法被定義沒有簽章，使用標準呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-338">The method is defined without a signature, using the standard calling convention.</span></span> <span data-ttu-id="13e28-339"><xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType>方法用來讓`DemoMethod`泛型方法和新定義的類型參數則用於簽章和傳回型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-339">The <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method is used to make `DemoMethod` a generic method, and the newly defined type parameters are then used for the signature and return type.</span></span>  
  
 <span data-ttu-id="13e28-340">此程式碼範例是針對提供之較大範例的一部分<xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-340">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#4](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#4)]
 [!code-csharp[GenericMethodBuilder#4](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#4)]
 [!code-vb[GenericMethodBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#4)]  
[!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]
[!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]
[!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  
[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]
[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]
[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-341"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-341">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="13e28-342">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-342">-or-</span></span> 
<span data-ttu-id="13e28-343">這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</span><span class="sxs-lookup"><span data-stu-id="13e28-343">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-344"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-344"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-345">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-345">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
<span data-ttu-id="13e28-346">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-346">-or-</span></span> 
<span data-ttu-id="13e28-347">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-347">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention);" />
      <MemberSignature Language="F#" Value="member this.DefineMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions -&gt; System.Reflection.Emit.MethodBuilder" Usage="typeBuilder.DefineMethod (name, attributes, callingConvention)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-348">方法的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-348">The name of the method.</span></span> <span data-ttu-id="13e28-349"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-349"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-350">方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-350">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="13e28-351">方法的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-351">The calling convention of the method.</span></span></param>
        <summary><span data-ttu-id="13e28-352">將新方法加入類型，並指定其名稱、方法屬性和呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-352">Adds a new method to the type, with the specified name, method attributes, and calling convention.</span></span></summary>
        <returns><span data-ttu-id="13e28-353"><see cref="T:System.Reflection.Emit.MethodBuilder" /> 代表新定義的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-353">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-354">當您不知道在您將方法定義方法簽章時，請使用這個方法多載。</span><span class="sxs-lookup"><span data-stu-id="13e28-354">Use this method overload when you do not know the method signature at the time you define the method.</span></span> <span data-ttu-id="13e28-355">例如，參數型別和泛型方法的傳回型別可能指定之方法的泛型型別參數，必須在之後的方法已加入至類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-355">For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type.</span></span> <span data-ttu-id="13e28-356">參數之方法的傳回型別可以設定和更新版本使用<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-356">The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-357"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-357">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="13e28-358">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-358">-or-</span></span> 
<span data-ttu-id="13e28-359">這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</span><span class="sxs-lookup"><span data-stu-id="13e28-359">The type of the parent of this method is an interface and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-360"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-360"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-361">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-361">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
<span data-ttu-id="13e28-362">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-362">-or-</span></span> 
<span data-ttu-id="13e28-363">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-363">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, returnType As Type, parameterTypes As Type()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="member this.DefineMethod : string * System.Reflection.MethodAttributes * Type * Type[] -&gt; System.Reflection.Emit.MethodBuilder" Usage="typeBuilder.DefineMethod (name, attributes, returnType, parameterTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-364">方法的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-364">The name of the method.</span></span> <span data-ttu-id="13e28-365"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-365"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-366">方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-366">The attributes of the method.</span></span></param>
        <param name="returnType"><span data-ttu-id="13e28-367">該方法的傳回類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-367">The return type of the method.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-368">方法的參數類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-368">The types of the parameters of the method.</span></span></param>
        <summary><span data-ttu-id="13e28-369">將新方法加入此類型中，含指定名稱、方法屬性和方法簽章。</span><span class="sxs-lookup"><span data-stu-id="13e28-369">Adds a new method to the type, with the specified name, method attributes, and method signature.</span></span></summary>
        <returns><span data-ttu-id="13e28-370">已定義的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-370">The defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="13e28-371">下列程式碼範例示範如何使用`DefineMethod`動態型別上設定的建構函式特定的簽章和屬性，並傳回對應<xref:System.Reflection.Emit.MethodBuilder>MSIL 母體擴展。</span><span class="sxs-lookup"><span data-stu-id="13e28-371">The following code sample demonstrates the use of `DefineMethod` to set a constructor's particular signature and attributes on a dynamic type and to return a corresponding <xref:System.Reflection.Emit.MethodBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CPP/typebuilder_definenestedtype1.cpp#2)]
 [!code-csharp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CS/typebuilder_definenestedtype1.cs#2)]
 [!code-vb[TypeBuilder_DefineNestedType1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/VB/typebuilder_definenestedtype1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-372"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-372">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="13e28-373">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-373">-or-</span></span> 
<span data-ttu-id="13e28-374">這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</span><span class="sxs-lookup"><span data-stu-id="13e28-374">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-375"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-375"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-376">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-376">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
<span data-ttu-id="13e28-377">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-377">-or-</span></span> 
<span data-ttu-id="13e28-378">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-378">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="member this.DefineMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] -&gt; System.Reflection.Emit.MethodBuilder" Usage="typeBuilder.DefineMethod (name, attributes, callingConvention, returnType, parameterTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-379">方法的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-379">The name of the method.</span></span> <span data-ttu-id="13e28-380"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-380"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-381">方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-381">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="13e28-382">方法的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-382">The calling convention of the method.</span></span></param>
        <param name="returnType"><span data-ttu-id="13e28-383">該方法的傳回類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-383">The return type of the method.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-384">方法的參數類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-384">The types of the parameters of the method.</span></span></param>
        <summary><span data-ttu-id="13e28-385">將新方法加入此類型，含指定名稱、方法屬性、呼叫慣例和方法簽章。</span><span class="sxs-lookup"><span data-stu-id="13e28-385">Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.</span></span></summary>
        <returns><span data-ttu-id="13e28-386"><see cref="T:System.Reflection.Emit.MethodBuilder" /> 代表新定義的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-386">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the newly defined method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="13e28-387">下列程式碼範例示範如何使用`DefineMethod`動態型別上設定的建構函式特定的簽章和屬性，並傳回對應<xref:System.Reflection.Emit.MethodBuilder>MSIL 母體擴展。</span><span class="sxs-lookup"><span data-stu-id="13e28-387">The following code sample demonstrates the use of `DefineMethod` to set a constructor's particular signature and attributes on a dynamic type and to return a corresponding <xref:System.Reflection.Emit.MethodBuilder> for MSIL population.</span></span>  
  
 [!code-cpp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CPP/typebuilder_definenestedtype1.cpp#2)]
 [!code-csharp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CS/typebuilder_definenestedtype1.cs#2)]
 [!code-vb[TypeBuilder_DefineNestedType1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/VB/typebuilder_definenestedtype1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-388"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-388">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="13e28-389">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-389">-or-</span></span> 
<span data-ttu-id="13e28-390">這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</span><span class="sxs-lookup"><span data-stu-id="13e28-390">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-391"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-391"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-392">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-392">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
<span data-ttu-id="13e28-393">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-393">-or-</span></span> 
<span data-ttu-id="13e28-394">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-394">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineMethod (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As MethodBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefineMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="F#" Value="member this.DefineMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * Type[] * Type[] * Type[][] * Type[][] -&gt; System.Reflection.Emit.MethodBuilder" Usage="typeBuilder.DefineMethod (name, attributes, callingConvention, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-395">方法的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-395">The name of the method.</span></span> <span data-ttu-id="13e28-396"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-396"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-397">方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-397">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="13e28-398">方法的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-398">The calling convention of the method.</span></span></param>
        <param name="returnType"><span data-ttu-id="13e28-399">該方法的傳回類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-399">The return type of the method.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="13e28-400">代表該方法傳回類型之必要自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-400">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="13e28-401">如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-401">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="13e28-402">一種類型陣列，用來為方法的傳回類型指出選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-402">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="13e28-403">如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-403">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-404">方法的參數類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-404">The types of the parameters of the method.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="13e28-405">類型陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-405">An array of arrays of types.</span></span> <span data-ttu-id="13e28-406">每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-406">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="13e28-407">如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-407">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="13e28-408">如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-408">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="13e28-409">類型陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-409">An array of arrays of types.</span></span> <span data-ttu-id="13e28-410">每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-410">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="13e28-411">如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-411">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="13e28-412">如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-412">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="13e28-413">將新方法加入此類型，含指定名稱、方法屬性、呼叫慣例、方法簽章和自訂修飾詞。</span><span class="sxs-lookup"><span data-stu-id="13e28-413">Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="13e28-414"><see cref="T:System.Reflection.Emit.MethodBuilder" /> 物件，代表新加入的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-414">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> object representing the newly added method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-415">如果您需要指定自訂修飾詞，請使用此多載。</span><span class="sxs-lookup"><span data-stu-id="13e28-415">Use this overload if you need to specify custom modifiers.</span></span> <span data-ttu-id="13e28-416">如果您需要指定自訂修飾詞之後建立的方法，像您一樣，例如，具有泛型方法的參數類型由其泛型型別參數，您可以使用<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29>或<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29>方法多載，來定義方法，然後使用<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>方法來定義參數並傳回類型的自訂修飾詞。</span><span class="sxs-lookup"><span data-stu-id="13e28-416">If you need to specify custom modifiers after the method has been created, as you would, for example, with a generic method whose parameter types are specified by its generic type parameters, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29> or <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overloads to define the method and then use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method to define the parameter and return types with custom modifiers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-417">如需有關自訂修飾詞的詳細資訊，請參閱 ECMA 分割 II 中繼資料文件。</span><span class="sxs-lookup"><span data-stu-id="13e28-417">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="13e28-418">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="13e28-418">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-419"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-419">The length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="13e28-420">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-420">-or-</span></span> 
<span data-ttu-id="13e28-421">此方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</span><span class="sxs-lookup"><span data-stu-id="13e28-421">The type of the parent of this method is an interface, and this method is not virtual (<see langword="Overridable" /> in Visual Basic).</span></span>  
  
<span data-ttu-id="13e28-422">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-422">-or-</span></span> 
<span data-ttu-id="13e28-423"><paramref name="parameterTypeRequiredCustomModifiers" /> 或 <paramref name="parameterTypeOptionalCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-423">The size of <paramref name="parameterTypeRequiredCustomModifiers" /> or <paramref name="parameterTypeOptionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-424"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-424"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-425">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-425">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
<span data-ttu-id="13e28-426">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-426">-or-</span></span> 
<span data-ttu-id="13e28-427">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-427">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineMethodOverride">
      <MemberSignature Language="C#" Value="public void DefineMethodOverride (System.Reflection.MethodInfo methodInfoBody, System.Reflection.MethodInfo methodInfoDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefineMethodOverride(class System.Reflection.MethodInfo methodInfoBody, class System.Reflection.MethodInfo methodInfoDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefineMethodOverride (methodInfoBody As MethodInfo, methodInfoDeclaration As MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefineMethodOverride(System::Reflection::MethodInfo ^ methodInfoBody, System::Reflection::MethodInfo ^ methodInfoDeclaration);" />
      <MemberSignature Language="F#" Value="member this.DefineMethodOverride : System.Reflection.MethodInfo * System.Reflection.MethodInfo -&gt; unit" Usage="typeBuilder.DefineMethodOverride (methodInfoBody, methodInfoDeclaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfoBody" Type="System.Reflection.MethodInfo" />
        <Parameter Name="methodInfoDeclaration" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="methodInfoBody"><span data-ttu-id="13e28-428">要使用的方法主體。</span><span class="sxs-lookup"><span data-stu-id="13e28-428">The method body to be used.</span></span> <span data-ttu-id="13e28-429">應該是 <see langword="MethodBuilder" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-429">This should be a <see langword="MethodBuilder" /> object.</span></span></param>
        <param name="methodInfoDeclaration"><span data-ttu-id="13e28-430">要使用其宣告的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-430">The method whose declaration is to be used.</span></span></param>
        <summary><span data-ttu-id="13e28-431">指定實作給定方法宣告的給定方法主體，可能會使用其他名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-431">Specifies a given method body that implements a given method declaration, potentially with a different name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-432">請勿使用此方法以發出方法覆寫或介面實作。</span><span class="sxs-lookup"><span data-stu-id="13e28-432">Do not use this method to emit method overrides or interface implementations.</span></span> <span data-ttu-id="13e28-433">若要覆寫基底類別的方法或實作介面的方法，只是發出具有相同的名稱和簽章的方法為方法，以覆寫或實作，在程式碼範例所示。</span><span class="sxs-lookup"><span data-stu-id="13e28-433">To override a method of a base class or to implement a method of an interface, simply emit a method with the same name and signature as the method to be overridden or implemented, as demonstrated in the code example.</span></span>  
  
 <span data-ttu-id="13e28-434"><xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A>方法可在方法主體和方法宣告有不同的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-434">The <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is used when a method body and a method declaration have different names.</span></span> <span data-ttu-id="13e28-435">例如，類別可能會覆寫基底類別方法，而也提供的個別實作介面成員相同的名稱，程式碼範例所示。</span><span class="sxs-lookup"><span data-stu-id="13e28-435">For example, a class might override a base class method and also provide a separate implementation for an interface member with the same name, as demonstrated in the code example.</span></span>  
  
 <span data-ttu-id="13e28-436">`DefineMethodOverride` 定義`methodimpl`，其中包含一組中繼資料語彙基元。</span><span class="sxs-lookup"><span data-stu-id="13e28-436">`DefineMethodOverride` defines a `methodimpl`, which consists of a pair of metadata tokens.</span></span> <span data-ttu-id="13e28-437">實作，而其他語彙基元指向主體所實作的宣告會指向一個權杖。</span><span class="sxs-lookup"><span data-stu-id="13e28-437">One token points to an implementation, and the other token points to a declaration that the body implements.</span></span> <span data-ttu-id="13e28-438">必須定義方法實作為類型上定義主體和主體必須是虛擬 (`Overridable` Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="13e28-438">The body must be defined on the type the method impl is defined on, and the body must be virtual (`Overridable` in Visual Basic).</span></span> <span data-ttu-id="13e28-439">宣告可以對型別、 對衍生的類別、 方法或類型中定義的方法所實作的介面上所定義的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-439">The declaration can be made to a method defined on an interface implemented by the type, a method on a derived class, or a method defined in the type.</span></span> <span data-ttu-id="13e28-440">如果宣告是僅限介面上，這被改變介面所定義的位置。</span><span class="sxs-lookup"><span data-stu-id="13e28-440">If the declaration is on an interface only, the slot defined for the interface is altered.</span></span> <span data-ttu-id="13e28-441">如果宣告對基底類型上的方法，會覆寫方法的位置，並覆寫方法的任何重複項目也會被取代。</span><span class="sxs-lookup"><span data-stu-id="13e28-441">If the declaration is made to a method on a base type, the slot for the method is overridden and any duplicates for the overridden method are also replaced.</span></span> <span data-ttu-id="13e28-442">覆寫的方法不可以宣告的實際方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-442">The overridden method cannot be the actual method that is declared.</span></span> <span data-ttu-id="13e28-443">如果方法是在相同的型別上，位置會被取代，並且覆寫任何重複項目已取代的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-443">If the method is on the same type, the slot is replaced and any duplicates for the replaced methods are overridden.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-444">如需有關方法 impl 的詳細資訊，請參閱`MethodImpl`ECMA 分割 II 中繼資料文件中。</span><span class="sxs-lookup"><span data-stu-id="13e28-444">For more information about method impls, see `MethodImpl` in the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="13e28-445">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="13e28-445">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="13e28-446">在後<xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A>呼叫方法時，某些功能`methodInfoBody`無法變更。</span><span class="sxs-lookup"><span data-stu-id="13e28-446">After the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is called, some features of `methodInfoBody` cannot be changed.</span></span> <span data-ttu-id="13e28-447">比方說，您無法在這裡將屬性套用至泛型類型參數的`methodInfoBody`使用<xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-447">For example, you cannot apply an attribute to a generic type parameter of `methodInfoBody` by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method.</span></span> <span data-ttu-id="13e28-448">如果您必須使用<xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A>方法中，執行這項操作之後的所有特性`methodInfoBody`已定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-448">If you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method, do so after all characteristics of `methodInfoBody` have been defined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-449">下列程式碼範例包含的介面`I`的方法`M()`，基底類別`A`實作的介面，並在衍生的類別`C`會覆寫的基底類別實作`M()`以及提供個別的明確實作的`I.M()`。</span><span class="sxs-lookup"><span data-stu-id="13e28-449">The following code example contains an interface `I` with a method `M()`, a base class `A` that implements the interface, and a derived class `C` that overrides the base class implementation of `M()` and also provides a separate explicit implementation of `I.M()`.</span></span>  
  
 <span data-ttu-id="13e28-450">`main()`方法的程式碼範例示範如何發出衍生的類別`C`。</span><span class="sxs-lookup"><span data-stu-id="13e28-450">The `main()` method of the code example shows how to emit the derived class `C`.</span></span> <span data-ttu-id="13e28-451">覆寫`A.M()`只要發出的方法完成`M()`具有相同的簽章。</span><span class="sxs-lookup"><span data-stu-id="13e28-451">The override of `A.M()` is accomplished simply by emitting a method `M()` with the same signature.</span></span> <span data-ttu-id="13e28-452">不過，若要提供的不同實作`I.M()`，您必須定義方法主體，然後使用<xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A>方法來建立使用該方法主體的關聯<xref:System.Reflection.MethodInfo>代表`I.M()`。</span><span class="sxs-lookup"><span data-stu-id="13e28-452">However, to provide a separate implementation of `I.M()`, you must define a method body and then use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method to associate that method body with a <xref:System.Reflection.MethodInfo> representing `I.M()`.</span></span> <span data-ttu-id="13e28-453">方法主體的名稱不重要。</span><span class="sxs-lookup"><span data-stu-id="13e28-453">The name of the method body does not matter.</span></span>  
  
 <span data-ttu-id="13e28-454">在程式碼範例會建立發出類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="13e28-454">The code example creates an instance of the emitted class.</span></span> <span data-ttu-id="13e28-455">它會取得<xref:System.Reflection.MethodInfo>物件`I.M()`，並使用它來叫用發出之的類別的明確介面實作。</span><span class="sxs-lookup"><span data-stu-id="13e28-455">It obtains a <xref:System.Reflection.MethodInfo> object for `I.M()`, and uses it to invoke the emitted class's explicit interface implementation.</span></span> <span data-ttu-id="13e28-456">它接著會取得<xref:System.Reflection.MethodInfo>物件`A.M()`，並用它來叫用該方法發出的類別覆寫。</span><span class="sxs-lookup"><span data-stu-id="13e28-456">It then obtains a <xref:System.Reflection.MethodInfo> object for `A.M()`, and uses it to invoke the emitted class's override of that method.</span></span>  
  
 [!code-cpp[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/cpp/source.cpp#1)]
 [!code-csharp[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/cs/source.cs#1)]
 [!code-vb[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-457"><paramref name="methodInfoBody" /> 不屬於這個類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-457"><paramref name="methodInfoBody" /> does not belong to this class.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-458"><paramref name="methodInfoBody" /> 或 <paramref name="methodInfoDeclaration" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-458"><paramref name="methodInfoBody" /> or <paramref name="methodInfoDeclaration" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-459">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-459">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
<span data-ttu-id="13e28-460">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-460">-or-</span></span> 
<span data-ttu-id="13e28-461"><paramref name="methodInfoBody" /> 的宣告類型不是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 所表示的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-461">The declaring type of <paramref name="methodInfoBody" /> is not the type represented by this <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineNestedType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-462">定義巢狀類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-462">Defines a nested type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.DefineNestedType : string -&gt; System.Reflection.Emit.TypeBuilder" Usage="typeBuilder.DefineNestedType name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-463">型別的簡短名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-463">The short name of the type.</span></span> <span data-ttu-id="13e28-464"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-464"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <summary><span data-ttu-id="13e28-465">定義巢狀類型，並指定其名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-465">Defines a nested type, given its name.</span></span></summary>
        <returns><span data-ttu-id="13e28-466">定義的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-466">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-467">這個方法可用來建立巢狀型別過後<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>封入型別上呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-467">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="13e28-468">巢狀的類型必須先完成您可以使用反映<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="13e28-468">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="13e28-469">請參閱描述<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>中巢狀型別和巢狀類型應完成的順序。</span><span class="sxs-lookup"><span data-stu-id="13e28-469">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="13e28-470">重複的名稱不一定是建立如果`name`等同於先前定義的類型或巢狀的類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-470">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="13e28-471">若要重複的項目，完整的名稱必須是相同，包括命名空間和所有的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-471">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-472"><paramref name="name" /> 的長度為零或大於 1023。</span><span class="sxs-lookup"><span data-stu-id="13e28-472">Length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
<span data-ttu-id="13e28-473">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-473">-or-</span></span> 
<span data-ttu-id="13e28-474">這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-474">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-475"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-475"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr);" />
      <MemberSignature Language="F#" Value="member this.DefineNestedType : string * System.Reflection.TypeAttributes -&gt; System.Reflection.Emit.TypeBuilder" Usage="typeBuilder.DefineNestedType (name, attr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-476">型別的簡短名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-476">The short name of the type.</span></span> <span data-ttu-id="13e28-477"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-477"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="13e28-478">類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-478">The attributes of the type.</span></span></param>
        <summary><span data-ttu-id="13e28-479">定義巢狀類型，並指定其名稱及屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-479">Defines a nested type, given its name and attributes.</span></span></summary>
        <returns><span data-ttu-id="13e28-480">定義的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-480">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-481">這個方法可用來建立巢狀型別過後<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>封入型別上呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-481">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="13e28-482">巢狀的類型必須先完成您可以使用反映<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="13e28-482">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="13e28-483">請參閱描述<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>中巢狀型別和巢狀類型應完成的順序。</span><span class="sxs-lookup"><span data-stu-id="13e28-483">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="13e28-484">重複的名稱不一定是建立如果`name`等同於先前定義的類型或巢狀的類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-484">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="13e28-485">若要重複的項目，完整的名稱必須是相同，包括命名空間和所有的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-485">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-486">未指定巢狀屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-486">The nested attribute is not specified.</span></span>  
  
<span data-ttu-id="13e28-487">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-487">-or-</span></span> 
<span data-ttu-id="13e28-488">這個類型已密封。</span><span class="sxs-lookup"><span data-stu-id="13e28-488">This type is sealed.</span></span>  
  
<span data-ttu-id="13e28-489">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-489">-or-</span></span> 
<span data-ttu-id="13e28-490">這個型別是陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-490">This type is an array.</span></span>  
  
<span data-ttu-id="13e28-491">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-491">-or-</span></span> 
<span data-ttu-id="13e28-492">這個型別是介面，但巢狀型別不是介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-492">This type is an interface, but the nested type is not an interface.</span></span>  
  
<span data-ttu-id="13e28-493">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-493">-or-</span></span> 
<span data-ttu-id="13e28-494"><paramref name="name" /> 的長度為零或大於 1023。</span><span class="sxs-lookup"><span data-stu-id="13e28-494">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
<span data-ttu-id="13e28-495">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-495">-or-</span></span> 
<span data-ttu-id="13e28-496">這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-496">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-497"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-497"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent);" />
      <MemberSignature Language="F#" Value="member this.DefineNestedType : string * System.Reflection.TypeAttributes * Type -&gt; System.Reflection.Emit.TypeBuilder" Usage="typeBuilder.DefineNestedType (name, attr, parent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-498">型別的簡短名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-498">The short name of the type.</span></span> <span data-ttu-id="13e28-499"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-499"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="13e28-500">類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-500">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="13e28-501">巢狀型別所擴充的型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-501">The type that the nested type extends.</span></span></param>
        <summary><span data-ttu-id="13e28-502">定義巢狀類型，並指定其名稱、屬性和擴充的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-502">Defines a nested type, given its name, attributes, and the type that it extends.</span></span></summary>
        <returns><span data-ttu-id="13e28-503">定義的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-503">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-504">這個方法可用來建立巢狀型別過後<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>封入型別上呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-504">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="13e28-505">巢狀的類型必須先完成您可以使用反映<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="13e28-505">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="13e28-506">請參閱描述<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>中巢狀型別和巢狀類型應完成的順序。</span><span class="sxs-lookup"><span data-stu-id="13e28-506">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="13e28-507">重複的名稱不一定是建立如果`name`等同於先前定義的類型或巢狀的類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-507">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="13e28-508">若要重複的項目，完整的名稱必須是相同，包括命名空間和所有的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-508">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-509">未指定巢狀屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-509">The nested attribute is not specified.</span></span>  
  
<span data-ttu-id="13e28-510">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-510">-or-</span></span> 
<span data-ttu-id="13e28-511">這個類型已密封。</span><span class="sxs-lookup"><span data-stu-id="13e28-511">This type is sealed.</span></span>  
  
<span data-ttu-id="13e28-512">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-512">-or-</span></span> 
<span data-ttu-id="13e28-513">這個型別是陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-513">This type is an array.</span></span>  
  
<span data-ttu-id="13e28-514">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-514">-or-</span></span> 
<span data-ttu-id="13e28-515">這個型別是介面，但巢狀型別不是介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-515">This type is an interface, but the nested type is not an interface.</span></span>  
  
<span data-ttu-id="13e28-516">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-516">-or-</span></span> 
<span data-ttu-id="13e28-517"><paramref name="name" /> 的長度為零或大於 1023。</span><span class="sxs-lookup"><span data-stu-id="13e28-517">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
<span data-ttu-id="13e28-518">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-518">-or-</span></span> 
<span data-ttu-id="13e28-519">這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-519">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-520"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-520"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, int typeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, int32 typeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, typeSize As Integer) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, int typeSize);" />
      <MemberSignature Language="F#" Value="member this.DefineNestedType : string * System.Reflection.TypeAttributes * Type * int -&gt; System.Reflection.Emit.TypeBuilder" Usage="typeBuilder.DefineNestedType (name, attr, parent, typeSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="typeSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-521">型別的簡短名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-521">The short name of the type.</span></span> <span data-ttu-id="13e28-522"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-522"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="13e28-523">類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-523">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="13e28-524">巢狀型別所擴充的型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-524">The type that the nested type extends.</span></span></param>
        <param name="typeSize"><span data-ttu-id="13e28-525">型別的總大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-525">The total size of the type.</span></span></param>
        <summary><span data-ttu-id="13e28-526">定義巢狀型別，指定其名稱、屬性、型別的總大小及其擴充的型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-526">Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.</span></span></summary>
        <returns><span data-ttu-id="13e28-527">定義的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-527">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-528">這個方法可用來建立巢狀型別過後<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>封入型別上呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-528">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="13e28-529">巢狀的類型必須先完成您可以使用反映<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="13e28-529">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="13e28-530">請參閱描述<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>中巢狀型別和巢狀類型應完成的順序。</span><span class="sxs-lookup"><span data-stu-id="13e28-530">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="13e28-531">重複的名稱不一定是建立如果`name`等同於先前定義的類型或巢狀的類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-531">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="13e28-532">若要重複的項目，完整的名稱必須是相同，包括命名空間和所有的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-532">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-533">未指定巢狀屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-533">The nested attribute is not specified.</span></span>  
  
<span data-ttu-id="13e28-534">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-534">-or-</span></span> 
<span data-ttu-id="13e28-535">這個類型已密封。</span><span class="sxs-lookup"><span data-stu-id="13e28-535">This type is sealed.</span></span>  
  
<span data-ttu-id="13e28-536">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-536">-or-</span></span> 
<span data-ttu-id="13e28-537">這個型別是陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-537">This type is an array.</span></span>  
  
<span data-ttu-id="13e28-538">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-538">-or-</span></span> 
<span data-ttu-id="13e28-539">這個型別是介面，但巢狀型別不是介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-539">This type is an interface, but the nested type is not an interface.</span></span>  
  
<span data-ttu-id="13e28-540">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-540">-or-</span></span> 
<span data-ttu-id="13e28-541"><paramref name="name" /> 的長度為零或大於 1023。</span><span class="sxs-lookup"><span data-stu-id="13e28-541">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
<span data-ttu-id="13e28-542">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-542">-or-</span></span> 
<span data-ttu-id="13e28-543">這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-543">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-544"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-544"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, valuetype System.Reflection.Emit.PackingSize packSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, packSize As PackingSize) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, System::Reflection::Emit::PackingSize packSize);" />
      <MemberSignature Language="F#" Value="member this.DefineNestedType : string * System.Reflection.TypeAttributes * Type * System.Reflection.Emit.PackingSize -&gt; System.Reflection.Emit.TypeBuilder" Usage="typeBuilder.DefineNestedType (name, attr, parent, packSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="packSize" Type="System.Reflection.Emit.PackingSize" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-545">型別的簡短名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-545">The short name of the type.</span></span> <span data-ttu-id="13e28-546"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-546"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="13e28-547">類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-547">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="13e28-548">巢狀型別所擴充的型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-548">The type that the nested type extends.</span></span></param>
        <param name="packSize"><span data-ttu-id="13e28-549">類型的封裝大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-549">The packing size of the type.</span></span></param>
        <summary><span data-ttu-id="13e28-550">定義巢狀類型，並指定其名稱、屬性、擴充的類型和封裝大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-550">Defines a nested type, given its name, attributes, the type that it extends, and the packing size.</span></span></summary>
        <returns><span data-ttu-id="13e28-551">定義的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-551">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-552">這個方法可用來建立巢狀型別過後<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>封入型別上呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-552">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="13e28-553">巢狀的類型必須先完成您可以使用反映<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="13e28-553">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="13e28-554">請參閱描述<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>中巢狀型別和巢狀類型應完成的順序。</span><span class="sxs-lookup"><span data-stu-id="13e28-554">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="13e28-555">重複的名稱不一定是建立如果`name`等同於先前定義的類型或巢狀的類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-555">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="13e28-556">若要重複的項目，完整的名稱必須是相同，包括命名空間和所有的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-556">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-557">未指定巢狀屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-557">The nested attribute is not specified.</span></span>  
  
<span data-ttu-id="13e28-558">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-558">-or-</span></span> 
<span data-ttu-id="13e28-559">這個類型已密封。</span><span class="sxs-lookup"><span data-stu-id="13e28-559">This type is sealed.</span></span>  
  
<span data-ttu-id="13e28-560">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-560">-or-</span></span> 
<span data-ttu-id="13e28-561">這個型別是陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-561">This type is an array.</span></span>  
  
<span data-ttu-id="13e28-562">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-562">-or-</span></span> 
<span data-ttu-id="13e28-563">這個型別是介面，但巢狀型別不是介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-563">This type is an interface, but the nested type is not an interface.</span></span>  
  
<span data-ttu-id="13e28-564">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-564">-or-</span></span> 
<span data-ttu-id="13e28-565"><paramref name="name" /> 的長度為零或大於 1023。</span><span class="sxs-lookup"><span data-stu-id="13e28-565">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
<span data-ttu-id="13e28-566">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-566">-or-</span></span> 
<span data-ttu-id="13e28-567">這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-567">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-568"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-568"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, Type[] interfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, class System.Type[] interfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, interfaces As Type()) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, cli::array &lt;Type ^&gt; ^ interfaces);" />
      <MemberSignature Language="F#" Value="member this.DefineNestedType : string * System.Reflection.TypeAttributes * Type * Type[] -&gt; System.Reflection.Emit.TypeBuilder" Usage="typeBuilder.DefineNestedType (name, attr, parent, interfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="interfaces" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-569">型別的簡短名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-569">The short name of the type.</span></span> <span data-ttu-id="13e28-570"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-570"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attr"><span data-ttu-id="13e28-571">類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-571">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="13e28-572">巢狀類型擴充的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-572">The type that the nested type extends.</span></span></param>
        <param name="interfaces"><span data-ttu-id="13e28-573">巢狀類型實作的介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-573">The interfaces that the nested type implements.</span></span></param>
        <summary><span data-ttu-id="13e28-574">定義巢狀類型，並指定其名稱、屬性、擴充的類型和實作的介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-574">Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.</span></span></summary>
        <returns><span data-ttu-id="13e28-575">定義的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-575">The defined nested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-576">這個方法可用來建立巢狀型別過後<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>封入型別上呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-576">This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.</span></span>  
  
 <span data-ttu-id="13e28-577">巢狀的類型必須先完成您可以使用反映<xref:System.Type.GetMembers%2A>， <xref:System.Type.GetNestedType%2A>，或<xref:System.Type.GetNestedTypes%2A>。</span><span class="sxs-lookup"><span data-stu-id="13e28-577">The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.</span></span>  
  
 <span data-ttu-id="13e28-578">請參閱描述<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>中巢狀型別和巢狀類型應完成的順序。</span><span class="sxs-lookup"><span data-stu-id="13e28-578">See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.</span></span>  
  
 <span data-ttu-id="13e28-579">重複的名稱不一定是建立如果`name`等同於先前定義的類型或巢狀的類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-579">A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type.</span></span> <span data-ttu-id="13e28-580">若要重複的項目，完整的名稱必須是相同，包括命名空間和所有的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-580">To be duplicates, the full names must be the same, including the namespace and all nesting types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-581">未指定巢狀屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-581">The nested attribute is not specified.</span></span>  
  
<span data-ttu-id="13e28-582">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-582">-or-</span></span> 
<span data-ttu-id="13e28-583">這個類型已密封。</span><span class="sxs-lookup"><span data-stu-id="13e28-583">This type is sealed.</span></span>  
  
<span data-ttu-id="13e28-584">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-584">-or-</span></span> 
<span data-ttu-id="13e28-585">這個型別是陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-585">This type is an array.</span></span>  
  
<span data-ttu-id="13e28-586">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-586">-or-</span></span> 
<span data-ttu-id="13e28-587">這個型別是介面，但巢狀型別不是介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-587">This type is an interface, but the nested type is not an interface.</span></span>  
  
<span data-ttu-id="13e28-588">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-588">-or-</span></span> 
<span data-ttu-id="13e28-589"><paramref name="name" /> 的長度為零或大於 1023。</span><span class="sxs-lookup"><span data-stu-id="13e28-589">The length of <paramref name="name" /> is zero or greater than 1023.</span></span>  
  
<span data-ttu-id="13e28-590">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-590">-or-</span></span> 
<span data-ttu-id="13e28-591">這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-591">This operation would create a type with a duplicate <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in the current assembly.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-592"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-592"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="13e28-593">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-593">-or-</span></span> 
<span data-ttu-id="13e28-594"><paramref name="interfaces" /> 陣列的項目是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-594">An element of the <paramref name="interfaces" /> array is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineNestedType">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize, int typeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, valuetype System.Reflection.Emit.PackingSize packSize, int32 typeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineNestedType (name As String, attr As TypeAttributes, parent As Type, packSize As PackingSize, typeSize As Integer) As TypeBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::TypeBuilder ^ DefineNestedType(System::String ^ name, System::Reflection::TypeAttributes attr, Type ^ parent, System::Reflection::Emit::PackingSize packSize, int typeSize);" />
      <MemberSignature Language="F#" Value="member this.DefineNestedType : string * System.Reflection.TypeAttributes * Type * System.Reflection.Emit.PackingSize * int -&gt; System.Reflection.Emit.TypeBuilder" Usage="typeBuilder.DefineNestedType (name, attr, parent, packSize, typeSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attr" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="parent" Type="System.Type" />
        <Parameter Name="packSize" Type="System.Reflection.Emit.PackingSize" />
        <Parameter Name="typeSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-595">型別的簡短名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-595">The short name of the type.</span></span> <span data-ttu-id="13e28-596"><paramref name="name" /> 不能包含內嵌的 null 值。</span><span class="sxs-lookup"><span data-stu-id="13e28-596"><paramref name="name" /> cannot contain embedded null values.</span></span></param>
        <param name="attr"><span data-ttu-id="13e28-597">類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-597">The attributes of the type.</span></span></param>
        <param name="parent"><span data-ttu-id="13e28-598">巢狀型別所擴充的型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-598">The type that the nested type extends.</span></span></param>
        <param name="packSize"><span data-ttu-id="13e28-599">類型的封裝大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-599">The packing size of the type.</span></span></param>
        <param name="typeSize"><span data-ttu-id="13e28-600">型別的總大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-600">The total size of the type.</span></span></param>
        <summary><span data-ttu-id="13e28-601">定義巢狀類型，並指定其名稱、屬性、大小和擴充的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-601">Defines a nested type, given its name, attributes, size, and the type that it extends.</span></span></summary>
        <returns><span data-ttu-id="13e28-602">定義的巢狀型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-602">The defined nested type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefinePInvokeMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-603">定義 <see langword="PInvoke" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-603">Defines a <see langword="PInvoke" /> method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberSignature Language="F#" Value="member this.DefinePInvokeMethod : string * string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * System.Runtime.InteropServices.CallingConvention * System.Runtime.InteropServices.CharSet -&gt; System.Reflection.Emit.MethodBuilder" Usage="typeBuilder.DefinePInvokeMethod (name, dllName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-604"><see langword="PInvoke" /> 方法的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-604">The name of the <see langword="PInvoke" /> method.</span></span> <span data-ttu-id="13e28-605"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-605"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="dllName"><span data-ttu-id="13e28-606"><see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-606">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-607">方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-607">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="13e28-608">方法的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-608">The method's calling convention.</span></span></param>
        <param name="returnType"><span data-ttu-id="13e28-609">方法的傳回類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-609">The method's return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-610">方法參數的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-610">The types of the method's parameters.</span></span></param>
        <param name="nativeCallConv"><span data-ttu-id="13e28-611">原生呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-611">The native calling convention.</span></span></param>
        <param name="nativeCharSet"><span data-ttu-id="13e28-612">方法的原生字元集。</span><span class="sxs-lookup"><span data-stu-id="13e28-612">The method's native character set.</span></span></param>
        <summary><span data-ttu-id="13e28-613">定義 <see langword="PInvoke" /> 方法指定名稱、方法定義所在的 DLL 名稱、方法的屬性、方法的呼叫慣例、方法的傳回類型、方法的參數類型和 <see langword="PInvoke" /> 旗標。</span><span class="sxs-lookup"><span data-stu-id="13e28-613">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <see langword="PInvoke" /> flags.</span></span></summary>
        <returns><span data-ttu-id="13e28-614">已定義的 <see langword="PInvoke" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-614">The defined <see langword="PInvoke" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-615">某些 DLL 匯入屬性 (請參閱描述<xref:System.Runtime.InteropServices.DllImportAttribute>) 不能指定為此方法的引數。</span><span class="sxs-lookup"><span data-stu-id="13e28-615">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="13e28-616">例如，DLL 匯入屬性<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>必須在之後加入`PInvoke`建立方法時，如果這個方法傳回的值。</span><span class="sxs-lookup"><span data-stu-id="13e28-616">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="13e28-617">此範例示範如何執行這項操作。</span><span class="sxs-lookup"><span data-stu-id="13e28-617">The example shows how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-618">下列範例示範如何使用<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A>方法用來建立`PInvoke`方法，以及如何新增<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>旗標，以在建立之後的方法實作旗標<xref:System.Reflection.Emit.MethodBuilder>，使用<xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType>並<xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-618">The following example demonstrates how to use the <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="13e28-619">若要取得非零傳回值，您必須新增<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="13e28-619">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="13e28-620">此範例會建立單一的型別，與一個動態模組的動態組件`MyType`，其中包含`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-620">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="13e28-621">`PInvoke`方法代表 Win32`GetTickCount`函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-621">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
 <span data-ttu-id="13e28-622">執行範例時，它會執行`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-622">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="13e28-623">它也會儲存為 PInvokeTest.dll 的動態組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-623">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="13e28-624">您可以使用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)來檢查`MyType`類別和`static`(`Shared`在 Visual Basic 中)`PInvoke`它所包含的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-624">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="13e28-625">您可以編譯 Visual Basic 或 C# 的程式，使用靜態`MyType.GetTickCount`包含 DLL 的參考，當您執行 csc.exe 或 vbc.exe; 方法，例如`/r:PInvokeTest.dll`。</span><span class="sxs-lookup"><span data-stu-id="13e28-625">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-626">這個方法不是靜態的。</span><span class="sxs-lookup"><span data-stu-id="13e28-626">The method is not static.</span></span>  
  
<span data-ttu-id="13e28-627">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-627">-or-</span></span> 
<span data-ttu-id="13e28-628">父類型是介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-628">The parent type is an interface.</span></span>  
  
<span data-ttu-id="13e28-629">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-629">-or-</span></span> 
<span data-ttu-id="13e28-630">這是抽象方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-630">The method is abstract.</span></span>  
  
<span data-ttu-id="13e28-631">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-631">-or-</span></span> 
<span data-ttu-id="13e28-632">方法之前已定義過。</span><span class="sxs-lookup"><span data-stu-id="13e28-632">The method was previously defined.</span></span>  
  
<span data-ttu-id="13e28-633">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-633">-or-</span></span> 
<span data-ttu-id="13e28-634"><paramref name="name" /> 或 <paramref name="dllName" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-634">The length of <paramref name="name" /> or <paramref name="dllName" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-635"><paramref name="name" /> 或 <paramref name="dllName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-635"><paramref name="name" /> or <paramref name="dllName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-636">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-636">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::String ^ entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberSignature Language="F#" Value="member this.DefinePInvokeMethod : string * string * string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * System.Runtime.InteropServices.CallingConvention * System.Runtime.InteropServices.CharSet -&gt; System.Reflection.Emit.MethodBuilder" Usage="typeBuilder.DefinePInvokeMethod (name, dllName, entryName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="entryName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-637"><see langword="PInvoke" /> 方法的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-637">The name of the <see langword="PInvoke" /> method.</span></span> <span data-ttu-id="13e28-638"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-638"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="dllName"><span data-ttu-id="13e28-639"><see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-639">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span></span></param>
        <param name="entryName"><span data-ttu-id="13e28-640">DLL 中的進入點名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-640">The name of the entry point in the DLL.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-641">方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-641">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="13e28-642">方法的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-642">The method's calling convention.</span></span></param>
        <param name="returnType"><span data-ttu-id="13e28-643">方法的傳回類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-643">The method's return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-644">方法參數的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-644">The types of the method's parameters.</span></span></param>
        <param name="nativeCallConv"><span data-ttu-id="13e28-645">原生呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-645">The native calling convention.</span></span></param>
        <param name="nativeCharSet"><span data-ttu-id="13e28-646">方法的原生字元集。</span><span class="sxs-lookup"><span data-stu-id="13e28-646">The method's native character set.</span></span></param>
        <summary><span data-ttu-id="13e28-647">定義 <see langword="PInvoke" /> 方法指定名稱、方法定義所在的 DLL 名稱、進入點名稱、方法的屬性、方法的呼叫慣例、方法的傳回類型、方法的參數類型和 <see langword="PInvoke" /> 旗標。</span><span class="sxs-lookup"><span data-stu-id="13e28-647">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <see langword="PInvoke" /> flags.</span></span></summary>
        <returns><span data-ttu-id="13e28-648">已定義的 <see langword="PInvoke" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-648">The defined <see langword="PInvoke" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-649">某些 DLL 匯入屬性 (請參閱描述<xref:System.Runtime.InteropServices.DllImportAttribute>) 不能指定為此方法的引數。</span><span class="sxs-lookup"><span data-stu-id="13e28-649">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="13e28-650">例如，DLL 匯入屬性<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>必須在之後加入`PInvoke`建立方法時，如果這個方法傳回的值。</span><span class="sxs-lookup"><span data-stu-id="13e28-650">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="13e28-651">此範例示範如何執行這項操作。</span><span class="sxs-lookup"><span data-stu-id="13e28-651">The example shows how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-652">下列程式碼範例示範如何使用<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A>方法用來建立`PInvoke`方法，以及如何新增<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>旗標，以在建立之後的方法實作旗標<xref:System.Reflection.Emit.MethodBuilder>，使用<xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType>並<xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-652">The following code example demonstrates how to use the <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="13e28-653">若要取得非零傳回值，您必須新增<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="13e28-653">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="13e28-654">此範例會建立單一的型別，與一個動態模組的動態組件`MyType`，其中包含`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-654">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="13e28-655">`PInvoke`方法代表 Win32`GetTickCount`函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-655">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
 <span data-ttu-id="13e28-656">執行範例時，它會執行`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-656">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="13e28-657">它也會儲存為 PInvokeTest.dll 的動態組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-657">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="13e28-658">您可以使用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)來檢查`MyType`類別和`static`(`Shared`在 Visual Basic 中)`PInvoke`它所包含的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-658">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="13e28-659">您可以編譯 Visual Basic 或 C# 的程式，使用靜態`MyType.GetTickCount`包含 DLL 的參考，當您執行 csc.exe 或 vbc.exe; 方法，例如`/r:PInvokeTest.dll`。</span><span class="sxs-lookup"><span data-stu-id="13e28-659">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-660">這個方法不是靜態的。</span><span class="sxs-lookup"><span data-stu-id="13e28-660">The method is not static.</span></span>  
  
<span data-ttu-id="13e28-661">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-661">-or-</span></span> 
<span data-ttu-id="13e28-662">父類型是介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-662">The parent type is an interface.</span></span>  
  
<span data-ttu-id="13e28-663">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-663">-or-</span></span> 
<span data-ttu-id="13e28-664">這是抽象方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-664">The method is abstract.</span></span>  
  
<span data-ttu-id="13e28-665">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-665">-or-</span></span> 
<span data-ttu-id="13e28-666">方法之前已定義過。</span><span class="sxs-lookup"><span data-stu-id="13e28-666">The method was previously defined.</span></span>  
  
<span data-ttu-id="13e28-667">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-667">-or-</span></span> 
<span data-ttu-id="13e28-668"><paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-668">The length of <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-669"><paramref name="name" /><paramref name="dllName" /> 或 <paramref name="entryName" /> 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-669"><paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-670">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-670">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefinePInvokeMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodBuilder ^ DefinePInvokeMethod(System::String ^ name, System::String ^ dllName, System::String ^ entryName, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers, System::Runtime::InteropServices::CallingConvention nativeCallConv, System::Runtime::InteropServices::CharSet nativeCharSet);" />
      <MemberSignature Language="F#" Value="member this.DefinePInvokeMethod : string * string * string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * Type[] * Type[] * Type[][] * Type[][] * System.Runtime.InteropServices.CallingConvention * System.Runtime.InteropServices.CharSet -&gt; System.Reflection.Emit.MethodBuilder" Usage="typeBuilder.DefinePInvokeMethod (name, dllName, entryName, attributes, callingConvention, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers, nativeCallConv, nativeCharSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dllName" Type="System.String" />
        <Parameter Name="entryName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="nativeCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="nativeCharSet" Type="System.Runtime.InteropServices.CharSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-671"><see langword="PInvoke" /> 方法的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-671">The name of the <see langword="PInvoke" /> method.</span></span> <span data-ttu-id="13e28-672"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-672"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="dllName"><span data-ttu-id="13e28-673"><see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-673">The name of the DLL in which the <see langword="PInvoke" /> method is defined.</span></span></param>
        <param name="entryName"><span data-ttu-id="13e28-674">DLL 中的進入點名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-674">The name of the entry point in the DLL.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-675">方法的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-675">The attributes of the method.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="13e28-676">方法的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-676">The method's calling convention.</span></span></param>
        <param name="returnType"><span data-ttu-id="13e28-677">方法的傳回類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-677">The method's return type.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="13e28-678">一種類型陣列，用來為方法的傳回類型指出必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-678">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="13e28-679">如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-679">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="13e28-680">一種類型陣列，用來為方法的傳回類型指出選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-680">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span></span> <span data-ttu-id="13e28-681">如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-681">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-682">方法參數的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-682">The types of the method's parameters.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="13e28-683">類型陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-683">An array of arrays of types.</span></span> <span data-ttu-id="13e28-684">每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-684">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="13e28-685">如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-685">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="13e28-686">如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-686">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="13e28-687">類型陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-687">An array of arrays of types.</span></span> <span data-ttu-id="13e28-688">每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-688">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="13e28-689">如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-689">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="13e28-690">如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-690">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="nativeCallConv"><span data-ttu-id="13e28-691">原生呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-691">The native calling convention.</span></span></param>
        <param name="nativeCharSet"><span data-ttu-id="13e28-692">方法的原生字元集。</span><span class="sxs-lookup"><span data-stu-id="13e28-692">The method's native character set.</span></span></param>
        <summary><span data-ttu-id="13e28-693">定義 <see langword="PInvoke" /> 方法，方法是指定其名稱、方法定義所在的 DLL 名稱、進入點名稱、方法的屬性、方法的呼叫慣例、方法的傳回類型、方法的參數類型、<see langword="PInvoke" /> 旗標和這些參數與傳回類型的自訂修飾詞。</span><span class="sxs-lookup"><span data-stu-id="13e28-693">Defines a <see langword="PInvoke" /> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the <see langword="PInvoke" /> flags, and custom modifiers for the parameters and return type.</span></span></summary>
        <returns><span data-ttu-id="13e28-694"><see cref="T:System.Reflection.Emit.MethodBuilder" />，代表定義的 <see langword="PInvoke" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-694">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> representing the defined <see langword="PInvoke" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-695">某些 DLL 匯入屬性 (請參閱描述<xref:System.Runtime.InteropServices.DllImportAttribute>) 不能指定為此方法的引數。</span><span class="sxs-lookup"><span data-stu-id="13e28-695">Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method.</span></span> <span data-ttu-id="13e28-696">例如，DLL 匯入屬性<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>必須在之後加入`PInvoke`建立方法時，如果這個方法傳回的值。</span><span class="sxs-lookup"><span data-stu-id="13e28-696">For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> must be added after the `PInvoke` method is created, if the method returns a value.</span></span> <span data-ttu-id="13e28-697">此範例示範如何執行這項操作。</span><span class="sxs-lookup"><span data-stu-id="13e28-697">The example shows how to do this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-698">如需有關自訂修飾詞的詳細資訊，請參閱 ECMA 分割 II 中繼資料文件。</span><span class="sxs-lookup"><span data-stu-id="13e28-698">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="13e28-699">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="13e28-699">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-700">下列程式碼範例示範如何使用 [\]，輸入\[\]，型別\[\]，型別\[\]\[\]，型別\[\] \<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A > 方法用來建立`PInvoke`方法，以及如何新增<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>旗標，以在建立之後的方法實作旗標<xref:System.Reflection.Emit.MethodBuilder>，使用<xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType>和<xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-700">The following code example demonstrates how to use the [\], Type\[\], Type\[\], Type\[\]\[\], Type\[\]\<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=nameWithType> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="13e28-701">此範例會建立單一的型別，與一個動態模組的動態組件`MyType`，其中包含`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-701">The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method.</span></span> <span data-ttu-id="13e28-702">`PInvoke`方法代表 Win32`GetTickCount`函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-702">The `PInvoke` method represents the Win32 `GetTickCount` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="13e28-703">若要取得非零傳回值，您必須新增<xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="13e28-703">To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-704">此範例會使用多載未指定的自訂修飾詞。</span><span class="sxs-lookup"><span data-stu-id="13e28-704">The example uses an overload that does not specify custom modifiers.</span></span> <span data-ttu-id="13e28-705">若要指定自訂修飾詞，變更的範例程式碼，改為使用這個方法多載。</span><span class="sxs-lookup"><span data-stu-id="13e28-705">To specify custom modifiers, change the example code to use this method overload instead.</span></span>  
  
 <span data-ttu-id="13e28-706">執行範例時，它會執行`PInvoke`方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-706">When the example is run, it executes the `PInvoke` method.</span></span> <span data-ttu-id="13e28-707">它也會儲存為 PInvokeTest.dll 的動態組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-707">It also saves the dynamic assembly as PInvokeTest.dll.</span></span> <span data-ttu-id="13e28-708">您可以使用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)來檢查`MyType`類別和`static`(`Shared`在 Visual Basic 中)`PInvoke`它所包含的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-708">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains.</span></span> <span data-ttu-id="13e28-709">您可以編譯 Visual Basic 或 C# 的程式，使用靜態`MyType.GetTickCount`包含 DLL 的參考，當您執行 csc.exe 或 vbc.exe; 方法，例如`/r:PInvokeTest.dll`。</span><span class="sxs-lookup"><span data-stu-id="13e28-709">You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.</span></span>  
  
 [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]
 [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]
 [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-710">這個方法不是靜態的。</span><span class="sxs-lookup"><span data-stu-id="13e28-710">The method is not static.</span></span>  
  
<span data-ttu-id="13e28-711">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-711">-or-</span></span> 
<span data-ttu-id="13e28-712">父類型是介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-712">The parent type is an interface.</span></span>  
  
<span data-ttu-id="13e28-713">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-713">-or-</span></span> 
<span data-ttu-id="13e28-714">這是抽象方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-714">The method is abstract.</span></span>  
  
<span data-ttu-id="13e28-715">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-715">-or-</span></span> 
<span data-ttu-id="13e28-716">方法之前已定義過。</span><span class="sxs-lookup"><span data-stu-id="13e28-716">The method was previously defined.</span></span>  
  
<span data-ttu-id="13e28-717">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-717">-or-</span></span> 
<span data-ttu-id="13e28-718"><paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-718">The length of <paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is zero.</span></span>  
  
<span data-ttu-id="13e28-719">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-719">-or-</span></span> 
<span data-ttu-id="13e28-720"><paramref name="parameterTypeRequiredCustomModifiers" /> 或 <paramref name="parameterTypeOptionalCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-720">The size of <paramref name="parameterTypeRequiredCustomModifiers" /> or <paramref name="parameterTypeOptionalCustomModifiers" /> does not equal the size of <paramref name="parameterTypes" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-721"><paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-721"><paramref name="name" />, <paramref name="dllName" />, or <paramref name="entryName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-722">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-722">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
<span data-ttu-id="13e28-723">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-723">-or-</span></span> 
<span data-ttu-id="13e28-724">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-724">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineProperty">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-725">將新屬性加入類型中。</span><span class="sxs-lookup"><span data-stu-id="13e28-725">Adds a new property to the type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, returnType As Type, parameterTypes As Type()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="member this.DefineProperty : string * System.Reflection.PropertyAttributes * Type * Type[] -&gt; System.Reflection.Emit.PropertyBuilder" Usage="typeBuilder.DefineProperty (name, attributes, returnType, parameterTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-726">屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-726">The name of the property.</span></span> <span data-ttu-id="13e28-727"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-727"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-728">這個屬性 (Property) 的屬性 (Attribute)。</span><span class="sxs-lookup"><span data-stu-id="13e28-728">The attributes of the property.</span></span></param>
        <param name="returnType"><span data-ttu-id="13e28-729">屬性的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-729">The return type of the property.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-730">屬性的參數類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-730">The types of the parameters of the property.</span></span></param>
        <summary><span data-ttu-id="13e28-731">以指定名稱和屬性簽章將新屬性加入此類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-731">Adds a new property to the type, with the given name and property signature.</span></span></summary>
        <returns><span data-ttu-id="13e28-732">定義的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-732">The defined property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="13e28-733">下列程式碼範例示範如何定義動態屬性，並取得<xref:System.Reflection.Emit.PropertyBuilder>規格。</span><span class="sxs-lookup"><span data-stu-id="13e28-733">The following code sample demonstrates how to define a dynamic property and obtain a <xref:System.Reflection.Emit.PropertyBuilder> for specification.</span></span> <span data-ttu-id="13e28-734">請注意，`PropertyBuilder`也必須有對應<xref:System.Reflection.Emit.MethodBuilder>，其中會包含屬性的 IL 邏輯。</span><span class="sxs-lookup"><span data-stu-id="13e28-734">Note that a `PropertyBuilder` must also have a corresponding <xref:System.Reflection.Emit.MethodBuilder>, which will house the IL logic for the property.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-735"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-735">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-736"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-736"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="13e28-737">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-737">-or-</span></span> 
<span data-ttu-id="13e28-738"><paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-738">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-739">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-739">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="member this.DefineProperty : string * System.Reflection.PropertyAttributes * System.Reflection.CallingConventions * Type * Type[] -&gt; System.Reflection.Emit.PropertyBuilder" Usage="typeBuilder.DefineProperty (name, attributes, callingConvention, returnType, parameterTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-740">屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-740">The name of the property.</span></span> <span data-ttu-id="13e28-741"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-741"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-742">這個屬性 (Property) 的屬性 (Attribute)。</span><span class="sxs-lookup"><span data-stu-id="13e28-742">The attributes of the property.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="13e28-743">屬性存取子的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-743">The calling convention of the property accessors.</span></span></param>
        <param name="returnType"><span data-ttu-id="13e28-744">屬性的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-744">The return type of the property.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-745">屬性的參數類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-745">The types of the parameters of the property.</span></span></param>
        <summary><span data-ttu-id="13e28-746">將新屬性加入具有指定名稱、屬性、呼叫慣例和屬性簽章的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-746">Adds a new property to the type, with the given name, attributes, calling convention, and property signature.</span></span></summary>
        <returns><span data-ttu-id="13e28-747">定義的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-747">The defined property.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-748"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-748">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-749"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-749"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="13e28-750">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-750">-or-</span></span> 
<span data-ttu-id="13e28-751"><paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-751">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-752">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-752">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="F#" Value="member this.DefineProperty : string * System.Reflection.PropertyAttributes * Type * Type[] * Type[] * Type[] * Type[][] * Type[][] -&gt; System.Reflection.Emit.PropertyBuilder" Usage="typeBuilder.DefineProperty (name, attributes, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-753">屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-753">The name of the property.</span></span> <span data-ttu-id="13e28-754"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-754"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-755">這個屬性 (Property) 的屬性 (Attribute)。</span><span class="sxs-lookup"><span data-stu-id="13e28-755">The attributes of the property.</span></span></param>
        <param name="returnType"><span data-ttu-id="13e28-756">屬性的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-756">The return type of the property.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="13e28-757">代表該屬性傳回類型之必要自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-757">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="13e28-758">如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-758">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="13e28-759">代表該屬性傳回類型之選擇性自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-759">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="13e28-760">如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-760">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-761">屬性的參數類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-761">The types of the parameters of the property.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="13e28-762">類型陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-762">An array of arrays of types.</span></span> <span data-ttu-id="13e28-763">每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-763">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="13e28-764">如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-764">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="13e28-765">如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-765">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="13e28-766">類型陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-766">An array of arrays of types.</span></span> <span data-ttu-id="13e28-767">每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-767">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="13e28-768">如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-768">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="13e28-769">如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-769">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="13e28-770">將新屬性加入具有指定名稱、屬性簽章和自訂修飾詞的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-770">Adds a new property to the type, with the given name, property signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="13e28-771">定義的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-771">The defined property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-772">這個多載可供設計工具的 managed 編譯器。</span><span class="sxs-lookup"><span data-stu-id="13e28-772">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-773">如需有關自訂修飾詞的詳細資訊，請參閱 ECMA 分割 II 中繼資料文件。</span><span class="sxs-lookup"><span data-stu-id="13e28-773">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="13e28-774">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="13e28-774">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-775"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-775">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-776"><paramref name="name" /> 是 <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="13e28-776"><paramref name="name" /> is <see langword="null" /></span></span>  
  
<span data-ttu-id="13e28-777">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-777">-or-</span></span> 
<span data-ttu-id="13e28-778"><paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-778">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" /></span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-779">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-779">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineProperty (name As String, attributes As PropertyAttributes, callingConvention As CallingConventions, returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()()) As PropertyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::PropertyBuilder ^ DefineProperty(System::String ^ name, System::Reflection::PropertyAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="F#" Value="member this.DefineProperty : string * System.Reflection.PropertyAttributes * System.Reflection.CallingConventions * Type * Type[] * Type[] * Type[] * Type[][] * Type[][] -&gt; System.Reflection.Emit.PropertyBuilder" Usage="typeBuilder.DefineProperty (name, attributes, callingConvention, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.PropertyAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-780">屬性的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-780">The name of the property.</span></span> <span data-ttu-id="13e28-781"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-781"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-782">這個屬性 (Property) 的屬性 (Attribute)。</span><span class="sxs-lookup"><span data-stu-id="13e28-782">The attributes of the property.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="13e28-783">屬性存取子的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="13e28-783">The calling convention of the property accessors.</span></span></param>
        <param name="returnType"><span data-ttu-id="13e28-784">屬性的傳回型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-784">The return type of the property.</span></span></param>
        <param name="returnTypeRequiredCustomModifiers"><span data-ttu-id="13e28-785">代表該屬性傳回類型之必要自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-785">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="13e28-786">如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-786">If the return type has no required custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="returnTypeOptionalCustomModifiers"><span data-ttu-id="13e28-787">代表該屬性傳回類型之選擇性自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-787">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the property.</span></span> <span data-ttu-id="13e28-788">如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-788">If the return type has no optional custom modifiers, specify <see langword="null" />.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="13e28-789">屬性的參數類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-789">The types of the parameters of the property.</span></span></param>
        <param name="parameterTypeRequiredCustomModifiers"><span data-ttu-id="13e28-790">類型陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-790">An array of arrays of types.</span></span> <span data-ttu-id="13e28-791">每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-791">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="13e28-792">如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-792">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="13e28-793">如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-793">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <param name="parameterTypeOptionalCustomModifiers"><span data-ttu-id="13e28-794">類型陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-794">An array of arrays of types.</span></span> <span data-ttu-id="13e28-795">每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-795">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span></span> <span data-ttu-id="13e28-796">如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-796">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span></span> <span data-ttu-id="13e28-797">如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-797">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span></span></param>
        <summary><span data-ttu-id="13e28-798">將新屬性加入具有指定名稱、呼叫慣例、屬性簽章和自訂修飾詞的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-798">Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.</span></span></summary>
        <returns><span data-ttu-id="13e28-799">定義的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-799">The defined property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-800">這個多載可供設計工具的 managed 編譯器。</span><span class="sxs-lookup"><span data-stu-id="13e28-800">This overload is provided for designers of managed compilers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-801">如需有關自訂修飾詞的詳細資訊，請參閱 ECMA 分割 II 中繼資料文件。</span><span class="sxs-lookup"><span data-stu-id="13e28-801">For more information on custom modifiers, see the ECMA Partition II Metadata documentation.</span></span> <span data-ttu-id="13e28-802">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="13e28-802">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="13e28-803">中引進這個方法多載[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]或更新版本。</span><span class="sxs-lookup"><span data-stu-id="13e28-803">This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-804"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-804">The length of <paramref name="name" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-805"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-805"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="13e28-806">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-806">-or-</span></span> 
<span data-ttu-id="13e28-807"><paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-807">Any of the elements of the <paramref name="parameterTypes" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-808">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-808">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineTypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineTypeInitializer () As ConstructorBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ConstructorBuilder ^ DefineTypeInitializer();" />
      <MemberSignature Language="F#" Value="member this.DefineTypeInitializer : unit -&gt; System.Reflection.Emit.ConstructorBuilder" Usage="typeBuilder.DefineTypeInitializer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ConstructorBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-809">定義這個類型的初始設定式。</span><span class="sxs-lookup"><span data-stu-id="13e28-809">Defines the initializer for this type.</span></span></summary>
        <returns><span data-ttu-id="13e28-810">傳回類型初始設定式。</span><span class="sxs-lookup"><span data-stu-id="13e28-810">Returns a type initializer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-811">建立初始設定式一定是公用的。</span><span class="sxs-lookup"><span data-stu-id="13e28-811">The initializer created is always public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-812">下列程式碼範例示範如何建立並初始化建構函式使用`DefineTypeInitializer`。</span><span class="sxs-lookup"><span data-stu-id="13e28-812">The following code sample demonstrates how to create an initialization constructor using `DefineTypeInitializer`.</span></span>  
  
 [!code-cpp[TypeBuilder_Properties1#3](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Properties1/CPP/typebuilder_properties.cpp#3)]
 [!code-csharp[TypeBuilder_Properties1#3](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Properties1/CS/typebuilder_properties.cs#3)]
 [!code-vb[TypeBuilder_Properties1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Properties1/VB/typebuilder_properties.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-813">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-813">The containing type has been previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineUninitializedData">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineUninitializedData (string name, int size, System.Reflection.FieldAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineUninitializedData(string name, int32 size, valuetype System.Reflection.FieldAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineUninitializedData (name As String, size As Integer, attributes As FieldAttributes) As FieldBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineUninitializedData(System::String ^ name, int size, System::Reflection::FieldAttributes attributes);" />
      <MemberSignature Language="F#" Value="member this.DefineUninitializedData : string * int * System.Reflection.FieldAttributes -&gt; System.Reflection.Emit.FieldBuilder" Usage="typeBuilder.DefineUninitializedData (name, size, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.FieldAttributes" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-814">用來參考資料的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-814">The name used to refer to the data.</span></span> <span data-ttu-id="13e28-815"><paramref name="name" /> 不能包含內嵌的 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-815"><paramref name="name" /> cannot contain embedded nulls.</span></span></param>
        <param name="size"><span data-ttu-id="13e28-816">資料欄位的大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-816">The size of the data field.</span></span></param>
        <param name="attributes"><span data-ttu-id="13e28-817">欄位的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-817">The attributes for the field.</span></span></param>
        <summary><span data-ttu-id="13e28-818">在可攜式執行檔 (PE) 的 <see langword=".sdata" /> 區段中定義未初始化的資料欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-818">Defines an uninitialized data field in the <see langword=".sdata" /> section of the portable executable (PE) file.</span></span></summary>
        <returns><span data-ttu-id="13e28-819">要參考資料的欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-819">A field to reference the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-820">您使用這個方法所建立的欄位會`static`，即使您未包含`FieldAttributes.Static`在`attributes`參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-820">The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-821">下列程式碼範例示範如何使用`DefineUninitializedData`動態類型中建立未初始化的資料欄位：</span><span class="sxs-lookup"><span data-stu-id="13e28-821">The following code sample demonstrates the use of `DefineUninitializedData` to create an uninitialized data field in a dynamic type:</span></span>  
  
 [!code-cpp[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/CPP/typebuilder_defineuninitializeddata.cpp#1)]
 [!code-csharp[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/CS/typebuilder_defineuninitializeddata.cs#1)]
 [!code-vb[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/VB/typebuilder_defineuninitializeddata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-822"><paramref name="name" /> 的長度為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-822">Length of <paramref name="name" /> is zero.</span></span>  
  
<span data-ttu-id="13e28-823">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-823">-or-</span></span> 
 <span data-ttu-id="13e28-824"><paramref name="size" /> 小於或等於零，或者大於或等於 0x003f0000。</span><span class="sxs-lookup"><span data-stu-id="13e28-824"><paramref name="size" /> is less than or equal to zero, or greater than or equal to 0x003f0000.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-825"><paramref name="name" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-825"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-826">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-826">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Reflection.Emit.TypeBuilder.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-827">擷取這個類型的完整路徑。</span><span class="sxs-lookup"><span data-stu-id="13e28-827">Retrieves the full path of this type.</span></span></summary>
        <value><span data-ttu-id="13e28-828">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-828">Read-only.</span></span> <span data-ttu-id="13e28-829">擷取這個類型的完整路徑。</span><span class="sxs-lookup"><span data-stu-id="13e28-829">Retrieves the full path of this type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-830">傳回的格式為"enclosingTypeFullName + nestedTypeName"巢狀型別與非巢狀類型的 「 類型名稱 」。</span><span class="sxs-lookup"><span data-stu-id="13e28-830">The returned format is "enclosingTypeFullName+nestedTypeName" for nested types and "typeName" for non-nested types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterAttributes : System.Reflection.GenericParameterAttributes" Usage="System.Reflection.Emit.TypeBuilder.GenericParameterAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-831">取得值，指出目前泛型類型參數的共變數與特殊條件約束。</span><span class="sxs-lookup"><span data-stu-id="13e28-831">Gets a value that indicates the covariance and special constraints of the current generic type parameter.</span></span></summary>
        <value><span data-ttu-id="13e28-832"><see cref="T:System.Reflection.GenericParameterAttributes" /> 值的位元組合，描述目前泛型型別參數的共變數和特殊條件約束。</span><span class="sxs-lookup"><span data-stu-id="13e28-832">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="13e28-833">當發出程式碼，表示泛型類型參數<xref:System.Reflection.Emit.GenericTypeParameterBuilder>物件而非以<xref:System.Reflection.Emit.TypeBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-833">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public override int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterPosition : int" Usage="System.Reflection.Emit.TypeBuilder.GenericParameterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-834">取得類型參數在宣告參數的泛型類型之類型參數清單中的位置。</span><span class="sxs-lookup"><span data-stu-id="13e28-834">Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.</span></span></summary>
        <value><span data-ttu-id="13e28-835">當目前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件表示泛型類型參數時，在宣告參數的泛型類型之類型參數清單中，類型參數的位置：否則為未定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-835">If the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="13e28-836">當發出程式碼，表示泛型類型參數<xref:System.Reflection.Emit.GenericTypeParameterBuilder>物件而非以<xref:System.Reflection.Emit.TypeBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-836">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="13e28-837">如果目前<xref:System.Reflection.Emit.TypeBuilder>不代表泛型類型參數，這個屬性的值會是未定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-837">If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent a generic type parameter, the value of this property is undefined.</span></span> <span data-ttu-id="13e28-838">使用<xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A>屬性來判斷是否目前<xref:System.Reflection.Emit.TypeBuilder>代表泛型類型參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-838">Use the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property to determine whether the current <xref:System.Reflection.Emit.TypeBuilder> represents a generic type parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public override Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericTypeArguments : Type[]" Usage="System.Reflection.Emit.TypeBuilder.GenericTypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public override int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetArrayRank();" />
      <MemberSignature Language="F#" Value="override this.GetArrayRank : unit -&gt; int" Usage="typeBuilder.GetArrayRank " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberSignature Language="F#" Value="override this.GetAttributeFlagsImpl : unit -&gt; System.Reflection.TypeAttributes" Usage="typeBuilder.GetAttributeFlagsImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public static System.Reflection.ConstructorInfo GetConstructor (Type type, System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.ConstructorInfo GetConstructor(class System.Type type, class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::ConstructorInfo ^ GetConstructor(Type ^ type, System::Reflection::ConstructorInfo ^ constructor);" />
      <MemberSignature Language="F#" Value="static member GetConstructor : Type * System.Reflection.ConstructorInfo -&gt; System.Reflection.ConstructorInfo" Usage="System.Reflection.Emit.TypeBuilder.GetConstructor (type, constructor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="13e28-839">傳回的是建構泛型類型的建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-839">The constructed generic type whose constructor is returned.</span></span></param>
        <param name="constructor"><span data-ttu-id="13e28-840">指定要傳回哪個 <paramref name="type" /> 建構函式 <paramref name="type" /> 之泛型類型定義的建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-840">A constructor on the generic type definition of <paramref name="type" />, which specifies which constructor of <paramref name="type" /> to return.</span></span></param>
        <summary><span data-ttu-id="13e28-841">傳回指定建構泛型類型的建構函式，其對應於泛型類型定義的指定建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-841">Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.</span></span></summary>
        <returns><span data-ttu-id="13e28-842">表示對應 <paramref name="constructor" /> (其指定屬於 <paramref name="type" /> 泛型類型定義的建構函式) 的 <paramref name="type" /> 建構函式的 <see cref="T:System.Reflection.ConstructorInfo" /> 物件，。</span><span class="sxs-lookup"><span data-stu-id="13e28-842">A <see cref="T:System.Reflection.ConstructorInfo" /> object that represents the constructor of <paramref name="type" /> corresponding to <paramref name="constructor" />, which specifies a constructor belonging to the generic type definition of <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-843"><xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A>方法可用來取得<xref:System.Reflection.ConstructorInfo>物件，表示建構的泛型類型所代表的泛型型別定義的建構函式<xref:System.Reflection.Emit.TypeBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-843">The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method provides a way to get a <xref:System.Reflection.ConstructorInfo> object that represents a constructor of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="13e28-844">比方說，假設您有<xref:System.Reflection.Emit.TypeBuilder>物件，表示型別`G<T>`C# 語法 (`G(Of T)`在 Visual Basic 中`generic <T> ref class G`在 c + +) 和<xref:System.Reflection.Emit.ConstructorBuilder>表示的建構函式物件`G<T>`。</span><span class="sxs-lookup"><span data-stu-id="13e28-844">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.ConstructorBuilder> object that represents a constructor of `G<T>`.</span></span> <span data-ttu-id="13e28-845">假設`G<T>`具有泛型方法的型別參數`U`來建立建構類型的執行個體`G<U>`。</span><span class="sxs-lookup"><span data-stu-id="13e28-845">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>`.</span></span> <span data-ttu-id="13e28-846">若要發出的程式碼，以建立建構類型的執行個體，您必須<xref:System.Reflection.ConstructorInfo>物件，亦即，表示這個建構的類型-的建構函式所建立的執行個體`G<U>`。</span><span class="sxs-lookup"><span data-stu-id="13e28-846">In order to emit the code to create an instance of the constructed type, you need a <xref:System.Reflection.ConstructorInfo> object that represents the constructor of this constructed type - in other words, that creates an instance of `G<U>`.</span></span> <span data-ttu-id="13e28-847">若要這樣做，請先呼叫<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法<xref:System.Reflection.Emit.TypeBuilder>物件，指定<xref:System.Reflection.Emit.GenericTypeParameterBuilder>物件，表示`U`作為類型引數。</span><span class="sxs-lookup"><span data-stu-id="13e28-847">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="13e28-848">然後呼叫<xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A>方法的傳回值<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法做為參數`type`並<xref:System.Reflection.Emit.ConstructorBuilder>表示的建構函式物件`G<U>`做為參數`constructor`。</span><span class="sxs-lookup"><span data-stu-id="13e28-848">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.ConstructorBuilder> object that represents the constructor of `G<U>` as parameter `constructor`.</span></span> <span data-ttu-id="13e28-849">傳回值是<xref:System.Reflection.ConstructorInfo>物件要發出的函式呼叫。</span><span class="sxs-lookup"><span data-stu-id="13e28-849">The return value is the <xref:System.Reflection.ConstructorInfo> object you need to emit the function call.</span></span> <span data-ttu-id="13e28-850">在程式碼範例示範此案例。</span><span class="sxs-lookup"><span data-stu-id="13e28-850">The code example demonstrates this scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-851">下列程式碼範例包含名為泛用類別的原始程式碼`Sample`具有名為的型別參數`T`。</span><span class="sxs-lookup"><span data-stu-id="13e28-851">The following code example contains source code for a generic class named `Sample` that has a type parameter named `T`.</span></span> <span data-ttu-id="13e28-852">類別具有名為欄位`Field`，型別的`T`，和名為泛型方法`GM`它自己的型別參數，名為`U`。</span><span class="sxs-lookup"><span data-stu-id="13e28-852">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="13e28-853">方法`GM`建立的執行個體`Sample`，以取代它自己的型別參數`U`的型別參數`Sample`，並將其輸入的參數中`Field`。</span><span class="sxs-lookup"><span data-stu-id="13e28-853">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="13e28-854">這段原始程式碼已編譯，但未使用;您可以檢視與其[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)以及其與類別所發出的程式碼`Example`。</span><span class="sxs-lookup"><span data-stu-id="13e28-854">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="13e28-855">類別中的程式碼`Example`示範如何使用<xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A>發出泛型的程式碼的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-855">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method to emit generic code.</span></span> <span data-ttu-id="13e28-856">`Main`類別的方法`Example`會建立動態組件包含類別，名為`Sample`並用<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>方法，以使它成為泛型藉由新增名為的型別參數`T`。</span><span class="sxs-lookup"><span data-stu-id="13e28-856">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample` and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="13e28-857">預設建構函式和一個名為欄位`Field`，型別的`T`，加入至類別`Sample`。</span><span class="sxs-lookup"><span data-stu-id="13e28-857">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="13e28-858">一種方法`GM`加入，並變成泛型的方法，使用<xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-858">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="13e28-859">型別參數`GM`名為`U`。</span><span class="sxs-lookup"><span data-stu-id="13e28-859">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="13e28-860">定義型別參數之後，簽章`GM`加入使用<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-860">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="13e28-861">沒有任何傳回的型別和不必要或自訂修飾詞，這個方法讓所有的參數是`null`除了`parameterTypes`;`parameterTypes`設定方法的唯一參數的型別`U`，方法的泛型型別參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-861">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="13e28-862">方法的主體會建立建構類型的執行個體`Sample<U>`(`Sample(Of U)` Visual Basic 中)，將指派方法的參數`Field`，然後列印的值`Field`。</span><span class="sxs-lookup"><span data-stu-id="13e28-862">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="13e28-863"><xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A>方法用來建立<xref:System.Reflection.ConstructorInfo>表示建構的泛型類型的預設建構函式`Sample<U>`在<xref:System.Reflection.Emit.OpCodes.Newobj?displayProperty=nameWithType>建立執行個體的指示。</span><span class="sxs-lookup"><span data-stu-id="13e28-863">The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method is used to create a <xref:System.Reflection.ConstructorInfo> that represents the default constructor of the constructed generic type `Sample<U>` in the <xref:System.Reflection.Emit.OpCodes.Newobj?displayProperty=nameWithType> instruction that creates the instance.</span></span>  
  
 <span data-ttu-id="13e28-864">空的型別定義為保留的進入點方法`Main`。</span><span class="sxs-lookup"><span data-stu-id="13e28-864">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="13e28-865">本文中`Main`，靜態`GM`建構的泛型型別上叫用方法`Sample<int>`(`Sample(Of Integer)` Visual Basic 中)，與型別<xref:System.String>替代`U`。</span><span class="sxs-lookup"><span data-stu-id="13e28-865">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span>  
  
 <span data-ttu-id="13e28-866">執行程式碼範例時，它會將發出的組件儲存為 TypeBuilderGetFieldExample.exe 中。</span><span class="sxs-lookup"><span data-stu-id="13e28-866">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="13e28-867">您可以執行 TypeBuilderGetFieldExample.exe，而且您可以使用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)比較發出的程式碼的程式碼與`Sample`編譯成本身的程式碼範例的類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-867">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-868"><paramref name="type" /> 不代表泛型類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-868"><paramref name="type" /> does not represent a generic type.</span></span>  
  
<span data-ttu-id="13e28-869">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-869">-or-</span></span> 
 <span data-ttu-id="13e28-870"><paramref name="type" /> 不是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-870"><paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
<span data-ttu-id="13e28-871">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-871">-or-</span></span> 
<span data-ttu-id="13e28-872"><paramref name="constructor" /> 的宣告類型不是泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-872">The declaring type of <paramref name="constructor" /> is not a generic type definition.</span></span>  
  
<span data-ttu-id="13e28-873">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-873">-or-</span></span> 
<span data-ttu-id="13e28-874"><paramref name="constructor" /> 的宣告類型不是 <paramref name="type" /> 的泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-874">The declaring type of <paramref name="constructor" /> is not the generic type definition of <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetConstructorImpl : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="typeBuilder.GetConstructorImpl (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="typeBuilder.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="13e28-875">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</span><span class="sxs-lookup"><span data-stu-id="13e28-875">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="13e28-876">依指定傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為這個類別所定義的公用和非公用建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-876">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the public and non-public constructors defined for this class, as specified.</span></span></summary>
        <returns><span data-ttu-id="13e28-877">傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為這個類別所定義的指定建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-877">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the specified constructors defined for this class.</span></span> <span data-ttu-id="13e28-878">如果未定義建構函式，則會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-878">If no constructors are defined, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-879">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-879">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-880">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-880">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-881">傳回為這個類型定義的自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-881">Returns the custom attributes defined for this type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="typeBuilder.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="13e28-882">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-882">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="13e28-883">傳回為這個類型定義的所有自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-883">Returns all the custom attributes defined for this type.</span></span></summary>
        <returns><span data-ttu-id="13e28-884">傳回代表這個類型的所有自訂屬性的物件陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-884">Returns an array of objects representing all the custom attributes of this type.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-885">這個方法目前不支援不完整的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-885">This method is not currently supported for incomplete types.</span></span> <span data-ttu-id="13e28-886">使用 <see cref="M:System.Type.GetType" /> 擷取類型，並在傳回的 <see cref="T:System.Type" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-886">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="typeBuilder.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="13e28-887">要搜尋的屬性類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-887">The type of attribute to search for.</span></span> <span data-ttu-id="13e28-888">只會傳回可指派給這種類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-888">Only attributes that are assignable to this type are returned.</span></span></param>
        <param name="inherit"><span data-ttu-id="13e28-889">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-889">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="13e28-890">傳回可指派給指定類型之目前類型的所有自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-890">Returns all the custom attributes of the current type that are assignable to a specified type.</span></span></summary>
        <returns><span data-ttu-id="13e28-891">在目前類型上定義的自訂屬性陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-891">An array of custom attributes defined on the current type.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-892">這個方法目前不支援不完整的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-892">This method is not currently supported for incomplete types.</span></span> <span data-ttu-id="13e28-893">使用 <see cref="M:System.Type.GetType" /> 擷取類型，並在傳回的 <see cref="T:System.Type" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-893">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-894"><paramref name="attributeType" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-894"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-895">類型必須是基礎執行階段系統所提供的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-895">The type must be a type provided by the underlying runtime system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public override Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="override this.GetElementType : unit -&gt; Type" Usage="typeBuilder.GetElementType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-896">呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-896">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="13e28-897">不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-897">This method is not supported.</span></span> <span data-ttu-id="13e28-898">沒有傳回值。</span><span class="sxs-lookup"><span data-stu-id="13e28-898">No value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-899">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-899">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-900">不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-900">This method is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="typeBuilder.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-901">要搜尋的事件名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-901">The name of the event to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="13e28-902">限制搜尋範圍之 <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</span><span class="sxs-lookup"><span data-stu-id="13e28-902">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limits the search.</span></span></param>
        <summary><span data-ttu-id="13e28-903">傳回具有指定名稱的事件。</span><span class="sxs-lookup"><span data-stu-id="13e28-903">Returns the event with the specified name.</span></span></summary>
        <returns><span data-ttu-id="13e28-904"><see cref="T:System.Reflection.EventInfo" /> 物件，代表這個類型所宣告或繼承之具有指定名稱的事件；如果沒有相符的項目，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-904">An <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name, or <see langword="null" /> if there are no matches.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-905">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-905">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-906">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-906">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-907">傳回目前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 所定義的事件。</span><span class="sxs-lookup"><span data-stu-id="13e28-907">Returns the events defined by the current <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="override this.GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="typeBuilder.GetEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-908">傳回由這個方法所宣告或繼承的公用事件。</span><span class="sxs-lookup"><span data-stu-id="13e28-908">Returns the public events declared or inherited by this type.</span></span></summary>
        <returns><span data-ttu-id="13e28-909">傳回 <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用事件。</span><span class="sxs-lookup"><span data-stu-id="13e28-909">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public events declared or inherited by this type.</span></span> <span data-ttu-id="13e28-910">如果沒有任何公用事件，則會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-910">An empty array is returned if there are no public events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-911">擷取型別使用<xref:System.Type.GetType%2A>或<xref:System.Reflection.Assembly.GetType%2A>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-911">Retrieve the type using <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-912">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-912">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="typeBuilder.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="13e28-913">限制搜尋範圍之 <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</span><span class="sxs-lookup"><span data-stu-id="13e28-913">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values that limits the search.</span></span></param>
        <summary><span data-ttu-id="13e28-914">傳回這個類型所宣告的公用和非公用事件。</span><span class="sxs-lookup"><span data-stu-id="13e28-914">Returns the public and non-public events that are declared by this type.</span></span></summary>
        <returns><span data-ttu-id="13e28-915">傳回 <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表符合指定繫結旗標的這個類型所宣告或繼承的事件。</span><span class="sxs-lookup"><span data-stu-id="13e28-915">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the events declared or inherited by this type that match the specified binding flags.</span></span> <span data-ttu-id="13e28-916">如果沒有任何事件符合，則會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-916">An empty array is returned if there are no matching events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-917">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-917">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-918">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-918">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-919">傳回目前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 所定義的欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-919">Returns a field defined by the current <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="typeBuilder.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-920">要取得的欄位名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-920">The name of the field to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="13e28-921">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</span><span class="sxs-lookup"><span data-stu-id="13e28-921">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="13e28-922">傳回指定之名稱所指定的欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-922">Returns the field specified by the given name.</span></span></summary>
        <returns><span data-ttu-id="13e28-923">傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件，代表此類別所宣告或繼承的欄位，並且具有指定的名稱和公用或非公用的修飾詞。</span><span class="sxs-lookup"><span data-stu-id="13e28-923">Returns the <see cref="T:System.Reflection.FieldInfo" /> object representing the field declared or inherited by this type with the specified name and public or non-public modifier.</span></span> <span data-ttu-id="13e28-924">如果沒有符合項目，會傳回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-924">If there are no matches then <see langword="null" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-925">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-925">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-926">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-926">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetField (Type type, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetField(class System.Type type, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::FieldInfo ^ GetField(Type ^ type, System::Reflection::FieldInfo ^ field);" />
      <MemberSignature Language="F#" Value="static member GetField : Type * System.Reflection.FieldInfo -&gt; System.Reflection.FieldInfo" Usage="System.Reflection.Emit.TypeBuilder.GetField (type, field)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="13e28-927">傳回欄位的建構泛型類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-927">The constructed generic type whose field is returned.</span></span></param>
        <param name="field"><span data-ttu-id="13e28-928">有關 <paramref name="type" /> 的泛型類型定義欄位，指定要傳回的 <paramref name="type" /> 欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-928">A field on the generic type definition of <paramref name="type" />, which specifies which field of <paramref name="type" /> to return.</span></span></param>
        <summary><span data-ttu-id="13e28-929">傳回對應至泛型類型定義指定欄位的指定建構泛型類型的欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-929">Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.</span></span></summary>
        <returns><span data-ttu-id="13e28-930">代表對應 <paramref name="field" /> (其指定屬於 <paramref name="type" /> 泛型類型定義的欄位) 的 <paramref name="type" /> 欄位的 <see cref="T:System.Reflection.FieldInfo" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-930">A <see cref="T:System.Reflection.FieldInfo" /> object that represents the field of <paramref name="type" /> corresponding to <paramref name="field" />, which specifies a field belonging to the generic type definition of <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-931"><xref:System.Reflection.Emit.TypeBuilder.GetField%2A>方法可用來取得<xref:System.Reflection.FieldInfo>物件，表示建構的泛型類型所代表的泛型型別定義的欄位<xref:System.Reflection.Emit.TypeBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-931">The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method provides a way to get a <xref:System.Reflection.FieldInfo> object that represents a field of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="13e28-932">比方說，假設您有<xref:System.Reflection.Emit.TypeBuilder>物件，表示型別`G<T>`C# 語法 (`G(Of T)`在 Visual Basic 中`generic <T> ref class G`在 c + +) 和<xref:System.Reflection.Emit.FieldBuilder>物件，表示欄位`public T F`C# 語法 (`Public F As T`在 Visual Basic `public: T F` c + + 中)，由定義`G<T>`。</span><span class="sxs-lookup"><span data-stu-id="13e28-932">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.FieldBuilder> object that represents a field `public T F` in C# syntax (`Public F As T` in Visual Basic, `public: T F` in C++) that is defined by `G<T>`.</span></span> <span data-ttu-id="13e28-933">假設`G<T>`具有泛型方法的型別參數`U`來建立建構類型的執行個體`G<U>`和 [呼叫] 欄位`F`該執行個體上。</span><span class="sxs-lookup"><span data-stu-id="13e28-933">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls field `F` on that instance.</span></span> <span data-ttu-id="13e28-934">若要發出的函式呼叫，您必須<xref:System.Reflection.FieldInfo>物件，表示`F`建構的類型-換句話說，這是型別的`U`而不是型別`T`。</span><span class="sxs-lookup"><span data-stu-id="13e28-934">In order to emit the function call, you need a <xref:System.Reflection.FieldInfo> object that represents `F` on the constructed type - in other words, that is of type `U` rather than type `T`.</span></span> <span data-ttu-id="13e28-935">若要這樣做，請先呼叫<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法<xref:System.Reflection.Emit.TypeBuilder>物件，指定<xref:System.Reflection.Emit.GenericTypeParameterBuilder>物件，表示`U`作為類型引數。</span><span class="sxs-lookup"><span data-stu-id="13e28-935">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="13e28-936">然後呼叫<xref:System.Reflection.Emit.TypeBuilder.GetField%2A>方法的傳回值<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法做為參數`type`並<xref:System.Reflection.Emit.FieldBuilder>物件，表示`F`做為參數`field`。</span><span class="sxs-lookup"><span data-stu-id="13e28-936">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.FieldBuilder> object that represents `F` as parameter `field`.</span></span> <span data-ttu-id="13e28-937">傳回值是<xref:System.Reflection.FieldInfo>物件要發出的函式呼叫。</span><span class="sxs-lookup"><span data-stu-id="13e28-937">The return value is the <xref:System.Reflection.FieldInfo> object you need to emit the function call.</span></span> <span data-ttu-id="13e28-938">在程式碼範例示範此案例。</span><span class="sxs-lookup"><span data-stu-id="13e28-938">The code example demonstrates this scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-939">下列程式碼範例包含名為範例具有名為的型別參數的泛型類別的原始程式碼`T`。</span><span class="sxs-lookup"><span data-stu-id="13e28-939">The following code example contains source code for a generic class named Sample that has a type parameter named `T`.</span></span> <span data-ttu-id="13e28-940">類別具有名為欄位`Field`，型別的`T`，和名為泛型方法`GM`它自己的型別參數，名為`U`。</span><span class="sxs-lookup"><span data-stu-id="13e28-940">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="13e28-941">方法`GM`建立的執行個體`Sample`，以取代它自己的型別參數`U`的型別參數`Sample`，並將其輸入的參數中`Field`。</span><span class="sxs-lookup"><span data-stu-id="13e28-941">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="13e28-942">這段原始程式碼已編譯，但未使用;您可以檢視與其[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)以及其與類別所發出的程式碼`Example`。</span><span class="sxs-lookup"><span data-stu-id="13e28-942">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="13e28-943">類別中的程式碼`Example`示範如何使用<xref:System.Reflection.Emit.TypeBuilder.GetField%2A>發出泛型的程式碼的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-943">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method to emit generic code.</span></span> <span data-ttu-id="13e28-944">`Main`類別的方法`Example`會建立動態組件包含類別，名為`Sample`，並使用<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>方法，以使它成為泛型藉由新增名為的型別參數`T`。</span><span class="sxs-lookup"><span data-stu-id="13e28-944">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample`, and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="13e28-945">預設建構函式和一個名為欄位`Field`，型別的`T`，加入至類別`Sample`。</span><span class="sxs-lookup"><span data-stu-id="13e28-945">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="13e28-946">一種方法`GM`加入，並變成泛型的方法，使用<xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-946">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="13e28-947">型別參數`GM`名為`U`。</span><span class="sxs-lookup"><span data-stu-id="13e28-947">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="13e28-948">定義型別參數之後，簽章`GM`加入使用<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-948">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="13e28-949">沒有任何傳回的型別和不必要或自訂修飾詞，這個方法讓所有的參數是`null`除了`parameterTypes`;`parameterTypes`設定方法的唯一參數的型別`U`，方法的泛型型別參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-949">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="13e28-950">方法的主體會建立建構類型的執行個體`Sample<U>`(`Sample(Of U)` Visual Basic 中)，將指派方法的參數`Field`，然後列印的值`Field`。</span><span class="sxs-lookup"><span data-stu-id="13e28-950">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="13e28-951"><xref:System.Reflection.Emit.TypeBuilder.GetField%2A>方法用來建立<xref:System.Reflection.FieldInfo>表示建構的泛型類型的欄位`Sample<U>`中<xref:System.Reflection.Emit.OpCodes.Stfld?displayProperty=nameWithType>和<xref:System.Reflection.Emit.OpCodes.Ldfld?displayProperty=nameWithType>指示。</span><span class="sxs-lookup"><span data-stu-id="13e28-951">The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method is used to create a <xref:System.Reflection.FieldInfo> that represents the field of the constructed generic type `Sample<U>` in the <xref:System.Reflection.Emit.OpCodes.Stfld?displayProperty=nameWithType> and <xref:System.Reflection.Emit.OpCodes.Ldfld?displayProperty=nameWithType> instructions.</span></span>  
  
 <span data-ttu-id="13e28-952">空的型別定義為保留的進入點方法`Main`。</span><span class="sxs-lookup"><span data-stu-id="13e28-952">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="13e28-953">本文中`Main`，靜態`GM`建構的泛型型別上叫用方法`Sample<int>`(`Sample(Of Integer)` Visual Basic 中)，與型別<xref:System.String>替代`U`。</span><span class="sxs-lookup"><span data-stu-id="13e28-953">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span>  
  
 <span data-ttu-id="13e28-954">執行程式碼範例時，它會將發出的組件儲存為 TypeBuilderGetFieldExample.exe 中。</span><span class="sxs-lookup"><span data-stu-id="13e28-954">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="13e28-955">您可以執行 TypeBuilderGetFieldExample.exe，而且您可以使用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)比較發出的程式碼的程式碼與`Sample`編譯成本身的程式碼範例的類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-955">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-956"><paramref name="type" /> 不代表泛型類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-956"><paramref name="type" /> does not represent a generic type.</span></span>  
  
<span data-ttu-id="13e28-957">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-957">-or-</span></span> 
 <span data-ttu-id="13e28-958"><paramref name="type" /> 不是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-958"><paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
<span data-ttu-id="13e28-959">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-959">-or-</span></span> 
<span data-ttu-id="13e28-960"><paramref name="field" /> 的宣告類型不是泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-960">The declaring type of <paramref name="field" /> is not a generic type definition.</span></span>  
  
<span data-ttu-id="13e28-961">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-961">-or-</span></span> 
<span data-ttu-id="13e28-962"><paramref name="field" /> 的宣告類型不是 <paramref name="type" /> 的泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-962">The declaring type of <paramref name="field" /> is not the generic type definition of <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="typeBuilder.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="13e28-963">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 諸如此類。</span><span class="sxs-lookup"><span data-stu-id="13e28-963">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="13e28-964">傳回這個類型所宣告的公用和非公用欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-964">Returns the public and non-public fields that are declared by this type.</span></span></summary>
        <returns><span data-ttu-id="13e28-965">傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-965">Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the public and non-public fields declared or inherited by this type.</span></span> <span data-ttu-id="13e28-966">依指定，如果沒有的任何欄位，則會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-966">An empty array is returned if there are no fields, as specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-967"><xref:System.Reflection.Emit.TypeBuilder.GetFields%2A>方法不會傳回欄位以特定順序，例如依字母順序或依宣告順序。</span><span class="sxs-lookup"><span data-stu-id="13e28-967">The <xref:System.Reflection.Emit.TypeBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="13e28-968">您的程式碼不得相依於欄位會傳回的順序，由於該順序可能有所不同。</span><span class="sxs-lookup"><span data-stu-id="13e28-968">Your code must not depend on the order in which fields are returned, because that order can vary.</span></span>  
  
 <span data-ttu-id="13e28-969">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-969">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-970">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-970">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="override this.GetGenericArguments : unit -&gt; Type[]" Usage="typeBuilder.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-971">傳回 <see cref="T:System.Type" /> 物件的陣列，這些物件代表泛型類型的型別引數，或泛型類型定義的型別參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-971">Returns an array of <see cref="T:System.Type" /> objects representing the type arguments of a generic type or the type parameters of a generic type definition.</span></span></summary>
        <returns><span data-ttu-id="13e28-972"><see cref="T:System.Type" /> 物件的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-972">An array of <see cref="T:System.Type" /> objects.</span></span> <span data-ttu-id="13e28-973">陣列的項目代表泛型類型的型別引數，或泛型類型定義的型別參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-973">The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-974">傳回陣列中的項目會以其出現在清單中的泛型類型定義的型別參數的順序。</span><span class="sxs-lookup"><span data-stu-id="13e28-974">The elements of the returned array are in the order in which they appear in the list of type parameters for the generic type definition.</span></span>  
  
 <span data-ttu-id="13e28-975">A<xref:System.Reflection.Emit.TypeBuilder>物件代表泛型類型定義中，如果<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>已用來為它提供泛型類型參數的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-975">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="13e28-976">這個方法會擷取<xref:System.Reflection.Emit.GenericTypeParameterBuilder>代表的泛型類型參數的物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-976">This method retrieves the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects that represent the generic type parameters.</span></span>  
  
 <span data-ttu-id="13e28-977">如需有關反映和泛型反映中所使用的恆成立條件清單中的泛型類型的詳細資訊，請參閱<xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-977">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericArguments" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberSignature Language="F#" Value="override this.GetGenericParameterConstraints : unit -&gt; Type[]" Usage="typeBuilder.GetGenericParameterConstraints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetGenericTypeDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetGenericTypeDefinition : unit -&gt; Type" Usage="typeBuilder.GetGenericTypeDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-978">傳回 <see cref="T:System.Type" /> 物件，代表可從中取得目前類型的泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-978">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current type can be obtained.</span></span></summary>
        <returns><span data-ttu-id="13e28-979"><see cref="T:System.Type" /> 物件，代表可從中取得目前類型的泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-979">A <see cref="T:System.Type" /> object representing a generic type definition from which the current type can be obtained.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-980">如果您呼叫<xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A>方法<xref:System.Reflection.Emit.TypeBuilder>要為其物件<xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A>屬性會傳回`true`，則<xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A>屬性會傳回目前的執行個體。</span><span class="sxs-lookup"><span data-stu-id="13e28-980">If you call the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> object for which the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property returns `true`, the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> property returns the current instance.</span></span> <span data-ttu-id="13e28-981">A <xref:System.Reflection.Emit.TypeBuilder> ，代表泛型類型一律為泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-981">A <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type is always a generic type definition.</span></span>  
  
 <span data-ttu-id="13e28-982">如果您使用<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法來建構泛型型別<xref:System.Reflection.Emit.TypeBuilder>物件，代表泛型類型定義，使用<xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=nameWithType>建構的型別方法取回<xref:System.Reflection.Emit.TypeBuilder>物件，代表泛型型別定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-982">If you used the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method to construct a generic type from a <xref:System.Reflection.Emit.TypeBuilder> object that represents a generic type definition, using the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=nameWithType> method on the constructed type gets back the <xref:System.Reflection.Emit.TypeBuilder> object that represents the generic type definition.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-983">目前的類型不是泛型。</span><span class="sxs-lookup"><span data-stu-id="13e28-983">The current type is not generic.</span></span> <span data-ttu-id="13e28-984">亦即，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-984">That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> returns <see langword="false" />.</span></span></exception>
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public override Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="override this.GetInterface : string * bool -&gt; Type" Usage="typeBuilder.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-985">介面的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-985">The name of the interface.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="13e28-986">如果為 <see langword="true" />，搜尋不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="13e28-986">If <see langword="true" />, the search is case-insensitive.</span></span> <span data-ttu-id="13e28-987">如果為 <see langword="false" />，搜尋會區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="13e28-987">If <see langword="false" />, the search is case-sensitive.</span></span></param>
        <summary><span data-ttu-id="13e28-988">傳回此類別所 (直接或間接) 實作的介面，且完整格式名稱符合指定的介面名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-988">Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.</span></span></summary>
        <returns><span data-ttu-id="13e28-989">傳回 <see cref="T:System.Type" /> 物件，代表所實作的介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-989">Returns a <see cref="T:System.Type" /> object representing the implemented interface.</span></span> <span data-ttu-id="13e28-990">如果找不到符合名稱的介面，便傳回 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-990">Returns null if no interface matching name is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-991">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-991">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-992">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-992">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="override this.GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="typeBuilder.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="13e28-993">要為其擷取對應之介面的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-993">The <see cref="T:System.Type" /> of the interface for which the mapping is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="13e28-994">傳回所要求介面的介面對應。</span><span class="sxs-lookup"><span data-stu-id="13e28-994">Returns an interface mapping for the requested interface.</span></span></summary>
        <returns><span data-ttu-id="13e28-995">傳回要求的介面對應。</span><span class="sxs-lookup"><span data-stu-id="13e28-995">Returns the requested interface mapping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-996">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-996">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-997">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-997">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public override Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="override this.GetInterfaces : unit -&gt; Type[]" Usage="typeBuilder.GetInterfaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-998">傳回在這個類型及其基底類型上實作之所有介面的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-998">Returns an array of all the interfaces implemented on this type and its base types.</span></span></summary>
        <returns><span data-ttu-id="13e28-999">傳回 <see cref="T:System.Type" /> 物件的陣列，代表所實作的介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-999">Returns an array of <see cref="T:System.Type" /> objects representing the implemented interfaces.</span></span> <span data-ttu-id="13e28-1000">如果未定義，則會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-1000">If none are defined, an empty array is returned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="typeBuilder.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-1001">成員的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-1001">The name of the member.</span></span></param>
        <param name="type"><span data-ttu-id="13e28-1002">要傳回的成員類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1002">The type of the member to return.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="13e28-1003">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</span><span class="sxs-lookup"><span data-stu-id="13e28-1003">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="13e28-1004">依指定傳回此類型所宣告或繼承的所有公用和非公用成員。</span><span class="sxs-lookup"><span data-stu-id="13e28-1004">Returns all the public and non-public members declared or inherited by this type, as specified.</span></span></summary>
        <returns><span data-ttu-id="13e28-1005">傳回 <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用成員 ；否則只會傳回公用成員。</span><span class="sxs-lookup"><span data-stu-id="13e28-1005">Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public members are returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1006">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-1006">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1007">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1007">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="typeBuilder.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="13e28-1008">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</span><span class="sxs-lookup"><span data-stu-id="13e28-1008">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="13e28-1009">傳回這個類型所宣告或繼承的公用和非公用成員之成員。</span><span class="sxs-lookup"><span data-stu-id="13e28-1009">Returns the members for the public and non-public members declared or inherited by this type.</span></span></summary>
        <returns><span data-ttu-id="13e28-1010">傳回 <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用成員。</span><span class="sxs-lookup"><span data-stu-id="13e28-1010">Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members declared or inherited by this type.</span></span> <span data-ttu-id="13e28-1011">如果沒有任何成員符合，則會傳回空陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-1011">An empty array is returned if there are no matching members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1012">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-1012">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1013">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1013">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public static System.Reflection.MethodInfo GetMethod (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodInfo GetMethod(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::MethodInfo ^ GetMethod(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member GetMethod : Type * System.Reflection.MethodInfo -&gt; System.Reflection.MethodInfo" Usage="System.Reflection.Emit.TypeBuilder.GetMethod (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="13e28-1014">傳回方法的建構泛型類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-1014">The constructed generic type whose method is returned.</span></span></param>
        <param name="method"><span data-ttu-id="13e28-1015">有關 <paramref name="type" /> 的泛型類型定義方法，指定要傳回的 <paramref name="type" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1015">A method on the generic type definition of <paramref name="type" />, which specifies which method of <paramref name="type" /> to return.</span></span></param>
        <summary><span data-ttu-id="13e28-1016">傳回對應至泛型類型定義指定方法的指定建構泛型類型的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1016">Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.</span></span></summary>
        <returns><span data-ttu-id="13e28-1017">表示對應 <paramref name="method" /> (其指定屬於 <paramref name="type" /> 泛型類型定義的方法) 的 <paramref name="type" /> 方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1017">A <see cref="T:System.Reflection.MethodInfo" /> object that represents the method of <paramref name="type" /> corresponding to <paramref name="method" />, which specifies a method belonging to the generic type definition of <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1018"><xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A>方法可用來取得<xref:System.Reflection.MethodInfo>物件，表示建構的泛型類型所代表的泛型型別定義的方法<xref:System.Reflection.Emit.TypeBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1018">The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method provides a way to get a <xref:System.Reflection.MethodInfo> object that represents a method of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 <span data-ttu-id="13e28-1019">比方說，假設您有<xref:System.Reflection.Emit.TypeBuilder>物件，表示型別`G<T>`C# 語法 (`G(Of T)`在 Visual Basic 中`generic <T> ref class G`在 c + +) 和<xref:System.Reflection.Emit.MethodBuilder>物件，表示方法`T M()`C# 語法 (`Function M() As T`在 Visual Basic `T M()` c + + 中)，由定義`G<T>`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1019">For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.MethodBuilder> object that represents a method `T M()` in C# syntax (`Function M() As T` in Visual Basic, `T M()` in C++) that is defined by `G<T>`.</span></span> <span data-ttu-id="13e28-1020">假設`G<T>`具有泛型方法的型別參數`U`來建立建構類型的執行個體`G<U>`，並呼叫方法`M`該執行個體上。</span><span class="sxs-lookup"><span data-stu-id="13e28-1020">Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls method `M` on that instance.</span></span> <span data-ttu-id="13e28-1021">若要發出的函式呼叫，您必須<xref:System.Reflection.MethodInfo>物件，表示`M`建構的類型-亦即，傳回型別`U`而不是型別`T`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1021">In order to emit the function call, you need a <xref:System.Reflection.MethodInfo> object that represents `M` on the constructed type - in other words, that returns type `U` rather than type `T`.</span></span> <span data-ttu-id="13e28-1022">若要這樣做，請先呼叫<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法<xref:System.Reflection.Emit.TypeBuilder>物件，指定<xref:System.Reflection.Emit.GenericTypeParameterBuilder>物件，表示`U`作為類型引數。</span><span class="sxs-lookup"><span data-stu-id="13e28-1022">To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument.</span></span> <span data-ttu-id="13e28-1023">然後呼叫<xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A>方法的傳回值<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法做為參數`type`並<xref:System.Reflection.Emit.MethodBuilder>物件，表示`T M()`做為參數`method`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1023">Then call the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.MethodBuilder> object that represents `T M()` as parameter `method`.</span></span> <span data-ttu-id="13e28-1024">傳回值是<xref:System.Reflection.MethodInfo>物件要發出的函式呼叫。</span><span class="sxs-lookup"><span data-stu-id="13e28-1024">The return value is the <xref:System.Reflection.MethodInfo> object you need to emit the function call.</span></span> <span data-ttu-id="13e28-1025">在程式碼範例示範如下所示的案例。</span><span class="sxs-lookup"><span data-stu-id="13e28-1025">The code example demonstrates a scenario similar to this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-1026">下列程式碼範例包含名為泛用類別的原始程式碼`Sample`具有名為的型別參數`T`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1026">The following code example contains source code for a generic class named `Sample` that has a type parameter named `T`.</span></span> <span data-ttu-id="13e28-1027">類別具有名為欄位`Field`，型別的`T`，和名為泛型方法`GM`它自己的型別參數，名為`U`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1027">The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`.</span></span> <span data-ttu-id="13e28-1028">方法`GM`建立的執行個體`Sample`，以取代它自己的型別參數`U`的型別參數`Sample`，並將其輸入的參數中`Field`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1028">Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="13e28-1029">這段原始程式碼已編譯，但未使用;您可以檢視與其[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)以及其與類別所發出的程式碼`Example`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1029">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="13e28-1030">類別中的程式碼`Example`示範如何使用<xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A>發出泛型的程式碼的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1030">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method to emit generic code.</span></span> <span data-ttu-id="13e28-1031">`Main`類別的方法`Example`會建立動態組件包含類別，名為`Sample`並用<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>方法，以使它成為泛型藉由新增名為的型別參數`T`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1031">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample` and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="13e28-1032">預設建構函式和一個名為欄位`Field`，型別的`T`，加入至類別`Sample`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1032">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="13e28-1033">一種方法`GM`加入，並變成泛型的方法，使用<xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1033">A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="13e28-1034">型別參數`GM`名為`U`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1034">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="13e28-1035">定義型別參數之後，簽章`GM`加入使用<xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1035">After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="13e28-1036">沒有任何傳回的型別和不必要或自訂修飾詞，這個方法讓所有的參數是`null`除了`parameterTypes`;`parameterTypes`設定方法的唯一參數的型別`U`，方法的泛型型別參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-1036">There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter.</span></span> <span data-ttu-id="13e28-1037">方法的主體會建立建構類型的執行個體`Sample<U>`(`Sample(Of U)` Visual Basic 中)，將指派方法的參數`Field`，然後列印的值`Field`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1037">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="13e28-1038">空的型別定義為保留的進入點方法`Main`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1038">A dummy type is defined to hold the entry-point method `Main`.</span></span> <span data-ttu-id="13e28-1039">本文中`Main`，靜態`GM`建構的泛型型別上叫用方法`Sample<int>`(`Sample(Of Integer)` Visual Basic 中)，與型別<xref:System.String>替代`U`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1039">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span> <span data-ttu-id="13e28-1040"><xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A>方法用來建立<xref:System.Reflection.MethodInfo>靜態`GM`方法建構的泛型型別`Sample<U>`，而<xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType>方法可用來建立<xref:System.Reflection.MethodInfo>，可以發出方法呼叫中。</span><span class="sxs-lookup"><span data-stu-id="13e28-1040">The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method is used to create a <xref:System.Reflection.MethodInfo> for the static `GM` method of the constructed generic type `Sample<U>`, and the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> method is then used to create a <xref:System.Reflection.MethodInfo> that can emitted in a method call.</span></span>  
  
 <span data-ttu-id="13e28-1041">執行程式碼範例時，它會將發出的組件儲存為 TypeBuilderGetFieldExample.exe 中。</span><span class="sxs-lookup"><span data-stu-id="13e28-1041">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="13e28-1042">您可以執行 TypeBuilderGetFieldExample.exe，而且您可以使用[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)比較發出的程式碼的程式碼與`Sample`編譯成本身的程式碼範例的類別。</span><span class="sxs-lookup"><span data-stu-id="13e28-1042">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-1043"><paramref name="method" /> 是非泛型方法定義的泛型方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1043"><paramref name="method" /> is a generic method that is not a generic method definition.</span></span>  
  
<span data-ttu-id="13e28-1044">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-1044">-or-</span></span> 
 <span data-ttu-id="13e28-1045"><paramref name="type" /> 不表示泛型類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1045"><paramref name="type" /> does not represent a generic type.</span></span>  
  
<span data-ttu-id="13e28-1046">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-1046">-or-</span></span> 
 <span data-ttu-id="13e28-1047"><paramref name="type" /> 不是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-1047"><paramref name="type" /> is not of type <see cref="T:System.Reflection.Emit.TypeBuilder" />.</span></span>  
  
<span data-ttu-id="13e28-1048">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-1048">-or-</span></span> 
<span data-ttu-id="13e28-1049"><paramref name="method" /> 的宣告類型不是泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-1049">The declaring type of <paramref name="method" /> is not a generic type definition.</span></span>  
  
<span data-ttu-id="13e28-1050">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-1050">-or-</span></span> 
<span data-ttu-id="13e28-1051"><paramref name="method" /> 的宣告類型不是 <paramref name="type" /> 的泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-1051">The declaring type of <paramref name="method" /> is not the generic type definition of <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetMethodImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="typeBuilder.GetMethodImpl (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="typeBuilder.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="13e28-1052">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</span><span class="sxs-lookup"><span data-stu-id="13e28-1052">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="13e28-1053">依指定傳回此類型所宣告或繼承的所有公用和非公用方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1053">Returns all the public and non-public methods declared or inherited by this type, as specified.</span></span></summary>
        <returns><span data-ttu-id="13e28-1054">傳回 <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用方法；否則只會傳回公用方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1054">Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public methods are returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1055">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-1055">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1056">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1056">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="typeBuilder.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-1057"><see cref="T:System.String" />，其中包含要取得之巢狀類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-1057">The <see cref="T:System.String" /> containing the name of the nested type to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="13e28-1058">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。</span><span class="sxs-lookup"><span data-stu-id="13e28-1058">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="13e28-1059">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-1059">-or-</span></span> 
<span data-ttu-id="13e28-1060">零，表示要針對公用方法執行區分大小寫的搜尋。</span><span class="sxs-lookup"><span data-stu-id="13e28-1060">Zero, to conduct a case-sensitive search for public methods.</span></span></param>
        <summary><span data-ttu-id="13e28-1061">傳回這個類型所宣告的公用和非公用巢狀類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1061">Returns the public and non-public nested types that are declared by this type.</span></span></summary>
        <returns><span data-ttu-id="13e28-1062"><see cref="T:System.Type" /> 物件，表示符合指定之需求的巢狀型別 (如有找到)；否則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1062">A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1063">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-1063">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 <span data-ttu-id="13e28-1064">如果此類型已完成，例如，如果`CreateType`已呼叫這種類型，但有巢狀的型別並不完整，然後`GetNestedTypes`只會傳回這些巢狀型別為其`CreateType`已呼叫。</span><span class="sxs-lookup"><span data-stu-id="13e28-1064">If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1065">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1065">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="typeBuilder.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="13e28-1066">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</span><span class="sxs-lookup"><span data-stu-id="13e28-1066">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, as in <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="13e28-1067">傳回這個類型所宣告或繼承的公用和非公用巢狀類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1067">Returns the public and non-public nested types that are declared or inherited by this type.</span></span></summary>
        <returns><span data-ttu-id="13e28-1068"><see cref="T:System.Type" /> 物件的陣列，表示在目前 <see cref="T:System.Type" /> 內形成巢狀的所有型別皆符合指定的繫結條件約束。</span><span class="sxs-lookup"><span data-stu-id="13e28-1068">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="13e28-1069">如果沒有任何型別在目前 <see cref="T:System.Type" /> 內形成巢狀，或沒有巢狀型別符合繫結條件約束，則為 <see cref="T:System.Type" /> 型別的空陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-1069">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1070">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-1070">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 <span data-ttu-id="13e28-1071">如果此類型已完成，例如，如果`CreateType`已呼叫這種類型，但有巢狀的型別並不完整，然後`GetNestedTypes`只會傳回這些巢狀型別為其`CreateType`已呼叫。</span><span class="sxs-lookup"><span data-stu-id="13e28-1071">If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1072">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1072">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="typeBuilder.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="13e28-1073">這個引動過程屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1073">This invocation attribute.</span></span> <span data-ttu-id="13e28-1074">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 諸如此類。</span><span class="sxs-lookup"><span data-stu-id="13e28-1074">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span></span></param>
        <summary><span data-ttu-id="13e28-1075">依指定傳回這個類型所宣告或繼承的所有公用和非公用屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1075">Returns all the public and non-public properties declared or inherited by this type, as specified.</span></span></summary>
        <returns><span data-ttu-id="13e28-1076">傳回 <see langword="PropertyInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用屬性；否則只會傳回公用屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1076">Returns an array of <see langword="PropertyInfo" /> objects representing the public and non-public properties defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public properties are returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1077">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-1077">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1078">如果類型不完整，則不會實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1078">This method is not implemented for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetPropertyImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="typeBuilder.GetPropertyImpl (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public override Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.GUID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Reflection.Emit.TypeBuilder.GUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1079">擷取這個類型的 GUID。</span><span class="sxs-lookup"><span data-stu-id="13e28-1079">Retrieves the GUID of this type.</span></span></summary>
        <value><span data-ttu-id="13e28-1080">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1080">Read-only.</span></span> <span data-ttu-id="13e28-1081">擷取這個類型的 GUID。</span><span class="sxs-lookup"><span data-stu-id="13e28-1081">Retrieves the GUID of this type</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1082">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-1082">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1083">這個方法目前不支援不完整的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1083">This method is not currently supported for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool HasElementTypeImpl();" />
      <MemberSignature Language="F#" Value="override this.HasElementTypeImpl : unit -&gt; bool" Usage="typeBuilder.HasElementTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="typeBuilder.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="13e28-1084">要叫用之成員的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-1084">The name of the member to invoke.</span></span> <span data-ttu-id="13e28-1085">可以是建構函式、方法、屬性或欄位。</span><span class="sxs-lookup"><span data-stu-id="13e28-1085">This can be a constructor, method, property, or field.</span></span> <span data-ttu-id="13e28-1086">您必須指定適當的引動過程屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1086">A suitable invocation attribute must be specified.</span></span> <span data-ttu-id="13e28-1087">請注意，將空字串當做成員名稱傳遞，可叫用類別的預設成員。</span><span class="sxs-lookup"><span data-stu-id="13e28-1087">Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="13e28-1088">引動過程屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1088">The invocation attribute.</span></span> <span data-ttu-id="13e28-1089">必須是來自 <see langword="BindingFlags" /> 的位元旗標。</span><span class="sxs-lookup"><span data-stu-id="13e28-1089">This must be a bit flag from <see langword="BindingFlags" />.</span></span></param>
        <param name="binder"><span data-ttu-id="13e28-1090">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1090">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="13e28-1091">如果繫結器為 <see langword="null" />，則會使用預設繫結器。</span><span class="sxs-lookup"><span data-stu-id="13e28-1091">If binder is <see langword="null" />, the default binder is used.</span></span> <span data-ttu-id="13e28-1092">請參閱 <see cref="T:System.Reflection.Binder" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1092">See <see cref="T:System.Reflection.Binder" />.</span></span></param>
        <param name="target"><span data-ttu-id="13e28-1093">要在其上叫用指定成員的物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1093">The object on which to invoke the specified member.</span></span> <span data-ttu-id="13e28-1094">如果是靜態成員，則會忽略這個參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-1094">If the member is static, this parameter is ignored.</span></span></param>
        <param name="args"><span data-ttu-id="13e28-1095">引數清單。</span><span class="sxs-lookup"><span data-stu-id="13e28-1095">An argument list.</span></span> <span data-ttu-id="13e28-1096">這是物件陣列，其中包含所要叫用之成員的參數數目、順序和類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1096">This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked.</span></span> <span data-ttu-id="13e28-1097">如果沒有任何參數，則這應該是 null。</span><span class="sxs-lookup"><span data-stu-id="13e28-1097">If there are no parameters this should be null.</span></span></param>
        <param name="modifiers"><span data-ttu-id="13e28-1098">與 <paramref name="args" /> 長度相同的陣列，其中的項目代表與所要叫用的成員之引數關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1098">An array of the same length as <paramref name="args" /> with elements that represent the attributes associated with the arguments of the member to be invoked.</span></span> <span data-ttu-id="13e28-1099">參數在中繼資料內具有與其相關聯的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1099">A parameter has attributes associated with it in the metadata.</span></span> <span data-ttu-id="13e28-1100">許多互通性服務都會使用這些屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1100">They are used by various interoperability services.</span></span> <span data-ttu-id="13e28-1101">如需詳細資訊，請參閱中繼資料規格。</span><span class="sxs-lookup"><span data-stu-id="13e28-1101">See the metadata specs for more details.</span></span></param>
        <param name="culture"><span data-ttu-id="13e28-1102"><see langword="CultureInfo" /> 的執行個體，用於管理類型的強制型轉。</span><span class="sxs-lookup"><span data-stu-id="13e28-1102">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="13e28-1103">如果這是 null，則會使用目前執行緒的 <see langword="CultureInfo" /></span><span class="sxs-lookup"><span data-stu-id="13e28-1103">If this is null, the <see langword="CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="13e28-1104">(請注意，要將代表 1000 的 String 轉換成 Double 值時，這是必要的，因為 1000 的表示方式會因不同文化特性而有所不同)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1104">(Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)</span></span></param>
        <param name="namedParameters"><span data-ttu-id="13e28-1105"><paramref name="namedParameters" /> 陣列中的每個參數會在 <paramref name="args" /> 陣列中取得對應項目的值。</span><span class="sxs-lookup"><span data-stu-id="13e28-1105">Each parameter in the <paramref name="namedParameters" /> array gets the value in the corresponding element in the <paramref name="args" /> array.</span></span> <span data-ttu-id="13e28-1106">如果 <paramref name="args" /> 的長度大於 <paramref name="namedParameters" /> 的長度，則會依序傳遞其餘引數值。</span><span class="sxs-lookup"><span data-stu-id="13e28-1106">If the length of <paramref name="args" /> is greater than the length of <paramref name="namedParameters" />, the remaining argument values are passed in order.</span></span></param>
        <summary><span data-ttu-id="13e28-1107">叫用指定的成員。</span><span class="sxs-lookup"><span data-stu-id="13e28-1107">Invokes the specified member.</span></span> <span data-ttu-id="13e28-1108">根據指定繫結器和引動過程屬性的條件約束，所要叫用的方法必須可存取，並提供與指定引數清單最特定的符合項目。</span><span class="sxs-lookup"><span data-stu-id="13e28-1108">The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</span></span></summary>
        <returns><span data-ttu-id="13e28-1109">傳回所叫用之成員的傳回值。</span><span class="sxs-lookup"><span data-stu-id="13e28-1109">Returns the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1110">如果方法宣告中的參數數目等於在指定的引數清單中，引數的數目和每個引數的型別可轉換為參數的型別繫結器，便會叫用方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1110">A method will be invoked if the number of parameters in the method declaration equals the number of arguments in the specified argument list, and the type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="13e28-1111">繫結器將會尋找所有相符的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1111">The binder will find all of the matching methods.</span></span> <span data-ttu-id="13e28-1112">這些方法可以找到根據繫結要求 （BindingFlags.InvokeMethod BindingFlags.GetProperties，等等。） 的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1112">These methods are found based on the type of binding requested (BindingFlags.InvokeMethod, BindingFlags.GetProperties, and so on.).</span></span> <span data-ttu-id="13e28-1113">一組方法會依名稱、 目的引數，以及一組繫結器中所定義的搜尋修飾詞進行篩選。</span><span class="sxs-lookup"><span data-stu-id="13e28-1113">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span> <span data-ttu-id="13e28-1114">方法選取之後，就會叫用。</span><span class="sxs-lookup"><span data-stu-id="13e28-1114">After the method is selected, it will be invoked.</span></span> <span data-ttu-id="13e28-1115">協助工具會在該點檢查。</span><span class="sxs-lookup"><span data-stu-id="13e28-1115">Accessibility is checked at that point.</span></span> <span data-ttu-id="13e28-1116">搜尋可以控制哪一組方法會搜尋根據與方法關聯的協助工具屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1116">The search can control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="13e28-1117">`IBinder.BindToMethod`方法會負責選取要叫用方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1117">The `IBinder.BindToMethod` method is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="13e28-1118">預設繫結器會選取最特定的相符項目。</span><span class="sxs-lookup"><span data-stu-id="13e28-1118">The default binder selects the most specific match.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-1119">完全信任程式碼會略過存取限制。</span><span class="sxs-lookup"><span data-stu-id="13e28-1119">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="13e28-1120">也就是說，私用建構函式、 方法、 欄位和屬性可存取，而且完全受信任的程式碼時，使用反映來叫用。</span><span class="sxs-lookup"><span data-stu-id="13e28-1120">That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="13e28-1121">目前不支援這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1121">This method is not currently supported.</span></span> <span data-ttu-id="13e28-1122">您可以使用類型來擷取<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-1122">You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1123">這個方法目前不支援不完整的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1123">This method is not currently supported for incomplete types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected override bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsArrayImpl();" />
      <MemberSignature Language="F#" Value="override this.IsArrayImpl : unit -&gt; bool" Usage="typeBuilder.IsArrayImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAssignableFrom">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-1124">判斷指定類型是否可以指派給這個物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1124">Determines whether a specified type can be assigned to this object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Reflection.TypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(System::Reflection::TypeInfo ^ typeInfo);" />
      <MemberSignature Language="F#" Value="override this.IsAssignableFrom : System.Reflection.TypeInfo -&gt; bool" Usage="typeBuilder.IsAssignableFrom typeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Reflection.TypeInfo" />
      </Parameters>
      <Docs>
        <param name="typeInfo"><span data-ttu-id="13e28-1125">要測試的物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1125">The object to test.</span></span></param>
        <summary><span data-ttu-id="13e28-1126">取得值，指出是否可以將指定的 <see cref="T:System.Reflection.TypeInfo" /> 物件指派給這個物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1126">Gets a value that indicates whether a specified <see cref="T:System.Reflection.TypeInfo" /> object can be assigned to this object.</span></span></summary>
        <returns><span data-ttu-id="13e28-1127">如果可以將 <paramref name="typeInfo" /> 指派給這個物件，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1127"><see langword="true" /> if <paramref name="typeInfo" /> can be assigned to this object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="override this.IsAssignableFrom : Type -&gt; bool" Usage="typeBuilder.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13e28-1128">要測試的物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1128">The object to test.</span></span></param>
        <summary><span data-ttu-id="13e28-1129">取得值，指出是否可以將指定的 <see cref="T:System.Type" /> 指派給這個物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1129">Gets a value that indicates whether a specified <see cref="T:System.Type" /> can be assigned to this object.</span></span></summary>
        <returns><span data-ttu-id="13e28-1130">如果 <paramref name="c" /> 參數和目前的類型代表相同的類型、目前的類型位於 <paramref name="c" /> 的繼承階層架構中，或者目前的類型位於 <paramref name="c" /> 支援的介面中，則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1130"><see langword="true" /> if the <paramref name="c" /> parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of <paramref name="c" />, or if the current type is an interface that <paramref name="c" /> supports.</span></span> <span data-ttu-id="13e28-1131">如果以上條件都不成立，或者 <paramref name="c" /> 為 <see langword="null" />，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1131"><see langword="false" /> if none of these conditions are valid, or if <paramref name="c" /> is <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected override bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsByRefImpl();" />
      <MemberSignature Language="F#" Value="override this.IsByRefImpl : unit -&gt; bool" Usage="typeBuilder.IsByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public override bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRefLike : bool" Usage="System.Reflection.Emit.TypeBuilder.IsByRefLike" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected override bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsCOMObjectImpl();" />
      <MemberSignature Language="F#" Value="override this.IsCOMObjectImpl : unit -&gt; bool" Usage="typeBuilder.IsCOMObjectImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Reflection.Emit.TypeBuilder.IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1132">取得值，指出這個物件是否表示建構的泛型類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1132">Gets a value that indicates whether this object represents a constructed generic type.</span></span></summary>
        <value><span data-ttu-id="13e28-1133">如果這個物件代表建構的泛型類型，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1133"><see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCreated">
      <MemberSignature Language="C#" Value="public bool IsCreated ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsCreated() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsCreated" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCreated () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsCreated();" />
      <MemberSignature Language="F#" Value="member this.IsCreated : unit -&gt; bool" Usage="typeBuilder.IsCreated " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-1134">傳回表示是否已建立目前動態類型的值。</span><span class="sxs-lookup"><span data-stu-id="13e28-1134">Returns a value that indicates whether the current dynamic type has been created.</span></span></summary>
        <returns><span data-ttu-id="13e28-1135">如已呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1135"><see langword="true" /> if the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has been called; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1136">在後<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>已呼叫方法，表示型別的<xref:System.Reflection.Emit.TypeBuilder>物件已完成。</span><span class="sxs-lookup"><span data-stu-id="13e28-1136">After the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called, the type represented by the <xref:System.Reflection.Emit.TypeBuilder> object is complete.</span></span> <span data-ttu-id="13e28-1137">若要將成員加入或變更類型的其他特性的任何進一步嘗試會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="13e28-1137">Exceptions are thrown on any further attempts to add members or change other characteristics of the type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="typeBuilder.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="13e28-1138">要搜尋的屬性類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1138">The type of attribute to search for.</span></span> <span data-ttu-id="13e28-1139">只會傳回可指派給這種類型的屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1139">Only attributes that are assignable to this type are returned.</span></span></param>
        <param name="inherit"><span data-ttu-id="13e28-1140">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1140">Specifies whether to search this member's inheritance chain to find the attributes.</span></span></param>
        <summary><span data-ttu-id="13e28-1141">決定是否要將自訂屬性套用至目前的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1141">Determines whether a custom attribute is applied to the current type.</span></span></summary>
        <returns><span data-ttu-id="13e28-1142">如果一或多個執行個體的 <paramref name="attributeType" />，或衍生自 <paramref name="attributeType" /> 的屬性在此類型定義，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1142"><see langword="true" /> if one or more instances of <paramref name="attributeType" />, or an attribute derived from <paramref name="attributeType" />, is defined on this type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1143">這個方法不支援不完整的泛型型別參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-1143">This method is not supported for incomplete generic type parameters.</span></span> <span data-ttu-id="13e28-1144">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-1144">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1145">這個方法目前不支援不完整的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1145">This method is not currently supported for incomplete types.</span></span> <span data-ttu-id="13e28-1146">使用 <see cref="M:System.Type.GetType" /> 擷取類型，並在傳回的 <see cref="T:System.Type" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1146">Retrieve the type using <see cref="M:System.Type.GetType" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Type" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-1147">未定義 <paramref name="attributeType" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1147"><paramref name="attributeType" /> is not defined.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-1148"><paramref name="attributeType" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1148"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public override bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Reflection.Emit.TypeBuilder.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericParameter : bool" Usage="System.Reflection.Emit.TypeBuilder.IsGenericParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1149">取得值，指出目前類型是否為泛型類型參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-1149">Gets a value indicating whether the current type is a generic type parameter.</span></span></summary>
        <value><span data-ttu-id="13e28-1150">如果目前的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件代表泛型類型參數，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1150"><see langword="true" /> if the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type parameter; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="13e28-1151">當發出程式碼，表示泛型類型參數<xref:System.Reflection.Emit.GenericTypeParameterBuilder>物件而非以<xref:System.Reflection.Emit.TypeBuilder>物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1151">When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public override bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericType : bool" Usage="System.Reflection.Emit.TypeBuilder.IsGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1152">取得值，指出目前類型是否為泛型類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1152">Gets a value indicating whether the current type is a generic type.</span></span></summary>
        <value><span data-ttu-id="13e28-1153">如果由目前的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件所代表的類型為泛型，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1153"><see langword="true" /> if the type represented by the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> object is generic; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1154">A<xref:System.Reflection.Emit.TypeBuilder>物件代表泛型類型定義中，如果<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>已用來為它提供泛型類型參數的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1154">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="13e28-1155">執行個體<xref:System.Reflection.Emit.TypeBuilder>泛用類別一律為泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-1155">An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.</span></span>  
  
 <span data-ttu-id="13e28-1156">如需有關反映和泛型反映中所使用的恆成立條件清單中的泛型類型的詳細資訊，請參閱<xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1156">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeDefinition : bool" Usage="System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1157">取得值，指出目前的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 是否代表可用於建構其他泛型類型的泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-1157">Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.TypeBuilder" /> represents a generic type definition from which other generic types can be constructed.</span></span></summary>
        <value><span data-ttu-id="13e28-1158">如果這個 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件代表泛型類型定義，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1158"><see langword="true" /> if this <see cref="T:System.Reflection.Emit.TypeBuilder" /> object represents a generic type definition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1159">A<xref:System.Reflection.Emit.TypeBuilder>物件代表泛型類型定義中，如果<xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A>已用來為它提供泛型類型參數的方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1159">A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters.</span></span> <span data-ttu-id="13e28-1160">執行個體<xref:System.Reflection.Emit.TypeBuilder>泛用類別一律為泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-1160">An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.</span></span>  
  
 <span data-ttu-id="13e28-1161">A<xref:System.Reflection.Emit.TypeBuilder>可用來建置泛型類型定義，但不是會建構泛型型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-1161">A <xref:System.Reflection.Emit.TypeBuilder> can be used to build generic type definitions, but not constructed generic types.</span></span> <span data-ttu-id="13e28-1162">若要取得建構的泛型類型，請呼叫<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法<xref:System.Reflection.Emit.TypeBuilder>表示泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-1162">To get a constructed generic type, call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.</span></span>  
  
 <span data-ttu-id="13e28-1163">如需有關反映和泛型反映中所使用的恆成立條件清單中的泛型類型的詳細資訊，請參閱<xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1163">For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])" />
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPointerImpl();" />
      <MemberSignature Language="F#" Value="override this.IsPointerImpl : unit -&gt; bool" Usage="typeBuilder.IsPointerImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPrimitiveImpl();" />
      <MemberSignature Language="F#" Value="override this.IsPrimitiveImpl : unit -&gt; bool" Usage="typeBuilder.IsPrimitiveImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1164">取得值，這個值表示目前類型是否為安全性關鍵或安全性安全關鍵，因而可以執行重要的作業。</span><span class="sxs-lookup"><span data-stu-id="13e28-1164">Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.</span></span></summary>
        <value><span data-ttu-id="13e28-1165">如果目前類型為安全性關鍵或安全性安全關鍵，則為 <see langword="true" />，如果是安全性透明，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1165"><see langword="true" /> if the current type is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1166"><xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>， <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A>屬性報表透明度層級的型別，由 common language runtime (CLR) 所決定。</span><span class="sxs-lookup"><span data-stu-id="13e28-1166">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="13e28-1167">下表顯示這些屬性的組合：</span><span class="sxs-lookup"><span data-stu-id="13e28-1167">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="13e28-1168">安全性層級</span><span class="sxs-lookup"><span data-stu-id="13e28-1168">Security level</span></span>|<span data-ttu-id="13e28-1169">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="13e28-1169">IsSecurityCritical</span></span>|<span data-ttu-id="13e28-1170">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="13e28-1170">IsSecuritySafeCritical</span></span>|<span data-ttu-id="13e28-1171">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="13e28-1171">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="13e28-1172">Critical</span><span class="sxs-lookup"><span data-stu-id="13e28-1172">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="13e28-1173">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="13e28-1173">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="13e28-1174">透明</span><span class="sxs-lookup"><span data-stu-id="13e28-1174">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="13e28-1175">使用這些屬性會比檢查組件及其類型的安全性註釋、檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="13e28-1175">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="13e28-1176">在執行階段開始評估透明度層級，在組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1176">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="13e28-1177">比方說，如果安全性關鍵的動態組件，類型上的註釋會被忽略，和所有類型都是安全性關鍵。</span><span class="sxs-lookup"><span data-stu-id="13e28-1177">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="13e28-1178">根據預設，動態組件會繼承它發出的組件的透明度。</span><span class="sxs-lookup"><span data-stu-id="13e28-1178">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="13e28-1179">您可以使用覆寫此預設值<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>， <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>，或<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>方法多載，並指定安全性屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1179">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="13e28-1180">您無法這樣做; 提升的安全性層級也就是透明的程式碼無法發出安全性關鍵或安全性安全關鍵程式碼。</span><span class="sxs-lookup"><span data-stu-id="13e28-1180">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="13e28-1181">建立動態組件，或它們才會生效之前已儲存至磁碟並重新載入組件時，必須指定屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1181">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-1182">預設值繼承僅限於透明化的執行階段的評估。</span><span class="sxs-lookup"><span data-stu-id="13e28-1182">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="13e28-1183">沒有屬性會套用至動態組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1183">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="13e28-1184">如果您想要新增安全性屬性，您必須套用它們自己。</span><span class="sxs-lookup"><span data-stu-id="13e28-1184">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="13e28-1185">如需有關反映發出和透明度，請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1185">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="13e28-1186">投影片的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1186">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1187">尚未呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立目前動態類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1187">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="13e28-1188">反映發出中的安全性問題</span><span class="sxs-lookup"><span data-stu-id="13e28-1188">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="13e28-1189">反映的安全性考量</span><span class="sxs-lookup"><span data-stu-id="13e28-1189">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="13e28-1190">.NET Framework 4.0 版中的安全性變更</span><span class="sxs-lookup"><span data-stu-id="13e28-1190">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="13e28-1191">安全性透明程式碼，層級 1</span><span class="sxs-lookup"><span data-stu-id="13e28-1191">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="13e28-1192">安全性透明的程式碼，層級 2</span><span class="sxs-lookup"><span data-stu-id="13e28-1192">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1193">取得值，這個值表示目前類型是否為安全性安全關鍵，也就是說，它是否能執行重要作業並由安全性透明的程式碼存取。</span><span class="sxs-lookup"><span data-stu-id="13e28-1193">Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value><span data-ttu-id="13e28-1194">如果目前類型為安全性安全關鍵，則為 <see langword="true" />，如果是安全性關鍵或安全性透明，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1194"><see langword="true" /> if the current type is security-safe-critical; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1195"><xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>， <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A>屬性報表透明度層級的型別，由 common language runtime (CLR) 所決定。</span><span class="sxs-lookup"><span data-stu-id="13e28-1195">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="13e28-1196">下表顯示這些屬性的組合：</span><span class="sxs-lookup"><span data-stu-id="13e28-1196">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="13e28-1197">安全性層級</span><span class="sxs-lookup"><span data-stu-id="13e28-1197">Security level</span></span>|<span data-ttu-id="13e28-1198">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="13e28-1198">IsSecurityCritical</span></span>|<span data-ttu-id="13e28-1199">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="13e28-1199">IsSecuritySafeCritical</span></span>|<span data-ttu-id="13e28-1200">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="13e28-1200">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="13e28-1201">Critical</span><span class="sxs-lookup"><span data-stu-id="13e28-1201">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="13e28-1202">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="13e28-1202">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="13e28-1203">透明</span><span class="sxs-lookup"><span data-stu-id="13e28-1203">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="13e28-1204">使用這些屬性會比檢查組件及其類型的安全性註釋、檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="13e28-1204">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="13e28-1205">在執行階段開始評估透明度層級，在組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1205">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="13e28-1206">比方說，如果安全性關鍵的動態組件，類型上的註釋會被忽略，和所有類型都是安全性關鍵。</span><span class="sxs-lookup"><span data-stu-id="13e28-1206">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="13e28-1207">根據預設，動態組件會繼承它發出的組件的透明度。</span><span class="sxs-lookup"><span data-stu-id="13e28-1207">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="13e28-1208">您可以使用覆寫此預設值<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>， <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>，或<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>方法多載，並指定安全性屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1208">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="13e28-1209">您無法這樣做; 提升的安全性層級也就是透明的程式碼無法發出安全性關鍵或安全性安全關鍵程式碼。</span><span class="sxs-lookup"><span data-stu-id="13e28-1209">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="13e28-1210">建立動態組件，或它們才會生效之前已儲存至磁碟並重新載入組件時，必須指定屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1210">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-1211">預設值繼承僅限於透明化的執行階段的評估。</span><span class="sxs-lookup"><span data-stu-id="13e28-1211">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="13e28-1212">沒有屬性會套用至動態組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1212">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="13e28-1213">如果您想要新增安全性屬性，您必須套用它們自己。</span><span class="sxs-lookup"><span data-stu-id="13e28-1213">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="13e28-1214">如需有關反映發出和透明度，請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1214">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="13e28-1215">投影片的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1215">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1216">尚未呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立目前動態類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1216">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="13e28-1217">反映發出中的安全性問題</span><span class="sxs-lookup"><span data-stu-id="13e28-1217">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="13e28-1218">反映的安全性考量</span><span class="sxs-lookup"><span data-stu-id="13e28-1218">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="13e28-1219">.NET Framework 4.0 版中的安全性變更</span><span class="sxs-lookup"><span data-stu-id="13e28-1219">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="13e28-1220">安全性透明程式碼，層級 1</span><span class="sxs-lookup"><span data-stu-id="13e28-1220">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="13e28-1221">安全性透明的程式碼，層級 2</span><span class="sxs-lookup"><span data-stu-id="13e28-1221">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.Emit.TypeBuilder.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1222">取得值，這個值表示目前類型是否為透明，因此無法執行重要作業。</span><span class="sxs-lookup"><span data-stu-id="13e28-1222">Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.</span></span></summary>
        <value><span data-ttu-id="13e28-1223">如果類型為安全性透明，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1223"><see langword="true" /> if the type is security-transparent; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1224"><xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>， <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>，和<xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A>屬性報表透明度層級的型別，由 common language runtime (CLR) 所決定。</span><span class="sxs-lookup"><span data-stu-id="13e28-1224">The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="13e28-1225">下表顯示這些屬性的組合：</span><span class="sxs-lookup"><span data-stu-id="13e28-1225">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="13e28-1226">安全性層級</span><span class="sxs-lookup"><span data-stu-id="13e28-1226">Security level</span></span>|<span data-ttu-id="13e28-1227">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="13e28-1227">IsSecurityCritical</span></span>|<span data-ttu-id="13e28-1228">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="13e28-1228">IsSecuritySafeCritical</span></span>|<span data-ttu-id="13e28-1229">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="13e28-1229">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="13e28-1230">Critical</span><span class="sxs-lookup"><span data-stu-id="13e28-1230">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="13e28-1231">安全關鍵</span><span class="sxs-lookup"><span data-stu-id="13e28-1231">Safe-critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="13e28-1232">透明</span><span class="sxs-lookup"><span data-stu-id="13e28-1232">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="13e28-1233">使用這些屬性會比檢查組件及其類型的安全性註釋、檢查目前的信任層級，以及嘗試複製執行階段規則更簡單。</span><span class="sxs-lookup"><span data-stu-id="13e28-1233">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="13e28-1234">在執行階段開始評估透明度層級，在組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1234">The runtime begins evaluating transparency levels at the assembly.</span></span> <span data-ttu-id="13e28-1235">比方說，如果安全性關鍵的動態組件，類型上的註釋會被忽略，和所有類型都是安全性關鍵。</span><span class="sxs-lookup"><span data-stu-id="13e28-1235">For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.</span></span>  
  
 <span data-ttu-id="13e28-1236">根據預設，動態組件會繼承它發出的組件的透明度。</span><span class="sxs-lookup"><span data-stu-id="13e28-1236">By default, a dynamic assembly inherits the transparency of the assembly that emits it.</span></span> <span data-ttu-id="13e28-1237">您可以使用覆寫此預設值<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>， <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>，或<xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>方法多載，並指定安全性屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1237">You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=nameWithType> method overload and specifying security attributes.</span></span> <span data-ttu-id="13e28-1238">您無法這樣做; 提升的安全性層級也就是透明的程式碼無法發出安全性關鍵或安全性安全關鍵程式碼。</span><span class="sxs-lookup"><span data-stu-id="13e28-1238">You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.</span></span> <span data-ttu-id="13e28-1239">建立動態組件，或它們才會生效之前已儲存至磁碟並重新載入組件時，必須指定屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1239">Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-1240">預設值繼承僅限於透明化的執行階段的評估。</span><span class="sxs-lookup"><span data-stu-id="13e28-1240">Default inheritance is limited to the runtime's evaluation of transparency.</span></span> <span data-ttu-id="13e28-1241">沒有屬性會套用至動態組件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1241">No attributes are applied to the dynamic assembly.</span></span> <span data-ttu-id="13e28-1242">如果您想要新增安全性屬性，您必須套用它們自己。</span><span class="sxs-lookup"><span data-stu-id="13e28-1242">If you want to add security attributes, you must apply them yourself.</span></span>  
  
 <span data-ttu-id="13e28-1243">如需有關反映發出和透明度，請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1243">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="13e28-1244">投影片的相關資訊，請參閱[安全性變更](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1244">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1245">尚未呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立目前動態類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1245">The current dynamic type has not been created by calling the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="13e28-1246">反映發出中的安全性問題</span><span class="sxs-lookup"><span data-stu-id="13e28-1246">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="13e28-1247">反映的安全性考量</span><span class="sxs-lookup"><span data-stu-id="13e28-1247">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="13e28-1248">.NET Framework 4.0 版中的安全性變更</span><span class="sxs-lookup"><span data-stu-id="13e28-1248">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="13e28-1249">安全性透明程式碼，層級 1</span><span class="sxs-lookup"><span data-stu-id="13e28-1249">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="13e28-1250">安全性透明的程式碼，層級 2</span><span class="sxs-lookup"><span data-stu-id="13e28-1250">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public override bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Reflection.Emit.TypeBuilder.IsSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public override bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="override this.IsSubclassOf : Type -&gt; bool" Usage="typeBuilder.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="13e28-1251">要檢查的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1251">A <see cref="T:System.Type" /> that is to be checked.</span></span></param>
        <summary><span data-ttu-id="13e28-1252">判斷此類型是否衍生自指定的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1252">Determines whether this type is derived from a specified type.</span></span></summary>
        <returns><span data-ttu-id="13e28-1253">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1253">Read-only.</span></span> <span data-ttu-id="13e28-1254">如果此類型與類型 <paramref name="c" /> 相同，或為類型 <paramref name="c" /> 的子類型，則傳回 <see langword="true" />，否則傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1254">Returns <see langword="true" /> if this type is the same as the type <paramref name="c" />, or is a subtype of type <paramref name="c" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public override bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Reflection.Emit.TypeBuilder.IsSZArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTypeDefinition : bool" Usage="System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsValueTypeImpl();" />
      <MemberSignature Language="F#" Value="override this.IsValueTypeImpl : unit -&gt; bool" Usage="typeBuilder.IsValueTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public override bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArray : bool" Usage="System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-1255">傳回代表目前類型之陣列的 <see cref="T:System.Type" /> 物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1255">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType();" />
      <MemberSignature Language="F#" Value="override this.MakeArrayType : unit -&gt; Type" Usage="typeBuilder.MakeArrayType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-1256">傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-1256">Returns a <see cref="T:System.Type" /> object that represents a one-dimensional array of the current type, with a lower bound of zero.</span></span></summary>
        <returns><span data-ttu-id="13e28-1257">代表一維陣列類型的 <see cref="T:System.Type" /> 物件，其項目類型是目前的類型，下限為零。</span><span class="sxs-lookup"><span data-stu-id="13e28-1257">A <see cref="T:System.Type" /> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1258"><xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A>方法可用來產生任何可能的項目型別，包括泛型類型的陣列類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1258">The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-1259">下列程式碼範例會建立動態模組，名為抽象型別`Sample`，和名為抽象方法`TestMethod`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1259">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="13e28-1260">`TestMethod` 會採用`ref`參數 (`ByRef` Visual Basic 中) 的型別`Sample`，類型的指標`Sample`，和類型的陣列`Sample`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1260">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="13e28-1261">它會傳回類型的二維陣列`Sample`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1261">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="13e28-1262">在程式碼範例會儲存至磁碟，動態模組讓您可以檢查它與[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1262">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType(int rank);" />
      <MemberSignature Language="F#" Value="override this.MakeArrayType : int -&gt; Type" Usage="typeBuilder.MakeArrayType rank" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank"><span data-ttu-id="13e28-1263">陣列的維度數目。</span><span class="sxs-lookup"><span data-stu-id="13e28-1263">The number of dimensions for the array.</span></span></param>
        <summary><span data-ttu-id="13e28-1264">傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成且為指定維度個數的陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-1264">Returns a <see cref="T:System.Type" /> object that represents an array of the current type, with the specified number of dimensions.</span></span></summary>
        <returns><span data-ttu-id="13e28-1265"><see cref="T:System.Type" /> 物件，代表目前類型的一維陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-1265">A <see cref="T:System.Type" /> object that represents a one-dimensional array of the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1266"><xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A>方法可用來產生任何可能的項目型別，包括泛型類型的陣列類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1266">The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-1267">下列程式碼範例會建立動態模組，名為抽象型別`Sample`，和名為抽象方法`TestMethod`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1267">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="13e28-1268">`TestMethod` 會採用`ref`參數 (`ByRef` Visual Basic 中) 的型別`Sample`，類型的指標`Sample`，和類型的陣列`Sample`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1268">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="13e28-1269">它會傳回類型的二維陣列`Sample`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1269">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="13e28-1270">在程式碼範例會儲存至磁碟，動態模組讓您可以檢查它與[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1270">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="13e28-1271"><paramref name="rank" /> 不是有效的陣列維度。</span><span class="sxs-lookup"><span data-stu-id="13e28-1271"><paramref name="rank" /> is not a valid array dimension.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public override Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeByRefType();" />
      <MemberSignature Language="F#" Value="override this.MakeByRefType : unit -&gt; Type" Usage="typeBuilder.MakeByRefType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-1272">傳回 <see cref="T:System.Type" /> 物件，當做 <see langword="ref" /> 參數 (在 Visual Basic 中為 <see langword="ByRef" />) 傳遞時，代表目前的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1272">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic).</span></span></summary>
        <returns><span data-ttu-id="13e28-1273"><see cref="T:System.Type" /> 物件，當做 <see langword="ref" /> 參數 (在 Visual Basic 中為 <see langword="ByRef" />) 傳遞時，代表目前的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1273">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1274"><xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A>方法可用來產生`ref`型別 (`ByRef` Visual Basic 中) 的參數清單。</span><span class="sxs-lookup"><span data-stu-id="13e28-1274">The <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-1275">使用 Microsoft intermediate language (MSIL) 語法中，如果目前<xref:System.Reflection.Emit.TypeBuilder>代表`MyType`，則這個方法所傳回的型別會是`MyType&`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1275">Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-1276">下列程式碼範例會建立動態模組，名為抽象型別`Sample`，和名為抽象方法`TestMethod`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1276">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="13e28-1277">`TestMethod` 會採用`ref`參數 (`ByRef` Visual Basic 中) 的型別`Sample`，類型的指標`Sample`，和類型的陣列`Sample`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1277">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="13e28-1278">它會傳回類型的二維陣列`Sample`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1278">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="13e28-1279">在程式碼範例會儲存至磁碟，動態模組讓您可以檢查它與[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1279">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public override Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="override this.MakeGenericType : Type[] -&gt; Type" Usage="typeBuilder.MakeGenericType typeArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments"><span data-ttu-id="13e28-1280">由類型組成的陣列，用來取代目前泛型類型定義的類型參數。</span><span class="sxs-lookup"><span data-stu-id="13e28-1280">An array of types to be substituted for the type parameters of the current generic type definition.</span></span></param>
        <summary><span data-ttu-id="13e28-1281">用類型陣列的項目取代目前泛型類型定義的類型參數，並傳回產生的建構類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1281">Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.</span></span></summary>
        <returns><span data-ttu-id="13e28-1282"><see cref="T:System.Type" />，表示用 <paramref name="typeArguments" /> 的項目取代目前泛型類型之型別參數所得到的建構類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1282">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1283">當您發出的程式碼需要從目前的泛型類型定義建構的類型時，請使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1283">Use this method when your emitted code requires a type constructed from the current generic type definition.</span></span> <span data-ttu-id="13e28-1284">您不需要呼叫<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>方法之前呼叫<xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A>方法<xref:System.Reflection.Emit.TypeBuilder>表示泛型類型定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-1284">It is not necessary to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method before calling the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.</span></span> <span data-ttu-id="13e28-1285">如果目前<xref:System.Reflection.Emit.TypeBuilder>不代表泛型類型，定義<xref:System.InvalidOperationException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="13e28-1285">If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent the definition of a generic type, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 <span data-ttu-id="13e28-1286">此方法的函式所傳回作為中發出的程式碼建構的泛型類型的預留位置的物件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1286">The object returned by this method functions as a placeholder for a constructed generic type in your emitted code.</span></span> <span data-ttu-id="13e28-1287">它是衍生自類別的執行個體<xref:System.Type>，其功能有限。</span><span class="sxs-lookup"><span data-stu-id="13e28-1287">It is an instance of a class derived from <xref:System.Type> that has limited capabilities.</span></span> <span data-ttu-id="13e28-1288">特別之處在於：</span><span class="sxs-lookup"><span data-stu-id="13e28-1288">In particular:</span></span>  
  
-   <span data-ttu-id="13e28-1289">若要取得這些建構的泛型類型的方法、 欄位和建構函式，使用<xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>， <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>，和<xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29>方法多載。</span><span class="sxs-lookup"><span data-stu-id="13e28-1289">To get methods, fields, and constructors for these constructed generic types, use the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>, <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>, and <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29> method overloads.</span></span>  
  
-   <span data-ttu-id="13e28-1290">兩個代表相同的建構的類型的執行個體不會比較為相等。</span><span class="sxs-lookup"><span data-stu-id="13e28-1290">Two instances that represent the same constructed type do not compare as equal.</span></span> <span data-ttu-id="13e28-1291">例如，在下列程式碼`t1.Equals(t2)`傳回`false`:</span><span class="sxs-lookup"><span data-stu-id="13e28-1291">For example, in the following code `t1.Equals(t2)` returns `false`:</span></span>  
  
 [!code-cpp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/vb/remarks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-1292">目前類型不代表泛型類型的定義。</span><span class="sxs-lookup"><span data-stu-id="13e28-1292">The current type does not represent the definition of a generic type.</span></span> <span data-ttu-id="13e28-1293">亦即，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1293">That is, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-1294"><paramref name="typeArguments" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1294"><paramref name="typeArguments" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="13e28-1295">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-1295">-or-</span></span> 
<span data-ttu-id="13e28-1296"><paramref name="typeArguments" /> 的任何項目是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1296">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-1297"><paramref name="typeArguments" /> 的任何項目之 <see cref="P:System.Type.Module" /> 屬性是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1297">The <see cref="P:System.Type.Module" /> property of any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="13e28-1298">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-1298">-or-</span></span> 
<span data-ttu-id="13e28-1299"><paramref name="typeArguments" /> 的任何項目模組之 <see cref="P:System.Reflection.Module.Assembly" /> 屬性是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1299">The <see cref="P:System.Reflection.Module.Assembly" /> property of the module of any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public override Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakePointerType();" />
      <MemberSignature Language="F#" Value="override this.MakePointerType : unit -&gt; Type" Usage="typeBuilder.MakePointerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-1300">傳回 <see cref="T:System.Type" /> 物件，代表指向目前類型之 Unmanaged 指標的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1300">Returns a <see cref="T:System.Type" /> object that represents the type of an unmanaged pointer to the current type.</span></span></summary>
        <returns><span data-ttu-id="13e28-1301"><see cref="T:System.Type" /> 物件，代表指向目前類型之 Unmanaged 指標的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1301">A <see cref="T:System.Type" /> object that represents the type of an unmanaged pointer to the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1302"><xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A>方法可用來產生參數清單的指標類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1302">The <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-1303">使用 Microsoft intermediate language (MSIL) 語法中，如果目前<xref:System.Reflection.Emit.TypeBuilder>代表`MyType`，則這個方法所傳回的型別會是`MyType*`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1303">Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13e28-1304">下列程式碼範例會建立動態模組，名為抽象型別`Sample`，和名為抽象方法`TestMethod`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1304">The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`.</span></span> <span data-ttu-id="13e28-1305">`TestMethod` 會採用`ref`參數 (`ByRef` Visual Basic 中) 的型別`Sample`，類型的指標`Sample`，和類型的陣列`Sample`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1305">`TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`.</span></span> <span data-ttu-id="13e28-1306">它會傳回類型的二維陣列`Sample`。</span><span class="sxs-lookup"><span data-stu-id="13e28-1306">It returns a two-dimensional array of type `Sample`.</span></span> <span data-ttu-id="13e28-1307">在程式碼範例會儲存至磁碟，動態模組讓您可以檢查它與[Ildasm.exe （IL 反組譯工具）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1307">The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
 [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]
 [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.TypeBuilder.MakeByRefType" />
        <altmember cref="Overload:System.Reflection.Emit.TypeBuilder.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.TypeBuilder.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1308">擷取包含這個類型定義的動態模組。</span><span class="sxs-lookup"><span data-stu-id="13e28-1308">Retrieves the dynamic module that contains this type definition.</span></span></summary>
        <value><span data-ttu-id="13e28-1309">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1309">Read-only.</span></span> <span data-ttu-id="13e28-1310">擷取包含這個類型定義的動態模組。</span><span class="sxs-lookup"><span data-stu-id="13e28-1310">Retrieves the dynamic module that contains this type definition.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.TypeBuilder.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1311">擷取這個類型的名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-1311">Retrieves the name of this type.</span></span></summary>
        <value><span data-ttu-id="13e28-1312">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1312">Read-only.</span></span> <span data-ttu-id="13e28-1313">擷取這個類型的 <see cref="T:System.String" /> 名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-1313">Retrieves the <see cref="T:System.String" /> name of this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public override string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Reflection.Emit.TypeBuilder.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1314">擷取定義這個 <see langword="TypeBuilder" /> 的命名空間。</span><span class="sxs-lookup"><span data-stu-id="13e28-1314">Retrieves the namespace where this <see langword="TypeBuilder" /> is defined.</span></span></summary>
        <value><span data-ttu-id="13e28-1315">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1315">Read-only.</span></span> <span data-ttu-id="13e28-1316">擷取定義這個 <see langword="TypeBuilder" /> 的命名空間。</span><span class="sxs-lookup"><span data-stu-id="13e28-1316">Retrieves the namespace where this <see langword="TypeBuilder" /> is defined.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PackingSize">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PackingSize PackingSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Emit.PackingSize PackingSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.PackingSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackingSize As PackingSize" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::PackingSize PackingSize { System::Reflection::Emit::PackingSize get(); };" />
      <MemberSignature Language="F#" Value="member this.PackingSize : System.Reflection.Emit.PackingSize" Usage="System.Reflection.Emit.TypeBuilder.PackingSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PackingSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1317">擷取這個類型的封裝大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-1317">Retrieves the packing size of this type.</span></span></summary>
        <value><span data-ttu-id="13e28-1318">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1318">Read-only.</span></span> <span data-ttu-id="13e28-1319">擷取這個類型的封裝大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-1319">Retrieves the packing size of this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.TypeBuilder.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1320">傳回用來取得這個類型的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1320">Returns the type that was used to obtain this type.</span></span></summary>
        <value><span data-ttu-id="13e28-1321">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1321">Read-only.</span></span> <span data-ttu-id="13e28-1322">用來取得這個類型的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1322">The type that was used to obtain this type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13e28-1323">設定自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1323">Sets a custom attribute.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.Emit.CustomAttributeBuilder -&gt; unit" Usage="typeBuilder.SetCustomAttribute customBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder"><span data-ttu-id="13e28-1324">定義自訂屬性的協助程式類別執行個體。</span><span class="sxs-lookup"><span data-stu-id="13e28-1324">An instance of a helper class to define the custom attribute.</span></span></param>
        <summary><span data-ttu-id="13e28-1325">使用自訂屬性產生器來設定自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1325">Set a custom attribute using a custom attribute builder.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="13e28-1326">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="13e28-1326">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="13e28-1327">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="13e28-1327">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-1328"><paramref name="customBuilder" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1328"><paramref name="customBuilder" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-1329">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1329">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.ConstructorInfo * byte[] -&gt; unit" Usage="typeBuilder.SetCustomAttribute (con, binaryAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con"><span data-ttu-id="13e28-1330">自訂屬性的建構函式。</span><span class="sxs-lookup"><span data-stu-id="13e28-1330">The constructor for the custom attribute.</span></span></param>
        <param name="binaryAttribute"><span data-ttu-id="13e28-1331">代表屬性的位元組 Blob。</span><span class="sxs-lookup"><span data-stu-id="13e28-1331">A byte blob representing the attributes.</span></span></param>
        <summary><span data-ttu-id="13e28-1332">使用指定的自訂屬性 Blob 來設定自訂屬性。</span><span class="sxs-lookup"><span data-stu-id="13e28-1332">Sets a custom attribute using a specified custom attribute blob.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1333">如需有關如何格式化`binaryAttribute`，請參閱 < Common Language Infrastructure (CLI) 文件中，特別是 「 第二部分：中繼資料定義和語意 」。</span><span class="sxs-lookup"><span data-stu-id="13e28-1333">For more information on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="13e28-1334">您可以線上取得這份文件；請參閱 MSDN 上的 [ECMA C# 和通用語言基礎結構標準](https://go.microsoft.com/fwlink/?LinkID=99212)，以及 Ecma International 網站上的[標準 ECMA-335 - 通用語言基礎結構 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1334">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="13e28-1335">開頭[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，這個成員已不再需要<xref:System.Security.Permissions.ReflectionPermission>使用<xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType>旗標。</span><span class="sxs-lookup"><span data-stu-id="13e28-1335">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="13e28-1336">(請參閱[反映發出中的安全性問題](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)。)若要使用這項功能，您的應用程式應將目標設為 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] (含) 以後版本。</span><span class="sxs-lookup"><span data-stu-id="13e28-1336">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="13e28-1337"><paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1337"><paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-1338">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1338">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetParent">
      <MemberSignature Language="C#" Value="public void SetParent (Type parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParent(class System.Type parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParent (parent As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParent(Type ^ parent);" />
      <MemberSignature Language="F#" Value="member this.SetParent : Type -&gt; unit" Usage="typeBuilder.SetParent parent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parent" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="13e28-1339">新的基底類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1339">The new base type.</span></span></param>
        <summary><span data-ttu-id="13e28-1340">設定目前建構中之類型的基底類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1340">Sets the base type of the type currently under construction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1341">如果`parent`已`null`，<xref:System.Object>做為基底類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1341">If `parent` is `null`, <xref:System.Object> is used as the base type.</span></span>  
  
 <span data-ttu-id="13e28-1342">在.NET framework 1.0 和 1.1 版中，不會擲回例外狀況`parent`為介面類型，但<xref:System.TypeLoadException>時擲回<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1342">In the .NET Framework versions 1.0 and 1.1, no exception is thrown if `parent` is an interface type, but a <xref:System.TypeLoadException> is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.</span></span>  
  
 <span data-ttu-id="13e28-1343"><xref:System.Reflection.Emit.TypeBuilder.SetParent%2A>方法不會檢查大部分的無效的父類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1343">The <xref:System.Reflection.Emit.TypeBuilder.SetParent%2A> method does not check for most invalid parent types.</span></span> <span data-ttu-id="13e28-1344">比方說，不會拒絕具有沒有預設建構函式，當目前的類型都有預設建構函式時，它不會拒絕密封的類型，而不會拒絕的父類型<xref:System.Delegate>型別。</span><span class="sxs-lookup"><span data-stu-id="13e28-1344">For example, it does not reject a parent type that has no default constructor when the current type has a default constructor, it does not reject sealed types, and it does not reject the <xref:System.Delegate> type.</span></span> <span data-ttu-id="13e28-1345">在這些情況下，會擲回例外狀況<xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="13e28-1345">In all these cases, exceptions are thrown by the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-1346">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1346">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span>  
  
<span data-ttu-id="13e28-1347">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-1347">-or-</span></span> 
 <span data-ttu-id="13e28-1348"><paramref name="parent" /> 為 <see langword="null" />，而且目前的執行個體代表其屬性不包含 <see cref="F:System.Reflection.TypeAttributes.Abstract" /> 的介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-1348"><paramref name="parent" /> is <see langword="null" />, and the current instance represents an interface whose attributes do not include <see cref="F:System.Reflection.TypeAttributes.Abstract" />.</span></span>  
  
<span data-ttu-id="13e28-1349">-或-</span><span class="sxs-lookup"><span data-stu-id="13e28-1349">-or-</span></span> 
<span data-ttu-id="13e28-1350">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1350">For the current dynamic type, the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> property is <see langword="false" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13e28-1351"><paramref name="parent" /> 是介面。</span><span class="sxs-lookup"><span data-stu-id="13e28-1351"><paramref name="parent" /> is an interface.</span></span> <span data-ttu-id="13e28-1352">這是 .NET Framework 2.0 版的新例外狀況條件。</span><span class="sxs-lookup"><span data-stu-id="13e28-1352">This exception condition is new in the .NET Framework version 2.0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Size { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Size : int" Usage="System.Reflection.Emit.TypeBuilder.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1353">擷取類型的總大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-1353">Retrieves the total size of a type.</span></span></summary>
        <value><span data-ttu-id="13e28-1354">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1354">Read-only.</span></span> <span data-ttu-id="13e28-1355">擷取這個型別的總大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-1355">Retrieves this type's total size.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _TypeBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_TypeBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="13e28-1356">保留供未來使用。</span><span class="sxs-lookup"><span data-stu-id="13e28-1356">Reserved for future use.</span></span> <span data-ttu-id="13e28-1357">必須是 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="13e28-1357">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="13e28-1358">要對應之傳入的名稱陣列。</span><span class="sxs-lookup"><span data-stu-id="13e28-1358">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="13e28-1359">要對應的名稱計數。</span><span class="sxs-lookup"><span data-stu-id="13e28-1359">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="13e28-1360">用於解譯名稱的地區設定內容。</span><span class="sxs-lookup"><span data-stu-id="13e28-1360">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="13e28-1361">呼叫端配置的陣列，用於接收對應於名稱的 ID。</span><span class="sxs-lookup"><span data-stu-id="13e28-1361">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="13e28-1362">將一組名稱對應至一組對應的分派識別項 (Dispatch Identifier)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1362">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1363">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="13e28-1363">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="13e28-1364">如需詳細資訊`IDispatch::GetIDsOfNames`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="13e28-1364">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="13e28-1365">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="13e28-1365">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _TypeBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_TypeBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="13e28-1366">要傳回的類型資訊。</span><span class="sxs-lookup"><span data-stu-id="13e28-1366">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="13e28-1367">類型資訊的地區設定識別項。</span><span class="sxs-lookup"><span data-stu-id="13e28-1367">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="13e28-1368">接收要求的類型資訊物件的指標。</span><span class="sxs-lookup"><span data-stu-id="13e28-1368">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="13e28-1369">擷取物件的類型資訊，可以用來取得介面的類型資訊。</span><span class="sxs-lookup"><span data-stu-id="13e28-1369">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1370">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="13e28-1370">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="13e28-1371">如需詳細資訊`IDispatch::GetTypeInfo`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="13e28-1371">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="13e28-1372">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="13e28-1372">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _TypeBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _TypeBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_TypeBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="13e28-1373">指向接收物件提供的類型資訊介面數目的位置。</span><span class="sxs-lookup"><span data-stu-id="13e28-1373">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="13e28-1374">擷取物件提供的類型資訊介面數目 (0 或 1)。</span><span class="sxs-lookup"><span data-stu-id="13e28-1374">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1375">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="13e28-1375">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="13e28-1376">如需詳細資訊`IDispatch::GetTypeInfoCount`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="13e28-1376">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="13e28-1377">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="13e28-1377">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._TypeBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _TypeBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._TypeBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _TypeBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._TypeBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_TypeBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._TypeBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="13e28-1378">辨識成員。</span><span class="sxs-lookup"><span data-stu-id="13e28-1378">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="13e28-1379">保留供未來使用。</span><span class="sxs-lookup"><span data-stu-id="13e28-1379">Reserved for future use.</span></span> <span data-ttu-id="13e28-1380">必須是 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="13e28-1380">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="13e28-1381">地區設定內容，用於解譯引數。</span><span class="sxs-lookup"><span data-stu-id="13e28-1381">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="13e28-1382">描述呼叫之內容的旗標。</span><span class="sxs-lookup"><span data-stu-id="13e28-1382">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="13e28-1383">結構的指標，此結構包含引數陣列、指名引數之 DISPID 引數的陣列，以及陣列中項目數目的計數。</span><span class="sxs-lookup"><span data-stu-id="13e28-1383">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="13e28-1384">指向用於儲存結果之位置的指標。</span><span class="sxs-lookup"><span data-stu-id="13e28-1384">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="13e28-1385">包含例外狀況資訊的結構指標。</span><span class="sxs-lookup"><span data-stu-id="13e28-1385">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="13e28-1386">第一個有錯誤的引數索引。</span><span class="sxs-lookup"><span data-stu-id="13e28-1386">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="13e28-1387">提供物件所公開的屬性和方法的存取權。</span><span class="sxs-lookup"><span data-stu-id="13e28-1387">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1388">這個方法會從 unmanaged 程式碼，是用於存取 managed 類別，並不會呼叫從 managed 程式碼。</span><span class="sxs-lookup"><span data-stu-id="13e28-1388">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="13e28-1389">如需詳細資訊`IDispatch::Invoke`，請參閱 MSDN Library。</span><span class="sxs-lookup"><span data-stu-id="13e28-1389">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="13e28-1390">不支援使用 COM <c>IDispatch</c> 介面進行晚期繫結的存取。</span><span class="sxs-lookup"><span data-stu-id="13e28-1390">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.TypeBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="typeBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13e28-1391">傳回不含命名空間的類型名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-1391">Returns the name of the type excluding the namespace.</span></span></summary>
        <returns><span data-ttu-id="13e28-1392">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1392">Read-only.</span></span> <span data-ttu-id="13e28-1393">不含命名空間的類型名稱。</span><span class="sxs-lookup"><span data-stu-id="13e28-1393">The name of the type excluding the namespace.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public override RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Reflection.Emit.TypeBuilder.TypeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1394">在動態模組中不支援。</span><span class="sxs-lookup"><span data-stu-id="13e28-1394">Not supported in dynamic modules.</span></span></summary>
        <value><span data-ttu-id="13e28-1395">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1395">Read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13e28-1396">擷取型別使用<xref:System.Type.GetType%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>和擷取的型別上使用反映。</span><span class="sxs-lookup"><span data-stu-id="13e28-1396">Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="13e28-1397">在動態模組中不支援。</span><span class="sxs-lookup"><span data-stu-id="13e28-1397">Not supported in dynamic modules.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeToken">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeToken TypeToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Emit.TypeToken TypeToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.TypeToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeToken As TypeToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::TypeToken TypeToken { System::Reflection::Emit::TypeToken get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeToken : System.Reflection.Emit.TypeToken" Usage="System.Reflection.Emit.TypeBuilder.TypeToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1398">傳回這個類型的類型語彙基元。</span><span class="sxs-lookup"><span data-stu-id="13e28-1398">Returns the type token of this type.</span></span></summary>
        <value><span data-ttu-id="13e28-1399">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1399">Read-only.</span></span> <span data-ttu-id="13e28-1400">傳回這個類型的 <see langword="TypeToken" />。</span><span class="sxs-lookup"><span data-stu-id="13e28-1400">Returns the <see langword="TypeToken" /> of this type.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-1401">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1401">The type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public override Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Reflection.Emit.TypeBuilder.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1402">傳回這個 <see langword="TypeBuilder" /> 的基礎系統類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1402">Returns the underlying system type for this <see langword="TypeBuilder" />.</span></span></summary>
        <value><span data-ttu-id="13e28-1403">唯讀。</span><span class="sxs-lookup"><span data-stu-id="13e28-1403">Read-only.</span></span> <span data-ttu-id="13e28-1404">傳回基礎系統類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1404">Returns the underlying system type.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13e28-1405">這個類型是一種列舉，但沒有基礎系統類型。</span><span class="sxs-lookup"><span data-stu-id="13e28-1405">This type is an enumeration, but there is no underlying system type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnspecifiedTypeSize">
      <MemberSignature Language="C#" Value="public const int UnspecifiedTypeSize = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 UnspecifiedTypeSize = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize" />
      <MemberSignature Language="VB.NET" Value="Public Const UnspecifiedTypeSize As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int UnspecifiedTypeSize = 0;" />
      <MemberSignature Language="F#" Value="val mutable UnspecifiedTypeSize : int" Usage="System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="13e28-1406">代表未指定該類型的總大小。</span><span class="sxs-lookup"><span data-stu-id="13e28-1406">Represents that total size for the type is not specified.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>