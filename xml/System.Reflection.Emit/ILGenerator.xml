<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ILGenerator.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c0ca2e1013cb2b77f0e0eafae9f9f5baa73cf5d97.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ca2e1013cb2b77f0e0eafae9f9f5baa73cf5d97</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ILGenerator">
          <source>Generates Microsoft intermediate language (MSIL) instructions.</source>
          <target state="translated">產生 Microsoft Intermediate Language (MSIL) 指令。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ILGenerator">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> classes) and for standalone dynamic methods (represented by the <ph id="ph4">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> 用來在動態組件中產生方法主體的方法和建構函式 (由<ph id="ph2">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>和<ph id="ph3">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph>類別) 及獨立的動態方法 (由<ph id="ph4">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>類別)。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ILGenerator">
          <source>To obtain an <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">若要取得<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>，使用<ph id="ph2">&lt;xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph>， <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph>，和<ph id="ph4">&lt;xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.ILGenerator">
          <source>MSIL is used as input to a just-in-time (JIT) compiler.</source>
          <target state="translated">MSIL 做為在 just-in-time (JIT) 編譯器的輸入。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the exception.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，代表例外狀況。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>Begins a catch block.</source>
          <target state="translated">開始 Catch 區塊。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>Emits a branch instruction to the end of the current exception block.</source>
          <target state="translated">會發出至目前的例外狀況區塊結尾的分支指令。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>If the filter exception block returns the <ph id="ph1">`constant exception_execute_handler`</ph> (see the documentation for the Common Language Infrastructure Instruction Set), the argument to the <ph id="ph2">`BeginCatchBlock`</ph> is not checked.</source>
          <target state="translated">如果篩選條件例外狀況區塊傳回<ph id="ph1">`constant exception_execute_handler`</ph>（請參閱通用語言基礎結構指令集的文件） 的引數<ph id="ph2">`BeginCatchBlock`</ph>就不會檢查。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`BeginCatchBlock`</ph> method.</source>
          <target state="translated">下列程式碼範例示範的相關用法<ph id="ph1">`BeginCatchBlock`</ph>方法。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>The catch block is within a filtered exception.</source>
          <target state="translated">Catch 區塊在經過篩選的例外狀況內。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source><ph id="ph1">&lt;paramref name="exceptionType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptionType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，而例外狀況篩選器區塊還未傳回數值，以表示 finally 區塊應該執行，直到找到這個 catch 區塊為止。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
          <source>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</source>
          <target state="translated">產生的 Microsoft Intermediate Language (MSIL) 目前並不在例外狀況區塊中。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>Begins an exception block for a filtered exception.</source>
          <target state="translated">為篩選的例外狀況開始例外狀況區塊。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>Emits a branch instruction to the end of the current exception block.</source>
          <target state="translated">會發出至目前的例外狀況區塊結尾的分支指令。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, emitting filtered exception blocks is not supported.</source>
          <target state="translated">如果目前<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>聯<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>不支援物件，發出篩選的例外狀況區塊。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> can be used to construct a dynamic method that uses filtered exception blocks.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> 可用來建構動態方法會使用篩選例外狀況區塊。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</source>
          <target state="translated">產生的 Microsoft Intermediate Language (MSIL) 目前並不在例外狀況區塊中。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> 屬於 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
          <source>Begins an exception block for a non-filtered exception.</source>
          <target state="translated">為非篩選的例外狀況開始例外狀況區塊。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
          <source>The label for the end of the block.</source>
          <target state="translated">區塊結尾的標記 (Label)。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
          <source>This will leave you in the correct place to execute finally blocks or to finish the try.</source>
          <target state="translated">這樣可以讓您留在正確的地方執行 Finally 區塊，或者完成試驗動作。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
          <source>Creating an exception block records some information, but does not actually emit any Microsoft intermediate language (MSIL) onto the stream.</source>
          <target state="translated">建立例外狀況區塊記錄的一些資訊，但實際上不會發出在資料流任何 Microsoft intermediate language (MSIL)。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`BeginExceptionBlock`</ph> method.</source>
          <target state="translated">下列程式碼範例示範的相關用法<ph id="ph1">`BeginExceptionBlock`</ph>方法。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.</source>
          <target state="translated">在 Microsoft Intermediate Language (MSIL) 資料流上開始例外狀況錯誤區塊。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, emitting exception fault blocks is not supported.</source>
          <target state="translated">如果目前<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>聯<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>不支援物件，發出例外狀況錯誤區塊。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> can be used to construct a dynamic method that uses exception fault blocks.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> 可用來建構使用例外狀況錯誤區塊的動態方法。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>The following code sample illustrates the use of <ph id="ph1">`BeginFaultBlock`</ph>.</source>
          <target state="translated">下列程式碼範例說明如何使用<ph id="ph1">`BeginFaultBlock`</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>The MSIL being generated is not currently in an exception block.</source>
          <target state="translated">產生的 MSIL 目前並不在例外狀況區塊中。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> 屬於 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
          <source>Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.</source>
          <target state="translated">在 Microsoft Intermediate Language (MSIL) 指令資料流中開始 finally 區塊。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
          <source>The following code sample illustrates the use of <ph id="ph1">`BeginFinallyBlock`</ph>.</source>
          <target state="translated">下列程式碼範例說明如何使用<ph id="ph1">`BeginFinallyBlock`</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
          <source>The MSIL being generated is not currently in an exception block.</source>
          <target state="translated">產生的 MSIL 目前並不在例外狀況區塊中。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>Begins a lexical scope.</source>
          <target state="translated">開始語彙範圍 (Lexical Scope)。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>This method is used to emit symbolic information.</source>
          <target state="translated">這個方法用來發出符號資訊。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>Local variables declared after <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph> are scoped until the corresponding <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.EndScope%2A&gt;</ph> is called.</source>
          <target state="translated">在之後宣告的區域變數<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph>分為直到對應<ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.EndScope%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.</source>
          <target state="translated">如果目前<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>聯<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>物件，不支援符號資訊。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>The following code sample illustrates the use of <ph id="ph1">`BeginScope`</ph> and <ph id="ph2">`EndScope`</ph>.</source>
          <target state="translated">下列程式碼範例說明如何使用<ph id="ph1">`BeginScope`</ph>和<ph id="ph2">`EndScope`</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.BeginScope">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> 屬於 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ILGenerator">
          <source>Declares a local variable.</source>
          <target state="translated">宣告區域變數。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the type of the local variable.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，表示區域變數的型別。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>Declares a local variable of the specified type.</source>
          <target state="translated">宣告指定型別的區域變數。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>The declared local variable.</source>
          <target state="translated">宣告的區域變數。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>The local variable is created in the current lexical scope; for example, if code is being emitted in a <ph id="ph1">`for`</ph> loop (<ph id="ph2">`For`</ph> loop in Visual Basic), the scope of the variable is the loop.</source>
          <target state="translated">本機變數會建立在目前的語彙範圍。例如，如果程式碼中發出<ph id="ph1">`for`</ph>迴圈 (<ph id="ph2">`For`</ph>迴圈在 Visual Basic 中的)，變數的範圍是迴圈。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>A local variable created with this overload is not pinned.</source>
          <target state="translated">不會固定使用此多載建立的本機變數。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>To create a pinned variable for use with unmanaged pointers, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29&gt;</ph> method overload.</source>
          <target state="translated">若要建立固定的變數，使用 unmanaged 指標，使用<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29&gt;</ph>方法多載。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>The following code example demonstrates the use of the <ph id="ph1">`DeclareLocal`</ph> method.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">`DeclareLocal`</ph>方法。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>This code is part of a larger code example for the <ph id="ph1">&lt;xref:System.Reflection.Emit.LocalBuilder&gt;</ph> class.</source>
          <target state="translated">這段程式碼是針對較大的程式碼範例的一部分<ph id="ph1">&lt;xref:System.Reflection.Emit.LocalBuilder&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source><ph id="ph1">&lt;paramref name="localType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
          <source>The containing type has been created by the <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> method.</source>
          <target state="translated">包含型別已由 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> 方法建立。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that represents the type of the local variable.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 物件，表示區域變數的型別。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to pin the object in memory; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若要將物件固定 (Pin) 在記憶體中，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>Declares a local variable of the specified type, optionally pinning the object referred to by the variable.</source>
          <target state="translated">宣告指定型別的區域變數，選擇性固定 (Pin) 變數所參考的物件。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.LocalBuilder" /&gt;</ph> object that represents the local variable.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Emit.LocalBuilder" /&gt;</ph> 物件，代表區域變數。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>The local variable is created in the current lexical scope; for example, if code is being emitted in a <ph id="ph1">`for`</ph> loop (<ph id="ph2">`For`</ph> loop in Visual Basic), the scope of the variable is the loop.</source>
          <target state="translated">本機變數會建立在目前的語彙範圍。例如，如果程式碼中發出<ph id="ph1">`for`</ph>迴圈 (<ph id="ph2">`For`</ph>迴圈在 Visual Basic 中的)，變數的範圍是迴圈。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer.</source>
          <target state="translated">Unsafe 程式碼中，它可以所參考之 unmanaged 指標之前必須固定物件。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>While the referenced object is pinned, it cannot be moved by garbage collection.</source>
          <target state="translated">雖然參考的物件已釘選，無法將它移透過記憶體回收。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="localType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>The containing type has been created by the <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> method.</source>
          <target state="translated">包含型別已由 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /&gt;</ph> 方法建立。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>The method body of the enclosing method has been created by the <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /&gt;</ph> method.</source>
          <target state="translated">封入方法的方法主體已由 <ph id="ph1">&lt;see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /&gt;</ph> 方法建立。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
          <source>The method with which this <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> is associated is not represented by a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph>.</source>
          <target state="translated">與這個 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> 關聯的方法不是由 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.MethodBuilder" /&gt;</ph> 代表。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DefineLabel">
          <source>Declares a new label.</source>
          <target state="translated">宣告新的標記。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.DefineLabel">
          <source>Returns a new label that can be used as a token for branching.</source>
          <target state="translated">傳回新標記，可以用作分支的語彙基元 (Token)。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DefineLabel">
          <source>To set the position of the label within the stream, you must call <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</source>
          <target state="translated">若要設定標籤的位置在資料流中，您必須呼叫<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DefineLabel">
          <source>This is just a token and does not yet represent any particular location within the stream.</source>
          <target state="translated">這只是語彙基元，並還沒有表示在資料流中的任何特定位置。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.DefineLabel">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`DefineLabel`</ph> method.</source>
          <target state="translated">下列程式碼範例示範的相關用法<ph id="ph1">`DefineLabel`</ph>方法。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ILGenerator">
          <source>Puts an instruction onto the Microsoft Intermediate Language (MSIL) stream for the just-in-time (JIT) compiler.</source>
          <target state="translated">放置指令到 Just-In-Time (JIT) 編譯器的 Microsoft Intermediate Language (MSIL) 資料流中。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.</source>
          <target state="translated">Microsoft Intermediate Language (MSIL) 指令，要放置到資料流中。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>Puts the specified instruction onto the stream of instructions.</source>
          <target state="translated">放置指定的指令到指令資料流中。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>If the <ph id="ph1">`opcode`</ph> parameter requires an argument, the caller must ensure that the argument length matches the length of the declared parameter.</source>
          <target state="translated">如果<ph id="ph1">`opcode`</ph>參數需要一個引數，呼叫端必須確保引數長度符合宣告的參數長度。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>Otherwise, results will be unpredictable.</source>
          <target state="translated">否則，結果將無法預測。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>For example, if the Emit instruction requires a 2-byte operand and the caller supplies a 4-byte operand, the runtime will emit two additional bytes to the instruction stream.</source>
          <target state="translated">例如，如果發出指令需要 2 個位元組的運算元，而且呼叫端提供 4 個位元組的運算元，執行階段會發出指令資料流至兩個額外的位元組。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>These extra bytes will be <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Nop&gt;</ph> instructions.</source>
          <target state="translated">這些額外位元組將<ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes.Nop&gt;</ph>指示。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>The instruction values are defined in <ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes&gt;</ph>.</source>
          <target state="translated">指示值會定義在<ph id="ph1">&lt;xref:System.Reflection.Emit.OpCodes&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
          <source>The code sample below demonstrates the use of <ph id="ph1">`Emit`</ph> to generate MSIL output via an instance of <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">`Emit`</ph>產生 MSIL 輸出的執行個體透過<ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">MSIL 指令，要放置到資料流中。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
          <source>The character argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">字元引數，緊接指令之後立即被推入資料流。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
          <source>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">放置指定的指令和字元引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">MSIL 指令，要放置到資料流中。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
          <source>Defined in the <ph id="ph1">&lt;see langword="OpCodes" /&gt;</ph> enumeration.</source>
          <target state="translated">已定義於 <ph id="ph1">&lt;see langword="OpCodes" /&gt;</ph> 列舉型別中。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
          <source>The numerical argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">數字引數，緊接指令之後立即被推入資料流。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
          <source>The <ph id="ph1">&lt;see langword="Int" /&gt;</ph> argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Int" /&gt;</ph> 引數，緊接指令之後立即被推入資料流。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">MSIL 指令，要放置到資料流中。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
          <source>The numerical argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">數字引數，緊接指令之後立即被推入資料流。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">MSIL 指令，要放置到資料流中。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
          <source>The numerical argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">數字引數，緊接指令之後立即被推入資料流。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>A <ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph> representing a constructor.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph>，表示建構函式。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">放置指定建構函式的指定指令和中繼資料 (Metadata) 語彙基元到指令的 Microsoft Intermediate Language (MSIL) 資料流中。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>The location of <ph id="ph1">`con`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
          <target state="translated">位置<ph id="ph1">`con`</ph>以便指令資料流可以修補視保存至可攜式執行檔 (PE) 檔的模組時，就會記錄。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
          <source>This exception is new in the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.</source>
          <target state="translated">這個例外狀況在 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> 中是新的。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>The label to which to branch from this location.</source>
          <target state="translated">標記，要從這個位置分支至的。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</source>
          <target state="translated">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流中，並留下空間，以便在完成修復時加入標記。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>Labels are created using <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph>, and their location within the stream is fixed by using <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</source>
          <target state="translated">使用建立標籤<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph>，且資料流內的位置固定使用<ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.</source>
          <target state="translated">如果使用單一位元組指令時，標籤就可以表示最多 127 個位元組資料流沿著跳躍的點。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source><ph id="ph1">`opcode`</ph> must represent a branch instruction.</source>
          <target state="translated"><ph id="ph1">`opcode`</ph> 必須代表的分支指令。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>Because branches are relative instructions, <ph id="ph1">`label`</ph> will be replaced with the correct offset to branch during the fixup process.</source>
          <target state="translated">分支是相對的指令，因為<ph id="ph1">`label`</ph>會取代在修復程序期間以分支的正確位移。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>The code sample below illustrates the creation of a dynamic method with a jump table.</source>
          <target state="translated">下列程式碼範例說明具有跳躍表格的動態方法的建立。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
          <source>The jump table is built using an array of <ph id="ph1">&lt;xref:System.Reflection.Emit.Label&gt;</ph>.</source>
          <target state="translated">使用陣列的內建跳躍表格<ph id="ph1">&lt;xref:System.Reflection.Emit.Label&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>The array of label objects to which to branch from this location.</source>
          <target state="translated">標記物件陣列，要從這個位置分支至的。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>All of the labels will be used.</source>
          <target state="translated">會用到所有的標記。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</source>
          <target state="translated">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流中，並留下空間，以便在完成修復時加入標記。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>Emits a switch table.</source>
          <target state="translated">發出參數資料表。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>Labels are created using <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph> and their location within the stream is fixed by using <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>.</source>
          <target state="translated">使用建立標籤<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A&gt;</ph>，且資料流內的位置固定使用<ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.</source>
          <target state="translated">如果使用單一位元組指令時，標籤就可以表示最多 127 個位元組資料流沿著跳躍的點。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source><ph id="ph1">`opcode`</ph> must represent a branch instruction.</source>
          <target state="translated"><ph id="ph1">`opcode`</ph> 必須代表的分支指令。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>Because branches are relative instructions, <ph id="ph1">`label`</ph> will be replaced with the correct offset to branch during the fixup process.</source>
          <target state="translated">分支是相對的指令，因為<ph id="ph1">`label`</ph>會取代在修復程序期間以分支的正確位移。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>The code sample below illustrates the creation of a dynamic method with a jump table.</source>
          <target state="translated">下列程式碼範例說明具有跳躍表格的動態方法的建立。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>The jump table is built using an array of <ph id="ph1">&lt;xref:System.Reflection.Emit.Label&gt;</ph>.</source>
          <target state="translated">使用陣列的內建跳躍表格<ph id="ph1">&lt;xref:System.Reflection.Emit.Label&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source><ph id="ph1">&lt;paramref name="con" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="con" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
          <source>This exception is new in the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>.</source>
          <target state="translated">這個例外狀況在 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> 中是新的。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source>A local variable.</source>
          <target state="translated">區域變數。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.</source>
          <target state="translated">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定區域變數的索引。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source>The parent method of the <ph id="ph1">&lt;paramref name="local" /&gt;</ph> parameter does not match the method associated with this <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="local" /&gt;</ph> 參數的父方法與這個 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> 的相關聯方法不相符。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source><ph id="ph1">&lt;paramref name="local" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="local" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
          <source><ph id="ph1">&lt;paramref name="opcode" /&gt;</ph> is a single-byte instruction, and <ph id="ph2">&lt;paramref name="local" /&gt;</ph> represents a local variable with an index greater than <ph id="ph3">&lt;see langword="Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="opcode" /&gt;</ph> 是單一位元組的指令，而 <ph id="ph2">&lt;paramref name="local" /&gt;</ph> 表示索引大於 <ph id="ph3">&lt;see langword="Byte.MaxValue" /&gt;</ph> 的區域變數。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
          <source>A helper for constructing a signature token.</source>
          <target state="translated">Helper，用來建構簽章語彙基元。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
          <source>Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">放置指定的指令和簽章語彙基元到指令的 Microsoft Intermediate Language (MSIL) 資料流。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
          <source><ph id="ph1">&lt;paramref name="signature" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="signature" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
          <source>A <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> representing a field.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph>，表示欄位。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
          <source>Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">放置指定欄位的指定指令和中繼資料語彙基元到指令的 Microsoft Intermediate Language (MSIL) 資料流中。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
          <source>The location of <ph id="ph1">`field`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
          <target state="translated">位置<ph id="ph1">`field`</ph>以便指令資料流可以修補視保存至可攜式執行檔 (PE) 檔的模組時，就會記錄。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> representing a method.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph>，表示方法。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.</source>
          <target state="translated">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定方法的中繼資料語彙基元。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>The location of <ph id="ph1">`meth`</ph> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
          <target state="translated">位置<ph id="ph1">`meth`</ph>以便指令資料流可以修補視保存至可攜式執行檔 (PE) 檔的模組時，就會記錄。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>If <ph id="ph1">`meth`</ph> represents a generic method, it must be a generic method definition.</source>
          <target state="translated">如果<ph id="ph1">`meth`</ph>代表泛型方法，它必須是泛型方法定義。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source>That is, its <bpt id="p1">[</bpt>MethodInfo.IsGenericMethodDefinition<ept id="p1">](xref:System.Reflection.MethodBase.IsGenericMethodDefinition)</ept> property must be <ph id="ph1">`true`</ph>.</source>
          <target state="translated">也就是說，其<bpt id="p1">[</bpt>MethodInfo.IsGenericMethodDefinition<ept id="p1">](xref:System.Reflection.MethodBase.IsGenericMethodDefinition)</ept>屬性必須是<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="meth" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="meth" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
          <source><ph id="ph1">&lt;paramref name="meth" /&gt;</ph> is a generic method for which the <ph id="ph2">&lt;see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /&gt;</ph> property is <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="meth" /&gt;</ph> 是泛型方法，其 <ph id="ph2">&lt;see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /&gt;</ph> 屬性為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">MSIL 指令，要放置到資料流中。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
          <source>The character argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated">字元引數，緊接指令之後立即被推入資料流。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
          <source>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">放置指定的指令和字元引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">MSIL 指令，要放置到資料流中。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
          <source>The <ph id="ph1">&lt;see langword="Single" /&gt;</ph> argument pushed onto the stream immediately after the instruction.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Single" /&gt;</ph> 引數，緊接指令之後立即被推入資料流。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
          <source>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</source>
          <target state="translated">放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
          <source>The <ph id="ph1">&lt;see langword="String" /&gt;</ph> to be emitted.</source>
          <target state="translated">要發出的 <ph id="ph1">&lt;see langword="String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.</source>
          <target state="translated">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定字串的中繼資料語彙基元。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
          <source>The location of <ph id="ph1">`str`</ph> is recorded for future fixups if the module is persisted to a portable executable (PE) file.</source>
          <target state="translated">位置<ph id="ph1">`str`</ph>會加以記錄，未來模組保存到可攜式執行檔 (PE) 檔案。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source>The MSIL instruction to be put onto the stream.</source>
          <target state="translated">MSIL 指令，要放置到資料流中。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source>A <ph id="ph1">&lt;see langword="Type" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.</source>
          <target state="translated">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定型別的中繼資料語彙基元。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source>The instruction values are defined in the <ph id="ph1">`OpCodes`</ph> enumeration.</source>
          <target state="translated">指示值會定義在<ph id="ph1">`OpCodes`</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source>The location of <ph id="ph1">`cls`</ph> is recorded so that the token can be patched if necessary when persisting the module to a portable executable (PE) file.</source>
          <target state="translated">位置<ph id="ph1">`cls`</ph>以便語彙基元可以修補視保存至可攜式執行檔 (PE) 檔的模組時，就會記錄。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
          <source><ph id="ph1">&lt;paramref name="cls" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cls" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>Must be <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /&gt;</ph>, or <ph id="ph3">&lt;see cref="F:System.Reflection.Emit.OpCodes.Newobj" /&gt;</ph>.</source>
          <target state="translated">必須是 <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph>、<ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="F:System.Reflection.Emit.OpCodes.Newobj" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The <ph id="ph1">&lt;see langword="varargs" /&gt;</ph> method to be called.</source>
          <target state="translated">要呼叫的 <ph id="ph1">&lt;see langword="varargs" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The types of the optional arguments if the method is a <ph id="ph1">&lt;see langword="varargs" /&gt;</ph> method; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果此方法為 <ph id="ph1">&lt;see langword="varargs" /&gt;</ph> 方法，則為選擇性引數的類型；否則為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>Puts a <ph id="ph1">&lt;see langword="call" /&gt;</ph> or <ph id="ph2">&lt;see langword="callvirt" /&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream to call a <ph id="ph3">&lt;see langword="varargs" /&gt;</ph> method.</source>
          <target state="translated">將 <ph id="ph1">&lt;see langword="call" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="callvirt" /&gt;</ph> 指令放置於 Microsoft Intermediate Language (MSIL) 資料流中，以呼叫 <ph id="ph3">&lt;see langword="varargs" /&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph> method is used to emit calls to <ph id="ph2">`varargs`</ph> methods because there is no overload of the <ph id="ph3">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph> method that specifies the parameter types of the variable arguments.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph>方法用來發出呼叫<ph id="ph2">`varargs`</ph>方法，所以沒有任何多載<ph id="ph3">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>方法所指定的變數引數的參數類型。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>To emit calls to methods that do not use the <ph id="ph1">&lt;xref:System.Reflection.CallingConventions.VarArgs&gt;</ph> calling convention, use the <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29&gt;</ph> method overload.</source>
          <target state="translated">要發出，請勿使用方法的呼叫<ph id="ph1">&lt;xref:System.Reflection.CallingConventions.VarArgs&gt;</ph>呼叫慣例，使用<ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29&gt;</ph>方法多載。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>Version Information</source>
          <target state="translated">版本資訊</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>Beginning with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph> method does not throw an exception when optional parameter types are specified for a method that is not <ph id="ph2">`varargs`</ph>.</source>
          <target state="translated">.NET Framework 2.0 版中，從<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCall%2A&gt;</ph>方法不會擲回例外狀況的方法，不是指定選擇性參數類型時<ph id="ph2">`varargs`</ph>。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source><ph id="ph1">&lt;xref:System.InvalidProgramException&gt;</ph> is thrown when the call is executed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.InvalidProgramException&gt;</ph> 當執行呼叫時，會擲回。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The following code example emits two methods, a <ph id="ph1">`varargs`</ph> method and a method that calls the <ph id="ph2">`varargs`</ph> method.</source>
          <target state="translated">下列程式碼範例會發出兩個方法：<ph id="ph1">`varargs`</ph>方法和方法呼叫<ph id="ph2">`varargs`</ph>方法。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The <ph id="ph1">`EmitCall`</ph> method is used to emit the call to the <ph id="ph2">`varargs`</ph> method.</source>
          <target state="translated"><ph id="ph1">`EmitCall`</ph>方法用來發出呼叫<ph id="ph2">`varargs`</ph>方法。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source><ph id="ph1">&lt;paramref name="opcode" /&gt;</ph> does not specify a method call.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="opcode" /&gt;</ph> 未指定方法呼叫。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source><ph id="ph1">&lt;paramref name="methodInfo" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="methodInfo" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>The calling convention for the method is not <ph id="ph1">&lt;see langword="varargs" /&gt;</ph>, but optional parameter types are supplied.</source>
          <target state="translated">此方法的呼叫慣例不是 <ph id="ph1">&lt;see langword="varargs" /&gt;</ph>，但會提供選擇性參數類型。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
          <source>This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.</source>
          <target state="translated">.NET Framework 1.0 和 1.1 版中會擲回這個例外狀況，但在後續版本中，不會擲回任何例外狀況。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ILGenerator">
          <source>Puts a <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream.</source>
          <target state="translated">將 <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> 指令放到 Microsoft Intermediate Language (MSIL) 資料流中。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>Must be <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph>.</source>
          <target state="translated">必須是 <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>The unmanaged calling convention to be used.</source>
          <target state="translated">要使用的 Unmanaged 呼叫慣例。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the result.</source>
          <target state="translated">結果的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>The types of the required arguments to the instruction.</source>
          <target state="translated">指令需要的參數型別。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>Puts a <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.</source>
          <target state="translated">指定間接呼叫的 Unmanaged 呼叫慣例，將 <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> 指令放置到 Microsoft Intermediate Language (MSIL) 資料流中。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> to put a <ph id="ph2">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph> instruction onto the stream.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph>放置<ph id="ph2">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph>指令資料流。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>Do not use <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>.</source>
          <target state="translated">不要使用 <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
          <source>The following code sample demonstrates the contextual usage of the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> method to call an unmanaged type method external to the dynamic class.</source>
          <target state="translated">下列程式碼範例示範的相關用法<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph>呼叫 unmanaged 的類型方法的外部動態類別的方法。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>The MSIL instruction to be emitted onto the stream.</source>
          <target state="translated">要在資料流中發出的 MSIL 指令。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>Must be <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph>.</source>
          <target state="translated">必須是 <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>The managed calling convention to be used.</source>
          <target state="translated">要使用的 Managed 呼叫慣例。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the result.</source>
          <target state="translated">結果的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>The types of the required arguments to the instruction.</source>
          <target state="translated">指令需要的參數型別。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>The types of the optional arguments for <ph id="ph1">&lt;see langword="varargs" /&gt;</ph> calls.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="varargs" /&gt;</ph> 呼叫的選擇性參數型別。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>Puts a <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.</source>
          <target state="translated">指定間接呼叫的 Managed 呼叫慣例，將 <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Calli" /&gt;</ph> 指令放置到 Microsoft Intermediate Language (MSIL) 資料流中。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph> to put a <ph id="ph2">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph> instruction onto the stream.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A&gt;</ph>放置<ph id="ph2">&lt;xref:System.Reflection.Emit.OpCodes.Calli&gt;</ph>指令資料流。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>Do not use <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>.</source>
          <target state="translated">不要使用 <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.Emit%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source>If <ph id="ph1">`optionalParameterTypes`</ph> specifies optional arguments, <ph id="ph2">`callingConvention`</ph> must include the <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.VarArgs?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">如果<ph id="ph1">`optionalParameterTypes`</ph>指定選擇性引數，<ph id="ph2">`callingConvention`</ph>必須包含<ph id="ph3">&lt;xref:System.Reflection.CallingConventions.VarArgs?displayProperty=nameWithType&gt;</ph>旗標。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
          <source><ph id="ph1">&lt;paramref name="optionalParameterTypes" /&gt;</ph> is not <ph id="ph2">&lt;see langword="null" /&gt;</ph>, but <ph id="ph3">&lt;paramref name="callingConvention" /&gt;</ph> does not include the <ph id="ph4">&lt;see cref="F:System.Reflection.CallingConventions.VarArgs" /&gt;</ph> flag.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="optionalParameterTypes" /&gt;</ph> 不是 <ph id="ph2">&lt;see langword="null" /&gt;</ph>，但是 <ph id="ph3">&lt;paramref name="callingConvention" /&gt;</ph> 沒有包含 <ph id="ph4">&lt;see cref="F:System.Reflection.CallingConventions.VarArgs" /&gt;</ph> 旗標。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.ILGenerator">
          <source>Helper functions to emit a call to <ph id="ph1">&lt;see cref="M:System.Console.WriteLine" /&gt;</ph> with different types of values.</source>
          <target state="translated">Helper 函式，其使用不同的實值型別將呼叫發出至 <ph id="ph1">&lt;see cref="M:System.Console.WriteLine" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>The local variable whose value is to be written to the console.</source>
          <target state="translated">要將其值寫入主控台的本機變數。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>Emits the Microsoft intermediate language (MSIL) necessary to call <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> with the given local variable.</source>
          <target state="translated">發出以指定本機變數呼叫 <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> 所需的 Microsoft 中繼語言 (MSIL)。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>The type of <ph id="ph1">`localBuilder`</ph> must match the parameter type of an overload of the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">型別<ph id="ph1">`localBuilder`</ph>必須符合的多載的參數型別<ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A&gt;</ph> method to write a string to the console in a dynamic method.</source>
          <target state="translated">下列程式碼範例示範的相關用法<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A&gt;</ph>方法，將字串寫入主控台中的動態方法。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>The type of <ph id="ph1">&lt;paramref name="localBuilder" /&gt;</ph> is <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.TypeBuilder" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>, which are not supported.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localBuilder" /&gt;</ph> 的類型是 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.TypeBuilder" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph> (均不支援)。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source>There is no overload of <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> that accepts the type of <ph id="ph2">&lt;paramref name="localBuilder" /&gt;</ph>.</source>
          <target state="translated">沒有任何 <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> 的多載可接受 <ph id="ph2">&lt;paramref name="localBuilder" /&gt;</ph> 的類型。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
          <source><ph id="ph1">&lt;paramref name="localBuilder" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localBuilder" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>The field whose value is to be written to the console.</source>
          <target state="translated">欄位，其值要寫入主控台 (Console)。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>Emits the Microsoft intermediate language (MSIL) necessary to call <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> with the given field.</source>
          <target state="translated">發出以指定欄位呼叫 <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> 所需的 Microsoft Intermediate Language (MSIL)。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>The type of <ph id="ph1">`fld`</ph> must match the parameter type of an overload of the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">型別<ph id="ph1">`fld`</ph>必須符合的多載的參數型別<ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>The following code sample demonstrates the use of the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A&gt;</ph> method to write a string to the console in a dynamic method.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A&gt;</ph>方法，將字串寫入主控台中的動態方法。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>There is no overload of the <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> method that accepts the type of the specified field.</source>
          <target state="translated">沒有 <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> 方法的多載，這個方法接受指定欄位的型別。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;paramref name="fld" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fld" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
          <source>The type of the field is <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.TypeBuilder" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>, which are not supported.</source>
          <target state="translated">欄位的型別為 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.TypeBuilder" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.EnumBuilder" /&gt;</ph>，不支援這些型別。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
          <source>The string to be printed.</source>
          <target state="translated">要列印的字串。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
          <source>Emits the Microsoft intermediate language (MSIL) to call <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph> with a string.</source>
          <target state="translated">發出 Microsoft Intermediate Language (MSIL)，以字串呼叫 <ph id="ph1">&lt;see cref="Overload:System.Console.WriteLine" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
          <source>The string must have already been defined.</source>
          <target state="translated">字串必須已定義。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`EmitWriteLine`</ph> method to write a string to the console in a dynamic method.</source>
          <target state="translated">下列程式碼範例示範的相關用法<ph id="ph1">`EmitWriteLine`</ph>方法，將字串寫入主控台中的動態方法。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
          <source>Ends an exception block.</source>
          <target state="translated">結束例外狀況區塊。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
          <source>The code sample below demonstrates the contextual usage of the <ph id="ph1">`EndExceptionBlock`</ph> method.</source>
          <target state="translated">下列程式碼範例示範的相關用法<ph id="ph1">`EndExceptionBlock`</ph>方法。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
          <source>The end exception block occurs in an unexpected place in the code stream.</source>
          <target state="translated">結束例外狀況區塊發生於程式碼資料流中未預期的地方。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
          <source>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</source>
          <target state="translated">產生的 Microsoft Intermediate Language (MSIL) 目前並不在例外狀況區塊中。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>Ends a lexical scope.</source>
          <target state="translated">結束語彙範圍。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>This method is used to emit symbolic information.</source>
          <target state="translated">這個方法用來發出符號資訊。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>It is used with <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph>.</source>
          <target state="translated">它搭配<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.BeginScope%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.</source>
          <target state="translated">如果目前<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>聯<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>物件，不支援符號資訊。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>The following code sample illustrates the use of <ph id="ph1">`BeginScope`</ph> and <ph id="ph2">`EndScope`</ph>.</source>
          <target state="translated">下列程式碼範例說明如何使用<ph id="ph1">`BeginScope`</ph>和<ph id="ph2">`EndScope`</ph>。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.EndScope">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> 屬於 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph>.</source>
          <target state="translated">在由 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> 發出的 Microsoft intermediate language (MSIL) 資料流中，取得目前位移 (以位元組為單位)。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>The offset in the MSIL stream at which the next instruction will be emitted.</source>
          <target state="translated">MSIL 資料流的位移，下一個指令將在此位置發出。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>This method is transparent, and can be called from partially trusted code.</source>
          <target state="translated">此方法是透明的而且可以從部分信任程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.ILOffset%2A&gt;</ph> property is accessed before any MSIL instructions have been emitted, it returns 0 (zero).</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator.ILOffset%2A&gt;</ph>之前的任何 MSIL 指示已經發出存取屬性，它會傳回 0 （零）。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>When MSIL is generated for dynamic languages, this property can be used to map offsets in the MSIL stream to source code line numbers.</source>
          <target state="translated">當動態語言產生 MSIL 時，這個屬性可用來將 MSIL 資料流中的位移對應至原始程式碼行號。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.ILGenerator.ILOffset">
          <source>The resulting information can be used to provide stack traces when exceptions are thrown.</source>
          <target state="translated">產生的資訊可以用來擲回例外狀況時提供堆疊追蹤。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>The label for which to set an index.</source>
          <target state="translated">標記，要為其設定索引。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.</source>
          <target state="translated">以指定標記來標示 Microsoft Intermediate Language (MSIL) 資料流的目前位置。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>A label cannot be defined more than once.</source>
          <target state="translated">標籤無法定義一次以上。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>The code sample below demonstrates the contextual usage of <ph id="ph1">`MarkLabel`</ph> to implement MSIL branching in a dynamic method.</source>
          <target state="translated">下列程式碼範例示範的相關用法<ph id="ph1">`MarkLabel`</ph>實作分支中的動態方法的 MSIL。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source><ph id="ph1">&lt;paramref name="loc" /&gt;</ph> represents an invalid index into the label array.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="loc" /&gt;</ph>，表示標記陣列中的無效索引。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
          <source>An index for <ph id="ph1">&lt;paramref name="loc" /&gt;</ph> has already been defined.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="loc" /&gt;</ph> 的索引已經定義。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The document for which the sequence point is being defined.</source>
          <target state="translated">文件，要為其定義序列點。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The line where the sequence point begins.</source>
          <target state="translated">行，序列點開始處。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The column in the line where the sequence point begins.</source>
          <target state="translated">行中的欄，序列點開始處。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The line where the sequence point ends.</source>
          <target state="translated">行，序列點結束處。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The column in the line where the sequence point ends.</source>
          <target state="translated">行中的欄，序列點結束處。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Marks a sequence point in the Microsoft intermediate language (MSIL) stream.</source>
          <target state="translated">標記 Microsoft Intermediate Language (MSIL) 資料流中的序列點。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Line numbers are indexed from 1.</source>
          <target state="translated">行號會編製索引，從 1。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Columns are indexed from 0.</source>
          <target state="translated">資料行則是從 0。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The symbolic information normally includes at least one MSIL offset for each source line.</source>
          <target state="translated">符號資訊通常包括至少一個的 MSIL 位移，為每個原始程式行。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved.</source>
          <target state="translated">Just-In-Time (JIT) 編譯器要編譯方法時，會為應該保留的 MSIL 位移清單要求逐步分析服務。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>These MSIL offsets are called <bpt id="p1">*</bpt>sequence points<ept id="p1">*</ept>.</source>
          <target state="translated">這些 MSIL 位移稱為<bpt id="p1">*</bpt>序列點<ept id="p1">*</ept>。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, it does not support symbolic information.</source>
          <target state="translated">如果目前<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>聯<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>物件，不支援符號資訊。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startLine" /&gt;</ph> or <ph id="ph2">&lt;paramref name="endLine" /&gt;</ph> is <ph id="ph3">&amp;lt;</ph>= 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startLine" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="endLine" /&gt;</ph> 是 <ph id="ph3">&amp;lt;</ph>= 0。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> 屬於 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">保留供未來使用。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必須是 IID_NULL。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">要對應之傳入的名稱陣列。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">要對應的名稱計數。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">用於解譯名稱的地區設定內容。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array that receives the IDs corresponding to the names.</source>
          <target state="translated">呼叫端配置的陣列，用於接收對應於名稱的 ID。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">將一組名稱對應至一組對應的分派識別項 (Dispatch Identifier)。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法是從 unmanaged 程式碼，存取 managed 的類別，而且不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">方法使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結呼叫。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">要傳回的類型資訊。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">類型資訊的地區設定識別項。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">接收要求的類型資訊物件的指標。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">擷取物件的類型資訊，可以用來取得介面的類型資訊。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法是從 unmanaged 程式碼，存取 managed 的類別，而且不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetTypeInfo`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">方法使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結呼叫。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">指向接收物件提供的類型資訊介面數目的位置。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">擷取物件提供的類型資訊介面數目 (0 或 1)。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法是從 unmanaged 程式碼，存取 managed 的類別，而且不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">方法使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結呼叫。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">辨識成員。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">保留供未來使用。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">必須是 IID_NULL。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">地區設定內容，用於解譯引數。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">描述呼叫之內容的旗標。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">結構的指標，此結構包含引數陣列、指名引數之 DISPID 引數的陣列，以及陣列中項目數目的計數。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">指向用於儲存結果之位置的指標。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">包含例外狀況資訊的結構指標。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">第一個有錯誤的引數索引。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">提供物件所公開的屬性和方法的存取權。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">這個方法是從 unmanaged 程式碼，存取 managed 的類別，而且不應該從 managed 程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">如需有關<ph id="ph1">`IDispatch::Invoke`</ph>，請參閱 MSDN Library。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The method is called late-bound using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface.</source>
          <target state="translated">方法使用 COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 介面進行晚期繫結呼叫。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source>The class of the type of exception to throw.</source>
          <target state="translated">要擲回的例外狀況型別的類別。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source>Emits an instruction to throw an exception.</source>
          <target state="translated">發出擲回例外狀況的指令。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source>The following code sample demonstrates the contextual usage of <ph id="ph1">`ThrowException`</ph> to throw an exception inside the MSIL of a dynamic method.</source>
          <target state="translated">下列程式碼範例示範的相關用法<ph id="ph1">`ThrowException`</ph>動態方法的 MSIL 內部例外狀況擲回。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source><ph id="ph1">&lt;paramref name="excType" /&gt;</ph> is not the <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> class or a derived class of <ph id="ph3">&lt;see cref="T:System.Exception" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="excType" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.Exception" /&gt;</ph> 類別或 <ph id="ph3">&lt;see cref="T:System.Exception" /&gt;</ph> 的衍生類別。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source>The type does not have a default constructor.</source>
          <target state="translated">型別沒有預設的建構函式。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
          <source><ph id="ph1">&lt;paramref name="excType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="excType" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source>The namespace to be used in evaluating locals and watches for the current active lexical scope</source>
          <target state="translated">用來評估區域變數的命名空間，並注意目前作用的語彙範圍</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source>Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.</source>
          <target state="translated">指定要用來評估區域變數的命名空間 (Namespace)，並注意目前作用的語彙範圍。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source>If the current <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> is associated with a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object, this method is not supported.</source>
          <target state="translated">如果目前<ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>聯<ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>物件，不支援這個方法。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source>Length of <ph id="ph1">&lt;paramref name="usingNamespace" /&gt;</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="usingNamespace" /&gt;</ph> 的長度為零。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source><ph id="ph1">&lt;paramref name="usingNamespace" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="usingNamespace" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> belongs to a <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> 屬於 <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>