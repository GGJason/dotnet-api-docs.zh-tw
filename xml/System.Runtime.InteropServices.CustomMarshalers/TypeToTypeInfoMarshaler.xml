<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeToTypeInfoMarshaler.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54323fd0d7f766954362a8e412a38f8349e0e567b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4323fd0d7f766954362a8e412a38f8349e0e567b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler">
          <source>Marshals the unmanaged <ph id="ph1">&lt;see langword="ITypeInfo" /&gt;</ph> interface to the managed <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> class, and marshals the managed <ph id="ph3">&lt;see cref="T:System.Type" /&gt;</ph> class to the unmanaged <ph id="ph4">&lt;see langword="ITypeInfo" /&gt;</ph> interface.</source>
          <target state="translated">將 Unmanaged <ph id="ph1">&lt;see langword="ITypeInfo" /&gt;</ph> 介面封送處理 (Marshal) 至 Managed <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 類別，以及將 Managed <ph id="ph3">&lt;see cref="T:System.Type" /&gt;</ph> 類別封送處理至 Unmanaged <ph id="ph4">&lt;see langword="ITypeInfo" /&gt;</ph> 介面。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler">
          <source>The <ph id="ph1">`ITypeInfo`</ph> interface exposed for a .NET type is based on the metadata that would appear in an exported type library.</source>
          <target state="translated"><ph id="ph1">`ITypeInfo`</ph>公開.NET 型別為基礎的中繼資料，會出現在匯出的類型程式庫的介面。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler">
          <source>Likewise, the <ph id="ph1">&lt;xref:System.Type&gt;</ph> instance exposed for an <ph id="ph2">`ITypeInfo`</ph> interface is based on the metadata that would appear in an imported assembly.</source>
          <target state="translated">同樣地，<ph id="ph1">&lt;xref:System.Type&gt;</ph>執行個體公開給<ph id="ph2">`ITypeInfo`</ph>介面為基礎的中繼資料，會出現在 匯入的組件。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler">
          <source>The Type Library Importer (Tlbimp.exe) marks <ph id="ph1">`ITypeInfo`</ph> parameters with the appropriate <ph id="ph2">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> with the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler&gt;</ph> enumeration member when converting signatures that use <ph id="ph4">`ITypeInfo`</ph> parameters to signatures that use <ph id="ph5">&lt;xref:System.Type&gt;</ph> parameters.</source>
          <target state="translated">類型程式庫匯入工具 (Tlbimp.exe) 標記<ph id="ph1">`ITypeInfo`</ph>具有適當的參數<ph id="ph2">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph>與<ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler&gt;</ph>列舉成員轉換使用的簽章時<ph id="ph4">`ITypeInfo`</ph>參數使用的簽章<ph id="ph5">&lt;xref:System.Type&gt;</ph>參數。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler">
          <source>The same conversion functionality can be accomplished without the custom marshaler, by calling <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A&gt;</ph>.</source>
          <target state="translated">相同的轉換功能，可透過自訂封送處理器不呼叫<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.CleanUpManagedData(System.Object)">
          <source>The managed object to be destroyed.</source>
          <target state="translated">要終結的 Managed 物件。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.CleanUpManagedData(System.Object)">
          <source>Performs necessary cleanup of the managed data when it is no longer needed.</source>
          <target state="translated">針對不需要的 Managed 資料執行必要的清除。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.CleanUpManagedData(System.Object)">
          <source>The CLR calls this method to clean up managed data allocated in the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalNativeToManaged%2A&gt;</ph> method.</source>
          <target state="translated">CLR 會呼叫這個方法，以清除受管理的資料配置在<ph id="ph1">&lt;xref:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalNativeToManaged%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.CleanUpNativeData(System.IntPtr)">
          <source>A pointer to the unmanaged data to be destroyed.</source>
          <target state="translated">要終結的 Unmanaged 資料指標。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.CleanUpNativeData(System.IntPtr)">
          <source>Performs necessary cleanup of the unmanaged data when it is no longer needed.</source>
          <target state="translated">針對不需要的 Unmanaged 資料執行必要的清除。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.CleanUpNativeData(System.IntPtr)">
          <source>The CLR calls this method to clean up the unmanaged data allocated in the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalManagedToNative%2A&gt;</ph> method.</source>
          <target state="translated">CLR 會呼叫這個方法，以清除 unmanaged 資料配置在<ph id="ph1">&lt;xref:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalManagedToNative%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.GetInstance(System.String)">
          <source>String "cookie" parameter that can be used by the custom marshaler.</source>
          <target state="translated">可由自訂封送處理器使用的字串 "cookie" 參數。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.GetInstance(System.String)">
          <source>Returns an instance of the custom marshaler.</source>
          <target state="translated">傳回自訂封送處理器 (Marshaler) 的執行個體。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.GetInstance(System.String)">
          <source>An instance of the custom marshaler.</source>
          <target state="translated">自訂封送處理器的執行個體。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.GetInstance(System.String)">
          <source>All custom marshalers must implement this method, although it is not part of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler&gt;</ph> interface definition.</source>
          <target state="translated">所有的自訂封送處理器必須實作這個方法，但不是屬於<ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler&gt;</ph>介面定義。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.GetNativeDataSize">
          <source>Returns the size in bytes of the unmanaged data to be marshaled.</source>
          <target state="translated">傳回待封送處理之 Unmanaged 資料的大小，以位元組為單位。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.GetNativeDataSize">
          <source>-1 to indicate the type this marshaler handles is not a value type.</source>
          <target state="translated">-1 表示這個封送處理器所處理的型別並非實值型別 (Value Type)。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.GetNativeDataSize">
          <source>Because custom marshaling of value types is not supported in the .NET Framework, this method always returns -1.</source>
          <target state="translated">.NET Framework 中不支援自訂的實值類型封送處理，因為這個方法一律會傳回-1。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalManagedToNative(System.Object)">
          <source>The managed object to be converted.</source>
          <target state="translated">要轉換的 Managed 物件。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalManagedToNative(System.Object)">
          <source>Marshals an object from managed code to unmanaged code.</source>
          <target state="translated">封送處理物件，從 Managed 程式碼到 Unmanaged 程式碼。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalManagedToNative(System.Object)">
          <source>A pointer to the unmanaged object.</source>
          <target state="translated">Unmanaged 物件的指標。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalManagedToNative(System.Object)">
          <source>The CLR calls this method with the specified instance of a managed object to convert that object from managed code to unmanaged code, and it returns a pointer to the appropriate unmanaged object, representing the COM view of that object.</source>
          <target state="translated">CLR 會呼叫這個方法與指定的執行個體的受管理物件來將該物件從 managed 程式碼轉換成 unmanaged 程式碼，並讓指標回到適當的 unmanaged 物件，表示該物件的 [COM] 檢視。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalManagedToNative(System.Object)">
          <source><ph id="ph1">&lt;paramref name="pManagedObj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pManagedObj" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalNativeToManaged(System.IntPtr)">
          <source>A pointer to the unmanaged object to be converted.</source>
          <target state="translated">待轉換的 Unmanaged 物件的指標。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalNativeToManaged(System.IntPtr)">
          <source>Marshals an object from unmanaged code to managed code.</source>
          <target state="translated">封送處理物件，從 Unmanaged 程式碼到 Managed 程式碼。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalNativeToManaged(System.IntPtr)">
          <source>A managed object.</source>
          <target state="translated">Managed 物件。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalNativeToManaged(System.IntPtr)">
          <source>The CLR calls this method with the specified pointer to an unmanaged object to convert that object from unmanaged code to managed code, and returns a managed object representing the managed view of the unmanaged data.</source>
          <target state="translated">CLR 會呼叫這個方法與將該物件從 unmanaged 程式碼，managed 程式碼，unmanaged 物件的指定指標，並傳回代表 unmanaged 資料的 managed 的檢視受管理的物件。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalNativeToManaged(System.IntPtr)">
          <source><ph id="ph1">&lt;paramref name="pNativeData" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pNativeData" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>