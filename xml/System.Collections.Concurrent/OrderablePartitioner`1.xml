<Type Name="OrderablePartitioner&lt;TSource&gt;" FullName="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="94e676539489c7f3d423af6660e27a2cb0a4ada5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30368422" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class OrderablePartitioner&lt;TSource&gt; : System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OrderablePartitioner`1&lt;TSource&gt; extends System.Collections.Concurrent.Partitioner`1&lt;!TSource&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Concurrent.OrderablePartitioner`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OrderablePartitioner(Of TSource)&#xA;Inherits Partitioner(Of TSource)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSource&gt;&#xA;public ref class OrderablePartitioner abstract : System::Collections::Concurrent::Partitioner&lt;TSource&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Concurrent</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TSource" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.Concurrent.Partitioner&lt;TSource&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TSource">TSource</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TSource">
      <span data-ttu-id="1cbbb-101">集合中項目的型別。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1cbbb-101">Type of the elements in the collection.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="1cbbb-102">代表將可排序的資料來源分割成多個分割的特定方式。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1cbbb-102">Represents a particular manner of splitting an orderable data source into multiple partitions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cbbb-103">在衍生類別的實作會負責為索引鍵 / 值組，適合任何方式排序項目。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-103">The implementation of the derived class is responsible for ordering the elements into key-value pairs in whatever manner is appropriate.</span></span> <span data-ttu-id="1cbbb-104">如需詳細資訊，請參閱 [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-104">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cbbb-105">下列範例會示範如何實作可排序 partitioner 一次傳回一個項目：</span><span class="sxs-lookup"><span data-stu-id="1cbbb-105">The following example shows how to implement an orderable partitioner that returns one element at a time:</span></span>  
  
 [!code-csharp[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/cs/orderablepartitioner.cs#1)]
 [!code-vb[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/vb/orderablepartitioner.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="1cbbb-106">所有公用成員<see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />是安全執行緒，並可能同時呼叫從多個執行緒。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1cbbb-106">All public members of <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> are thread-safe and may be called from multiple threads concurrently.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OrderablePartitioner (bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (keysOrderedInEachPartition As Boolean, keysOrderedAcrossPartitions As Boolean, keysNormalized As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OrderablePartitioner(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keysOrderedInEachPartition" Type="System.Boolean" />
        <Parameter Name="keysOrderedAcrossPartitions" Type="System.Boolean" />
        <Parameter Name="keysNormalized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keysOrderedInEachPartition">
          <span data-ttu-id="1cbbb-107">指出每個分割中的項目是否依照增加索引鍵的順序產生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-107">Indicates whether the elements in each partition are yielded in the order of increasing keys.</span>
          </span>
        </param>
        <param name="keysOrderedAcrossPartitions">
          <span data-ttu-id="1cbbb-108">指出舊有分割中的項目是否永遠位於較新分割中之項目的前面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-108">Indicates whether elements in an earlier partition always come before elements in a later partition.</span>
          </span>
          <span data-ttu-id="1cbbb-109">如果為 true，則分割 0 中每一個項目的順序索引鍵都會小於分割 1 中的任何項目，而分割 1 中每個項目的順序索引鍵也都會小於分割 2 中的任何項目，以此類推。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-109">If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.</span>
          </span>
        </param>
        <param name="keysNormalized">
          <span data-ttu-id="1cbbb-110">指出索引鍵是否已標準化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-110">Indicates whether keys are normalized.</span>
          </span>
          <span data-ttu-id="1cbbb-111">如果是 true，則所有順序索引鍵都是下列範圍內的相異整數：[0 .</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-111">If true, all order keys are distinct integers in the range [0 ..</span>
          </span>
          <span data-ttu-id="1cbbb-112">numberOfElements-1]。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-112">numberOfElements-1].</span>
          </span>
          <span data-ttu-id="1cbbb-113">如果為 false，則順序索引鍵雖然一定還是相異，但這時只考慮其相對順序，而不考慮其絕對值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-113">If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1cbbb-114">從衍生類別的建構函式中呼叫，以使用索引鍵上的已指定條件限制來初始化 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 類別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-114">Called from constructors in derived classes to initialize the <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> class with the specified constraints on the index keys.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cbbb-115">如需詳細資訊，請參閱 [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-115">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicPartitions">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;TSource&gt; GetDynamicPartitions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;!TSource&gt; GetDynamicPartitions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDynamicPartitions () As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ GetDynamicPartitions();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1cbbb-116">建立物件，這個物件可將基礎集合分割為數量不定的幾個部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-116">Creates an object that can partition the underlying collection into a variable number of partitions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1cbbb-117">可針對基礎資料來源建立分割的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-117">An object that can create partitions over the underlying data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cbbb-118">傳回的物件會實作<xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType>介面。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-118">The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="1cbbb-119">呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>物件上建立另一個磁碟分割的序列。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-119">Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.</span></span>  
  
 <span data-ttu-id="1cbbb-120">預設實作會提供相同的行為<xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A>只不過傳回的資料分割集不會提供索引鍵的項目。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-120">The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> except that the returned set of partitions does not provide the keys for the elements.</span></span>  
  
 <span data-ttu-id="1cbbb-121"><xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A>方法時才支援<xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A>屬性會傳回 true。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-121">The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.</span></span>  
  
 <span data-ttu-id="1cbbb-122">如需詳細資訊，請參閱 [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-122">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1cbbb-123">基底類別不支援動態資料分割。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-123">Dynamic partitioning is not supported by the base class.</span>
          </span>
          <span data-ttu-id="1cbbb-124">必須在衍生類別中實作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-124">It must be implemented in derived classes.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrderableDynamicPartitions">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;long,TSource&gt;&gt; GetOrderableDynamicPartitions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;int64, !TSource&gt;&gt; GetOrderableDynamicPartitions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrderableDynamicPartitions () As IEnumerable(Of KeyValuePair(Of Long, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;long, TSource&gt;&gt; ^ GetOrderableDynamicPartitions();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.Int64,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1cbbb-125">建立物件，這個物件可將基礎集合分割為數量不定的幾個部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-125">Creates an object that can partition the underlying collection into a variable number of partitions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1cbbb-126">可針對基礎資料來源建立分割的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-126">An object that can create partitions over the underlying data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cbbb-127">傳回的物件會實作<xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType>介面。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-127">The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="1cbbb-128">呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>物件上建立另一個磁碟分割的序列。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-128">Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.</span></span>  
  
 <span data-ttu-id="1cbbb-129">透過索引鍵-值組，每個資料分割被以列舉值。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-129">Each partition is represented as an enumerator over key-value pairs.</span></span> <span data-ttu-id="1cbbb-130">配對中的值是項目本身，以及索引鍵是用來決定這個項目對其他項目的相對順序的整數。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-130">The value in the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements.</span></span>  
  
 <span data-ttu-id="1cbbb-131"><xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A>方法時才支援<xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A>屬性會傳回 true。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-131">The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.</span></span>  
  
 <span data-ttu-id="1cbbb-132">如需詳細資訊，請參閱 [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-132">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1cbbb-133">這個 Partitioner 不支援動態資料分割。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-133">Dynamic partitioning is not supported by this partitioner.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrderablePartitions">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;long,TSource&gt;&gt;&gt; GetOrderablePartitions (int partitionCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;int64, !TSource&gt;&gt;&gt; GetOrderablePartitions(int32 partitionCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetOrderablePartitions (partitionCount As Integer) As IList(Of IEnumerator(Of KeyValuePair(Of Long, TSource)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IList&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;long, TSource&gt;&gt; ^&gt; ^ GetOrderablePartitions(int partitionCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.Int64,TSource&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="partitionCount">
          <span data-ttu-id="1cbbb-134">要建立之分割的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-134">The number of partitions to create.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1cbbb-135">將基礎集合分割為指定數目的可排序分割。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-135">Partitions the underlying collection into the specified number of orderable partitions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1cbbb-136">包含 <paramref name="partitionCount" /> 列舉程式的清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-136">A list containing <paramref name="partitionCount" /> enumerators.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cbbb-137">透過索引鍵-值組，每個資料分割被以列舉值。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-137">Each partition is represented as an enumerator over key-value pairs.</span></span>  
  
 <span data-ttu-id="1cbbb-138">配對的值是項目本身，以及索引鍵是用來決定這個項目，針對資料來源中的其他項目的相對順序的整數。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-138">The value of the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements in the data source.</span></span>  
  
 <span data-ttu-id="1cbbb-139">如需詳細資訊，請參閱 [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-139">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitions">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;TSource&gt;&gt; GetPartitions (int partitionCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IList`1&lt;class System.Collections.Generic.IEnumerator`1&lt;!TSource&gt;&gt; GetPartitions(int32 partitionCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPartitions (partitionCount As Integer) As IList(Of IEnumerator(Of TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IList&lt;System::Collections::Generic::IEnumerator&lt;TSource&gt; ^&gt; ^ GetPartitions(int partitionCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="partitionCount">
          <span data-ttu-id="1cbbb-140">要建立之分割的數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-140">The number of partitions to create.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1cbbb-141">將基礎集合分割為指定的已排序分割數目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-141">Partitions the underlying collection into the given number of ordered partitions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1cbbb-142">包含 <paramref name="partitionCount" /> 列舉程式的清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-142">A list containing <paramref name="partitionCount" /> enumerators.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cbbb-143">預設實作會提供相同的行為<xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A>只不過傳回的資料分割集不會提供索引鍵的項目。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-143">The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A> except that the returned set of partitions does not provide the keys for the elements.</span></span>  
  
 <span data-ttu-id="1cbbb-144">如需詳細資訊，請參閱 [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-144">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeysNormalized">
      <MemberSignature Language="C#" Value="public bool KeysNormalized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysNormalized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysNormalized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysNormalized { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1cbbb-145">取得值，這個值指出順序索引鍵是否已標準化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-145">Gets whether order keys are normalized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1cbbb-146">如果索引鍵已標準化則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-146">true if the keys are normalized; otherwise false.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cbbb-147">如果<xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A>傳回 true，所有的排序索引鍵都是不同的整數，範圍 [0..</span><span class="sxs-lookup"><span data-stu-id="1cbbb-147">If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> returns true, all order keys are distinct integers in the range [0 ..</span></span> <span data-ttu-id="1cbbb-148">numberOfElements-1]。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-148">numberOfElements-1].</span></span> <span data-ttu-id="1cbbb-149">如果屬性傳回 false，仍然必須索引鍵的順序會不同，但僅其相對順序會被視為，不其絕對值。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-149">If the property returns false, order keys must still be distinct, but only their relative order is considered, not their absolute values.</span></span>  
  
 <span data-ttu-id="1cbbb-150">如需詳細資訊，請參閱 [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-150">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeysOrderedAcrossPartitions">
      <MemberSignature Language="C#" Value="public bool KeysOrderedAcrossPartitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysOrderedAcrossPartitions" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysOrderedAcrossPartitions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysOrderedAcrossPartitions { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1cbbb-151">取得值，這個值指出舊有分割中的項目是否永遠位於較新分割中之項目的前面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-151">Gets whether elements in an earlier partition always come before elements in a later partition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1cbbb-152">如果舊有分割中的項目永遠位於較新分割中之項目的前面則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-152">true if the elements in an earlier partition always come before elements in a later partition; otherwise false.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cbbb-153">如果<xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A>傳回 true，每個資料分割 0 中的項目具有較小排序索引鍵非資料分割 1，資料分割 1 中的每個項目中的任何項目具有較小的排序索引鍵與任何項目中的資料分割 2，依此類推。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-153">If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A> returns true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.</span></span>  
  
 <span data-ttu-id="1cbbb-154">如需詳細資訊，請參閱 [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-154">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeysOrderedInEachPartition">
      <MemberSignature Language="C#" Value="public bool KeysOrderedInEachPartition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysOrderedInEachPartition" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysOrderedInEachPartition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysOrderedInEachPartition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1cbbb-155">取得值，這個值指出每個分割中的項目是否依照增加索引鍵的順序產生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-155">Gets whether elements in each partition are yielded in the order of increasing keys.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1cbbb-156">如果每個分割中的項目都是依照遞增索引鍵順序產生則為 true，否則為 false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1cbbb-156">true if the elements in each partition are yielded in the order of increasing keys; otherwise false.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cbbb-157">如需詳細資訊，請參閱 [PLINQ 和 TPL 的自訂 Partitioner](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)。</span><span class="sxs-lookup"><span data-stu-id="1cbbb-157">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>