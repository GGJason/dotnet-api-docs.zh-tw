<Type Name="OracleLob" FullName="System.Data.OracleClient.OracleLob">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dc5770a6ce8ffce8a1408ff02468f5a03b185f1c" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51304706" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OracleLob : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleLob extends System.IO.Stream implements class System.Data.SqlTypes.INullable, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleLob" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleLob&#xA;Inherits Stream&#xA;Implements ICloneable, INullable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleLob sealed : System::IO::Stream, ICloneable, System::Data::SqlTypes::INullable" />
  <TypeSignature Language="F#" Value="type OracleLob = class&#xA;    inherit Stream&#xA;    interface ICloneable&#xA;    interface IDisposable&#xA;    interface INullable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.SqlTypes.INullable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示儲存在 Oracle 伺服器的大型二進位物件 (<see langword="LOB" />) 資料型別。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob>不同於<xref:System.Data.OracleClient.OracleBFile>，因為資料會儲存在的伺服器，而不是在作業系統中的實體檔案。 它也可以是讀寫物件，不像<xref:System.Data.OracleClient.OracleBFile>，一律為唯讀。  
  
 <xref:System.Data.OracleClient.OracleLob>可能是其中一種<xref:System.Data.OracleClient.OracleType>資料型別。  
  
|OracleType 資料類型|描述|  
|--------------------------|-----------------|  
|`Blob`|Oracle`BLOB`包含二進位資料，其大小上限為 4 gb 的資料型別。 這會對應至型別 <xref:System.Array> 的 <xref:System.Byte>。|  
|`Clob`|Oracle`CLOB`包含字元資料，預設的字元為基礎的資料型別設定在伺服器上，大小上限為 4 GB。 這對應至 <xref:System.String>。|  
|`NClob`|Oracle`NCLOB`包含字元資料的資料類型會根據最大值 4 GB 的伺服器上的國家字元集。 這對應至 <xref:System.String>。|  
  
 .NET 應用程式開發人員可以擷取 Oracle`LOB`值為基本的.NET 資料類型，例如<xref:System.Array>型別的<xref:System.Byte>並<xref:System.String>，或特殊<xref:System.Data.OracleClient.OracleLob>資料型別。 <xref:System.Data.OracleClient.OracleLob>類別支援讀取的資料和寫入到 Oracle `LOB` Oracle 資料庫中。  
  
 以下是主要特性<xref:System.Data.OracleClient.OracleLob>區別基本的.NET 資料類型的資料類型：  
  
-   擷取 Oracle 之後`LOB`值從 Oracle 資料庫<xref:System.Data.OracleClient.OracleLob>類別，您可以變更`LOB`開啟的交易和您的變更中的資料會直接反映到資料庫。 如果您擷取 Oracle`LOB`值貼<xref:System.Array>型別的<xref:System.Byte>或<xref:System.String>並更新這些陣列中，您的變更不會反映到資料庫。  
  
-   當您使用<xref:System.Data.OracleClient.OracleLob>類別來存取的區塊`LOB`值，只有該區塊會傳遞從 Oracle 資料庫給用戶端。 當您使用<xref:System.Data.OracleClient.OracleDataReader.GetChars%2A>方法來存取的區塊`LOB`值，此值的整個內容會從 Oracle 資料庫給用戶端。  
  
 若要取得<xref:System.Data.OracleClient.OracleLob>物件，請呼叫<xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A>方法。  
  
 您可以建構<xref:System.Data.OracleClient.OracleLob>這是 NULL，使用下列格式：  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 這項技術主要用來測試是否`LOB`從伺服器傳回是 NULL，如這個範例所示：  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 NULL`LOB`運作方式類似零位元組`LOB`在於<xref:System.Data.OracleClient.OracleLob.Read%2A>成功，而且一律會傳回零個位元組。  
  
 選取`LOB`包含 null 值的資料行會傳回<xref:System.Data.OracleClient.OracleLob.Null>。  
  
 您必須開始交易，才能取得暫存`LOB`。 否則，<xref:System.Data.OracleClient.OracleDataReader>稍後取得資料可能會失敗。  
  
 您也可以開啟暫存`LOB`中藉由呼叫 DBMS_LOB Oracle。CREATETEMPORARY 系統預存程序和繫結`LOB`輸出參數。 在用戶端，而暫存`LOB`行為類似以資料表為基礎`LOB`。 例如，若要更新暫存`LOB`，就必須括在交易。  
  
 下列 C# 範例示範如何開啟暫存`LOB`。  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
byte[] tempbuff = new byte[10000];  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
> [!NOTE]
>  繼承<xref:System.IO.Stream.WriteByte%2A>方法會失敗，如果搭配字元資料和<xref:System.InvalidOperationException>就會擲回。 請改用 <xref:System.Data.OracleClient.OracleLob.Write%2A> 方法。  
>   
>  暫存`LOB`是否只關閉連線時關閉，但共用，並在負載之下，暫存`LOB`s，請勿關閉。 這可以透過處置暫存解決`LOB`，藉由叫用`tempLob.Dispose()`。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Data.OracleClient.OracleLob source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Data.OracleClient.OracleLob source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (source As OracleLob)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Data::OracleClient::OracleLob ^ source);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Data.OracleClient.OracleLob -&gt; unit" Usage="oracleLob.Append source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="source">要附加資料的來源 <see langword="LOB" />。</param>
        <summary>將指定 <see langword="LOB" /> 的資料附加到目前的 <see langword="LOB" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要寫入`LOB`，您必須擷取`LOB`using FOR UPDATE 子句中的 SQL SELECT 陳述式，而且您必須擁有啟動本機交易。  
  
 所有的資料來源中的`LOB`附加至目前結尾`LOB`。 兩者皆非的位置`LOB`評估或在此程序期間變更。  
  
 基礎資料類型一定必須相同。 例如，如果您從附加<xref:System.Data.OracleClient.OracleType.NClob>，目的地<xref:System.Data.OracleClient.OracleLob>也必須是<xref:System.Data.OracleClient.OracleType.NClob>。  
  
> [!NOTE]
>  在此版本中，寫入作業的唯讀`LOB`可能會成功，但不會更新`LOB`伺服器上。 在此情況下，不過，在本機複製的`LOB`會更新。 因此，稍後在讀取作業<xref:System.Data.OracleClient.OracleLob>物件可能會傳回寫入作業的結果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">來源 <see cref="T:System.Data.OracleClient.OracleLob" /> 為 Null。</exception>
        <exception cref="T:System.InvalidOperationException">來源 <see cref="T:System.Data.OracleClient.OracleLob" /> 是 null，或連接已關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">來源 <see cref="T:System.Data.OracleClient.OracleLob" /> 物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginBatch">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>防止在執行多重寫入作業時引發伺服器端觸發程序。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch();" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : unit -&gt; unit" Usage="oracleLob.BeginBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>防止在執行多重讀取作業時引發伺服器端觸發程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 會開啟`LOB`中<xref:System.Data.OracleClient.OracleLobOpenMode.ReadOnly>模式，因此`LOB`只能讀取，不會寫入，直到的對應呼叫<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>。 若要執行批次寫入`LOB`，呼叫<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>使用<xref:System.Data.OracleClient.OracleLobOpenMode.ReadWrite>。  
  
 呼叫<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>一次以上相同的交易內目前擲回 Oracle"ORA 22293： 已在相同交易中開啟的 LOB 」 錯誤。 此外，如果您取得`LOB`使用另一個<xref:System.Data.OracleClient.OracleDataReader>，和原始呼叫端未呼叫<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>方法，同樣的錯誤產生。 因此，您必須呼叫<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>方法，當您完成使用<xref:System.Data.OracleClient.OracleLob>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">連接關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch (System.Data.OracleClient.OracleLobOpenMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch(valuetype System.Data.OracleClient.OracleLobOpenMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch (mode As OracleLobOpenMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch(System::Data::OracleClient::OracleLobOpenMode mode);" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : System.Data.OracleClient.OracleLobOpenMode -&gt; unit" Usage="oracleLob.BeginBatch mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.OracleClient.OracleLobOpenMode" />
      </Parameters>
      <Docs>
        <param name="mode">模式 (其中一個 <see cref="T:System.Data.OracleClient.OracleLobOpenMode" /> 值)，在這個 <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" /> 呼叫和對應的 <see cref="M:System.Data.OracleClient.OracleLob.EndBatch" /> 呼叫之間可以存取 <see langword="LOB" />。</param>
        <summary>以指定的存取模式執行多重讀取和寫入作業時，防止引發伺服器端觸發程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要寫入`LOB`，您必須擷取`LOB`using FOR UPDATE 子句中的 SQL SELECT 陳述式，而且您必須擁有啟動本機交易。  
  
 呼叫<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>一次以上相同的交易內目前擲回 Oracle"ORA 22293： 已在相同交易中開啟的 LOB 」 錯誤。 此外，如果您取得`LOB`使用另一個<xref:System.Data.OracleClient.OracleDataReader>，和原始呼叫端未呼叫<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>方法，同樣的錯誤產生。 因此，您必須呼叫<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>方法，當您完成使用<xref:System.Data.OracleClient.OracleLob>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">連接關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Data.OracleClient.OracleLob.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，表示 <see langword="LOB" /> 資料流是否可讀取。</summary>
        <value>如果 <see langword="true" /> 資料流支援讀取，則為 <see langword="LOB" />，如果 <see langword="false" /> 已關閉或處置，則為 <see langword="LOB" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，表示是否可以執行向前及向後搜尋的作業。</summary>
        <value>如果 <see langword="false" /> 已關閉或處置，則為 <see langword="LOB" />，否則為 <see langword="true" />。 對於 <see cref="F:System.Data.OracleClient.OracleLob.Null" /> 則永遠都是 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>不論 <see langword="LOB" /> 是否支援寫入，永遠傳回 true。</summary>
        <value>不論開啟或未處置的 <see langword="true" /> 是否支援寫入，永遠傳回 <see langword="LOB" />，如果 <see langword="false" /> 已關閉或處置，則傳回 <see langword="LOB" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要寫入`LOB`，您必須擷取`LOB`使用 FOR UPDATE 子句中的 SQL SELECT 陳述式，而且您必須先啟動本機交易。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChunkSize">
      <MemberSignature Language="C#" Value="public int ChunkSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChunkSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChunkSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChunkSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChunkSize : int" Usage="System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出讀取/寫入作業期間從伺服器擷取或傳送到伺服器的最小位元組數。</summary>
        <value>要擷取或傳送的最小位元組數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的值<xref:System.Data.OracleClient.OracleLob.ChunkSize%2A>屬性不是設定為.NET Framework Data Provider for Oracle。 相反地，它是與伺服器通訊時，會使用 Oracle Call Interface (OCI) 的值。 使用<xref:System.Data.OracleClient.OracleLob.ChunkSize%2A>以確保用戶端區塊的大小相同。 較小的區塊中讀取或寫入不會快取資料，並會造成伺服器，無最佳化的往返，因為未接收或傳送完整的封包。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">連接關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="oracleLob.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立新的 <see cref="T:System.Data.OracleClient.OracleLob" /> 物件，將相同的 Oracle <see langword="LOB" /> 參考為原始 <see cref="T:System.Data.OracleClient.OracleLob" /> 物件。</summary>
        <returns>新的 <see cref="T:System.Data.OracleClient.OracleLob" /> 物件，將相同的 Oracle <see langword="LOB" /> 參考為原始 <see cref="T:System.Data.OracleClient.OracleLob" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新屬性<xref:System.Data.OracleClient.OracleLob>物件一開始會有相同的原始物件的值。 不過之後,<xref:System.Data.OracleClient.OracleLob.Clone%2A>完畢之後，每個<xref:System.Data.OracleClient.OracleLob>與其他物件無關。 比方說，變更的值<xref:System.Data.OracleClient.OracleLob.Position%2A>原始屬性<xref:System.Data.OracleClient.OracleLob>的值不變更<xref:System.Data.OracleClient.OracleLob.Position%2A>複本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">連接關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="oracleLob.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As OracleConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleConnection ^ Connection { System::Data::OracleClient::OracleConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.OracleClient.OracleConnection" Usage="System.Data.OracleClient.OracleLob.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Data.OracleClient.OracleConnection" /> 的這個執行個體所使用的 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <value>資料來源的連接。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從這個 <see cref="T:System.Data.OracleClient.OracleLob" /> 複製到目的 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleLob.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="destination">目的地 <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <summary>從這個 <see cref="T:System.Data.OracleClient.OracleLob" /> 複製到目的 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <returns>已複製的位元組數目。 這會排除任何填補位元組。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基礎資料類型一定必須相同。 例如，如果您從複製<xref:System.Data.OracleClient.OracleType.NClob>，目的地<xref:System.Data.OracleClient.OracleLob>也必須是<xref:System.Data.OracleClient.OracleType.NClob>。  
  
 目的位移是否超過結尾的目的端`LOB`，則`LOB`擴充資料將複製到其中。 結尾之間的間距`LOB`和超過結尾的目的位移會以零填補`BLOB`資料類型與空間`CLOB`和`NCLOB`資料型別。  
  
 要寫入`LOB`，您必須擷取`LOB`using FOR UPDATE 子句中的 SQL SELECT 陳述式，而且您必須擁有啟動本機交易。  
  
> [!NOTE]
>  在此版本中，寫入作業的唯讀`LOB`可能會成功，但不是會更新`LOB`伺服器上。 在此情況下，不過，在本機複製的`LOB`將會更新。 因此，稍後在讀取作業<xref:System.Data.OracleClient.OracleLob>物件可能會傳回寫入作業的結果。  
>   
>  `CopyTo`方法不會清除目的地的內容`OracleLob`之前執行複製作業。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在 <paramref name="destination" /> 參數中所指定的 <see cref="T:System.Data.OracleClient.OracleLob" /> 為 null。</exception>
        <exception cref="T:System.InvalidOperationException">作業不在交易中、<see cref="T:System.Data.OracleClient.OracleLob" /> 物件為 null，或是連接已關閉。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination, int64 destinationOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob, destinationOffset As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination, long destinationOffset);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleLob.CopyTo (destination, destinationOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination">目的 <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <param name="destinationOffset">要複製的目的位置。 對 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別而言，這必須是偶數的位元組。</param>
        <summary>以指定的資料量，從這個 <see cref="T:System.Data.OracleClient.OracleLob" /> 複製到目的 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <returns>已複製的位元組數目。 這會排除任何填補位元組。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基礎資料類型一定必須相同。 例如，如果您從複製<xref:System.Data.OracleClient.OracleType.NClob>，目的地<xref:System.Data.OracleClient.OracleLob>也必須是<xref:System.Data.OracleClient.OracleType.NClob>。  
  
 目的位移是否超過結尾的目的端`LOB`，則`LOB`擴充資料將複製到其中。 結尾之間的間距`LOB`和超過結尾的目的位移會以零填補`BLOB`資料類型與空間`CLOB`和`NCLOB`資料型別。  
  
 要寫入`LOB`，您必須擷取`LOB`using FOR UPDATE 子句中的 SQL SELECT 陳述式，而且您必須擁有啟動本機交易。  
  
> [!NOTE]
>  在此版本中，寫入作業的唯讀`LOB`可能會成功，但不會更新`LOB`伺服器上。 在此情況下，不過，在本機複製的`LOB`會更新。 因此，稍後在讀取作業<xref:System.Data.OracleClient.OracleLob>物件可能會傳回寫入作業的結果。  
>   
>  `CopyTo`方法不會清除目的地的內容`OracleLob`之前執行複製作業。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destination" /> 參數中指定的 <see cref="T:System.Data.OracleClient.OracleLob" /> 已滿。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="destinationOffset" /> 參數中所指定的值小於零，或是大於 4 GB。  
  
-或- 
<see langword="CLOB" /> 或 <see langword="NCLOB" /> 資料型別的 <paramref name="destinationOffset" /> 參數中指定的值不是偶數。  
  
-或- 
您必須將 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別指定為偶數位元組數。</exception>
        <exception cref="T:System.InvalidOperationException">作業不在交易中、<see cref="T:System.Data.OracleClient.OracleLob" /> 物件為 null，或是連接已關閉。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(int64 sourceOffset, class System.Data.OracleClient.OracleLob destination, int64 destinationOffset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (sourceOffset As Long, destination As OracleLob, destinationOffset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(long sourceOffset, System::Data::OracleClient::OracleLob ^ destination, long destinationOffset, long amount);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleLob.CopyTo (sourceOffset, destination, destinationOffset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceOffset" Type="System.Int64" />
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceOffset">要複製的來源位移。 對 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別而言，這必須是偶數。</param>
        <param name="destination">目的 <see langword="OracleLob" /><see cref="N:System.Data.OracleClient" />。</param>
        <param name="destinationOffset">要複製的目的位移。 對 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別而言，這必須是偶數。</param>
        <param name="amount">要複製的資料量，以位元組為單位。 對 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別而言，這必須是偶數。</param>
        <summary>以指定的資料量和來源位移，從這個 <see cref="T:System.Data.OracleClient.OracleLob" /> 複製到目的 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <returns>已複製的位元組數目。 這會排除任何填補位元組。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基礎資料類型一定必須相同。 例如，如果您從複製<xref:System.Data.OracleClient.OracleType.NClob>，目的地<xref:System.Data.OracleClient.OracleLob>也必須是<xref:System.Data.OracleClient.OracleType.NClob>。  
  
 目的位移是否超過結尾的目的端`LOB`，則`LOB`擴充資料將複製到其中。 結尾之間的間距`LOB`和超過結尾的目的位移會以零填補`BLOB`資料類型與空間`CLOB`和`NCLOB`資料型別。  
  
 要寫入`LOB`，您必須擷取`LOB`using FOR UPDATE 子句中的 SQL SELECT 陳述式，而且您必須擁有啟動本機交易。  
  
> [!NOTE]
>  在此版本中，寫入作業的唯讀`LOB`可能會成功，但不會更新`LOB`伺服器上。 在此情況下，不過，在本機複製的`LOB`會更新。 因此，稍後在讀取作業<xref:System.Data.OracleClient.OracleLob>物件可能會傳回寫入作業的結果。  
>   
>  `CopyTo`方法不會清除目的地的內容`OracleLob`之前執行複製作業。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destination" /> 參數中指定的 <see cref="T:System.Data.OracleClient.OracleLob" /> 已滿。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="amount" />、<paramref name="sourceOffset" /> 或 <paramref name="destinationOffset" /> 參數中所指定的值小於零，或是大於 4 GB。  
  
-或- 
<see langword="CLOB" /> 或 <see langword="NCLOB" /> 資料型別的 <paramref name="amount" />、<paramref name="sourceOffset" /> 或 <paramref name="destinationOffset" /> 參數中指定的值不是偶數。</exception>
        <exception cref="T:System.InvalidOperationException">作業不在交易中、<see cref="T:System.Data.OracleClient.OracleLob" /> 物件為 null，或是連接已關閉。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="oracleLob.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="oracleLob.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBatch">
      <MemberSignature Language="C#" Value="public void EndBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.EndBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBatch();" />
      <MemberSignature Language="F#" Value="member this.EndBatch : unit -&gt; unit" Usage="oracleLob.EndBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>允許伺服器端觸發程序在執行多重寫入作業之後繼續引發。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>方法之前執行寫入作業上<xref:System.Data.OracleClient.OracleLob>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">連接關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Erase">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從這個 <see cref="T:System.Data.OracleClient.OracleLob" /> 清除資料。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase();" />
      <MemberSignature Language="F#" Value="member this.Erase : unit -&gt; int64" Usage="oracleLob.Erase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從這個 <see cref="T:System.Data.OracleClient.OracleLob" /> 清除所有資料。</summary>
        <returns>清除的位元組數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> 不會截斷資料。 `LOB`長度會保持相同`BLOB`資料型別，並取代 0x00 清除的資料。 `CLOB` 和`NCLOB`以空格取代資料型別。  
  
 要寫入`LOB`，您必須擷取`LOB`using FOR UPDATE 子句中的 SQL SELECT 陳述式，而且您必須擁有啟動本機交易。  
  
> [!NOTE]
>  在此版本中，寫入作業的唯讀`LOB`可能會成功，但不會更新`LOB`伺服器上。 在此情況下，不過，在本機複製的`LOB`會更新。 因此，稍後在讀取作業<xref:System.Data.OracleClient.OracleLob>物件可能會傳回寫入作業的結果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">作業不在交易中、<see cref="T:System.Data.OracleClient.OracleLob" /> 物件為 null，或是連接已關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase (long offset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase(int64 offset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase (offset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase(long offset, long amount);" />
      <MemberSignature Language="F#" Value="member this.Erase : int64 * int64 -&gt; int64" Usage="oracleLob.Erase (offset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">要清除的來源位移。 對 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別而言，這必須是偶數。</param>
        <param name="amount">要清除的資料量，以位元組為單位。 對 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別而言，這必須是偶數。</param>
        <summary>從這個 <see cref="T:System.Data.OracleClient.OracleLob" /> 清除指定的資料量。</summary>
        <returns>清除的位元組數目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中值的總和`offset`並`amount`參數可以是大於大小<xref:System.Data.OracleClient.OracleLob>。 因此，指定大於所傳回的值<xref:System.Data.OracleClient.OracleLob.Length%2A>屬性會成功; 然而<xref:System.Data.OracleClient.OracleLob.Erase%2A>只會清除至結尾<xref:System.Data.OracleClient.OracleLob>。 (同樣地，如果將傳遞負值`offset`，<xref:System.Data.OracleClient.OracleLob.Erase%2A>將會成功，但只清除 從開頭開始<xref:System.Data.OracleClient.OracleLob>。)此行為是不同的<xref:System.Data.OracleClient.OracleLob.Read%2A>並<xref:System.Data.OracleClient.OracleLob.Write%2A>方法和供應項目所指定的優點是能夠清除所有資料值`offset`不需要額外的往返伺服器，並確認 實際大小。  
  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> 不會截斷資料。 `LOB`長度會保持相同`BLOB`資料型別，並取代 0x00 清除的資料。 `CLOB` 和`NCLOB`以空格取代資料型別。  
  
 要寫入`LOB`，您必須擷取`LOB`using FOR UPDATE 子句中的 SQL SELECT 陳述式，而且您必須擁有啟動本機交易。  
  
> [!NOTE]
>  在此版本中，寫入作業的唯讀`LOB`可能會成功，但不會更新`LOB`伺服器上。 在此情況下，不過，在本機複製的`LOB`會更新。 因此，稍後在讀取作業<xref:System.Data.OracleClient.OracleLob>物件可能會傳回寫入作業的結果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">作業不在交易中、<see cref="T:System.Data.OracleClient.OracleLob" /> 物件為 null，或是連接已關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="oracleLob.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>目前不支援。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在此版本中，這個方法沒有作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBatched">
      <MemberSignature Language="C#" Value="public bool IsBatched { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBatched" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBatched As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBatched { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBatched : bool" Usage="System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出應用程式是否已呼叫 <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> 方法。</summary>
        <value>如果應用程式已呼叫 <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> 方法，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當使用 Oracle 8.0.5 server、 Oracle"ORA-是在 00600： 內部錯誤的程式碼 」 在擲回例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNull : bool" Usage="System.Data.OracleClient.OracleLob.IsNull" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.SqlTypes.INullable.IsNull</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Data.OracleClient.OracleLob" /> 是否為 <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> 資料流。</summary>
        <value>如果 <see cref="T:System.Data.OracleClient.OracleLob" /> 為 <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> 資料流，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="public bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTemporary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemporary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTemporary : bool" Usage="System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Data.OracleClient.OracleLob" /> 是否為暫時 <see langword="LOB" />。</summary>
        <value>如果 <see cref="T:System.Data.OracleClient.OracleLob" /> 為暫時 <see langword="true" />，則為 <see langword="LOB" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下列範例示範如何建立暫存`LOB`。  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">連接關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Data.OracleClient.OracleLob.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得傳回 <see cref="T:System.Data.OracleClient.OracleLob" /> 大小的值。</summary>
        <value>
          <see cref="T:System.Data.OracleClient.OracleLob" /> 的大小，以位元組為單位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大小<xref:System.Data.OracleClient.OracleLob>一律會傳回以位元組為單位的所有資料類型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">連接關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="LobType">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleType LobType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.OracleClient.OracleType LobType" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.LobType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LobType As OracleType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleType LobType { System::Data::OracleClient::OracleType get(); };" />
      <MemberSignature Language="F#" Value="member this.LobType : System.Data.OracleClient.OracleType" Usage="System.Data.OracleClient.OracleLob.LobType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得傳回 <see langword="LOB" /> 資料型別的值。</summary>
        <value>其中一個<see cref="T:System.Data.OracleClient.OracleType" /><see langword="LOB" />資料型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob>可能是下列其中一種<xref:System.Data.OracleClient.OracleType>資料型別。  
  
|OracleType 資料類型|描述|  
|--------------------------|-----------------|  
|`Blob`|Oracle `BLOB` 資料型別，包含具有 4 GB 最大大小的二進位資料。 這會對應至型別 <xref:System.Array> 的 <xref:System.Byte>。|  
|`Clob`|Oracle `CLOB` 資料型別，包含以伺服器上預設字元集為基礎的字元資料，資料的最大大小為 4 GB。 這對應至 <xref:System.String>。|  
|`NClob`|Oracle`NCLOB`包含字元資料的資料類型會根據最大值 4 gb 之伺服器上的國家字元集。 這對應至 <xref:System.String>。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.Data.OracleClient.OracleLob Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.OracleClient.OracleLob Null" />
      <MemberSignature Language="DocId" Value="F:System.Data.OracleClient.OracleLob.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As OracleLob " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::OracleClient::OracleLob ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.Data.OracleClient.OracleLob" Usage="System.Data.OracleClient.OracleLob.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleLob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 Null <see cref="T:System.Data.OracleClient.OracleLob" /> 物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以建構<xref:System.Data.OracleClient.OracleLob>這是 NULL，使用下列格式：  
  
```  
OracleLob myLob = OracleLOB.Null;  
```  
  
 這項技術主要用來測試是否`LOB`從伺服器傳回是 NULL，如這個範例所示：  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 NULL`LOB`運作方式類似成零位元組`LOB`在於<xref:System.Data.OracleClient.OracleLob.Read%2A>成功，而且一律會傳回零個位元組。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Data.OracleClient.OracleLob.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Data.OracleClient.OracleLob" /> 資料流中目前的讀取位置。</summary>
        <value>
          <see cref="T:System.Data.OracleClient.OracleLob" /> 資料流內目前的位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 資料流必須支援搜尋要取得或設定位置。 使用<xref:System.Data.OracleClient.OracleLob.CanSeek%2A>屬性來判斷資料流是否支援搜尋。  
  
 支援搜尋超過資料流長度的任何位置。 奇數位置搜尋`CLOB`和`NCLOB`也支援的資料類型。 如需詳細資訊，請參閱的 < 備註 > 一節<xref:System.Data.OracleClient.OracleLob.Read%2A>屬性。  
  
 <xref:System.Data.OracleClient.OracleLob.Position%2A>屬性不會不追蹤的資料流中已使用，略過，或兩者的位元組數目。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">連接關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="oracleLob.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">位元組陣列。 傳回這個方法時，緩衝區會包含指定的位元組陣列，其值介於 <c>offset</c> 和 (<c>offset</c> + <c>count</c>) 之間，並會由讀取自目前來源的位元組取代。</param>
        <param name="offset">
          <c>buffer</c> 中以零為起始的位元組位移，即開始儲存讀取自目前資料流之資料的位置。 對 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別而言，這必須是偶數。</param>
        <param name="count">自目前資料流讀取的最大位元組數。 對 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別而言，這必須是偶數。</param>
        <summary>自目前 <see cref="T:System.Data.OracleClient.OracleLob" /> 讀取一位元組序列，並依所讀取的位元組數目進階資料流裡的位置。</summary>
        <returns>緩衝區所讀取的總位元組數。 如果目前無法取得足夠的位元組，則這個數目可能小於所要求的位元組數；如果已經到達資料流末端，則為零 (0)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Read%2A>方法讀取的最大`count`從目前的位元組資料流，並將它們儲存在`buffer`開始`offset`。 資料流目前位置前移讀取; 的位元組數目不過，如果發生例外狀況，資料流中目前的位置會保持不變。 <xref:System.Data.OracleClient.OracleLob.Read%2A> 傳回讀取的位元組數目。 只有位置是目前資料流結尾，傳回的值為零。 <xref:System.Data.OracleClient.OracleLob.Read%2A> 將會封鎖直到至少一個位元組的資料可以讀取，，，沒有資料可供使用。<xref:System.Data.OracleClient.OracleLob.Read%2A> 會傳回 0，如果您嘗試讀取`LOB`的目前位置位於結尾`LOB`。 <xref:System.Data.OracleClient.OracleLob.Read%2A> 可傳回比要求更少個位元組，即使尚未達到資料流結尾。  
  
 .NET Framework Data Provider for Oracle 包辦`CLOB`和`NCLOB`資料為 Unicode。 因此，當存取`CLOB`和`NCLOB`資料類型，您永遠都在處理其中每一個字元是 2 個位元組的位元組數目。 比方說，如果文字包含三個字元的字串會儲存為`NCLOB`其中的字元集是 4 個位元組，每個字元，而您執行的 Oracle 伺服器上`Read`作業中，您將指定字串的長度為 6 個位元組，雖然儲存在伺服器上的 12 個位元組。  
  
 下列 C# 範例示範如何讀取<xref:System.Data.OracleClient.OracleLob>物件。  
  
```  
public static void ReadLobExample(OracleCommand command)  
{  
   int actual = 0;  
  
   //Select some data.  
   // Table Schema:  
   //  "CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)";  
   //  "INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain the LOBs (all 3 varieties).  
      OracleLob BLOB = reader.GetOracleLob(1);  
      OracleLob CLOB  = reader.GetOracleLob(2);  
      OracleLob NCLOB = reader.GetOracleLob(3);  
  
      //Example - Reading binary data (in chunks).  
      byte[] buffer = new byte[100];  
      while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)  
         Console.WriteLine(BLOB.LobType + ".Read(" + buffer + ", " + buffer.Length + ") => " + actual);  
  
      //Example - Reading CLOB/NCLOB data (in chunks).  
      //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).  
      //However, because the OracleLob object inherits directly from the.NET stream object,   
      //all the existing classes that manipluate streams can also be used. For example, the   
      //.NET StreamReader makes converting the raw bytes into actual characters easier.  
      StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);  
      char[] cbuffer = new char[100];  
      while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)  
         Console.WriteLine(CLOB.LobType + ".Read(" + new string(cbuffer, 0, actual) + ", " + cbuffer.Length + ") => " + actual);  
  
      //Example - Reading data (all at once).  
      //You could use StreamReader.ReadToEnd to obtain all the string data,or simply  
      //call OracleLob.Value to obtain a contiguous allocation of all the data.  
      Console.WriteLine(NCLOB.LobType + ".Value => " + NCLOB.Value);  
   }  
}  
```  
  
 您可以建構<xref:System.Data.OracleClient.OracleLob>這是 NULL，使用下列格式：  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 這項技術主要用來測試是否`LOB`從伺服器傳回是 NULL，如下列範例所示。  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 NULL`LOB`運作方式類似成零位元組`LOB`在於<xref:System.Data.OracleClient.OracleLob.Read%2A>成功，而且一律會傳回零個位元組。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 為 null 參考 (在 Visual Basic 為 <see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 或 <paramref name="count" /> 參數中的值不是正數。  
  
-或- 
位移和計數參數的總和大於緩衝區的長度。  
  
-或- 
<paramref name="amount" /> 或 <paramref name="offset" /> 參數中所指定的值小於零，或是大於 4 GB。</exception>
        <exception cref="T:System.InvalidOperationException">作業不在交易中、<see cref="T:System.Data.OracleClient.OracleLob" /> 物件為 null，或是連接已關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="oracleLob.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">相對於原點的位元組位移。 如果 <c>offset</c> 為負數，則新的位置會在 <c>origin</c> 乘以 <c>offset</c> 之指定位元組數所指定的位置之前。 如果 <c>offset</c> 為零，則新的位置會在 <c>origin</c> 所指定的位置。 如果 <c>offset</c> 為正數，則新的位置會在 <c>origin</c> 乘以 <c>offset</c> 之指定位元組數所指定的位置之後。</param>
        <param name="origin">
          <see cref="T:System.IO.SeekOrigin" /> 類型的值，表示用來取得新位置的參考點。</param>
        <summary>設定目前 <see cref="T:System.Data.OracleClient.OracleLob" /> 資料流上的位置。</summary>
        <returns>目前資料流的新位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`offset`是負數，新的位置前面必須加上所指定的位置`origin`所指定的位元組數`offset`。 如果`offset`為零，則新的位置必須是所指定的位置`origin`。 如果`offset`為正數，則新的位置必須遵循所指定的位置`origin`所指定的位元組數`offset`。  
  
 支援搜尋超過資料流長度的任何位置。 奇數位置搜尋`CLOB`和`NCLOB`也支援的資料類型。 如需詳細資訊，請參閱的 < 備註 > 一節<xref:System.Data.OracleClient.OracleLob.Read%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="origin" /> 參數不包含有效的值。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">產生的位置超出值的長度。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Data.OracleClient.OracleLob" /> 物件已關閉或完成處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="oracleLob.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">目前 <see cref="T:System.Data.OracleClient.OracleLob" /> 資料流所需位元組長度。 對 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別而言，這必須是偶數。</param>
        <summary>將 <see cref="T:System.Data.OracleClient.OracleLob" /> 資料流的長度設定為小於目前長度的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 嘗試將長度增加<xref:System.Data.OracleClient.OracleLob>串流失敗，並傳回 「 訊息： ORA 22926： 指定修剪的長度大於目前 LOB 值的長度 」 從 Oracle 伺服器。  
  
 資料流必須支援寫入和搜尋的<xref:System.Data.OracleClient.OracleLob.SetLength%2A>函式。  
  
 .NET Framework Data Provider for Oracle 包辦`CLOB`和`NCLOB`資料為 Unicode。 因此，當存取`CLOB`和`NCLOB`資料類型，您永遠都在處理其中每一個字元是 2 個位元組的位元組數目。 比方說，如果文字包含三個字元的字串會儲存為`NCLOB`其中的字元集是 4 個位元組，每個字元，而您執行的 Oracle 伺服器上`SetLength`作業中，您將指定字串的長度為 6 個位元組，雖然儲存在伺服器上的 12 個位元組。  
  
 要寫入`LOB`，您必須擷取`LOB`using FOR UPDATE 子句中的 SQL SELECT 陳述式，而且您必須擁有啟動本機交易。  
  
> [!NOTE]
>  寫入作業的唯讀`LOB`可能會成功，但不會更新`LOB`伺服器上。 在此情況下，不過，在本機複製的`LOB`會更新。 因此，稍後在讀取作業<xref:System.Data.OracleClient.OracleLob>物件可能會傳回寫入作業的結果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see langword="CLOB" /> 或 <see langword="NCLOB" /> 資料型別的 <paramref name="value" /> 參數中指定的值不是偶數。  
  
-或- 
<paramref name="value" /> 參數中所指定的值小於零，或是大於 4 GB。</exception>
        <exception cref="T:System.InvalidOperationException">作業不在交易中、<see cref="T:System.Data.OracleClient.OracleLob" /> 物件為 null，或是連接已關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Data.OracleClient.OracleLob.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與基礎值對等的 Common Language Runtime 資料流值。</summary>
        <value>對於 <see cref="F:System.Data.OracleClient.OracleType.Blob" />，為型別 <see langword="Byte[]" /> 的陣列。 對於 <see cref="F:System.Data.OracleClient.OracleType.Clob" /> 和 <see cref="F:System.Data.OracleClient.OracleType.NClob" />，為 <see langword="String" />。 對於 Null 資料，則為 <see cref="T:System.DBNull" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 針對<xref:System.Data.OracleClient.OracleType.Blob>資料類型<xref:System.Data.OracleClient.OracleLob.Value%2A>整個的基礎資料傳回做為連續的陣列型別的`Byte[]`。 針對<xref:System.Data.OracleClient.OracleType.Clob>和<xref:System.Data.OracleClient.OracleType.NClob>資料類型<xref:System.Data.OracleClient.OracleLob.Value%2A>傳回的資料作為`String`資料型別。 Null 的資料，如<xref:System.Data.OracleClient.OracleLob.Value%2A>傳回<xref:System.DBNull>。 藉由比較傳回的值，您可以區分的空的資料，null 的資料和資料。  
  
> [!NOTE]
>  使用的優點`LOB`資料型別就是能夠擷取大量的用戶端區塊中的資料。 不過，當您使用<xref:System.Data.OracleClient.OracleLob.Value%2A>，取得所有資料`LOB`資料行做為一個連續的區塊，可能會大幅增加應用程式的額外負荷。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="oracleLob.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">位元組陣列。 這個方法會將 <c>count</c> 所指定的位元組數從 <c>buffer</c> 複製到目前的資料流。</param>
        <param name="offset">
          <c>buffer</c> 中以零為起始的位元組位移，將會從該處開始將位元組複製到目前的資料流。 對 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別而言，這必須是偶數。</param>
        <param name="count">寫入目前資料流的位元組數目。 對 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別而言，這必須是偶數。</param>
        <summary>寫入一位元組序列至目前的 <see cref="T:System.Data.OracleClient.OracleLob" />，並依所寫入的位元組數目進階這個資料流裡的目前位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果寫入作業成功時，資料流位置前移寫入的位元組數目中。 如果發生例外狀況，將資料流中的位置會保持不變。  
  
 寫入結尾之外`LOB`允許，且會放大`LOB`所寫入的位元組數目。  
  
 .NET Framework Data Provider for Oracle 包辦`CLOB`和`NCLOB`資料為 Unicode。 因此，當存取`CLOB`和`NCLOB`資料類型，您永遠都在處理其中每一個字元是 2 個位元組的位元組數目。 比方說，如果文字包含三個字元的字串會儲存為`NCLOB`其中的字元集是 4 個位元組，每個字元，而您執行的 Oracle 伺服器上`Write`作業中，您將指定字串的長度為 6 個位元組，雖然儲存在伺服器上的 12 個位元組。  
  
 要寫入`LOB`，您必須擷取`LOB`using FOR UPDATE 子句中的 SQL SELECT 陳述式，而且您必須擁有啟動本機交易。  
  
 下列 C# 範例示範如何寫入至<xref:System.Data.OracleClient.OracleLob>物件。  
  
```  
public static void WriteLobExample(OracleCommand command)  
{  
   //Note: Updating LOB data requires a transaction.  
   command.Transaction = command.Connection.BeginTransaction();  
   //Select some data.  
   //    Table Schema:  
   //        "CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)";  
   //        "INSERT INTO tablewithlobs values (1, 'AA', 'AAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs FOR UPDATE";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain both LOBs.  
      OracleLob BLOB1    = reader.GetOracleLob(1);  
      OracleLob BLOB2    = reader.GetOracleLob(2);  
      //Perform any desired operations on the LOB, (read, position, and so on).  
      //...  
      //Example - Writing binary data (directly to the backend).  
      //To write, you can use any of the stream classes, or write raw binary data using   
      //the OracleLob write method. Writing character vs. binary is the same;  
      //however note that character is always in terms of Unicode byte counts  
      //(for example: even number of bytes - 2 bytes for every Unicode character).  
      byte[] buffer = new byte[100];  
      buffer[0] = 0xCC;  
      buffer[1] = 0xDD;  
      BLOB1.Write(buffer, 0, 2);  
      BLOB1.Position = 0;  
      Console.WriteLine(BLOB1.LobType + ".Write(" + buffer + ", 0, 2) => " + BLOB1.Value);  
  
      //Example - Copying data into another LOB.  
      long actual = BLOB1.CopyTo(BLOB2);  
      Console.WriteLine(BLOB1.LobType + ".CopyTo(" + BLOB2.Value + ") => " + actual);  
  
      //Commit the transaction now that everything succeeded.  
      //Note: On error, Transaction.Dispose is called (from the using statement)  
      //and will automatically roll-back the pending transaction.  
      command.Transaction.Commit();  
   }  
}  
```  
  
> [!NOTE]
>  寫入作業的唯讀`LOB`可能會成功，但不會更新`LOB`伺服器上。 在此情況下，不過，在本機複製的`LOB`會更新。 因此，稍後在讀取作業<xref:System.Data.OracleClient.OracleLob>物件可能會傳回寫入作業的結果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 參數為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 或 <paramref name="count" /> 參數中的值不是正數。  
  
-或- 
<paramref name="offset" /> 和 <paramref name="count" /> 參數的總和大於 <paramref name="buffer" /> 的長度。  
  
-或- 
<paramref name="count" /> 或 <paramref name="offset" /> 參數中所指定的值小於零，或是大於 4 GB。  
  
-或- 
您必須將 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 資料型別指定為偶數位元組數。</exception>
        <exception cref="T:System.InvalidOperationException">作業不在交易中、<see cref="T:System.Data.OracleClient.OracleLob" /> 物件為 null，或是連接已關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">物件已關閉或處置。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">發生 Oracle 錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="oracleLob.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">寫入資料流的位元組。</param>
        <summary>寫入一個位元組至 <see cref="T:System.Data.OracleClient.OracleLob" /> 資料流的目前位置，並將資料流位置推進一個位元組。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果寫入作業成功時，資料流位置推進一個位元組。 如果發生例外狀況，將資料流中的位置會保持不變。  
  
 寫入結尾之外`LOB`允許，且會放大`LOB`一個位元組。  
  
 要寫入`LOB`，您必須擷取`LOB`using FOR UPDATE 子句中的 SQL SELECT 陳述式，而且您必須擁有啟動本機交易。  
  
> [!NOTE]
>  寫入作業的唯讀`LOB`可能會成功，但不會更新`LOB`伺服器上。 在此情況下，不過，在本機複製的`LOB`會更新。 因此，稍後在讀取作業<xref:System.Data.OracleClient.OracleLob>物件可能會傳回寫入作業的結果。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>