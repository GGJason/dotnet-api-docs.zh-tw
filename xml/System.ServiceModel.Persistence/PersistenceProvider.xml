<Type Name="PersistenceProvider" FullName="System.ServiceModel.Persistence.PersistenceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ebe9bdbc77c412be76a9af2ba4f3d529de11c781" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48740313" /></Metadata><TypeSignature Language="C#" Value="public abstract class PersistenceProvider : System.ServiceModel.Channels.CommunicationObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PersistenceProvider extends System.ServiceModel.Channels.CommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Persistence.PersistenceProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PersistenceProvider&#xA;Inherits CommunicationObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistenceProvider abstract : System::ServiceModel::Channels::CommunicationObject" />
  <TypeSignature Language="F#" Value="type PersistenceProvider = class&#xA;    inherit CommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Channels.CommunicationObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>所有長期服務持續性提供者，均衍生自此抽象基底類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用者可建立衍生自此型別的類別，來建立使用自訂持續型儲存 (如協力廠商資料庫、檔案系統，或遠端存取的儲存系統) 的長期服務持續性提供者。 若要建立此型別的系統提供實作，並使用 Microsoft SQL Server 做為持續性存放區，請參閱 <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>。  
  
> [!NOTE]
>  建立持續性提供者實作時，務必要在新提供者的方法中 (如 <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A>) 維護執行緒的原始身分識別。 否則可能會產生安全性漏洞，因為作業可能會在錯誤的身分識別下執行。  
  
   
  
## Examples  
 若此型別的實作使用檔案系統做為持續性存放區，請參閱 DurableServiceFactory SDK 範例中的 FilePersistenceProviderFactory.cs 檔。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistenceProvider (Guid id);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (id As Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PersistenceProvider(Guid id);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Persistence.PersistenceProvider : Guid -&gt; System.ServiceModel.Persistence.PersistenceProvider" Usage="new System.ServiceModel.Persistence.PersistenceProvider id" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="id" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="id">要儲存的服務狀態資料之唯一識別碼。</param>
        <summary>在衍生類別中實作時，初始化 <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例會示範如何使用 <xref:System.ServiceModel.Persistence.PersistenceProvider> 建構函式。 這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。 如需詳細資訊，請參閱 DurableServiceFactory SDK 範例。  
  
 [!code-csharp[PersistenceProvider#0](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCreate">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginCreate (object instance, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginCreate(object instance, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginCreate (instance As Object, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginCreate(System::Object ^ instance, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginCreate : obj * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginCreate (instance, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">實際執行個體狀態。</param>
        <param name="timeout">一段時間，持續性提供者會在經過以後中止這次嘗試。</param>
        <param name="callback">作業完成時要呼叫的方法。</param>
        <param name="state">使用者提供的物件，可區別這個特定非同步作業與其他作業。</param>
        <summary>在衍生的類別中實作時，代表「建立」階段的開始。 「建立」階段發生在服務執行個體記錄首次在持續性存放區中建立時。</summary>
        <returns><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> 非同步方法呼叫的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate%2A> 方法。  
  
 [!code-csharp[PersistenceProvider#14](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDelete">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginDelete (object instance, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginDelete(object instance, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginDelete (instance As Object, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginDelete(System::Object ^ instance, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginDelete : obj * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginDelete (instance, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">實際執行個體狀態。</param>
        <param name="timeout">一段時間，持續性提供者會在經過以後中止這次嘗試。</param>
        <param name="callback">作業完成時要呼叫的方法。</param>
        <param name="state">使用者提供的物件，可區別這個特定非同步作業與其他作業。</param>
        <summary>在衍生的類別中實作時，代表「刪除」階段的開始。 「刪除」階段發生在服務狀態資料從持續性存放區永久刪除時。</summary>
        <returns><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> 非同步方法呼叫的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 `BeginDelete` 方法。 這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。 如需詳細資訊，請參閱 DurableServiceFactory SDK 範例。  
  
 [!code-csharp[PersistenceProvider#6](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginLoad (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginLoad(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginLoad (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginLoad(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginLoad : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginLoad (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">一段時間，持續性提供者會在經過以後中止這次嘗試。</param>
        <param name="callback">作業完成時要呼叫的方法。</param>
        <param name="state">使用者提供的物件，可區別這個特定非同步作業與其他作業。</param>
        <summary>在衍生的類別中實作時，代表「載入」階段的開始。 「載入」階段發生在狀態資料從持續性存放區載入至持續性提供者時。</summary>
        <returns><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /> 非同步方法呼叫的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 `BeginLoad` 方法。 這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。 如需詳細資訊，請參閱 DurableServiceFactory SDK 範例。  
  
 [!code-csharp[PersistenceProvider#7](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoadIfChanged">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginLoadIfChanged (TimeSpan timeout, object instanceToken, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginLoadIfChanged(valuetype System.TimeSpan timeout, object instanceToken, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginLoadIfChanged (timeout As TimeSpan, instanceToken As Object, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginLoadIfChanged(TimeSpan timeout, System::Object ^ instanceToken, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginLoadIfChanged : TimeSpan * obj * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginLoadIfChanged : TimeSpan * obj * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginLoadIfChanged (timeout, instanceToken, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="instanceToken" Type="System.Object" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">一段時間，持續性提供者會在經過以後中止這次嘗試。</param>
        <param name="instanceToken">前一個 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> 或 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /> 所傳回的權杖，代表呼叫者所持有的目前狀態。</param>
        <param name="callback">作業完成時要呼叫的方法。</param>
        <param name="state">使用者提供的物件，可區別這個特定非同步作業與其他作業。</param>
        <summary>在衍生的類別中實作時，代表 LoadIfChanged 階段的開始。 LoadIfChanged 階段發生在狀態資料從持續性存放區載入至持續性提供者，且持續性存放區的狀態資料變更時。</summary>
        <returns><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /> 非同步方法呼叫的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged%2A> 方法。  
  
 [!code-csharp[PersistenceProvider#11](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginUpdate (object instance, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginUpdate(object instance, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginUpdate (instance As Object, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginUpdate(System::Object ^ instance, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginUpdate : obj * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginUpdate (instance, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">實際執行個體狀態。</param>
        <param name="timeout">一段時間，持續性提供者會在經過以後中止這次嘗試。</param>
        <param name="callback">作業完成時要呼叫的方法。</param>
        <param name="state">使用者提供的物件，可區別這個特定非同步作業與其他作業。</param>
        <summary>在衍生的類別中實作時，代表「更新」階段的開始。 「更新」階段發生在更新持續性存放區中的服務狀態資料時。</summary>
        <returns><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> 非同步方法呼叫的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate%2A> 方法。  
  
 [!code-csharp[PersistenceProvider#17](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public abstract object Create (object instance, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Create(object instance, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Create (instance As Object, timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Create(System::Object ^ instance, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Create : obj * TimeSpan -&gt; obj" Usage="persistenceProvider.Create (instance, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance">實際執行個體狀態。</param>
        <param name="timeout">一段時間，持續性提供者會在經過以後中止這次嘗試。</param>
        <summary>在衍生類別中實作時，會在持續性存放區中建立服務狀態記錄。</summary>
        <returns>對應到剛儲存之狀態的執行個體權杖。 這可以傳遞至 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />，以判斷持續性存放區中的狀態是否不同於「建立」呼叫時的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.Create%2A> 方法。  
  
 [!code-csharp[PersistenceProvider#15](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public abstract void Delete (object instance, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete(object instance, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Delete (instance As Object, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Delete(System::Object ^ instance, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Delete : obj * TimeSpan -&gt; unit" Usage="persistenceProvider.Delete (instance, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance">實際執行個體狀態。</param>
        <param name="timeout">一段時間，持續性提供者會在經過以後中止這次嘗試。</param>
        <summary>在衍生類別中實作時，會從持續性存放區中永久刪除服務狀態資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.Delete%2A> 方法。 這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。 如需詳細資訊，請參閱 DurableServiceFactory SDK 範例。  
  
 [!code-csharp[PersistenceProvider#9](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCreate">
      <MemberSignature Language="C#" Value="public abstract object EndCreate (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndCreate(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndCreate (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EndCreate(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndCreate : IAsyncResult -&gt; obj" Usage="persistenceProvider.EndCreate result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">作業結果的參考。</param>
        <summary>在衍生的類別中實作時，代表「建立」階段的結束。 「建立」階段發生在服務狀態記錄首次在持續性儲存中建立時。</summary>
        <returns>對應到剛儲存之狀態的執行個體權杖。 這可以傳遞至 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />，以判斷持續性存放區中的狀態是否不同於「建立」呼叫時的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndCreate%2A> 方法。  
  
 [!code-csharp[PersistenceProvider#16](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDelete">
      <MemberSignature Language="C#" Value="public abstract void EndDelete (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndDelete(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub EndDelete (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void EndDelete(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndDelete : IAsyncResult -&gt; unit" Usage="persistenceProvider.EndDelete result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">作業結果的參考。</param>
        <summary>在衍生的類別中實作時，代表「刪除」階段的結束。 「刪除」階段發生在狀態資料從持續性存放區永久刪除時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndDelete%2A> 方法。 這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。 如需詳細資訊，請參閱 DurableServiceFactory SDK 範例。  
  
 [!code-csharp[PersistenceProvider#5](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoad">
      <MemberSignature Language="C#" Value="public abstract object EndLoad (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndLoad(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndLoad (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EndLoad(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndLoad : IAsyncResult -&gt; obj" Usage="persistenceProvider.EndLoad result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">作業結果的參考。</param>
        <summary>在衍生的類別中實作時，代表「載入」階段的結束。 「載入」階段發生在狀態資料從持續性存放區載入至持續性提供者時。</summary>
        <returns>服務狀態資訊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼示範如何使用 `EndLoad` 方法。 這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。 如需詳細資訊，請參閱 DurableServiceFactory SDK 範例。  
  
 [!code-csharp[PersistenceProvider#1](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoadIfChanged">
      <MemberSignature Language="C#" Value="public virtual bool EndLoadIfChanged (IAsyncResult result, out object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndLoadIfChanged(class System.IAsyncResult result, [out] object&amp; instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndLoadIfChanged (result As IAsyncResult, ByRef instance As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool EndLoadIfChanged(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::Object ^ % instance);" />
      <MemberSignature Language="F#" Value="abstract member EndLoadIfChanged : IAsyncResult *  -&gt; bool&#xA;override this.EndLoadIfChanged : IAsyncResult *  -&gt; bool" Usage="persistenceProvider.EndLoadIfChanged (result, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="instance" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">作業結果的參考。</param>
        <param name="instance">實際執行個體狀態。</param>
        <summary>在衍生的類別中實作時，代表 LoadIfChanged 階段的結束。 LoadIfChanged 階段發生在狀態資料從持續性存放區載入至持續性提供者，且持續性存放區的狀態資料變更時。</summary>
        <returns>若執行個體的 <see langword="true" /> 參數已設定成持續性存放區中的最新複本，則為 <see langword="out" />，若本機快取的狀態已是最新的，則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged%2A> 方法。  
  
 [!code-csharp[PersistenceProvider#12](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public abstract object EndUpdate (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndUpdate(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndUpdate (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EndUpdate(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndUpdate : IAsyncResult -&gt; obj" Usage="persistenceProvider.EndUpdate result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">作業結果的參考。</param>
        <summary>代表「更新」階段的結束。 「更新」階段發生在更新持續性存放區中的服務狀態記錄時。</summary>
        <returns>對應到剛儲存之狀態的執行個體權杖。 這可以傳遞至 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />，以判斷持續性存放區中的狀態是否不同於「建立」呼叫時的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate%2A> 方法。  
  
 [!code-csharp[PersistenceProvider#19](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public Guid Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Id" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Persistence.PersistenceProvider.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Id { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : Guid" Usage="System.ServiceModel.Persistence.PersistenceProvider.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代表與這個執行個體相關的 <see cref="T:System.Guid" />。</summary>
        <value>與這個執行個體相關聯的 GUID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼示範如何使用 <xref:System.ServiceModel.Persistence.PersistenceProvider.Id%2A> 屬性。  
  
 [!code-csharp[PersistenceProvider#10](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public abstract object Load (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Load(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Load (timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Load(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Load : TimeSpan -&gt; obj" Usage="persistenceProvider.Load timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">一段時間，持續性提供者會在經過以後中止這次嘗試。</param>
        <summary>在衍生類別中實作時，會從持續性存放區中載入服務狀態資訊。</summary>
        <returns>載入的執行個體狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A> 方法中對安全性權杖所完成的變更；若沒有還原，則對往後的訊息處理持續有效。 這表示服務作業的使用者程式碼、透過發送器的回應訊息路徑，以及任何錯誤路徑，都會在變更的安全性內容中執行。  
  
   
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A> 方法。 這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。 如需詳細資訊，請參閱 DurableServiceFactory SDK 範例。  
  
 [!code-csharp[PersistenceProvider#3](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadIfChanged">
      <MemberSignature Language="C#" Value="public virtual bool LoadIfChanged (TimeSpan timeout, object instanceToken, out object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LoadIfChanged(valuetype System.TimeSpan timeout, object instanceToken, [out] object&amp; instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LoadIfChanged (timeout As TimeSpan, instanceToken As Object, ByRef instance As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool LoadIfChanged(TimeSpan timeout, System::Object ^ instanceToken, [Runtime::InteropServices::Out] System::Object ^ % instance);" />
      <MemberSignature Language="F#" Value="abstract member LoadIfChanged : TimeSpan * obj *  -&gt; bool&#xA;override this.LoadIfChanged : TimeSpan * obj *  -&gt; bool" Usage="persistenceProvider.LoadIfChanged (timeout, instanceToken, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="instanceToken" Type="System.Object" />
        <Parameter Name="instance" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout">一段時間，持續性提供者會在經過以後中止這次嘗試。</param>
        <param name="instanceToken">前一個 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> 或 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /> 所傳回的權杖，代表呼叫者所持有的目前狀態。</param>
        <param name="instance">實際執行個體狀態。</param>
        <summary>在衍生的類別中實作時，如果該資料已變更，就會從持續性存放區中載入服務狀態資訊。</summary>
        <returns>如果 <paramref name="instance" /><see langword="out" /> 參數已設定成持續性儲存區中的最新複本，則為 <see langword="true" />；若本機快取的狀態已是最新的，則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged%2A> 方法。  
  
 [!code-csharp[PersistenceProvider#13](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public abstract object Update (object instance, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Update(object instance, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Update (instance As Object, timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Update(System::Object ^ instance, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Update : obj * TimeSpan -&gt; obj" Usage="persistenceProvider.Update (instance, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance">實際執行個體狀態。</param>
        <param name="timeout">一段時間，持續性提供者會在經過以後中止這次嘗試。</param>
        <summary>在衍生類別中實作時，會更新持續性存放區中的服務狀態記錄。</summary>
        <returns>對應到剛儲存之狀態的執行個體權杖。 這可以傳遞至 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />，以判斷持續性存放區中的狀態是否不同於「建立」呼叫時的狀態。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼會示範如何實作 <xref:System.ServiceModel.Persistence.PersistenceProvider.Update%2A> 方法。  
  
 [!code-csharp[PersistenceProvider#18](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>