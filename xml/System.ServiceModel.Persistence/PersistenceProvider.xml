<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PersistenceProvider.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac547c79f6c0b41f17304c2993fb11979f822b05793.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47c79f6c0b41f17304c2993fb11979f822b05793</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>The abstract base class from which all durable service persistence providers are derived.</source>
          <target state="translated">所有長期服務持續性提供者，均衍生自此抽象基底類別。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>Users can create classes derived from this type to create durable service persistence providers that use custom persistence stores, such as third-party databases, the file system, or storage systems accessed remotely.</source>
          <target state="translated">使用者可建立衍生自此型別的類別，來建立使用自訂持續型儲存 (如協力廠商資料庫、檔案系統，或遠端存取的儲存系統) 的長期服務持續性提供者。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>To create a system-provided implementation of this type that uses Microsoft SQL Server as a persistence store, see <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory&gt;</ph>.</source>
          <target state="translated">若要建立此型別的系統提供實作，並使用 Microsoft SQL Server 做為持續性存放區，請參閱 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>When creating persistence provider implementations, it is important to maintain the thread's original identity in the new provider's methods (such as <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph>.</source>
          <target state="translated">建立持續性提供者實作時，務必要在新提供者的方法中 (如 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph>) 維護執行緒的原始身分識別。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>Otherwise, security loopholes could be created, because operations would then run under the wrong identity.</source>
          <target state="translated">否則可能會產生安全性漏洞，因為作業可能會在錯誤的身分識別下執行。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Persistence.PersistenceProvider">
          <source>For an implementation of this type that uses the file system as a persistence store, see the FilePersistenceProviderFactory.cs file in the DurableServiceFactory SDK sample.</source>
          <target state="translated">若此型別的實作使用檔案系統做為持續性存放區，請參閱 DurableServiceFactory SDK 範例中的 FilePersistenceProviderFactory.cs 檔。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>The unique identifier of the service state data being saved.</source>
          <target state="translated">要儲存的服務狀態資料之唯一識別碼。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>When implemented in a derived class, initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /&gt;</ph> class.</source>
          <target state="translated">在衍生類別中實作時，初始化 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>The following code demonstrates how to use the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider&gt;</ph> constructor.</source>
          <target state="translated">下列程式碼範例會示範如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider&gt;</ph> 建構函式。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 範例。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The actual instance state.</source>
          <target state="translated">實際執行個體狀態。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">一段時間，持續性提供者會在經過以後中止這次嘗試。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">作業完成時要呼叫的方法。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">使用者提供的物件，可區別這個特定非同步作業與其他作業。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Create phase.</source>
          <target state="translated">在衍生的類別中實作時，代表「建立」階段的開始。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Create phase occurs when service instance records are first created in the persistence store.</source>
          <target state="translated">「建立」階段發生在服務執行個體記錄首次在持續性存放區中建立時。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 非同步方法呼叫的狀態。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The actual instance state.</source>
          <target state="translated">實際執行個體狀態。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">一段時間，持續性提供者會在經過以後中止這次嘗試。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">作業完成時要呼叫的方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">使用者提供的物件，可區別這個特定非同步作業與其他作業。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Delete phase.</source>
          <target state="translated">在衍生的類別中實作時，代表「刪除」階段的開始。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Delete phase occurs when service state data is permanently deleted from the persistence store.</source>
          <target state="translated">「刪除」階段發生在服務狀態資料從持續性存放區永久刪除時。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 非同步方法呼叫的狀態。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">`BeginDelete`</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">`BeginDelete`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 範例。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">一段時間，持續性提供者會在經過以後中止這次嘗試。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">作業完成時要呼叫的方法。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">使用者提供的物件，可區別這個特定非同步作業與其他作業。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Load phase.</source>
          <target state="translated">在衍生的類別中實作時，代表「載入」階段的開始。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</source>
          <target state="translated">「載入」階段發生在狀態資料從持續性存放區載入至持續性提供者時。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 非同步方法呼叫的狀態。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">`BeginLoad`</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">`BeginLoad`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 範例。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">一段時間，持續性提供者會在經過以後中止這次嘗試。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The token returned by a previous <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph> that represents the current state held by the caller.</source>
          <target state="translated">前一個 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph> 所傳回的權杖，代表呼叫者所持有的目前狀態。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">作業完成時要呼叫的方法。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">使用者提供的物件，可區別這個特定非同步作業與其他作業。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the LoadIfChanged phase.</source>
          <target state="translated">在衍生的類別中實作時，代表 LoadIfChanged 階段的開始。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</source>
          <target state="translated">LoadIfChanged 階段發生在狀態資料從持續性存放區載入至持續性提供者，且持續性存放區的狀態資料變更時。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /&gt;</ph> 非同步方法呼叫的狀態。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The actual instance state.</source>
          <target state="translated">實際執行個體狀態。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">一段時間，持續性提供者會在經過以後中止這次嘗試。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is completed.</source>
          <target state="translated">作業完成時要呼叫的方法。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous operation from other operations.</source>
          <target state="translated">使用者提供的物件，可區別這個特定非同步作業與其他作業。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When implemented in a derived class, represents the beginning of the Update phase.</source>
          <target state="translated">在衍生的類別中實作時，代表「更新」階段的開始。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The Update phase occurs when service state data is updated in the persistence store.</source>
          <target state="translated">「更新」階段發生在更新持續性存放區中的服務狀態資料時。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> asynchronous method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> 非同步方法呼叫的狀態。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The actual instance state.</source>
          <target state="translated">實際執行個體狀態。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">一段時間，持續性提供者會在經過以後中止這次嘗試。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>When implemented in a derived class, creates a service state record in the persistence store.</source>
          <target state="translated">在衍生類別中實作時，會在持續性存放區中建立服務狀態記錄。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">對應到剛儲存之狀態的執行個體權杖。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">這可以傳遞至 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>，以判斷持續性存放區中的狀態是否不同於「建立」呼叫時的狀態。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Create%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Create%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>The actual instance state.</source>
          <target state="translated">實際執行個體狀態。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">一段時間，持續性提供者會在經過以後中止這次嘗試。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>When implemented in a derived class, permanently deletes service state information from the persistence store.</source>
          <target state="translated">在衍生類別中實作時，會從持續性存放區中永久刪除服務狀態資訊。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Delete%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Delete%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 範例。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">作業結果的參考。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>When implemented in a derived class, represents the end of the Create phase.</source>
          <target state="translated">在衍生的類別中實作時，代表「建立」階段的結束。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>The Create phase occurs when service state records are first created in the persistence store.</source>
          <target state="translated">「建立」階段發生在服務狀態記錄首次在持續性儲存中建立時。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">對應到剛儲存之狀態的執行個體權杖。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">這可以傳遞至 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>，以判斷持續性存放區中的狀態是否不同於「建立」呼叫時的狀態。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndCreate%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndCreate%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">作業結果的參考。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>When implemented in a derived class, represents the end of the Delete phase.</source>
          <target state="translated">在衍生的類別中實作時，代表「刪除」階段的結束。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>The Delete phase occurs when state data is permanently deleted from the persistence store.</source>
          <target state="translated">「刪除」階段發生在狀態資料從持續性存放區永久刪除時。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndDelete%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndDelete%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
          <source>For more information, see the DurableServiceFactory SDK sample.</source>
          <target state="translated">如需詳細資訊，請參閱 DurableServiceFactory SDK 範例。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">作業結果的參考。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>When implemented in a derived class, represents the end of the Load phase.</source>
          <target state="translated">在衍生的類別中實作時，代表「載入」階段的結束。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</source>
          <target state="translated">「載入」階段發生在狀態資料從持續性存放區載入至持續性提供者時。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>The service state information.</source>
          <target state="translated">服務狀態資訊。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>The following code demonstrates how to use the <ph id="ph1">`EndLoad`</ph> method.</source>
          <target state="translated">下列程式碼示範如何使用 <ph id="ph1">`EndLoad`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 範例。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">作業結果的參考。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>The actual instance state.</source>
          <target state="translated">實際執行個體狀態。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>When implemented in a derived class, represents the end of the LoadIfChanged phase.</source>
          <target state="translated">在衍生的類別中實作時，代表 LoadIfChanged 階段的結束。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</source>
          <target state="translated">LoadIfChanged 階段發生在狀態資料從持續性存放區載入至持續性提供者，且持續性存放區的狀態資料變更時。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the instance <ph id="ph2">&lt;see langword="out" /&gt;</ph> parameter has been set with the latest copy from the persistence store; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the locally cached state is already up-to-date.</source>
          <target state="translated">若執行個體的 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 參數已設定成持續性存放區中的最新複本，則為 <ph id="ph2">&lt;see langword="out" /&gt;</ph>，若本機快取的狀態已是最新的，則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>A reference to the result of the operation.</source>
          <target state="translated">作業結果的參考。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>Represents the end of the Update phase.</source>
          <target state="translated">代表「更新」階段的結束。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>The Update phase occurs when service state records are updated in the persistence store.</source>
          <target state="translated">「更新」階段發生在更新持續性存放區中的服務狀態記錄時。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">對應到剛儲存之狀態的執行個體權杖。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">這可以傳遞至 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>，以判斷持續性存放區中的狀態是否不同於「建立」呼叫時的狀態。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Persistence.PersistenceProvider.Id">
          <source>Represents the <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> associated with this instance.</source>
          <target state="translated">代表與這個執行個體相關的 <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Persistence.PersistenceProvider.Id">
          <source>The GUID associated with this instance.</source>
          <target state="translated">與這個執行個體相關聯的 GUID。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Persistence.PersistenceProvider.Id">
          <source>The following code demonstrates how to use the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Id%2A&gt;</ph> property.</source>
          <target state="translated">下列程式碼示範如何使用 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Id%2A&gt;</ph> 屬性。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">一段時間，持續性提供者會在經過以後中止這次嘗試。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>When implemented in a derived class, loads service state information from the persistence store.</source>
          <target state="translated">在衍生類別中實作時，會從持續性存放區中載入服務狀態資訊。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>The loaded instance state.</source>
          <target state="translated">載入的執行個體狀態。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>Changes made to the security token in the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> method, if not reverted, stay in effect for the remainder of that message's processing.</source>
          <target state="translated">在 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> 方法中對安全性權杖所完成的變更；若沒有還原，則對往後的訊息處理持續有效。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>This means that the service operation's user code, the response message path through the dispatcher, as well as any error paths, run in the changed security context.</source>
          <target state="translated">這表示服務作業的使用者程式碼、透過發送器的回應訊息路徑，以及任何錯誤路徑，都會在變更的安全性內容中執行。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source>This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</source>
          <target state="translated">這個程式碼範例是 FilePersistenceProviderFactory.cs 檔案中 DurableServiceFactory SDK 範例的一部分。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> the DurableServiceFactory SDK sample.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> DurableServiceFactory SDK 範例。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">一段時間，持續性提供者會在經過以後中止這次嘗試。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The token returned by a previous <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph>, which represents the current state held by the caller.</source>
          <target state="translated">前一個 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /&gt;</ph> 或 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /&gt;</ph> 所傳回的權杖，代表呼叫者所持有的目前狀態。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The actual instance state.</source>
          <target state="translated">實際執行個體狀態。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>When implemented in a derived class, loads service state information from the persistence store if that data has been changed.</source>
          <target state="translated">在衍生的類別中實作時，如果該資料已變更，就會從持續性存放區中載入服務狀態資訊。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="instance" /&gt;</ph><ph id="ph3">&lt;see langword="out" /&gt;</ph> parameter has been set with the latest copy from the persistence store; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if the locally cached state is already up to date.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="instance" /&gt;</ph><ph id="ph3">&lt;see langword="out" /&gt;</ph> 參數已設定成持續性儲存區中的最新複本，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；若本機快取的狀態已是最新的，則為 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged%2A&gt;</ph> 方法。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The actual instance state.</source>
          <target state="translated">實際執行個體狀態。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The time period after which the persistence provider aborts this attempt.</source>
          <target state="translated">一段時間，持續性提供者會在經過以後中止這次嘗試。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>When implemented in a derived class, updates service state records in the persistence store.</source>
          <target state="translated">在衍生類別中實作時，會更新持續性存放區中的服務狀態記錄。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The instance token corresponding to the state just saved.</source>
          <target state="translated">對應到剛儲存之狀態的執行個體權杖。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>This can be passed to <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph> to determine whether the state in the persistence store differs from the state when Create was called.</source>
          <target state="translated">這可以傳遞至 <ph id="ph1">&lt;see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /&gt;</ph>，以判斷持續性存放區中的狀態是否不同於「建立」呼叫時的狀態。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
          <source>The following code demonstrates how to implement the <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Update%2A&gt;</ph> method.</source>
          <target state="translated">下列程式碼會示範如何實作 <ph id="ph1">&lt;xref:System.ServiceModel.Persistence.PersistenceProvider.Update%2A&gt;</ph> 方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>