<Type Name="Vector" FullName="System.Windows.Vector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="21271014da100482e12f6421836be7ac1b5c19c8" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48682645" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Vector : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Vector extends System.ValueType implements class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Vector" />
  <TypeSignature Language="VB.NET" Value="Public Structure Vector&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Vector : IFormattable" />
  <TypeSignature Language="F#" Value="type Vector = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f6dc0-101">表示 2D 空間中的移動。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f6dc0-101">Represents a displacement in 2-D space.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6dc0-102">A<xref:System.Windows.Point>表示的固定的位置，但<xref:System.Windows.Vector>代表方向和大小 （例如，速度或加速）。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-102">A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration).</span></span> <span data-ttu-id="f6dc0-103">因此，直線線段的結束點是點，但其差異是向量;也就是說，方向和長度的行區段。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-103">Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.</span></span>  
  
 <span data-ttu-id="f6dc0-104">在 XAML，之間的分隔符號<xref:System.Windows.Vector.X%2A>並<xref:System.Windows.Vector.Y%2A>的值<xref:System.Windows.Vector>可以是逗號或空格。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-104">In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space.</span></span>  
  
 <span data-ttu-id="f6dc0-105">某些文化特性可以使用逗號字元作為十進位分隔符號，而不是句號字元。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-105">Some cultures might use the comma character as the decimal delimiter instead of the period character.</span></span> <span data-ttu-id="f6dc0-106">XAML 處理而異的文化特性為 EN-US，在大部分的 XAML 處理器實作中，預設值，並預期為小數分隔符號的期間。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-106">XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter.</span></span> <span data-ttu-id="f6dc0-107">您應該避免使用逗號字元作為十進位分隔符號，如果指定<xref:System.Windows.Vector>在 XAML 中，因為會將衝突的字串類型轉換<xref:System.Windows.Vector>屬性值插入<xref:System.Windows.Vector.X%2A>和<xref:System.Windows.Vector.Y%2A>元件。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-107">You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.</span></span>  
  
<a name="xamlAttributeUsage_Vector"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="f6dc0-108">XAML Attribute Usage</span><span class="sxs-lookup"><span data-stu-id="f6dc0-108">XAML Attribute Usage</span></span>  
  
```  
<object property="x,y"/>  
-or-  
<object property="x y"/>  
```  
  
<a name="xamlValues_Vector"></a>   
## <a name="xaml-values"></a><span data-ttu-id="f6dc0-109">XAML 值</span><span class="sxs-lookup"><span data-stu-id="f6dc0-109">XAML Values</span></span>  
 <span data-ttu-id="f6dc0-110">*x*</span><span class="sxs-lookup"><span data-stu-id="f6dc0-110">*x*</span></span>  
 <span data-ttu-id="f6dc0-111">向量的 X 元件。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-111">The vector's X component.</span></span> <span data-ttu-id="f6dc0-112">如需詳細資訊，請參閱 <xref:System.Windows.Vector.X%2A> 屬性 (Property)。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-112">For more information, see the <xref:System.Windows.Vector.X%2A> property.</span></span>  
  
 <span data-ttu-id="f6dc0-113">*y*</span><span class="sxs-lookup"><span data-stu-id="f6dc0-113">*y*</span></span>  
 <span data-ttu-id="f6dc0-114">向量的 Y 元件。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-114">The vector's Y component.</span></span> <span data-ttu-id="f6dc0-115">如需詳細資訊，請參閱 <xref:System.Windows.Vector.Y%2A> 屬性 (Property)。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-115">For more information, see the <xref:System.Windows.Vector.Y%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6dc0-116">下列範例示範如何新增兩個<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-116">The following example shows how to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorSample#10](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorSample/CSharp/Window1.xaml.cs#10)]
 [!code-vb[VectorSample#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorSample/visualbasic/window1.xaml.vb#10)]  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Windows.Vector.Add" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(double x, double y);" />
      <MemberSignature Language="F#" Value="new System.Windows.Vector : double * double -&gt; System.Windows.Vector" Usage="new System.Windows.Vector (x, y)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="f6dc0-117">新 <see cref="P:System.Windows.Vector.X" /> 的 <see cref="T:System.Windows.Vector" /> 位移 (Offset)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-117">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="f6dc0-118">新 <see cref="P:System.Windows.Vector.Y" /> 的 <see cref="T:System.Windows.Vector" /> 位移 (Offset)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-118">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-119">初始化 <see cref="T:System.Windows.Vector" /> 結構的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-119">Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-120">下列範例示範如何建立兩個向量，並將它們相加。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-120">The following example shows how to create two vectors and add them together.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-121">將向量加入至點或另一個向量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-121">Adds a vector to a point or to another vector.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Add(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Add(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member Add : System.Windows.Vector * System.Windows.Point -&gt; System.Windows.Point" Usage="System.Windows.Vector.Add (vector, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="f6dc0-122">要將指定的點平移的數量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-122">The amount to translate the specified point.</span>
          </span>
        </param>
        <param name="point">
          <span data-ttu-id="f6dc0-123">要平移的點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-123">The point to translate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-124">依指定的向量平移指定的點，並傳回產生的點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-124">Translates the specified point by the specified vector and returns the resulting point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-125">依 <paramref name="point" /> 轉換 <paramref name="vector" /> 的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-125">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-126">下列範例示範如何使用這個方法來加入<xref:System.Windows.Point>結構<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-126">The following example shows how to use this method to add a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddPointAndVectorExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addpointandvectorexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Add(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Add(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Add : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Add (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-127">要相加的第一個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-127">The first vector to add.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-128">要相加的第二個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-128">The second vector to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-129">將兩個向量相加，並傳回結果做為 <see cref="T:System.Windows.Vector" /> 結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-129">Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-130">
            <paramref name="vector1" /> 和 <paramref name="vector2" /> 的總和。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-130">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-131">下列範例示範如何使用這個方法來新增兩個<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-131">The following example shows how to use this method to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="AngleBetween">
      <MemberSignature Language="C#" Value="public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 AngleBetween(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AngleBetween (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double AngleBetween(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member AngleBetween : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.AngleBetween (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-132">要評估的第一個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-132">The first vector to evaluate.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-133">要評估的第二個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-133">The second vector to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-134">擷取兩個所指定向量之間的角度 (以度數表示)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-134">Retrieves the angle, expressed in degrees, between the two specified vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-135">
            <paramref name="vector1" /> 與 <paramref name="vector2" /> 之間的角度 (以度數為單位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-135">The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-136">下列範例示範如何使用此方法來取得兩個角度<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-136">The following example shows how to use this method to get the angle between two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AngleBetweenExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#anglebetweenexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CrossProduct(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrossProduct (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CrossProduct(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member CrossProduct : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.CrossProduct (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-137">要評估的第一個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-137">The first vector to evaluate.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-138">要評估的第二個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-138">The second vector to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-139">計算兩個向量的叉積。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-139">Calculates the cross product of two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-140">
            <paramref name="vector1" /> 與 <paramref name="vector2" /> 的叉積 (Cross Product)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-140">The cross product of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
          <span data-ttu-id="f6dc0-141">下列公式可用來計算叉積：</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-141">The following formula is used to calculate the cross product:</span>
          </span>
          <span data-ttu-id="f6dc0-142">
            <c>(Vector1.X \* Vector2.Y) - (Vector1.Y \* Vector2.X)</c>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-142">
              <c>(Vector1.X \* Vector2.Y) - (Vector1.Y \* Vector2.X)</c>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-143">下列範例示範如何使用此方法來計算兩個交叉乘積<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-143">The following example shows how to use this method to calculate the cross product of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#CrossProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#crossproductexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Determinant">
      <MemberSignature Language="C#" Value="public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Determinant(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Determinant (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Determinant(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Determinant : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.Determinant (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-144">要評估的第一個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-144">The first vector to evaluate.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-145">要評估的第二個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-145">The second vector to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-146">計算兩個向量的行列式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-146">Calculates the determinant of two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-147">
            <paramref name="vector1" /> 與 <paramref name="vector2" /> 的行列式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-147">The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-148">下列範例示範如何計算兩個行列式<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-148">The following example shows how to calculate the determinant of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DeterminantExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#determinantexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Divide(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Divide(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Divide (vector, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="f6dc0-149">要被除的向量結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-149">The vector structure to divide.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="f6dc0-150">
            <c>vector</c> 要除以的數量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-150">The amount by which <c>vector</c> is divided.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-151">將指定的向量除以指定的純量，並傳回結果做為 <see cref="T:System.Windows.Vector" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-151">Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-152">
            <paramref name="vector" /> 除以 <paramref name="scalar" /> 的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-152">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-153">下列範例示範如何使用這個方法來分割<xref:System.Windows.Vector>純量。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-153">The following example shows how to use this method to divide a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DivideExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#divideexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-154">比較兩個向量是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-154">Compares two vectors for equality.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6dc0-155">向量<xref:System.Windows.Vector.X%2A>並<xref:System.Windows.Vector.Y%2A>屬性的描述是使用<xref:System.Double>值。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-155">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="f6dc0-156">因為值<xref:System.Double>它，比較兩個執行算術運算時可能會遺失有效位數<xref:System.Double>邏輯上相等的結構可能會失敗。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-156">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="vector.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="f6dc0-157">要比較的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-157">The vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-158">判斷指定的 <see cref="T:System.Object" /> 是否為 <see cref="T:System.Windows.Vector" /> 結構，如果是，則它的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值是否與這個向量相同。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-158">Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-159">如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Vector" /> 而且具有的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值與這個向量相同，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-159">
              <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6dc0-160">向量<xref:System.Windows.Vector.X%2A>並<xref:System.Windows.Vector.Y%2A>屬性的描述是使用<xref:System.Double>值。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-160">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="f6dc0-161">因為值<xref:System.Double>它，比較兩個執行算術運算時可能會遺失有效位數<xref:System.Windows.Vector>邏輯上相等的結構可能會失敗。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-161">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6dc0-162">下列範例示範如何使用此方法來檢查是否<xref:System.Windows.Vector>和<xref:System.Object>相等。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-162">The following example shows how to use this method to check whether a <xref:System.Windows.Vector> and an <xref:System.Object> are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Vector value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Vector value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Vector value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.Vector -&gt; bool" Usage="vector.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="f6dc0-163">要與這個向量比較的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-163">The vector to compare with this vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-164">比較兩個向量是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-164">Compares two vectors for equality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-165">如果 <paramref name="value" /> 具有的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值與這個向量相同則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-165">
              <see langword="true" /> if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6dc0-166">向量<xref:System.Windows.Vector.X%2A>並<xref:System.Windows.Vector.Y%2A>屬性的描述是使用<xref:System.Double>值。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-166">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="f6dc0-167">因為值<xref:System.Double>它，比較兩個執行算術運算時可能會遺失有效位數<xref:System.Windows.Vector>邏輯上相等的結構可能會失敗。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-167">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6dc0-168">下列範例示範如何使用此方法來檢查是否有兩個<xref:System.Windows.Vector>結構是否相等。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-168">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="System.Windows.Vector.Equals (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-169">要比較的第一個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-169">The first vector to compare.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-170">要比較的第二個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-170">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-171">比較兩個指定的向量是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-171">Compares the two specified vectors for equality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-172">如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 元件相等則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-172">
              <see langword="true" /> if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6dc0-173">向量<xref:System.Windows.Vector.X%2A>並<xref:System.Windows.Vector.Y%2A>屬性的描述是使用<xref:System.Double>值。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-173">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="f6dc0-174">因為值<xref:System.Double>它，比較兩個執行算術運算時可能會遺失有效位數<xref:System.Double>邏輯上相等的結構可能會失敗。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-174">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6dc0-175">下列範例示範如何使用此方法來檢查是否有兩個<xref:System.Windows.Vector>結構是否相等。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-175">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="vector.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-176">傳回這個向量的雜湊程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-176">Returns the hash code for this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-177">這個執行個體的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-177">The hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-178">下列範例示範如何取得的雜湊碼<xref:System.Windows.Vector>。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-178">The following example shows how to get the hash code of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public double Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Length { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : double" Usage="System.Windows.Vector.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-179">取得這個向量的長度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-179">Gets the length of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f6dc0-180">這個向量的長度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-180">The length of this vector.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6dc0-181">向量長度有時稱為範圍。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-181">The length of a vector is sometimes referred to as the magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6dc0-182">下列範例示範如何使用這個屬性，以取得向量的長度。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-182">The following example shows how use this property to get the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthexample)]
 [!code-vb[VectorExamples_snip#LengthExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LengthSquared">
      <MemberSignature Language="C#" Value="public double LengthSquared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LengthSquared" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.LengthSquared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LengthSquared As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LengthSquared { double get(); };" />
      <MemberSignature Language="F#" Value="member this.LengthSquared : double" Usage="System.Windows.Vector.LengthSquared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-183">取得這個向量的長度平方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-183">Gets the square of the length of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f6dc0-184">這個向量的 <see cref="P:System.Windows.Vector.Length" /> 平方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-184">The square of the <see cref="P:System.Windows.Vector.Length" /> of this vector.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6dc0-185">向量長度有時稱為其大小。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-185">The length of a vector is sometimes referred to as its magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6dc0-186">下列範例示範如何使用這個屬性來取得的向量長度平方。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-186">The following example shows how to use this property to get the square of the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthsquaredexample)]
 [!code-vb[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthsquaredexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-187">將指定的向量乘以指定的 <see cref="T:System.Double" />、<see cref="T:System.Windows.Media.Matrix" /> 或 <see cref="T:System.Windows.Vector" />，並傳回結果做為 <see cref="T:System.Windows.Vector" /> 或 <see cref="T:System.Double" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-187">Multiplies the specified vector by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result as a <see cref="T:System.Windows.Vector" /> or <see cref="T:System.Double" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(double scalar, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member Multiply : double * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (scalar, vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar">
          <span data-ttu-id="f6dc0-188">要相乘的純量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-188">The scalar to multiply.</span>
          </span>
        </param>
        <param name="vector">
          <span data-ttu-id="f6dc0-189">要相乘的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-189">The vector to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-190">將指定的純量乘以指定的向量，並傳回產生的 <see cref="T:System.Windows.Vector" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-190">Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-191">
            <paramref name="scalar" /> 和 <paramref name="vector" /> 相乘的乘積。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-191">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-192">下列範例示範如何使用這個方法要相乘的純量<xref:System.Windows.Vector>。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-192">The following example shows how to use this method to multiply a scalar by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (vector, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="f6dc0-193">要相乘的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-193">The vector to multiply.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="f6dc0-194">要相乘的純量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-194">The scalar to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-195">將指定的向量乘以指定的純量，並傳回產生的 <see cref="T:System.Windows.Vector" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-195">Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-196">
            <paramref name="vector" /> 和 <paramref name="scalar" /> 相乘的乘積。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-196">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-197">下列範例示範如何使用這個方法要相乘<xref:System.Windows.Vector>純量。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-197">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * System.Windows.Media.Matrix -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (vector, matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="f6dc0-198">要轉換的向量結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-198">The vector structure to transform.</span>
          </span>
        </param>
        <param name="matrix">
          <span data-ttu-id="f6dc0-199">要套用至 <c>vector</c> 的轉換。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-199">The transformation to apply to <c>vector</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-200">使用指定的 <see cref="T:System.Windows.Media.Matrix" /> 轉換所指定向量的座標空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-200">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-201">依 <paramref name="vector" /> 轉換 <paramref name="matrix" /> 的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-201">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-202">下列範例示範如何使用這個方法要相乘<xref:System.Windows.Vector>由<xref:System.Windows.Media.Matrix>。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-202">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Media.Matrix>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByMatrixExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbymatrixexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Multiply(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.Multiply (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-203">要相乘的第一個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-203">The first vector to multiply.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-204">要相乘的第二個向量結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-204">The second vector structure to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-205">計算兩個所指定向量的點積，並傳回結果做為 <see cref="T:System.Double" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-205">Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-206">
            <see cref="T:System.Double" />，包含 <paramref name="vector1" /> 與 <paramref name="vector2" /> 的純量點積 (Dot Product)，這是使用下列公式計算而來：</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-206">A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span>
          </span>
          <span data-ttu-id="f6dc0-207">
            <c>(vector1.X \* vector2.X) + (vector1.Y \* vector2.Y)</c>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-207">
              <c>(vector1.X \* vector2.X) + (vector1.Y \* vector2.Y)</c>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-208">下列範例示範如何使用這個方法要相乘<xref:System.Windows.Vector>由<xref:System.Windows.Vector>。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-208">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetDotProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#getdotproductexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public void Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Negate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Negate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Negate();" />
      <MemberSignature Language="F#" Value="member this.Negate : unit -&gt; unit" Usage="vector.Negate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-209">將這個向量加上負號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-209">Negates this vector.</span>
          </span>
          <span data-ttu-id="f6dc0-210">向量的大小和之前一樣，但是現在方向相反。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-210">The vector has the same magnitude as before, but its direction is now opposite.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-211">下列範例示範如何使用這個方法要變換正負號的向量。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-211">The following example shows how to use this method to negate a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NegateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#negateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public void Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Normalize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Normalize();" />
      <MemberSignature Language="F#" Value="member this.Normalize : unit -&gt; unit" Usage="vector.Normalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-212">將這個向量標準化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-212">Normalizes this vector.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6dc0-213">標準化的向量會維護其方向，但其<xref:System.Windows.Vector.Length%2A>變成 1。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-213">A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1.</span></span> <span data-ttu-id="f6dc0-214">產生的向量通常稱為單位向量。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-214">The resulting vector is often called a unit vector.</span></span> <span data-ttu-id="f6dc0-215">向量標準化是除以其本身向量<xref:System.Windows.Vector.Length%2A>。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-215">A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6dc0-216">下列範例示範如何使用這個方法來標準化的向量。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-216">The following example shows how to use this method to normalize a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NormalizeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#normalizeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-217">將向量加入至點或另一個向量中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-217">Adds a vector to a point or to another vector.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point operator + (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Addition(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point operator +(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Windows.Vector * System.Windows.Point -&gt; System.Windows.Point" Usage="vector + point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="f6dc0-218">用來平移 <c>point</c> 的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-218">The vector used to translate <c>point</c>.</span>
          </span>
        </param>
        <param name="point">
          <span data-ttu-id="f6dc0-219">要平移的點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-219">The point to translate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-220">依指定的向量平移點，並傳回產生的點。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-220">Translates a point by the specified vector and returns the resulting point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-221">依 <paramref name="point" /> 轉換 <paramref name="vector" /> 的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-221">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-222">下列範例示範如何使用這個運算子 （+） 來轉譯<xref:System.Windows.Point>結構<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-222">The following example shows how to use this operator (+) to translate a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator + (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Addition(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator +(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="vector1 + vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-223">要相加的第一個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-223">The first vector to add.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-224">要相加的第二個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-224">The second vector to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-225">將兩個向量相加，並傳回結果做為向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-225">Adds two vectors and returns the result as a vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-226">
            <paramref name="vector1" /> 和 <paramref name="vector2" /> 的總和。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-226">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-227">下列範例示範如何使用這個運算子 （+） 來新增兩個<xref:System.Windows.Vector>結構，並傳回<xref:System.Windows.Vector>。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-227">The following example shows how to use this operator (+) to add two <xref:System.Windows.Vector> structures and return a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator / (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Division(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator /(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="vector / scalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="f6dc0-228">要被除的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-228">The vector to divide.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="f6dc0-229">
            <c>vector</c> 要除以的純量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-229">The scalar by which <c>vector</c> will be divided.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-230">將指定的向量除以指定的純量，並傳回產生的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-230">Divides the specified vector by the specified scalar and returns the resulting vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-231">
            <paramref name="vector" /> 除以 <paramref name="scalar" /> 的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-231">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-232">下列範例示範如何使用這個運算子 （/） 來分割<xref:System.Windows.Vector>純量結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-232">The following example shows how to use this operator (/) to divide a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadeddivisionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadeddivisionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="vector1 = vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-233">要比較的第一個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-233">The first vector to compare.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-234">要比較的第二個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-234">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-235">比較兩個向量是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-235">Compares two vectors for equality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-236">如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 元件相等則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-236">
              <see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6dc0-237">向量<xref:System.Windows.Vector.X%2A>並<xref:System.Windows.Vector.Y%2A>屬性的描述是使用<xref:System.Double>值。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-237">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="f6dc0-238">因為值<xref:System.Double>它，比較兩個執行算術運算時可能會遺失有效位數<xref:System.Windows.Vector>邏輯上相等的結構可能會失敗。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-238">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6dc0-239">下列範例示範如何使用這個運算子 （= =） 來檢查是否有兩個<xref:System.Windows.Vector>結構是否相等。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-239">The following example shows how to use this operator (==) to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-240">將向量轉換為 <see cref="T:System.Windows.Size" /> 或 <see cref="T:System.Windows.Point" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-240">Converts a vector into a <see cref="T:System.Windows.Size" /> or a <see cref="T:System.Windows.Point" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Point (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Point(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Vector -&gt; System.Windows.Point" Usage="System.Windows.Vector.op_Explicit vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="f6dc0-241">要轉換的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-241">The vector to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-242">使用這個向量的 <see cref="T:System.Windows.Point" /> 和 <see cref="P:System.Windows.Vector.X" /> 值建立 <see cref="P:System.Windows.Vector.Y" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-242">Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-243">一點，其 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 座標值等於 <paramref name="vector" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 位移值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-243">A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-244">下列範例示範如何將轉換<xref:System.Windows.Vector>成<xref:System.Windows.Point>。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-244">The following example shows how to convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Size (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Size op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Size(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Vector -&gt; System.Windows.Size" Usage="System.Windows.Vector.op_Explicit vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="f6dc0-245">要轉換的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-245">The vector to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-246">從這個向量的位移建立 <see cref="T:System.Windows.Size" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-246">Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-247">
            <see cref="T:System.Windows.Size" />，其 <see cref="P:System.Windows.Size.Width" /> 等於這個向量之 <see cref="P:System.Windows.Vector.X" /> 屬性的絕對值，而其 <see cref="P:System.Windows.Size.Height" /> 等於這個向量之 <see cref="P:System.Windows.Vector.Y" /> 屬性的絕對值 </span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-247">A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-248">下列範例示範如何明確轉換成<xref:System.Windows.Vector>成<xref:System.Windows.Size>。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-248">The following example shows how to explicitly convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Size>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="System.Windows.Vector.op_Inequality (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-249">要比較的第一個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-249">The first vector to compare.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-250">要比較的第二個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-250">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-251">比較兩個向量是否不相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-251">Compares two vectors for inequality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-252">如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 元件不同則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-252">
              <see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f6dc0-253">向量<xref:System.Windows.Vector.X%2A>並<xref:System.Windows.Vector.Y%2A>屬性的描述是使用<xref:System.Double>值。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-253">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="f6dc0-254">因為值<xref:System.Double>它，比較兩個執行算術運算時可能會遺失有效位數<xref:System.Windows.Vector>邏輯上相等的結構可能會失敗。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-254">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f6dc0-255">下列範例示範如何使用這個運算子 (！ =) 來檢查是否有兩個<xref:System.Windows.Vector>結構是否不相等。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-255">The following example shows how to use this operator (!=) to check whether two <xref:System.Windows.Vector> structures are not equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-256">將指定的 <see cref="T:System.Windows.Vector" /> 乘以指定的 <see cref="T:System.Double" />、<see cref="T:System.Windows.Media.Matrix" /> 或 <see cref="T:System.Windows.Vector" />，並傳回結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-256">Multiplies the specified <see cref="T:System.Windows.Vector" /> by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(double scalar, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( * ) : double * System.Windows.Vector -&gt; System.Windows.Vector" Usage="scalar * vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar">
          <span data-ttu-id="f6dc0-257">要相乘的純量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-257">The scalar to multiply.</span>
          </span>
        </param>
        <param name="vector">
          <span data-ttu-id="f6dc0-258">要相乘的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-258">The vector to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-259">將指定的純量乘以指定的向量，並傳回產生的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-259">Multiplies the specified scalar by the specified vector and returns the resulting vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-260">
            <paramref name="scalar" /> 和 <paramref name="vector" /> 相乘的乘積。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-260">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-261">下列範例示範如何使用這個運算子 （\*） 要相乘的純量<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-261">The following example shows how to use this operator (\*) to multiply a scalar by a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="vector * scalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="f6dc0-262">要相乘的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-262">The vector to multiply.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="f6dc0-263">要相乘的純量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-263">The scalar to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-264">將指定的向量乘以指定的純量，並傳回產生的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-264">Multiplies the specified vector by the specified scalar and returns the resulting vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-265">
            <paramref name="vector" /> 和 <paramref name="scalar" /> 相乘的乘積。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-265">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-266">下列範例示範如何使用這個運算子 （\*） 來相乘<xref:System.Windows.Vector>純量結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-266">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * System.Windows.Media.Matrix -&gt; System.Windows.Vector" Usage="vector * matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="f6dc0-267">要轉換的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-267">The vector to transform.</span>
          </span>
        </param>
        <param name="matrix">
          <span data-ttu-id="f6dc0-268">要套用至 <c>vector</c> 的轉換。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-268">The transformation to apply to <c>vector</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-269">使用指定的 <see cref="T:System.Windows.Media.Matrix" /> 轉換所指定向量的座標空間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-269">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-270">依 <paramref name="vector" /> 轉換 <paramref name="matrix" /> 的結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-270">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-271">下列範例示範如何使用這個運算子 （\*） 來相乘<xref:System.Windows.Vector>結構所<xref:System.Windows.Media.Matrix>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-271">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Media.Matrix> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplyvectorbymatrixoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplyvectorbymatrixoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static double operator * (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double operator *(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="vector1 * vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-272">要相乘的第一個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-272">The first vector to multiply.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-273">要相乘的第二個向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-273">The second vector to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-274">計算兩個所指定向量結構的點積，並傳回結果做為 <see cref="T:System.Double" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-274">Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-275">傳回 <see cref="T:System.Double" />，包含 <paramref name="vector1" /> 與 <paramref name="vector2" /> 的純量點積，這是使用下列公式計算而來：</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-275">Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span>
          </span>
          <span data-ttu-id="f6dc0-276">
            <c>vector1.X \* vector2.X + vector1.Y \* vector2.Y</c>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-276">
              <c>vector1.X \* vector2.X + vector1.Y \* vector2.Y</c>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-277">下列範例示範如何使用這個運算子 （\*） 來相乘<xref:System.Windows.Vector>結構所<xref:System.Windows.Vector>。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-277">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedoperatorgetdotproductexample)]
 [!code-vb[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedoperatorgetdotproductexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Subtraction(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="vector1 - vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-278">要減去 <c>vector2</c> 的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-278">The vector from which <c>vector2</c> is subtracted.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-279">要從 <c>vector1</c> 減去的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-279">The vector to subtract from <c>vector1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-280">將某個指定的向量減去另一個指定的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-280">Subtracts one specified vector from another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-281">
            <paramref name="vector1" /> 與 <paramref name="vector2" /> 之間的差數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-281">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-282">下列範例示範如何使用這個運算子 （-） 減去<xref:System.Windows.Vector>結構<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-282">The following example shows how to use this operator (-) to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedsubtractionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedsubtractionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_UnaryNegation(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Windows.Vector -&gt; System.Windows.Vector" Usage="- vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="f6dc0-283">要變換正負號的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-283">The vector to negate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-284">將指定的向量變換正負號。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-284">Negates the specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-285">
            <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值與 <paramref name="vector" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值正負號相反的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-285">A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-286">下列範例示範如何使用這個否定運算子以否定<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-286">The following example shows how to use this negation operator to negate a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadednegationoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadednegationoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Negate" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Parse(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Parse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="f6dc0-287">向量的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-287">The string representation of the vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-288">將向量的字串表示轉換為對等的 <see cref="T:System.Windows.Vector" /> 結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-288">Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-289">對等的 <see cref="T:System.Windows.Vector" /> 結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-289">The equivalent <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-290">下列範例示範如何使用這個方法來轉換向量的字串表示<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-290">The following example shows how to use this method to convert a string representation of a vector into a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#parseexample)]
 [!code-vb[VectorExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Subtract(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Subtract(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Subtract (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="f6dc0-291">要減去 <c>vector2</c> 的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-291">The vector from which <c>vector2</c> is subtracted.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="f6dc0-292">要從 <c>vector1</c> 減去的向量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-292">The vector to subtract from <c>vector1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-293">將指定的向量從另一個指定的向量減去。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-293">Subtracts the specified vector from another specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-294">
            <paramref name="vector1" /> 與 <paramref name="vector2" /> 之間的差數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-294">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-295">下列範例示範如何使用這個方法要扣除<xref:System.Windows.Vector>結構<xref:System.Windows.Vector>結構。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-295">The following example shows how to use this method to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#SubtractExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#subtractexample)]
 [!code-vb[VectorExamples_snip#SubtractExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#subtractexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="f6dc0-296">指定要使用之格式的字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-296">The string specifying the format to use.</span>
          </span>
          <span data-ttu-id="f6dc0-297">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-297">-or-</span>
          </span>
          <span data-ttu-id="f6dc0-298">
            <see langword="null" />，使用定義給 <see cref="T:System.IFormattable" /> 實作 (Implementation) 類型的預設格式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-298">
              <see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="f6dc0-299">
            <see langword="IFormatProvider" />，用來格式化數值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-299">The <see langword="IFormatProvider" /> to use to format the value.</span>
          </span>
          <span data-ttu-id="f6dc0-300">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-300">-or-</span>
          </span>
          <span data-ttu-id="f6dc0-301">
            <see langword="null" />，用來從作業系統的目前地區設定 (Locale) 取得數值格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-301">
              <see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-302">這個成員支援 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基礎結構，但是您不可以從程式碼直接使用它。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-302">This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span>
          </span>
          <span data-ttu-id="f6dc0-303">如需這個成員的說明，請參閱 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-303">For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-304">字串，包含目前執行個體的值，且該值採用指定的格式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-304">A string containing the value of the current instance in the specified format.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-305">傳回這個 <see cref="T:System.Windows.Vector" /> 結構的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-305">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="vector.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-306">傳回這個 <see cref="T:System.Windows.Vector" /> 結構的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-306">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-307">字串，表示這個 <see cref="P:System.Windows.Vector.X" /> 的 <see cref="P:System.Windows.Vector.Y" /> 和 <see cref="T:System.Windows.Vector" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-307">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-308">下列範例示範如何使用此方法來取得的字串表示<xref:System.Windows.Vector>。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-308">The following example shows how to use this method to get a string representation of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ToStringExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#tostringexample)]
 [!code-vb[VectorExamples_snip#ToStringExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#tostringexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="vector.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="f6dc0-309">特定文化特性的格式資訊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-309">The culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f6dc0-310">使用指定的格式資訊，傳回這個 <see cref="T:System.Windows.Vector" /> 結構的字串表示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-310">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f6dc0-311">字串，表示這個 <see cref="P:System.Windows.Vector.X" /> 的 <see cref="P:System.Windows.Vector.Y" /> 和 <see cref="T:System.Windows.Vector" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-311">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.X : double with get, set" Usage="System.Windows.Vector.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-312">取得或設定這個向量的 <see cref="P:System.Windows.Vector.X" /> 元件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-312">Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f6dc0-313">這個向量的 <see cref="P:System.Windows.Vector.X" /> 元件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-313">The <see cref="P:System.Windows.Vector.X" /> component of this vector.</span>
          </span>
          <span data-ttu-id="f6dc0-314">預設值為 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-314">The default value is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-315">下列範例示範如何檢查兩個<xref:System.Windows.Vector>結構是否相等。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-315">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Y : double with get, set" Usage="System.Windows.Vector.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f6dc0-316">取得或設定這個向量的 <see cref="P:System.Windows.Vector.Y" /> 元件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-316">Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f6dc0-317">這個向量的 <see cref="P:System.Windows.Vector.Y" /> 元件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-317">The <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span>
          </span>
          <span data-ttu-id="f6dc0-318">預設值為 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f6dc0-318">The default value is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f6dc0-319">下列範例示範如何檢查兩個<xref:System.Windows.Vector>結構是否相等。</span><span class="sxs-lookup"><span data-stu-id="f6dc0-319">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.X" />
      </Docs>
    </Member>
  </Members>
</Type>