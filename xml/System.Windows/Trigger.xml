<Type Name="Trigger" FullName="System.Windows.Trigger">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="019daa9521875655e1ff322581554733cfdfbfbb" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51924883" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Trigger : System.Windows.TriggerBase, System.ComponentModel.ISupportInitialize, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Trigger extends System.Windows.TriggerBase implements class System.ComponentModel.ISupportInitialize, class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Trigger" />
  <TypeSignature Language="VB.NET" Value="Public Class Trigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Trigger : System::Windows::TriggerBase, System::ComponentModel::ISupportInitialize, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type Trigger = class&#xA;    inherit TriggerBase&#xA;    interface IAddChild&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.XamlSetTypeConverter("ReceiveTypeConverter")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示套用屬性值，或有條件地執行動作的觸發程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 定義屬性會對應到使用者動作，這類<xref:System.Windows.UIElement.IsMouseOver%2A>屬性設為`true`當使用者將游標停留在上方<xref:System.Windows.UIElement>或對應<xref:System.Windows.ContentElement.IsMouseOver%2A>屬性<xref:System.Windows.ContentElement>。 表示屬性值的終端使用者動作連同<xref:System.Windows.Trigger>項目，可讓[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]樣式來變更屬性值根據使用者動作，從標記內。  
  
 無法再滿足觸發的條件時觸發程序所變更的屬性會自動重設為其先前的值。 觸發程序進行最佳化的暫時性可說明這有變更，並返回原始的狀態，例如<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>上<xref:System.Windows.Controls.Button>並<xref:System.Windows.Controls.ListBoxItem.IsSelected%2A>上<xref:System.Windows.Controls.ListBoxItem>。 <xref:System.Windows.Trigger.Property%2A>感興趣的必須是相依性屬性。  
  
 請注意，您必須同時指定<xref:System.Windows.Trigger.Property%2A>並<xref:System.Windows.Trigger.Value%2A>上的屬性<xref:System.Windows.Trigger>為有意義的觸發程序。 如果未設定一或兩個屬性，則會擲回例外狀況。  
  
 <xref:System.Windows.Trigger.Setters%2A>的屬性<xref:System.Windows.Trigger>物件只能包含數<xref:System.Windows.Setter>物件。 新增<xref:System.Windows.Setter>子系<xref:System.Windows.Trigger>物件會隱含地將它加入至<xref:System.Windows.SetterBaseCollection>如<xref:System.Windows.Trigger>物件。 <xref:System.Windows.EventSetter> 不支援物件;只有<xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType>支援<xref:System.Windows.EventSetter>物件。  
  
 有其他類型的觸發程序。 <xref:System.Windows.MultiTrigger> 可讓您根據多個屬性的狀態套用變更。 <xref:System.Windows.EventTrigger> 可讓您在事件發生時套用變更。 <xref:System.Windows.DataTrigger> 和<xref:System.Windows.MultiDataTrigger>適用於資料繫結屬性。  
  
   
  
## Examples  
 下列範例顯示具名<xref:System.Windows.Style>能夠<xref:System.Windows.Controls.Button>控制項。 <xref:System.Windows.Style>定義<xref:System.Windows.Trigger>變更的項目<xref:System.Windows.Controls.Control.Foreground%2A> 按鈕的屬性時<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>屬性是`true`。  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">樣式設定和範本化範例簡介</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Trigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Trigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Trigger" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Property" />
      <MemberSignature Language="VB.NET" Value="Public Property Property As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ Property { System::Windows::DependencyProperty ^ get(); void set(System::Windows::DependencyProperty ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Property : System.Windows.DependencyProperty with get, set" Usage="System.Windows.Trigger.Property" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Modifiability=System.Windows.Modifiability.Unmodifiable, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定屬性，傳回與觸發程式之 <see cref="P:System.Windows.Trigger.Value" /> 屬性相比較的值。 這個比較是參考相等檢查。</summary>
        <value>
          <see cref="T:System.Windows.DependencyProperty" />，傳回項目的屬性值。 預設值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性所傳回的值會與所指定的值相比<xref:System.Windows.Trigger.Value%2A>屬性。 執行的比較是參考相等檢查。 如果兩個值相符，則相關聯<xref:System.Windows.Setter>s 套用指定的屬性值。  
  
 使用`ClassName.PropertyName`語法來限定的屬性，您會指定是否樣式或範本，其中包含此觸發程序並沒有`TargetType`屬性集。  
  
 請注意，您必須同時指定<xref:System.Windows.Trigger.Property%2A>並<xref:System.Windows.Trigger.Value%2A>上的屬性<xref:System.Windows.Trigger>為有意義的觸發程序。 如果未設定一或兩個屬性，則會擲回例外狀況。  
  
   
  
## Examples  
 下列範例包含兩個觸發程序。 第一個變更<xref:System.Windows.Controls.Control.Background%2A>的屬性<xref:System.Windows.Controls.Button>當<xref:System.Windows.UIElement.IsMouseOver%2A>屬性是 **，則為 true**。 第二個變更<xref:System.Windows.Controls.Control.Foreground%2A>按鈕的屬性時<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>屬性是 **，則為 true**。 <xref:System.Windows.Style.TargetType%2A>的<xref:System.Windows.Style>設為<xref:System.Windows.Controls.Button>，因而不需要限定`Property`類別名稱的屬性。  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Windows.Style" /> 不能包含參照 <see cref="T:System.Windows.Trigger" /> 屬性的 <see cref="T:System.Windows.Style" />。</exception>
        <exception cref="T:System.InvalidOperationException">在 <see cref="T:System.Windows.Trigger" /> 變成使用中狀態之後，便無法對其進行修改。</exception>
        <altmember cref="P:System.Windows.Trigger.Value" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">樣式設定和範本化範例簡介</related>
      </Docs>
    </Member>
    <Member MemberName="ReceiveTypeConverter">
      <MemberSignature Language="C#" Value="public static void ReceiveTypeConverter (object targetObject, System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReceiveTypeConverter(object targetObject, class System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.ReceiveTypeConverter(System.Object,System.Windows.Markup.XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReceiveTypeConverter (targetObject As Object, eventArgs As XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReceiveTypeConverter(System::Object ^ targetObject, System::Windows::Markup::XamlSetTypeConverterEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="static member ReceiveTypeConverter : obj * System.Windows.Markup.XamlSetTypeConverterEventArgs -&gt; unit" Usage="System.Windows.Trigger.ReceiveTypeConverter (targetObject, eventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.Windows.Markup.XamlSetTypeConverterEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetObject">型別轉換子會在此設定值的物件。</param>
        <param name="eventArgs">與型別轉換子處理相關的資料。</param>
        <summary>處理型別轉換子對 <see cref="T:System.Windows.Trigger" /> 物件的屬性提供值的情況。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是套用所參考的方法<xref:System.Windows.Markup.XamlSetTypeConverterAttribute>在類別層級，這表示這個方法會處理所有嘗試設定值的屬性<xref:System.Windows.Trigger>與型別轉換子。 您不通常直接呼叫這個方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Setters : System.Windows.SetterBaseCollection" Usage="System.Windows.Trigger.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Windows.Setter" /> 物件的集合，這些物件描述滿足指定的條件時要套用的屬性值。</summary>
        <value>預設值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```  
<object>  
  <object.Setters>  
    ZeroOrMoreSetters  
  </object.Setters>  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a>XAML 值  
 *ZeroOrMoreSetters*  
 零或多個<xref:System.Windows.Setter>物件。 不支援<xref:System.Windows.EventSetter>物件。  
  
 A<xref:System.Windows.Trigger>可讓您使用<xref:System.Windows.Setter>來套用屬性值的項目符合指定的條件時。 比方說，您可能要變更的背景色彩的項目取得焦點時。  
  
 如果相同的屬性會設定超過一次，將會套用最後一個屬性值。  
  
 <xref:System.Windows.Trigger.Setters%2A>的屬性<xref:System.Windows.Trigger>物件只能包含數<xref:System.Windows.Setter>物件。 新增<xref:System.Windows.Setter>子系<xref:System.Windows.Trigger>物件會隱含地將它加入至<xref:System.Windows.SetterBaseCollection>如<xref:System.Windows.Trigger>物件。 <xref:System.Windows.EventSetter> 不支援物件;只有<xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType>支援<xref:System.Windows.EventSetter>物件。  
  
   
  
## Examples  
 如先前所述，新增<xref:System.Windows.Setter>子系<xref:System.Windows.Trigger>物件會隱含地將它加入至<xref:System.Windows.SetterBaseCollection>如<xref:System.Windows.Trigger>物件。 在下列範例中，`<Trigger.Setters>`是隱含的。  
  
 [!code-xaml[PhotoStoreDemoStyled#TriggerSettersRef](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#triggersettersref)]   
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">樣式設定和範本化範例簡介</related>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceName : string with get, set" Usage="System.Windows.Trigger.SourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定物件名稱，這個物件具有會套用相關聯之 setter 的屬性。</summary>
        <value>預設屬性為 <see langword="null" />。 如果這個屬性為 <see langword="null" />，則會根據這個樣式或範本要套用於的項目 (樣式化父代或樣板化父代 (Parent)) 來評估 <see cref="P:System.Windows.Trigger.Property" /> 屬性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以設定此屬性的任何位置的範圍內的項目名稱的觸發程序集合 (集合這個<xref:System.Windows.Trigger>屬於) 會套用。 這通常是具名的項目內的範本，包含這個<xref:System.Windows.Trigger>。  
  
 您可以使用物件的名稱[X:name 指示詞](~/docs/framework/xaml-services/x-name-directive.md)語法。  
  
   
  
## Examples  
 當您想使用的其中一個案例<xref:System.Windows.Trigger.SourceName%2A>感興趣的屬性不是樣板化父代，如下列範例所示的屬性時，屬性：  
  
 [!code-xaml[ControlTemplateExamples#TriggerSourceName](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/menu.xaml#triggersourcename)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在 <see cref="T:System.Windows.Trigger" /> 變成使用中狀態之後，便無法對其進行修改。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberSignature Language="VB.NET" Value="Sub BeginInit () Implements ISupportInitialize.BeginInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.BeginInit() = System::ComponentModel::ISupportInitialize::BeginInit;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>表示物件正在啟動初始設定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Windows.Setter> 執行個體轉換成 <xref:System.ComponentModel.ISupportInitialize> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberSignature Language="VB.NET" Value="Sub EndInit () Implements ISupportInitialize.EndInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.EndInit() = System::ComponentModel::ISupportInitialize::EndInit;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>表示物件已完成初始設定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Windows.Setter> 執行個體轉換成 <xref:System.ComponentModel.ISupportInitialize> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要加入的子物件。</param>
        <summary>加入子物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Windows.Trigger> 執行個體轉換成 <xref:System.Windows.Markup.IAddChild> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要加入物件中的文字。</param>
        <summary>將節點的文字內容加入物件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Windows.Trigger> 執行個體轉換成 <xref:System.Windows.Markup.IAddChild> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Windows.Trigger.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.SetterTriggerConditionValueConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DependsOn("Property")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DependsOn("SourceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要與項目之屬性值相比較的值。 這個比較是參考相等檢查。</summary>
        <value>預設值是 <see langword="null" />。 請參閱「例外狀況」一節。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個值會與所傳回的屬性值相比<xref:System.Windows.Trigger.Property%2A>屬性<xref:System.Windows.Trigger>。 執行的比較是參考相等檢查。 如果兩個值相等，則關聯<xref:System.Windows.Setter>s 套用指定的屬性值。  
  
 請注意，您必須同時指定<xref:System.Windows.Trigger.Property%2A>並<xref:System.Windows.Trigger.Value%2A>上的屬性<xref:System.Windows.Trigger>為有意義的觸發程序。 因此，如果未指定一或兩個屬性，則會擲回例外狀況。  
  
<a name="xamlPropertyElementUsage_Value"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```  
<object>  
  <object.Value>  
    Value  
  </object.Value>  
</object>  
```  
  
   
  
## Examples  
 下列範例會變更<xref:System.Windows.Controls.Control.Foreground%2A>按鈕的屬性時<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>屬性是 **，則為 true**。  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">不支援繫結之類的運算式。</exception>
        <exception cref="T:System.InvalidOperationException">在 <see cref="T:System.Windows.Trigger" /> 變成使用中狀態之後，便無法對其進行修改。</exception>
        <altmember cref="P:System.Windows.Trigger.Property" />
        <altmember cref="P:System.Windows.Trigger.Setters" />
      </Docs>
    </Member>
  </Members>
</Type>