<Type Name="EventTrigger" FullName="System.Windows.EventTrigger">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d4d4b8d2dde58945140cbf2b618439e20a2966b7" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37549862" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventTrigger : System.Windows.TriggerBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventTrigger extends System.Windows.TriggerBase implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventTrigger" />
  <TypeSignature Language="VB.NET" Value="Public Class EventTrigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventTrigger : System::Windows::TriggerBase, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type EventTrigger = class&#xA;    inherit TriggerBase&#xA;    interface IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Actions")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表套用一組動作以回應事件的觸發程序。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Trigger> 物件具有<xref:System.Windows.Trigger.Setters%2A>， <xref:System.Windows.TriggerBase.EnterActions%2A>，並<xref:System.Windows.TriggerBase.ExitActions%2A>套用變更或根據特定屬性狀態的動作的屬性時<xref:System.Windows.EventTrigger>物件一開始的一組<xref:System.Windows.EventTrigger.Actions%2A>指定路由的事件發生時。 例如，您可能想要<xref:System.Windows.EventTrigger>來啟動一組動畫，當滑鼠指標位於特定[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]控制項。 不同於<xref:System.Windows.Trigger>，<xref:System.Windows.EventTrigger>並沒有終止狀態的概念，因此動作後引發事件的條件不再為 true，將無法復原。  
  
 請注意，當使用<xref:System.Windows.EventTrigger>，您必須選擇不會干擾您的控制項繼承行為的事件。 控制這類<xref:System.Windows.Controls.Button>或<xref:System.Windows.Controls.TextBox>滑鼠點選之類的使用者輸入事件上執行特定動作和鍵盤事件。 例如，如果您已設定樣式的按鈕，然後試著設定<xref:System.Windows.Input.Mouse.MouseDown>事件做<xref:System.Windows.EventTrigger.RoutedEvent%2A>的<xref:System.Windows.EventTrigger>，則<xref:System.Windows.EventTrigger>永遠不會取得套用，因為第一次取得處理事件的按鈕。 相反地，您可以使用<xref:System.Windows.Input.Mouse.PreviewMouseDown>事件或不同的事件。  
  
 當使用資料繫結，如果您使用<xref:System.Windows.Data.Binding.TargetUpdated>事件，您必須設定<xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A>的值您<xref:System.Windows.Data.Binding>物件`true`引發事件。  
  
 新增<xref:System.Windows.TriggerAction>子系<xref:System.Windows.EventTrigger>物件會隱含地將它加入至<xref:System.Windows.TriggerActionCollection>如<xref:System.Windows.EventTrigger>物件。  
  
   
  
## Examples  
 此範例示範如何在樣式中使用事件觸發程序，以動畫顯示<xref:System.Windows.UIElement.MouseEnter>並<xref:System.Windows.UIElement.MouseLeave>事件的<xref:System.Windows.FrameworkElement>。 在此範例中，<xref:System.Windows.Style>已經<xref:System.Windows.Style.TargetType%2A>設定為<xref:System.Windows.Shapes.Rectangle>。 因此，就不需要限定`MouseEnter`和`MouseLeave`類別名稱的事件名稱。  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.EventSetter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.EventTrigger" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.EventTrigger" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger (System.Windows.RoutedEvent routedEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor(System.Windows.RoutedEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger(System::Windows::RoutedEvent ^ routedEvent);" />
      <MemberSignature Language="F#" Value="new System.Windows.EventTrigger : System.Windows.RoutedEvent -&gt; System.Windows.EventTrigger" Usage="new System.Windows.EventTrigger routedEvent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
      </Parameters>
      <Docs>
        <param name="routedEvent">啟動此觸發程序的 <see cref="T:System.Windows.RoutedEvent" />。</param>
        <summary>使用指定的事件，初始化 <see cref="T:System.Windows.EventTrigger" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Actions">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerActionCollection Actions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerActionCollection Actions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.Actions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Actions As TriggerActionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerActionCollection ^ Actions { System::Windows::TriggerActionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Actions : System.Windows.TriggerActionCollection" Usage="System.Windows.EventTrigger.Actions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerActionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得事件發生時要套用的動作集合。</summary>
        <value>預設為空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不同於<xref:System.Windows.Trigger>，<xref:System.Windows.EventTrigger>並沒有終止狀態的概念，因此動作後引發事件的條件不再為 true，將無法復原。  
  
 新增<xref:System.Windows.TriggerAction>子系<xref:System.Windows.EventTrigger>物件會隱含地將它加入至<xref:System.Windows.TriggerActionCollection>如<xref:System.Windows.EventTrigger>物件。  
  
> [!NOTE]
>  此屬性只在設定[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]透過集合語法所示，或存取的集合物件，使用其不同的方法，例如 Add。 要存取的集合物件本身的屬性是唯讀，該集合本身是讀寫。  
  
<a name="xamlPropertyElementUsage_Actions"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```  
<object>  
  <object.Actions>  
    OneOrMoreTriggerActions  
  </object.Actions>  
</object>  
```  
  
<a name="xamlValues_Actions"></a>   
## <a name="xaml-values"></a>XAML 值  
 *OneOrMoreTriggerActions*  
 一或多個<xref:System.Windows.TriggerAction>物件。  
  
   
  
## Examples  
 此範例說明如何在樣式中使用事件觸發程序，以動畫顯示<xref:System.Windows.UIElement.MouseEnter>並<xref:System.Windows.UIElement.MouseLeave>事件的<xref:System.Windows.FrameworkElement>。 如先前所述，新增<xref:System.Windows.TriggerAction>子系<xref:System.Windows.EventTrigger>物件會隱含地將它加入至<xref:System.Windows.TriggerActionCollection>如<xref:System.Windows.EventTrigger>物件。 因此，在此範例中，`<EventTrigger.Actions>`是隱含的。  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="protected virtual void AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddChild (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddChild(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddChild : obj -&gt; unit&#xA;override this.AddChild : obj -&gt; unit" Usage="eventTrigger.AddChild value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要加入至此觸發程序之 <see cref="T:System.Windows.TriggerAction" /> 集合的 <see cref="P:System.Windows.EventTrigger.Actions" /> 物件。</param>
        <summary>將指定的物件加入至目前事件觸發程序的 <see cref="P:System.Windows.EventTrigger.Actions" /> 集合。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddText">
      <MemberSignature Language="C#" Value="protected virtual void AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AddText : string -&gt; unit&#xA;override this.AddText : string -&gt; unit" Usage="eventTrigger.AddText text" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">不使用這個參數。</param>
        <summary>這個方法不受支援，而且會導致例外狀況。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutedEvent">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent RoutedEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent RoutedEvent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.RoutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property RoutedEvent As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::RoutedEvent ^ RoutedEvent { System::Windows::RoutedEvent ^ get(); void set(System::Windows::RoutedEvent ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RoutedEvent : System.Windows.RoutedEvent with get, set" Usage="System.Windows.EventTrigger.RoutedEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定將啟動此觸發程序的 <see cref="T:System.Windows.RoutedEvent" />。</summary>
        <value>預設值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.EventTrigger>s 指定的路由的事件發生時，請套用一組動作。 例如，您可能想要<xref:System.Windows.EventTrigger>來啟動一組動畫，當滑鼠指標位於特定[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]控制項。  
  
 如果範本或樣式，其中包含這<xref:System.Windows.EventTrigger>沒有`TargetType`屬性指定，則您需要品質與類別名稱使用的事件名稱`ClassName.EventName`語法。  
  
 <xref:System.Windows.EventTrigger> 物件無法處理事件已經過<xref:System.Windows.RoutedEventArgs.Handled%2A>。 控制這類<xref:System.Windows.Controls.Button>或<xref:System.Windows.Controls.TextBox>滑鼠點選之類的使用者輸入事件上執行特定動作和鍵盤事件。 例如，如果您已設定樣式的按鈕，然後試著設定<xref:System.Windows.Input.Mouse.MouseDown>事件做<xref:System.Windows.EventTrigger.RoutedEvent%2A>的<xref:System.Windows.EventTrigger>，則<xref:System.Windows.EventTrigger>永遠不會取得套用，因為第一次取得處理事件的按鈕。 相反地，您可以使用<xref:System.Windows.Input.Mouse.PreviewMouseDown>事件或不同的事件。  
  
 當使用資料繫結，如果您使用<xref:System.Windows.Data.Binding.TargetUpdated>事件，您必須設定<xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A>的值您<xref:System.Windows.Data.Binding>設為 true，會引發事件的物件。  
  
   
  
## Examples  
 此範例示範如何在樣式中使用事件觸發程序，以動畫顯示<xref:System.Windows.UIElement.MouseEnter>並<xref:System.Windows.UIElement.MouseLeave>事件的<xref:System.Windows.FrameworkElement>。 在此範例中，<xref:System.Windows.Style>已經<xref:System.Windows.Style.TargetType%2A>設定為<xref:System.Windows.Shapes.Rectangle>。 因此，就不需要限定`MouseEnter`和`MouseLeave`類別名稱的事件名稱。  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Windows.EventTrigger.RoutedEvent" /> 屬性不可以是 null。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeActions">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeActions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.ShouldSerializeActions" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeActions () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeActions();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeActions : unit -&gt; bool" Usage="eventTrigger.ShouldSerializeActions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回序列化程序是否應序列化這個類別執行個體上 <see cref="P:System.Windows.EventTrigger.Actions" /> 屬性的有效值。</summary>
        <returns>如果應序列化 <see cref="P:System.Windows.EventTrigger.Actions" /> 屬性值則傳回 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceName : string with get, set" Usage="System.Windows.EventTrigger.SourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>以啟動這個觸發程序的事件取得或設定物件的名稱。 只有項目觸發程序或範本觸發程序會使用它。</summary>
        <value>預設值是 <see langword="null" />。 如果這個屬性值為 <see langword="null" />，則被監視是否有引發事件的項目為樣版化父代 (Parent) 或邏輯樹狀根目錄。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以設定此屬性的任何位置的範圍內的項目名稱的觸發程序集合 (集合這個<xref:System.Windows.EventTrigger>屬於) 會套用。 這通常是具名的項目內的範本，包含這個<xref:System.Windows.EventTrigger>。 如果您要設定<xref:System.Windows.FrameworkElement.Triggers%2A>屬性的項目直接管理，則它是具名的項目，該父項目範圍內。  
  
 您可以使用物件的名稱[X:name 指示詞](~/docs/framework/xaml-services/x-name-directive.md)語法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在 <see cref="T:System.Windows.EventTrigger" /> 變成使用中狀態之後，便無法對其進行修改。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要加入的子物件。</param>
        <summary>加入子物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Windows.EventTrigger> 執行個體轉換成 <xref:System.Windows.Markup.IAddChild> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要加入物件中的文字。</param>
        <summary>將節點的文字內容加入物件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Windows.EventTrigger> 執行個體轉換成 <xref:System.Windows.Markup.IAddChild> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>