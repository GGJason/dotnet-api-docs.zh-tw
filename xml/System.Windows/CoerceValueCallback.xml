<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bc1a383fe21e6b9b549e0ccda7aa8c21c6f92d9f" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37493659" /></Metadata><TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <TypeSignature Language="F#" Value="type CoerceValueCallback = delegate of DependencyObject * obj -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d"><span data-ttu-id="e82ac-101">屬性所在的物件。</span><span class="sxs-lookup"><span data-stu-id="e82ac-101">The object that the property exists on.</span></span> <span data-ttu-id="e82ac-102">當叫用 (Invoke) 回呼時 (Callback)，屬性系統將傳遞這個值。</span><span class="sxs-lookup"><span data-stu-id="e82ac-102">When the callback is invoked, the property system will pass this value.</span></span></param>
    <param name="baseValue"><span data-ttu-id="e82ac-103">在嘗試任何強制型轉之前，屬性的新值。</span><span class="sxs-lookup"><span data-stu-id="e82ac-103">The new value of the property, prior to any coercion attempt.</span></span></param>
    <summary><span data-ttu-id="e82ac-104">提供方法的範本，該方法會在相依性屬性值重新評估時或特別要求強制型轉 (Coercion) 時被呼叫。</span><span class="sxs-lookup"><span data-stu-id="e82ac-104">Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</span></span></summary>
    <returns><span data-ttu-id="e82ac-105">強制型轉的值 (具有適當的型別)。</span><span class="sxs-lookup"><span data-stu-id="e82ac-105">The coerced value (with appropriate type).</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e82ac-106">回呼根據<xref:System.Windows.CoerceValueCallback>可以指派給透過數種不同技術的相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="e82ac-106">Callbacks based on <xref:System.Windows.CoerceValueCallback> can be assigned to a dependency property through several different techniques.</span></span> <span data-ttu-id="e82ac-107">每一種方法都需要您先建立新的屬性中繼資料物件 (<xref:System.Windows.PropertyMetadata>，或衍生的類別，例如<xref:System.Windows.FrameworkPropertyMetadata>)。</span><span class="sxs-lookup"><span data-stu-id="e82ac-107">Each of these techniques requires that you first create a new property metadata object (<xref:System.Windows.PropertyMetadata>, or a derived class such as <xref:System.Windows.FrameworkPropertyMetadata>).</span></span> <span data-ttu-id="e82ac-108">建立中繼資料物件，使用建構函式簽章採用`coerceValueCallback`參數，並將該參數指派給您的回呼處理常式。</span><span class="sxs-lookup"><span data-stu-id="e82ac-108">Create the metadata object using a constructor signature that takes the `coerceValueCallback` parameter, and assign that parameter to your callback handler.</span></span> <span data-ttu-id="e82ac-109">建構的任何簽章和集合的中繼資料或<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>之前將中繼資料放在使用中的屬性。</span><span class="sxs-lookup"><span data-stu-id="e82ac-109">Or construct the metadata by any signature and set the <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> property prior to putting the metadata in use.</span></span>  
  
 <span data-ttu-id="e82ac-110">當您有此中繼資料時，您可以：</span><span class="sxs-lookup"><span data-stu-id="e82ac-110">When you have this metadata, you can:</span></span>  
  
-   <span data-ttu-id="e82ac-111">在新的類別，並使用其中一個簽章定義新的相依性屬性<xref:System.Windows.DependencyProperty.Register%2A>，讓中繼資料當做`typeMetadata`值。</span><span class="sxs-lookup"><span data-stu-id="e82ac-111">Define a new dependency property on a new class, using either signature of  <xref:System.Windows.DependencyProperty.Register%2A>, giving the metadata as the `typeMetadata` value.</span></span>  
  
-   <span data-ttu-id="e82ac-112">覆寫中繼資料 (呼叫<xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) 的現有相依性屬性，當您衍生自擁有相依性屬性的類別。</span><span class="sxs-lookup"><span data-stu-id="e82ac-112">Override the metadata (call <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) for an existing dependency property, when you derive from the class that owns the dependency property.</span></span>  
  
-   <span data-ttu-id="e82ac-113">將現有的相依性屬性新增至新<xref:System.Windows.DependencyObject>類別，使用新的中繼資料，藉由呼叫<xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>。</span><span class="sxs-lookup"><span data-stu-id="e82ac-113">Add an existing dependency property to a new <xref:System.Windows.DependencyObject> class, using new metadata, by calling <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="e82ac-114">此回呼的實作應該檢查值`baseValue`並判斷這是否需要進一步強制轉型的值，根據的值或型別。</span><span class="sxs-lookup"><span data-stu-id="e82ac-114">Implementations of this callback should check the value in `baseValue` and determine based on either the value or the type whether this is a value that needs to be further coerced.</span></span>  
  
 <span data-ttu-id="e82ac-115"><xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>相依性屬性會叫用屬性系統或任何其他呼叫端呼叫任何時候<xref:System.Windows.DependencyObject.CoerceValue%2A>上<xref:System.Windows.DependencyObject>執行個體，並指定該屬性的識別項為`dp`。</span><span class="sxs-lookup"><span data-stu-id="e82ac-115">The <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for a dependency property is invoked any time that the property system or any other caller calls <xref:System.Windows.DependencyObject.CoerceValue%2A> on a <xref:System.Windows.DependencyObject> instance, specifying that property's identifier as the `dp`.</span></span>  
  
 <span data-ttu-id="e82ac-116">屬性值的變更可能來自屬性系統中任何可能的參與者。</span><span class="sxs-lookup"><span data-stu-id="e82ac-116">Changes to the property value may have come from any possible participant in the property system.</span></span> <span data-ttu-id="e82ac-117">這包括樣式、 泛型失效，觸發程序、 屬性值繼承，以及本機值設定。</span><span class="sxs-lookup"><span data-stu-id="e82ac-117">This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</span></span>  
  
 <span data-ttu-id="e82ac-118">您通常應該避免指定一個以上<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>針對任何指定的相依性屬性 (覆寫或新增新的中繼資料已有的相依性屬性與<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>)。</span><span class="sxs-lookup"><span data-stu-id="e82ac-118">Generally you should avoid specifying more than one <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for any given dependency property (overriding or adding with new metadata for a dependency property that already had a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span></span> <span data-ttu-id="e82ac-119">只有其中一個回呼都能夠採取行動。處理回呼將會套用到最具衍生性的類別中的繼承相較的<xref:System.Windows.DependencyObject>呼叫端。</span><span class="sxs-lookup"><span data-stu-id="e82ac-119">Only one of the callbacks will be able to act. The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the <xref:System.Windows.DependencyObject> caller.</span></span> <span data-ttu-id="e82ac-120">中繼資料遭到覆寫時，會取代指派給相依性屬性中繼資料，就更高版本的擁有者階層架構中存在其他回呼。</span><span class="sxs-lookup"><span data-stu-id="e82ac-120">Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e82ac-121">下列範例會加入此回撥到其他的輸入，例如另一個屬性的值為基礎的相依性屬性的預存的值強制轉型的實作。</span><span class="sxs-lookup"><span data-stu-id="e82ac-121">The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value.</span></span> <span data-ttu-id="e82ac-122">在此情況下，回呼會檢查以查看是否`ShirtType`屬性會對應到一種具有按鈕的上衣; 如果是它會在建立開始的預設色彩，如`ButtonColor`，如果 shirt 型別不有任何按鈕，它會強制使`ButtonColor`值回到起始的值，因而導致[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]（未顯示） 的下拉式清單中移除的有效選項。</span><span class="sxs-lookup"><span data-stu-id="e82ac-122">In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (not shown) to remove that dropdown from the effective choices.</span></span>  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>