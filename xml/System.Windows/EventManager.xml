<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c77ae0f0dbeb2878102af1c07c306ec83ccf92c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7512e-101">提供事件相關公用程式方法，該方法可為類別擁有者註冊路由事件並加入類別處理常式。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7512e-101">Provides event-related utility methods that register routed events for class owners and add class handlers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7512e-102">這個類別最常用於新的路由的事件，向<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="7512e-102">This class is most commonly used to register a new routed event, with <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span>  
  
 <span data-ttu-id="7512e-103">第二個最常見[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]使用量<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="7512e-103">The second most common [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] usage is <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span> <span data-ttu-id="7512e-104">您可以使用這個方法以啟用此類別中的路由的事件的附加的事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="7512e-104">You use this method to enable class handling of a routed event on the class, or an attached event.</span></span> <span data-ttu-id="7512e-105">如需詳細資訊，請參閱[標示路由傳送事件中當做 Handled，和類別處理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。</span><span class="sxs-lookup"><span data-stu-id="7512e-105">For details, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7512e-106">下列範例示範如何使用這個類別做為類別成員，以及覆寫新增的路由的事件 「 包裝函式 」 技術註冊新的路由的事件，並移除實作[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件。</span><span class="sxs-lookup"><span data-stu-id="7512e-106">The following example show how to use this class to register a new routed event as a class member, along with the routed event "wrapper" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event.</span></span>  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7512e-107">傳回已在事件系統中註冊的路由事件的識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-107">Returns identifiers for routed events that have been registered to the event system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7512e-108">型別 <see cref="T:System.Windows.RoutedEvent" /> 的陣列，包含已註冊的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-108">An array of type <see cref="T:System.Windows.RoutedEvent" /> that contains the registered objects.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7512e-109">多個<xref:System.Windows.RoutedEvent>稍後登錄物件。</span><span class="sxs-lookup"><span data-stu-id="7512e-109">More <xref:System.Windows.RoutedEvent> objects can be registered later.</span></span> <span data-ttu-id="7512e-110">這個方法會取得快照集，且在整個應用程式的存留期可寫入之路由事件的集合。</span><span class="sxs-lookup"><span data-stu-id="7512e-110">This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime.</span></span> <span data-ttu-id="7512e-111">傳回的集合可能很龐大。</span><span class="sxs-lookup"><span data-stu-id="7512e-111">The collection returned might be quite large.</span></span> <span data-ttu-id="7512e-112">即使只有計算事件屬於[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]，集合計數為高達數百。</span><span class="sxs-lookup"><span data-stu-id="7512e-112">Even just counting the events that are part of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], the collection count is in the high hundreds.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="7512e-113">要做為搜尋起點的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-113">The type to start the search with.</span>
          </span>
          <span data-ttu-id="7512e-114">基底類別 (Base Class) 會併入搜尋中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-114">Base classes are included in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7512e-115">針對已利用提供的擁有人型別註冊的事件，尋找所有路由事件識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-115">Finds all routed event identifiers for events that are registered with the provided owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7512e-116">如果找到任何相符合項目，則為相符路由事件識別項的陣列，否則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-116">An array of matching routed event identifiers if any match is found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7512e-117">註冊特殊路由事件的類別處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-117">Registers a class handler for a particular routed event.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">
          <span data-ttu-id="7512e-118">正要宣告類別處理之類別的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-118">The type of the class that is declaring class handling.</span>
          </span>
        </param>
        <param name="routedEvent">
          <span data-ttu-id="7512e-119">要處理之事件的路由事件識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-119">The routed event identifier of the event to handle.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="7512e-120">對類別處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-120">A reference to the class handler implementation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7512e-121">註冊特殊路由事件的類別處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-121">Registers a class handler for a particular routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7512e-122">類別處理是適用於路由的事件，包括與路由事件為基礎實作的附加的事件的功能。</span><span class="sxs-lookup"><span data-stu-id="7512e-122">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="7512e-123">類別處理常式就像是存在類別的所有執行個體的靜態處理常式。</span><span class="sxs-lookup"><span data-stu-id="7512e-123">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="7512e-124">因為處理常式是靜態，您無法變更直接與類別處理常式的執行個體屬性但您可以存取透過執行個體`sender`參數及/或事件資料。</span><span class="sxs-lookup"><span data-stu-id="7512e-124">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="7512e-125">類別處理常式會叫用執行個體的處理常式之前。</span><span class="sxs-lookup"><span data-stu-id="7512e-125">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="7512e-126">您可以實作行為是將事件標示為已處理的類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="7512e-126">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="7512e-127">因此，執行個體的類別處理事件的處理常式不會叫用除非特別為已處理的事件註冊執行個體的處理常式。</span><span class="sxs-lookup"><span data-stu-id="7512e-127">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="7512e-128">許多[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]基底的項目事件提供處理虛擬方法的類別。</span><span class="sxs-lookup"><span data-stu-id="7512e-128">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="7512e-129">您可以藉由覆寫繼承的基底類別的類別中的這些方法，實作類別處理，而不需呼叫<xref:System.Windows.EventManager.RegisterClassHandler%2A>靜態建構函式中。</span><span class="sxs-lookup"><span data-stu-id="7512e-129">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="7512e-130">這些類別處理方法通常會針對輸入事件存在，並且具有名稱，以在類別處理事件的名稱以 「 On 」 開頭和結尾。</span><span class="sxs-lookup"><span data-stu-id="7512e-130">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="7512e-131">如需類別處理的詳細資訊，請參閱[標示路由傳送事件中當做 Handled，和類別處理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。</span><span class="sxs-lookup"><span data-stu-id="7512e-131">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="7512e-132">使用此簽章，會叫用只在回應未處理的事件登錄類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="7512e-132">Using this signature, class handlers will be registered to invoke only in response to unhandled events.</span></span> <span data-ttu-id="7512e-133">您也可以註冊類別處理常式來叫用，即使事件引數會標示為已處理，使用<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章，與`handledEventsToo`設`true`。</span><span class="sxs-lookup"><span data-stu-id="7512e-133">You can also register class handlers to invoke even if the event arguments are marked handled, by using the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature, with `handledEventsToo` set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7512e-134">下列範例會加入處理常式<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>，則呼叫<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="7512e-134">The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">
          <span data-ttu-id="7512e-135">正要宣告類別處理之類別的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-135">The type of the class that is declaring class handling.</span>
          </span>
        </param>
        <param name="routedEvent">
          <span data-ttu-id="7512e-136">要處理之事件的路由事件識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-136">The routed event identifier of the event to handle.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="7512e-137">對類別處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-137">A reference to the class handler implementation.</span>
          </span>
        </param>
        <param name="handledEventsToo">
          <span data-ttu-id="7512e-138">
            <see langword="true" /> 表示即使路由事件的引數已標示為已處理，也要叫用這個類別處理常式，<see langword="false" /> 則表示保留預設行為，即不在任何標示為已處理的事件上叫用處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-138">
              <see langword="true" /> to invoke this class handler even if arguments of the routed event have been marked as handled; <see langword="false" /> to retain the default behavior of not invoking the handler on any marked-handled event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7512e-139">使用處理事件資料已標示為已處理之事件的選項，註冊特定路由事件的類別處理常式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-139">Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7512e-140">類別處理是適用於路由的事件，包括與路由事件為基礎實作的附加的事件的功能。</span><span class="sxs-lookup"><span data-stu-id="7512e-140">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="7512e-141">類別處理常式就像是存在類別的所有執行個體的靜態處理常式。</span><span class="sxs-lookup"><span data-stu-id="7512e-141">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="7512e-142">因為處理常式是靜態，您無法變更直接與類別處理常式的執行個體屬性但您可以存取透過執行個體`sender`參數及/或事件資料。</span><span class="sxs-lookup"><span data-stu-id="7512e-142">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="7512e-143">類別處理常式會叫用執行個體的處理常式之前。</span><span class="sxs-lookup"><span data-stu-id="7512e-143">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="7512e-144">您可以實作行為是將事件標示為已處理的類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="7512e-144">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="7512e-145">因此，執行個體的類別處理事件的處理常式不會叫用除非特別為已處理的事件註冊執行個體的處理常式。</span><span class="sxs-lookup"><span data-stu-id="7512e-145">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="7512e-146">許多[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]基底的項目事件提供處理虛擬方法的類別。</span><span class="sxs-lookup"><span data-stu-id="7512e-146">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="7512e-147">您可以藉由覆寫繼承的基底類別的類別中的這些方法，實作類別處理，而不需呼叫<xref:System.Windows.EventManager.RegisterClassHandler%2A>靜態建構函式中。</span><span class="sxs-lookup"><span data-stu-id="7512e-147">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="7512e-148">這些類別處理方法通常會針對輸入事件存在，並且具有名稱，以在類別處理事件的名稱以 「 On 」 開頭和結尾。</span><span class="sxs-lookup"><span data-stu-id="7512e-148">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="7512e-149">如需類別處理的詳細資訊，請參閱[標示路由傳送事件中當做 Handled，和類別處理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。</span><span class="sxs-lookup"><span data-stu-id="7512e-149">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).</span></span>  
  
 <span data-ttu-id="7512e-150">使用此簽章，類別處理常式可以登錄設定已處理的事件時叫用`handledEventsToo`設`true`。</span><span class="sxs-lookup"><span data-stu-id="7512e-150">Using this signature, class handlers can be registered to invoke upon handled events, by setting `handledEventsToo` set to `true`.</span></span> <span data-ttu-id="7512e-151">一般而言，您應該執行此作業，這是已知的處理問題，您嘗試解決，例如處理滑鼠或鍵盤事件來自輸入系統。</span><span class="sxs-lookup"><span data-stu-id="7512e-151">Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="7512e-152">路由事件的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-152">The name of the routed event.</span>
          </span>
          <span data-ttu-id="7512e-153">這個名稱在擁有人型別中必須是唯一的，而且不能是 <see langword="null" /> 或空字串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-153">The name must be unique within the owner type and cannot be <see langword="null" /> or an empty string.</span>
          </span>
        </param>
        <param name="routingStrategy">
          <span data-ttu-id="7512e-154">作為列舉值的事件路由策略。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-154">The routing strategy of the event as a value of the enumeration.</span>
          </span>
        </param>
        <param name="handlerType">
          <span data-ttu-id="7512e-155">事件處理常式的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-155">The type of the event handler.</span>
          </span>
          <span data-ttu-id="7512e-156">這必須是委派型別，而且不能是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-156">This must be a delegate type and cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="7512e-157">路由事件的擁有者類別類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-157">The owner class type of the routed event.</span>
          </span>
          <span data-ttu-id="7512e-158">這不能是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-158">This cannot be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7512e-159">以 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 事件系統註冊新的路由事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-159">Registers a new routed event with the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] event system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7512e-160">新註冊路由事件的識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-160">The identifier for the newly registered routed event.</span>
          </span>
          <span data-ttu-id="7512e-161">這個識別項物件現在可以儲存為類別中的靜態欄位，然後作為附加至事件處理常式之方法的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-161">This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</span>
          </span>
          <span data-ttu-id="7512e-162">路由事件識別項也會用於其他事件系統 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7512e-162">The routed event identifier is also used for other event system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7512e-163">使用這個方法的傳回值來建立唯一的靜態宣告<xref:System.Windows.RoutedEvent>識別碼欄位。</span><span class="sxs-lookup"><span data-stu-id="7512e-163">Use the return value of this method to create the static declaration for a unique <xref:System.Windows.RoutedEvent> identifier field.</span></span> <span data-ttu-id="7512e-164">此欄位應該儲存在擁有者型別中。</span><span class="sxs-lookup"><span data-stu-id="7512e-164">This field should be stored within the owner type.</span></span>  
  
 <span data-ttu-id="7512e-165">有相當多的慣例和如何路由事件相關聯的最佳作法應該命名為、 註冊，並公開類別中。</span><span class="sxs-lookup"><span data-stu-id="7512e-165">There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class.</span></span> <span data-ttu-id="7512e-166">如需詳細資訊，請參閱[路由傳送事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="7512e-166">For more information, see [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>