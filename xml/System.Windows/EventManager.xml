<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c77ae0f0dbeb2878102af1c07c306ec83ccf92c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30678562" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供事件相關公用程式方法，該方法可為類別擁有者註冊路由事件並加入類別處理常式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別最常用於新的路由的事件，向<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。  
  
 第二個最常見[!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)]使用量<xref:System.Windows.EventManager.RegisterClassHandler%2A>。 您可以使用這個方法以啟用此類別中的路由的事件的附加的事件的類別處理。 如需詳細資訊，請參閱[標示路由傳送事件中當做 Handled，和類別處理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。  
  
   
  
## Examples  
 下列範例示範如何使用這個類別做為類別成員，以及覆寫新增的路由的事件 「 包裝函式 」 技術註冊新的路由的事件，並移除實作[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件。  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回已在事件系統中註冊的路由事件的識別項。</summary>
        <returns>型別 <see cref="T:System.Windows.RoutedEvent" /> 的陣列，包含已註冊的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多個<xref:System.Windows.RoutedEvent>稍後登錄物件。 這個方法會取得快照集，且在整個應用程式的存留期可寫入之路由事件的集合。 傳回的集合可能很龐大。 即使只有計算事件屬於[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]，集合計數為高達數百。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">要做為搜尋起點的型別。 基底類別 (Base Class) 會併入搜尋中。</param>
        <summary>針對已利用提供的擁有人型別註冊的事件，尋找所有路由事件識別項。</summary>
        <returns>如果找到任何相符合項目，則為相符路由事件識別項的陣列，否則為 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>註冊特殊路由事件的類別處理常式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">正要宣告類別處理之類別的型別。</param>
        <param name="routedEvent">要處理之事件的路由事件識別項。</param>
        <param name="handler">對類別處理常式實作的參考。</param>
        <summary>註冊特殊路由事件的類別處理常式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 類別處理是適用於路由的事件，包括與路由事件為基礎實作的附加的事件的功能。 類別處理常式就像是存在類別的所有執行個體的靜態處理常式。 因為處理常式是靜態，您無法變更直接與類別處理常式的執行個體屬性但您可以存取透過執行個體`sender`參數及/或事件資料。  
  
 類別處理常式會叫用執行個體的處理常式之前。 您可以實作行為是將事件標示為已處理的類別處理常式。 因此，執行個體的類別處理事件的處理常式不會叫用除非特別為已處理的事件註冊執行個體的處理常式。  
  
 許多[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]基底的項目事件提供處理虛擬方法的類別。 您可以藉由覆寫繼承的基底類別的類別中的這些方法，實作類別處理，而不需呼叫<xref:System.Windows.EventManager.RegisterClassHandler%2A>靜態建構函式中。 這些類別處理方法通常會針對輸入事件存在，並且具有名稱，以在類別處理事件的名稱以 「 On 」 開頭和結尾。  
  
 如需類別處理的詳細資訊，請參閱[標示路由傳送事件中當做 Handled，和類別處理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。  
  
 使用此簽章，會叫用只在回應未處理的事件登錄類別處理常式。 您也可以註冊類別處理常式來叫用，即使事件引數會標示為已處理，使用<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章，與`handledEventsToo`設`true`。  
  
   
  
## Examples  
 下列範例會加入處理常式<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>，則呼叫<xref:System.Windows.EventManager.RegisterClassHandler%2A>。  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">正要宣告類別處理之類別的型別。</param>
        <param name="routedEvent">要處理之事件的路由事件識別項。</param>
        <param name="handler">對類別處理常式實作的參考。</param>
        <param name="handledEventsToo">
          <see langword="true" /> 表示即使路由事件的引數已標示為已處理，也要叫用這個類別處理常式，<see langword="false" /> 則表示保留預設行為，即不在任何標示為已處理的事件上叫用處理常式。</param>
        <summary>使用處理事件資料已標示為已處理之事件的選項，註冊特定路由事件的類別處理常式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 類別處理是適用於路由的事件，包括與路由事件為基礎實作的附加的事件的功能。 類別處理常式就像是存在類別的所有執行個體的靜態處理常式。 因為處理常式是靜態，您無法變更直接與類別處理常式的執行個體屬性但您可以存取透過執行個體`sender`參數及/或事件資料。  
  
 類別處理常式會叫用執行個體的處理常式之前。 您可以實作行為是將事件標示為已處理的類別處理常式。 因此，執行個體的類別處理事件的處理常式不會叫用除非特別為已處理的事件註冊執行個體的處理常式。  
  
 許多[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]基底的項目事件提供處理虛擬方法的類別。 您可以藉由覆寫繼承的基底類別的類別中的這些方法，實作類別處理，而不需呼叫<xref:System.Windows.EventManager.RegisterClassHandler%2A>靜態建構函式中。 這些類別處理方法通常會針對輸入事件存在，並且具有名稱，以在類別處理事件的名稱以 「 On 」 開頭和結尾。  
  
 如需類別處理的詳細資訊，請參閱[標示路由傳送事件中當做 Handled，和類別處理](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)。  
  
 使用此簽章，類別處理常式可以登錄設定已處理的事件時叫用`handledEventsToo`設`true`。 一般而言，您應該執行此作業，這是已知的處理問題，您嘗試解決，例如處理滑鼠或鍵盤事件來自輸入系統。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">路由事件的名稱。 這個名稱在擁有人型別中必須是唯一的，而且不能是 <see langword="null" /> 或空字串。</param>
        <param name="routingStrategy">作為列舉值的事件路由策略。</param>
        <param name="handlerType">事件處理常式的類型。 這必須是委派型別，而且不能是 <see langword="null" />。</param>
        <param name="ownerType">路由事件的擁有者類別類型。 這不能是 <see langword="null" />。</param>
        <summary>以 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 事件系統註冊新的路由事件。</summary>
        <returns>新註冊路由事件的識別項。 這個識別項物件現在可以儲存為類別中的靜態欄位，然後作為附加至事件處理常式之方法的參數。 路由事件識別項也會用於其他事件系統 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個方法的傳回值來建立唯一的靜態宣告<xref:System.Windows.RoutedEvent>識別碼欄位。 此欄位應該儲存在擁有者型別中。  
  
 有相當多的慣例和如何路由事件相關聯的最佳作法應該命名為、 註冊，並公開類別中。 如需詳細資訊，請參閱[路由傳送事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>