<Type Name="RequestBringIntoViewEventArgs" FullName="System.Windows.RequestBringIntoViewEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4d1a9c14ed9171240e8980e9efc8a43107b009dc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30676212" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RequestBringIntoViewEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestBringIntoViewEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RequestBringIntoViewEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestBringIntoViewEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestBringIntoViewEventArgs : System::Windows::RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供 <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> 路由事件的資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType>由項目會引發事件，當您呼叫<xref:System.Windows.FrameworkElement.BringIntoView%2A>從該項目。 一般而言，來源不會處理這個路由的事件。 不會實作可捲動區域或剪輯內容不應該處理事件的概念類似的中繼類別。  允許事件反昇至父項目，實作可捲動區域，或指定<xref:System.Windows.UIElement.ClipToBounds%2A> `false`。 這類父項目通常會提供類別處理<xref:System.Windows.FrameworkElement.RequestBringIntoView>事件，這是必要的呈現邏輯發生時指定的項目要求，它會進行可見裁剪區域中。  
  
 內容項目可能會導致引發的事件，由其內容主機 (透過呼叫<xref:System.Windows.FrameworkContentElement.BringIntoView%2A>和引發<xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType>內容主機)。 同樣地，您可以要求帶入檢視具有協助程式方法的邏輯樹狀結構項目<xref:System.Windows.LogicalTreeHelper.BringIntoView%2A?displayProperty=nameWithType>。  
  
 A<xref:System.Windows.Controls.ListBox>實作相關但不同的方法<xref:System.Windows.Controls.ListBox.ScrollIntoView%2A>。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Controls.ScrollViewer" />
    <altmember cref="T:System.Windows.Controls.Primitives.ScrollBar" />
  </Docs>
  <Members>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RequestBringIntoViewEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">以特定型別的方式呼叫的泛型處理常式。</param>
        <param name="genericTarget">對其呼叫處理常式的目標。</param>
        <summary>以型別專屬的方式叫用事件處理常式，這樣做能夠提升事件系統的效率。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此實作會轉換為一般處理常式時為<xref:System.Windows.RequestBringIntoViewEventHandler>然後再叫用。 如需這項實作模式及它的理由的詳細資訊，請參閱<xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>和[路由傳送事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.RoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="TargetObject">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TargetObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TargetObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RequestBringIntoViewEventArgs.TargetObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetObject As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TargetObject { System::Windows::DependencyObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得應顯示出來以回應事件的物件。</summary>
        <value>呼叫 <see cref="M:System.Windows.FrameworkElement.BringIntoView" /> 的物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此物件通常是相同的物件所傳回<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.RoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="TargetRect">
      <MemberSignature Language="C#" Value="public System.Windows.Rect TargetRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect TargetRect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RequestBringIntoViewEventArgs.TargetRect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetRect As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect TargetRect { System::Windows::Rect get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得物件的座標空間中應顯示出來的矩形區域。</summary>
        <value>所要求的矩形空間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果的簽章<xref:System.Windows.FrameworkElement.BringIntoView%2A>叫用，以引發此事件未指定目標矩形，這個屬性可能<xref:System.Windows.Rect.Empty%2A>值<xref:System.Windows.Rect>結構。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      </Docs>
    </Member>
  </Members>
</Type>