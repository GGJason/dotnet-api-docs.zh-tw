<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e7a44b791800ff544c7087f3aa44377d7008c985" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36455797" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e0ad6-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e0ad6-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span>
      </span>
      <span data-ttu-id="e0ad6-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e0ad6-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-103">事件來源的物件存留期無關的事件接聽程式時，通常使用弱式事件模式。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="e0ad6-104">使用中央事件分派功能<xref:System.Windows.WeakEventManager>讓接聽程式的處理常式，即使來源物件仍然存在回收。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="e0ad6-105">相反地，一般事件的連結使用`+=`運算子會使可能中斷連接的來源，以保存到接聽程式的參考。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="e0ad6-106">這樣可避免進行記憶體回收能夠及時收件者。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="e0ad6-107">一個常見的情形，存留期之間的關聯性來源和接聽程式應該使用弱式事件模式的已更新來自資料繫結的事件處理。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="e0ad6-108">弱式事件模式也會用於回呼事件及一般事件中。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="e0ad6-109">
        <para>如需自訂的範例<see cref="T:System.Windows.WeakEventManager" />，請參閱 [弱式事件 Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md)。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="e0ad6-109">
          <para>For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e0ad6-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="e0ad6-111">The object on which the event is being handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-111">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="e0ad6-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-113">Delivers the event being managed to each listener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-113">Delivers the event being managed to each listener.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-114">呼叫<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法內加入或移除的事件處理常式<xref:System.Windows.WeakEventManager.StartListening%2A>和<xref:System.Windows.WeakEventManager.StopListening%2A>子類別的實作。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="e0ad6-115">如果您呼叫<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>方法在您`AddListener`類別的實作，接收事件的接聽程式的清單就會保留在基礎的集合。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="e0ad6-116">(`AddListener`不是類別或介面合約的一部分。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="e0ad6-117">`AddListener` 是呼叫您管理員類別的方法的建議的名稱<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>，並將事件的弱式事件模式接聽程式。)</span><span class="sxs-lookup"><span data-stu-id="e0ad6-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="e0ad6-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 將接聽程式加入至單一清單。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="e0ad6-119">如果您的管理員實作會維護多個 list 的每個事件接聽程式，請勿使用<xref:System.Windows.WeakEventManager.DeliverEvent%2A>或<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="e0ad6-120">相反地，您的實作應該建立自己<xref:System.Windows.WeakEventManager.ListenerList>執行個體，`AddListener`應該將接聽程式新增至適當的清單中，並且事件應該傳遞至適當的接聽程式清單，藉由呼叫<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="e0ad6-121">The object on which the event is being handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-121">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="e0ad6-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <param name="list">
          <span data-ttu-id="e0ad6-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-124">Delivers the event being managed to each listener in the provided list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-124">Delivers the event being managed to each listener in the provided list.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-125">這個方法時需要管理員實作會維護個別的接聽程式會根據事件資料中所擷取的資訊。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="e0ad6-126">如果您使用這個進階的技巧，您必須建立並維護個別的清單，做為您的管理員實作的一部分，而且您必須提供特定的清單中加入接聽程式。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="e0ad6-127">未經處理的事件接聽程式處理常式實作必須做在發生狀況時，您用來區分清單，以及將事件傳遞僅對適當的清單或清單。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="e0ad6-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0ad6-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 實作會呼叫這個方法，使用其傳遞`managerType`。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="e0ad6-132">傳回<xref:System.Windows.WeakEventManager>則做為區分文字以決定哪個事件已接收，而叫用哪一個私用類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e0ad6-133">The zero-based index of the requested source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-133">The zero-based index of the requested source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-134">Gets or sets the data being stored for the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-134">Gets or sets the data being stored for the specified source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e0ad6-135">此來源的管理員所儲存的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-135">Data being stored by the manager for this source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-136">在衍生的類別可以選擇哪些資料和儲存在這個索引子的型別。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="e0ad6-137">通常這會實作為<xref:System.Windows.WeakEventManager.ListenerList>，這是弱式參考到接聽程式的清單。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="e0ad6-138">您只需要變更此類型，如果<xref:System.Windows.WeakEventManager.ListenerList>類型不能包含您所需的資訊。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="e0ad6-139">因此，您必須覆寫如果<xref:System.Windows.WeakEventManager.Purge%2A>方法，讓所有的清除作業的基礎類型會正確執行。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e0ad6-140">Returns a new object to contain listeners to an event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-140">Returns a new object to contain listeners to an event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0ad6-141">A new object to contain listeners to an event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-141">A new object to contain listeners to an event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e0ad6-142">The source object that the handler delegate subscribes to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-142">The source object that the handler delegate subscribes to.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="e0ad6-143">The delegate that handles the event that is raised by <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-143">The delegate that handles the event that is raised by <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-144">Adds the specified delegate as an event handler of the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-144">Adds the specified delegate as an event handler of the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e0ad6-145">The source to attach listeners to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-145">The source to attach listeners to.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="e0ad6-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-147">Adds the provided listener to the provided source for the event being managed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-147">Adds the provided listener to the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-148">管理員類別中呼叫這個方法`AddListener`方法<xref:System.Windows.WeakEventManager>實作。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="e0ad6-149">`AddListener` 這是建議的名稱定義您管理員的類別，讓其他類別加入您的弱式事件模式的接聽程式上的靜態方法。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="e0ad6-150">`AddListener` 應該採用兩個參數：`source`其中附加接聽程式，而`listener`執行個體。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="e0ad6-151">針對您`AddListener`實作，請呼叫<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>上目前的管理員和傳遞相同的兩個參數的方法。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="e0ad6-152">如果接聽程式的清單是先前空白，<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>呼叫<xref:System.Windows.WeakEventManager.StartListening%2A>方法就內部而言，這會呼叫您的特定<xref:System.Windows.WeakEventManager.StartListening%2A>覆寫透過多型。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="e0ad6-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 將接聽程式加入至單一內部<xref:System.Windows.WeakEventManager.ListenerList>每`source`。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="e0ad6-154">如果您的管理員實作會維護每個事件來源組合的接聽程式的多個清單，請勿使用<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="e0ad6-155">相反地，您的實作應該建立自己<xref:System.Windows.WeakEventManager.ListenerList>執行個體，`AddListener`應該將接聽程式新增至適當的清單中，並且事件應該傳遞至適當的接聽程式清單，藉由呼叫<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>事件，而不是<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e0ad6-156">The source to remove the handler from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-156">The source to remove the handler from.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="e0ad6-157">The delegate to remove from <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-157">The delegate to remove from <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-158">Removes the previously added handler from the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-158">Removes the previously added handler from the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e0ad6-159">The source to remove listeners from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-159">The source to remove listeners from.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="e0ad6-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-161">Removes a previously added listener from the provided source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-161">Removes a previously added listener from the provided source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-162">管理員類別中呼叫這個方法`RemoveListener`方法<xref:System.Windows.WeakEventManager>實作。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="e0ad6-163">`RemoveListener` 這是建議的名稱定義在您管理員的類別，讓其他類別移除接聽程式的弱式事件模式的靜態方法。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="e0ad6-164">`RemoveListener` 應該採用兩個參數：`source`其中已移除接聽程式，而`listener`類別。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="e0ad6-165">針對您`RemoveListener`實作，請呼叫<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>上目前的管理員和傳遞相同的兩個參數的方法。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="e0ad6-166">如果呼叫<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>在清單中，移除最後一個接聽程式<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>呼叫<xref:System.Windows.WeakEventManager.StopListening%2A>方法就內部而言，這會呼叫您的特定<xref:System.Windows.WeakEventManager.StopListening%2A>覆寫透過多型。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="e0ad6-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 移除接聽程式從內部單一<xref:System.Windows.WeakEventManager.ListenerList>每`source`。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="e0ad6-168">如果您的管理員實作會維護每個事件來源組合的接聽程式的多個清單，請勿使用<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="e0ad6-169">相反地，您的實作應該建立自己<xref:System.Windows.WeakEventManager.ListenerList>執行個體，`RemoveListener`應該從適當的清單，移除接聽程式，以及事件應傳遞至適當的接聽程式清單，藉由呼叫<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>方法，而非<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e0ad6-170">The source for events being listened to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-170">The source for events being listened to.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="e0ad6-171">The data to check.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-171">The data to check.</span>
          </span>
          <span data-ttu-id="e0ad6-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span>
          </span>
        </param>
        <param name="purgeAll">
          <span data-ttu-id="e0ad6-173">
            <see langword="true" /> to stop listening to <c>source</c>, and completely remove all entries from <c>data</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-173">
              <see langword="true" /> to stop listening to <c>source</c>, and completely remove all entries from <c>data</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-174">Removes inactive listener entries from the data list for the provided source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-174">Removes inactive listener entries from the data list for the provided source.</span>
          </span>
          <span data-ttu-id="e0ad6-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e0ad6-176">
            <see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-176">
              <see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-177"><xref:System.Windows.WeakEventManager.Purge%2A>方法已經將會移除所有項目資料時的預設實作<xref:System.Windows.WeakEventManager.ListenerList>。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e0ad6-178">
            <para>基礎類型<see cref="P:System.Windows.WeakEventManager.Item(System.Object)" />以外的項目是<see cref="T:System.Windows.WeakEventManager.ListenerList" />，或包含超過資料<see cref="T:System.Windows.WeakEventManager.ListenerList" />，您必須覆寫<see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />方法。覆寫應該提供清除行為來替代型別項目清單。一般而言，覆寫也應該提供行為，而不需要呼叫基底實作。如果特定<see cref="T:System.Windows.WeakEventManager.ListenerList" />仍然需要清除，呼叫<see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-178">
              <para>If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method. The override should provide purge behavior for the alternate type items list. Generally, the override should provide behavior without calling the base implementation. If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e0ad6-179">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-179">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e0ad6-180">物件，可用來建立資料表格成員上的鎖定，然後適當地處置與<see langword="using" />建構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-180">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-181">在衍生類別中，查詢中所包含的資料表<xref:System.Windows.WeakEventManager.Item%2A>應該一律在內發生`using (ReadLock) { ... }`子句，除了已寫入鎖定內的查詢。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-181">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="e0ad6-182">這些查詢可能會需要您的類別支援更複雜`AddListener`實作，需要更多的資料超過`source`和`listener`，並使用<xref:System.Windows.WeakEventManager.Item%2A>儲存額外的資訊集合。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-182">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e0ad6-183">The source to remove listener information for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-183">The source to remove listener information for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-184">Removes all listeners for the specified source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-184">Removes all listeners for the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e0ad6-185">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-185">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-186">呼叫<xref:System.Windows.WeakEventManager.ScheduleCleanup%2A>方法是類似於呼叫<xref:System.Windows.WeakEventManager.Purge%2A>方法在目前的管理員清單中，在較低的執行緒優先順序上與`purgeAll`參數設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-186">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="e0ad6-187">The type to set the new event manager.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-187">The type to set the new event manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="e0ad6-188">The new event manager.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-188">The new event manager.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-189">Sets the current manager for the specified manager type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-189">Sets the current manager for the specified manager type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-190">呼叫<xref:System.Windows.WeakEventManager.SetCurrentManager%2A>初始化管理員 中，如果該方法的呼叫所需要您`CurrentManager`屬性<xref:System.Windows.WeakEventManager>實作。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-190">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e0ad6-191">The source to begin listening on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-191">The source to begin listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-192">When overridden in a derived class, starts listening for the event being managed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-192">When overridden in a derived class, starts listening for the event being managed.</span>
          </span>
          <span data-ttu-id="e0ad6-193">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-193">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e0ad6-194">
            <para>
              <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 覆寫應加入的處理常式，以提供<paramref name="source" />。此處理常式是由管理員本身宣告。類別處理常式不應為公用，並只應該呼叫以回應受管理的事件。類別處理常式應該呼叫<see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />方法或<see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />方法適當地。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-194">
              <para>
                <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />. The handler is declared by the manager itself. The class handler should not be public, and it should only be called in response to the event being managed. The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e0ad6-195">The source to stop listening on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-195">The source to stop listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e0ad6-196">When overridden in a derived class, stops listening on the provided source for the event being managed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-196">When overridden in a derived class, stops listening on the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e0ad6-197">
            <para>
              <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> 實作時應該移除的類別處理常式加入<see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />方法。移除接聽程式不應清除接聽程式清單。相反地，它只應該中斷的類別處理常式 （可能是暫時）。其他方法可供清除整個清單，例如<see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />方法<paramref name="purgeAll" />參數設定為<see langword="true" />。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-197">
              <para>
                <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method. Removing a listener should not clear the listener list. Instead, it should only disconnect the class handler (perhaps temporarily). Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e0ad6-198">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-198">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e0ad6-199">物件，可用來建立資料表格成員上的鎖定，然後適當地處置與<see langword="using" />建構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0ad6-199">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0ad6-200">在衍生類別中，基礎資料表的所有修改都會內應該都發生`using (WriteLock) { ... }`子句。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-200">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="e0ad6-201">這些修改可能有必要，如果您的類別支援更複雜`AddListener`實作，需要更多的資料超過`source`和`listener`，並使用<xref:System.Windows.WeakEventManager.Item%2A>儲存額外的資訊集合。</span><span class="sxs-lookup"><span data-stu-id="e0ad6-201">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>