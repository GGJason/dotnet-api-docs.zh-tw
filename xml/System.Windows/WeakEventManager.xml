<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0b902a9b8f78c0d8e904a6bd4037d22a00c7fb84" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57941642" /></Metadata><TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f3d5f-101">為「弱式事件模式」中所使用的事件管理員提供基底類別。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span></span> <span data-ttu-id="f3d5f-102">管理員會針對也使用該模式的事件 (或回呼) 加入或移除接聽程式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-103">事件來源的物件存留期無關的事件接聽程式時，通常會使用弱式事件模式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="f3d5f-104">使用中央事件分派功能<xref:System.Windows.WeakEventManager>讓接聽程式的處理常式，即使來源物件保存回收。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="f3d5f-105">相較之下，使用您建立一般事件連結`+=`運算子會使可能中斷連接的來源，以保存到接聽程式的參考。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="f3d5f-106">這可防止接收者進行記憶體回收 neodpověděl včas.。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="f3d5f-107">一個常見的情形，存留期之間的關聯性來源與接聽程式應該使用的弱式事件模式是來自資料繫結的更新事件的處理。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="f3d5f-108">弱式事件模式也會用於回呼事件及一般事件中。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="f3d5f-109">如需自訂的範例<see cref="T:System.Windows.WeakEventManager" />，請參閱 &lt;&lt;c2&gt; [ 弱式事件模式](~/docs/framework/wpf/advanced/weak-event-patterns.md)。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-109">For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</span></span></para></block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f3d5f-110">由衍生類別的建構函式當做初始設定式使用時，初始化基底類別值。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="f3d5f-111">正在其上處理事件的物件。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-111">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="f3d5f-112"><see cref="T:System.EventArgs" />，包含要傳遞之事件的事件資料。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span></span></param>
        <summary><span data-ttu-id="f3d5f-113">將受管理的事件傳遞給每一個接聽程式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-113">Delivers the event being managed to each listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-114">呼叫<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法內新增或移除的事件處理常式<xref:System.Windows.WeakEventManager.StartListening%2A>和<xref:System.Windows.WeakEventManager.StopListening%2A>子類別的實作。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="f3d5f-115">如果您呼叫<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>方法中的您`AddListener`您類別的實作，接收事件的接聽程式清單會保留在基礎的集合。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="f3d5f-116">(`AddListener`不是介面或類別的合約的一部分。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="f3d5f-117">`AddListener` 是您呼叫的 manager 類別方法的建議的名稱<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>，並將事件的弱式事件模式接聽程式。)</span><span class="sxs-lookup"><span data-stu-id="f3d5f-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="f3d5f-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 將一份清單中的接聽程式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="f3d5f-119">如果您的管理員實作會維護多個清單中的每個事件的接聽程式，請勿使用<xref:System.Windows.WeakEventManager.DeliverEvent%2A>或<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="f3d5f-120">相反地，您的實作應該建立自己<xref:System.Windows.WeakEventManager.ListenerList>執行個體`AddListener`應該將接聽程式新增至適當的清單中，並且事件應該傳遞至適當的接聽程式清單，藉由呼叫<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEventToList(System::Object ^ sender, EventArgs ^ args, System::Windows::WeakEventManager::ListenerList ^ list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="f3d5f-121">正在其上處理事件的物件。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-121">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="f3d5f-122">包含事件資料的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <param name="list"><span data-ttu-id="f3d5f-123">提供的 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="f3d5f-124">將受管理的事件傳遞給所提供清單中的每一個接聽程式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-124">Delivers the event being managed to each listener in the provided list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-125">這個方法時需要您的管理員實作可讓您維護個別的接聽程式會根據事件資料中擷取的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="f3d5f-126">如果您使用這個進階的技巧，您必須建立並維護不同的清單，做為您的管理員實作的一部分，您必須提供方法，以將特定的清單中的接聽程式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="f3d5f-127">會接聽原始事件的處理常式實作必須處理條件，您使用，以便區別這些清單中，並將事件傳遞僅對適當的清單或清單。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="f3d5f-128">要取得其 <see cref="T:System.Windows.WeakEventManager" /> 的型別。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span></span></param>
        <summary><span data-ttu-id="f3d5f-129">傳回用於所提供型別的 <see cref="T:System.Windows.WeakEventManager" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span></span></summary>
        <returns><span data-ttu-id="f3d5f-130">相符的 <see cref="T:System.Windows.WeakEventManager" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 實作會呼叫這個方法，使用其通過`managerType`。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="f3d5f-132">傳回<xref:System.Windows.WeakEventManager>接著會做為判斷收到的事件，並叫用哪一個私用類別處理常式的區別指標。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f3d5f-133">所要求來源之以零為起始的索引。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-133">The zero-based index of the requested source.</span></span></param>
        <summary><span data-ttu-id="f3d5f-134">取得或設定要為指定的來源儲存的資料。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-134">Gets or sets the data being stored for the specified source.</span></span></summary>
        <value><span data-ttu-id="f3d5f-135">管理員為此來源儲存的資料。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-135">Data being stored by the manager for this source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-136">在衍生的類別可以選擇哪些資料和將儲存在這個索引子的型別。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="f3d5f-137">通常這會實作為<xref:System.Windows.WeakEventManager.ListenerList>，這是弱式參考到接聽程式的清單。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="f3d5f-138">您只需要變更此類型，如果<xref:System.Windows.WeakEventManager.ListenerList>類型不能包含您所需的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="f3d5f-139">因此，您必須覆寫如果<xref:System.Windows.WeakEventManager.Purge%2A>方法，讓所有的清除作業的基礎類型會正確執行。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f3d5f-140">傳回新的物件，包含事件的接聽程式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-140">Returns a new object to contain listeners to an event.</span></span></summary>
        <returns><span data-ttu-id="f3d5f-141">包含事件之接聽程式的新物件。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-141">A new object to contain listeners to an event.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f3d5f-142">處理常式委派所訂閱的來源物件。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-142">The source object that the handler delegate subscribes to.</span></span></param>
        <param name="handler"><span data-ttu-id="f3d5f-143">處理 <paramref name="source" /> 引發事件的委派。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-143">The delegate that handles the event that is raised by <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="f3d5f-144">加入指定的委派做為指定之來源的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-144">Adds the specified delegate as an event handler of the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f3d5f-145">要附加接聽程式的目標來源。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-145">The source to attach listeners to.</span></span></param>
        <param name="listener"><span data-ttu-id="f3d5f-146">接聽的類別 (必須實作 <see cref="T:System.Windows.IWeakEventListener" />)。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="f3d5f-147">將提供的接聽程式加入至所提供的受管理事件來源。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-147">Adds the provided listener to the provided source for the event being managed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-148">您的 manager 類別中呼叫這個方法`AddListener`上的方法<xref:System.Windows.WeakEventManager>實作。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="f3d5f-149">`AddListener` 這是建議的名稱定義管理員類別，讓其他類別加入您的弱式事件模式的接聽程式上的靜態方法。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="f3d5f-150">`AddListener` 應該採用兩個參數：`source`其中附加接聽程式，而`listener`執行個體。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="f3d5f-151">為您`AddListener`實作中，呼叫<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>有關目前管理員傳遞相同的兩個參數的方法。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="f3d5f-152">如果接聽程式清單是先前空白<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>呼叫<xref:System.Windows.WeakEventManager.StartListening%2A>方法就內部而言，這會呼叫您的特定<xref:System.Windows.WeakEventManager.StartListening%2A>覆寫透過多型。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="f3d5f-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 將接聽程式加入至單一內部<xref:System.Windows.WeakEventManager.ListenerList>每個`source`。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="f3d5f-154">如果您的管理員實作會維護多個清單中的每個事件來源的組合的接聽程式，請勿使用<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="f3d5f-155">相反地，您的實作應該建立自己<xref:System.Windows.WeakEventManager.ListenerList>執行個體`AddListener`應該將接聽程式新增至適當的清單中，並且事件應該傳遞至適當的接聽程式清單，藉由呼叫<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>事件，而不<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f3d5f-156">要從中移除處理常式的來源。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-156">The source to remove the handler from.</span></span></param>
        <param name="handler"><span data-ttu-id="f3d5f-157">要從 <paramref name="source" /> 移除的委派。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-157">The delegate to remove from <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="f3d5f-158">從指定的來源移除先前新增的處理常式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-158">Removes the previously added handler from the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f3d5f-159">要從中移除接聽程式的來源。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-159">The source to remove listeners from.</span></span></param>
        <param name="listener"><span data-ttu-id="f3d5f-160">接聽的類別 (必須實作 <see cref="T:System.Windows.IWeakEventListener" />)。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="f3d5f-161">從提供的來源移除先前加入的接聽程式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-161">Removes a previously added listener from the provided source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-162">您的 manager 類別中呼叫這個方法`RemoveListener`上的方法<xref:System.Windows.WeakEventManager>實作。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="f3d5f-163">`RemoveListener` 這是建議的名稱您定義您的管理員類別，以啟用其他類別，以移除您的弱式事件模式的接聽程式上的靜態方法。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="f3d5f-164">`RemoveListener` 應該採用兩個參數：`source`其中已移除接聽程式，而`listener`類別。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="f3d5f-165">為您`RemoveListener`實作中，呼叫<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>有關目前管理員傳遞相同的兩個參數的方法。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="f3d5f-166">如果呼叫<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>在清單中，移除最後一個接聽程式<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>呼叫<xref:System.Windows.WeakEventManager.StopListening%2A>方法就內部而言，這會呼叫您的特定<xref:System.Windows.WeakEventManager.StopListening%2A>覆寫透過多型。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="f3d5f-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 移除接聽程式從單一內部<xref:System.Windows.WeakEventManager.ListenerList>每個`source`。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="f3d5f-168">如果您的管理員實作會維護多個清單中的每個事件來源的組合的接聽程式，請勿使用<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="f3d5f-169">相反地，您的實作應該建立自己<xref:System.Windows.WeakEventManager.ListenerList>執行個體`RemoveListener`應該從適當的清單中，移除接聽程式和事件應該傳遞至適當的接聽程式清單，藉由呼叫<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>方法，而非<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f3d5f-170">正在接聽之事件的來源。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-170">The source for events being listened to.</span></span></param>
        <param name="data"><span data-ttu-id="f3d5f-171">要檢查的資料。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-171">The data to check.</span></span> <span data-ttu-id="f3d5f-172">這個物件必須是 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span></span></param>
        <param name="purgeAll"><span data-ttu-id="f3d5f-173"><see langword="true" /> 表示停止接聽 <paramref name="source" />，並完全移除 <paramref name="data" /> 中的所有項目。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-173"><see langword="true" /> to stop listening to <paramref name="source" />, and completely remove all entries from <paramref name="data" />.</span></span></param>
        <summary><span data-ttu-id="f3d5f-174">從所提供來源的資料清單中移除非現用接聽程式項目。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-174">Removes inactive listener entries from the data list for the provided source.</span></span> <span data-ttu-id="f3d5f-175">如果從清單中實際移除了一些項目，則會傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span></span></summary>
        <returns><span data-ttu-id="f3d5f-176">如果已實際移除某些項目則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-176"><see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-177"><xref:System.Windows.WeakEventManager.Purge%2A>方法有資料時，會移除所有項目預設實作<xref:System.Windows.WeakEventManager.ListenerList>。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f3d5f-178">基礎類型<see cref="P:System.Windows.WeakEventManager.Item(System.Object)" />而不是<see cref="T:System.Windows.WeakEventManager.ListenerList" />，或包含超過資料<see cref="T:System.Windows.WeakEventManager.ListenerList" />，您必須覆寫<see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />方法。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-178">If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method.</span></span> <span data-ttu-id="f3d5f-179">覆寫應該提供的替代類型的項目 清單中的清除行為。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-179">The override should provide purge behavior for the alternate type items list.</span></span> <span data-ttu-id="f3d5f-180">一般而言，覆寫應該提供的行為，而不需要呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-180">Generally, the override should provide behavior without calling the base implementation.</span></span> <span data-ttu-id="f3d5f-181">如果特定<see cref="T:System.Windows.WeakEventManager.ListenerList" />仍然需要清除，呼叫<see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-181">If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f3d5f-182">在基礎資料表上建立讀取鎖定，並傳回 <see cref="T:System.IDisposable" />。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-182">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="f3d5f-183">物件，可用來在資料表成員上建立鎖定，然後以 <see langword="using" /> 建構適當處置。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-183">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-184">在衍生類別中，查詢中所包含的資料表<xref:System.Windows.WeakEventManager.Item%2A>一定要進行內`using (ReadLock) { ... }`子句中，除了已內寫入鎖定的查詢。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-184">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="f3d5f-185">這些查詢可能會需要您的類別支援更複雜`AddListener`實作，需要更多的資料超過`source`而`listener`，並使用<xref:System.Windows.WeakEventManager.Item%2A>集合來儲存額外的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-185">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f3d5f-186">要移除其接聽程式資訊的來源。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-186">The source to remove listener information for.</span></span></param>
        <summary><span data-ttu-id="f3d5f-187">移除指定來源的所有接聽程式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-187">Removes all listeners for the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f3d5f-188">要求在較低優先權執行緒上執行基礎接聽程式清單中未使用項目的清除動作。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-188">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-189">呼叫<xref:System.Windows.WeakEventManager.ScheduleCleanup%2A>方法就類似於呼叫<xref:System.Windows.WeakEventManager.Purge%2A>方法在目前的管理員清單中，以較低的執行緒優先權，與`purgeAll`參數設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-189">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="f3d5f-190">要用來設定新事件管理員的型別。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-190">The type to set the new event manager.</span></span></param>
        <param name="manager"><span data-ttu-id="f3d5f-191">新的事件管理員。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-191">The new event manager.</span></span></param>
        <summary><span data-ttu-id="f3d5f-192">為指定管理員型別設定目前管理員。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-192">Sets the current manager for the specified manager type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-193">呼叫<xref:System.Windows.WeakEventManager.SetCurrentManager%2A>方法來初始化管理員 中，如果所呼叫您`CurrentManager`屬性上的<xref:System.Windows.WeakEventManager>實作。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-193">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f3d5f-194">要開始接聽的來源。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-194">The source to begin listening on.</span></span></param>
        <summary><span data-ttu-id="f3d5f-195">在衍生類別中覆寫時，開始接聽受管理的事件。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-195">When overridden in a derived class, starts listening for the event being managed.</span></span> <span data-ttu-id="f3d5f-196">在最初呼叫 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 方法之後，每當處理了所提供來源中的相關事件時，管理員都應處於呼叫 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 或 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> 的狀態。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-196">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f3d5f-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 覆寫應該加入處理常式，以提供<paramref name="source" />。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />.</span></span> <span data-ttu-id="f3d5f-198">管理員本身所宣告的處理常式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-198">The handler is declared by the manager itself.</span></span> <span data-ttu-id="f3d5f-199">類別處理常式不應該為公用，並只應該呼叫在受管理的事件回應。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-199">The class handler should not be public, and it should only be called in response to the event being managed.</span></span> <span data-ttu-id="f3d5f-200">類別處理常式應該呼叫<see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />方法或<see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />方法適當地。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-200">The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f3d5f-201">要停止接聽的來源。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-201">The source to stop listening on.</span></span></param>
        <summary><span data-ttu-id="f3d5f-202">在衍生類別中覆寫時，停止在所提供來源上接聽受管理的事件。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-202">When overridden in a derived class, stops listening on the provided source for the event being managed.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f3d5f-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> 實作應該移除的類別處理常式，如新增<see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />方法。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method.</span></span> <span data-ttu-id="f3d5f-204">移除接聽程式不應清除的接聽程式清單。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-204">Removing a listener should not clear the listener list.</span></span> <span data-ttu-id="f3d5f-205">相反地，它應該只中斷 （可能是暫時） 的類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-205">Instead, it should only disconnect the class handler (perhaps temporarily).</span></span> <span data-ttu-id="f3d5f-206">其他方法可供清除整個清單中，這類<see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />方法<paramref name="purgeAll" />參數設為<see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-206">Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f3d5f-207">在基礎資料表上建立寫入鎖定，並傳回 <see cref="T:System.IDisposable" />。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-207">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="f3d5f-208">物件，可用來在資料表成員上建立鎖定，然後以 <see langword="using" /> 建構適當處置。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-208">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3d5f-209">在衍生類別中，基礎資料表的所有修改都應內`using (WriteLock) { ... }`子句。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-209">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="f3d5f-210">這些修改都可能有必要，如果您的類別支援更複雜`AddListener`實作，需要更多的資料超過`source`而`listener`，並使用<xref:System.Windows.WeakEventManager.Item%2A>集合來儲存額外的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3d5f-210">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>