<Type Name="UIElement3D" FullName="System.Windows.UIElement3D">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c6b9ff5a1f2227b05a04fea702223a3aebfe66d9" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55424092" /></Metadata><TypeSignature Language="C#" Value="public abstract class UIElement3D : System.Windows.Media.Media3D.Visual3D, System.Windows.IInputElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract UIElement3D extends System.Windows.Media.Media3D.Visual3D implements class System.Windows.IInputElement" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement3D" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class UIElement3D&#xA;Inherits Visual3D&#xA;Implements IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement3D abstract : System::Windows::Media::Media3D::Visual3D, System::Windows::IInputElement" />
  <TypeSignature Language="F#" Value="type UIElement3D = class&#xA;    inherit Visual3D&#xA;    interface IInputElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Media3D.Visual3D</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ba0f1-101"><see cref="T:System.Windows.UIElement3D" /> 是以 Windows Presentation Foundation (WPF) 項目和基本呈現方式特性為建置基礎之 WPF 核心層級實作的基底類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-101"><see cref="T:System.Windows.UIElement3D" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-102"><xref:System.Windows.UIElement3D> 是抽象的基底類別，您可以從中衍生類別來代表特定的 3D 項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-102"><xref:System.Windows.UIElement3D> is an abstract base class from which you can derive classes to represent specific 3D elements.</span></span>  
  
 <span data-ttu-id="ba0f1-103">大部分的輸入，將焦點放，和事件處理行為的 3D 項目通常定義於<xref:System.Windows.UIElement3D>類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-103">Much of the input, focusing, and eventing behavior for 3D elements in general is defined in the <xref:System.Windows.UIElement3D> class.</span></span> <span data-ttu-id="ba0f1-104">這包括鍵盤、 滑鼠及手寫筆輸入及相關的狀態屬性的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-104">This includes the events for keyboard, mouse, and stylus input, and related status properties.</span></span> <span data-ttu-id="ba0f1-105">其中許多事件都是路由的事件，且許多的輸入相關的事件都有兩個事件反昇路由版本，以及事件的通道版本。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-105">Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</span></span> <span data-ttu-id="ba0f1-106">這些配對的事件通常是控制項作者的最大感興趣的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-106">These paired events are typically the events of greatest interest to control authors.</span></span>  
  
 <span data-ttu-id="ba0f1-107"><xref:System.Windows.UIElement3D> 也包含[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]相關的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]事件模型，包括可以引發的方法指定路由事件，其源自項目執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-107"><xref:System.Windows.UIElement3D> also includes [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance.</span></span>  
  
 <span data-ttu-id="ba0f1-108">A<xref:System.Windows.UIElement3D>具有下列功能，特別由定義<xref:System.Windows.UIElement3D>類別：</span><span class="sxs-lookup"><span data-stu-id="ba0f1-108">A <xref:System.Windows.UIElement3D> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement3D> class:</span></span>  
  
-   <span data-ttu-id="ba0f1-109">可以回應使用者輸入 (包括控制透過處理事件的傳送輸入路由或路由的命令)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-109">Can respond to user input (including control of where input is sent via handling of event routing or routing of commands).</span></span>  
  
-   <span data-ttu-id="ba0f1-110">可以引發邏輯的項目樹狀結構路由的路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-110">Can raise routed events that travel a route through the logical element tree.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ba0f1-111"><xref:System.Windows.UIElement3D.Visibility%2A> 狀態會影響所有的輸入處理該項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-111"><xref:System.Windows.UIElement3D.Visibility%2A> state affects all input handling by that element.</span></span> <span data-ttu-id="ba0f1-112">不會顯示的項目不會參與點擊測試，且不會收到輸入的事件，即使在滑鼠位於界限會項目如果可見。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-112">Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds of where the element would be if were visible.</span></span>  
  
 <span data-ttu-id="ba0f1-113">不同於<xref:System.Windows.UIElement>類別，<xref:System.Windows.UIElement3D>類別不包含版面配置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-113">Unlike the <xref:System.Windows.UIElement> class, the <xref:System.Windows.UIElement3D> class does not include layout.</span></span> <span data-ttu-id="ba0f1-114">因此，<xref:System.Windows.UIElement3D>類別不包含**量值**或是**排列**方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-114">Therefore, the <xref:System.Windows.UIElement3D> class does not include **Measure** or **Arrange** methods.</span></span>  
  
 <span data-ttu-id="ba0f1-115">衍生自類別<xref:System.Windows.UIElement3D>及維護自己的集合<xref:System.Windows.Media.Media3D.Visual3D>藉由覆寫的物件<xref:System.Windows.Media.Media3D.Visual3D.GetVisual3DChild%2A>並<xref:System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount%2A>仍然必須傳遞新<xref:System.Windows.Media.Media3D.Visual3D>物件新增至<xref:System.Windows.Media.Media3D.Visual3D.AddVisual3DChild%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-115">A class that derives from <xref:System.Windows.UIElement3D> and maintains its own collection of <xref:System.Windows.Media.Media3D.Visual3D> objects by overriding <xref:System.Windows.Media.Media3D.Visual3D.GetVisual3DChild%2A> and <xref:System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount%2A> must still pass new <xref:System.Windows.Media.Media3D.Visual3D> objects to <xref:System.Windows.Media.Media3D.Visual3D.AddVisual3DChild%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-116"><xref:System.Windows.UIElement3D> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-116"><xref:System.Windows.UIElement3D> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-117">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-117">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba0f1-118">下列範例示範如何從衍生<xref:System.Windows.UIElement3D>類別來建立`Sphere`類別：</span><span class="sxs-lookup"><span data-stu-id="ba0f1-118">The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:</span></span>  
  
 [!code-csharp[Shapes#Sphere](~/samples/snippets/csharp/VS_Snippets_Wpf/Shapes/CSharp/Sphere.cs#sphere)]
 [!code-vb[Shapes#Sphere](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Shapes/visualbasic/sphere.vb#sphere)]  
  
 <span data-ttu-id="ba0f1-119">如需完整的範例，請參閱[UIElement3D 球體範例](https://go.microsoft.com/fwlink/?LinkID=160044)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-119">For the complete sample, see [UIElement3D Sphere Sample](https://go.microsoft.com/fwlink/?LinkID=160044).</span></span>  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-120">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-120">Handling Events in 3-D Sample</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIElement3D ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; UIElement3D();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-121">初始化 <see cref="T:System.Windows.UIElement3D" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-121">Initializes a new instance of the <see cref="T:System.Windows.UIElement3D" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-122"><xref:System.Windows.UIElement3D.%23ctor%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-122"><xref:System.Windows.UIElement3D.%23ctor%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-123">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-123">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ba0f1-124">加入所指定路由事件的路由事件處理常式，會將此處理常式加入目前項目的處理常式集合中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-124">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement3D.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="ba0f1-125">要處理的路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-125">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="ba0f1-126">處理常式實作的參考。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-126">A reference to the handler implementation.</span></span></param>
        <summary><span data-ttu-id="ba0f1-127">加入所指定路由事件的路由事件處理常式，會將此處理常式加入目前項目的處理常式集合中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-127">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-128">您可以新增相同的處理常式，相同事件多次，而不會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-128">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="ba0f1-129">不過，處理常式實際叫用的多次時處理事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-129">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="ba0f1-130">因此，請考慮如何這種行為可能會有副作用，都應該在自己的處理常式實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-130">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-131">您通常使用這個方法來提供的 「 新增 」 存取子的實作[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]事件的自訂路由事件的存取模式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-131">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-132"><xref:System.Windows.UIElement3D.AddHandler%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-132"><xref:System.Windows.UIElement3D.AddHandler%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-133">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-133">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement3D.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="ba0f1-134">要處理的路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-134">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="ba0f1-135">處理常式實作的參考。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-135">A reference to the handler implementation.</span></span></param>
        <param name="handledEventsToo"><span data-ttu-id="ba0f1-136"><see langword="true" /> 表示註冊處理常式，以便即使路由事件在其事件資料中標記為已處理，仍會叫用該處理常式。<see langword="false" /> 表示以預設條件註冊處理常式，也就是如果路由事件已經標記為已處理，則不會叫用該處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-136"><see langword="true" /> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</span></span>  
  
<span data-ttu-id="ba0f1-137">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-137">The default is <see langword="false" />.</span></span>  
  
<span data-ttu-id="ba0f1-138">請勿定期要求重新處理路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-138">Do not routinely ask to rehandle a routed event.</span></span></param>
        <summary><span data-ttu-id="ba0f1-139">加入所指定路由事件的路由事件處理常式，會將此處理常式加入目前項目的處理常式集合中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-139">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span> <span data-ttu-id="ba0f1-140">將 <paramref name="handledEventsToo" /> 指定為 <see langword="true" />，為已標示為由事件路由上另一個項目處理的事件叫用提供的處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-140">Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-141">實用的方式處理低階的輸入的事件是一個複雜的工作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-141">Processing low-level input events in a practical way is a complex task.</span></span> <span data-ttu-id="ba0f1-142">許多控制項實作的行為，其中特定事件標示為已處理，並已由另一個更具直覺性的事件所取代。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-142">Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</span></span> <span data-ttu-id="ba0f1-143">一般而言，控制項只會將平台的輸入的事件，為已處理，如果沒有這項操作的一些設計意圖。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-143">Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</span></span> <span data-ttu-id="ba0f1-144">在某些情況下，這些設計目的不可能您的輸入事件的特定處理的要求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-144">In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</span></span> <span data-ttu-id="ba0f1-145">針對這些案例是該註冊處理常式`handledEventsToo`做為`true`適合。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-145">It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate.</span></span> <span data-ttu-id="ba0f1-146">但您不應該這麼定期。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-146">But you should not do this routinely.</span></span> <span data-ttu-id="ba0f1-147">叫用處理常式以回應所有的事件，即使處理將會使您自己的應用程式事件處理邏輯更為複雜。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-147">Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</span></span> <span data-ttu-id="ba0f1-148">如果處理常式邏輯則相當大，可能會看到效能降低。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-148">You may see a decrease in performance if the handler logic is substantial.</span></span> <span data-ttu-id="ba0f1-149">您應該保留使用附加的情況下，您已經發現特定控制項所處理的事件，您仍然想要處理的應用程式邏輯在開發程序已經處理的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-149">You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</span></span>  
  
 <span data-ttu-id="ba0f1-150">為避免處理行為的某些事件控制項組合的類別的另一個方法是使用該事件預覽替代方案。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-150">Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</span></span> <span data-ttu-id="ba0f1-151">例如，如果<xref:System.Windows.UIElement3D.MouseLeftButtonDown>標示為已處理的類別處理，您可以加入處理常式<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>改為。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-151">For example, if <xref:System.Windows.UIElement3D.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> instead.</span></span>  
  
 <span data-ttu-id="ba0f1-152">您可以新增相同的處理常式，相同事件多次，而不會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-152">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="ba0f1-153">不過，處理常式實際叫用的多次時處理事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-153">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="ba0f1-154">因此，請考慮如何這種行為可能會有副作用，都應該在自己的處理常式實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-154">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-155">您通常使用這個方法來提供的 「 新增 」 存取子的實作[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]事件的自訂路由事件的存取模式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-155">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-156"><xref:System.Windows.UIElement3D.AddHandler%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-156"><xref:System.Windows.UIElement3D.AddHandler%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-157">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-157">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route"><span data-ttu-id="ba0f1-158">加入處理常式的事件路由。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-158">The event route that handlers are added to.</span></span></param>
        <param name="e"><span data-ttu-id="ba0f1-159">用於加入處理常式的事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-159">The event data that is used to add the handlers.</span></span> <span data-ttu-id="ba0f1-160">這個方法會使用事件資料的 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 屬性來建立處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-160">This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers.</span></span></param>
        <summary><span data-ttu-id="ba0f1-161">針對目前的 <see cref="T:System.Windows.EventRoute" /> 事件處理常式集合，將處理常式加入至指定的 <see cref="T:System.Windows.UIElement3D" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-161">Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement3D" /> event handler collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-162">這個方法可供內容主機項目 (可能是指實作<xref:System.Windows.IContentHost>或未) 新增為子項目，以處理常式<xref:System.Windows.EventRoute>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-162">This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>.</span></span>  
  
 <span data-ttu-id="ba0f1-163"><xref:System.Windows.UIElement3D.AddToEventRoute%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-163"><xref:System.Windows.UIElement3D.AddToEventRoute%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-164">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-164">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement3D.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-165">取得或設定此元素是否可以當做拖放操作目標的值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-165">Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</span></span></summary>
        <value><span data-ttu-id="ba0f1-166">如果這個項目可以作為拖放作業的目標，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-166"><see langword="true" /> if this element can be used as the target of a drag-and-drop operation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-167">預設值為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-167">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-168">拖放作業不會預設啟用，且必須藉由設定刻意啟用<xref:System.Windows.UIElement3D.AllowDrop%2A>至`true`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-168">Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement3D.AllowDrop%2A> to `true`.</span></span> <span data-ttu-id="ba0f1-169">超過此基本的設定，拖放行為完全是特定的實作並不由定義<xref:System.Windows.UIElement3D>或任何其他基底元素類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-169">Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement3D> or any other base element class.</span></span> <span data-ttu-id="ba0f1-170">某些控制項，例如<xref:System.Windows.Controls.RichTextBox>，沒有預設行為。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-170">Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior.</span></span> <span data-ttu-id="ba0f1-171">如需有關功能的詳細資訊，請參閱[拖放概觀](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-171">For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-172"><xref:System.Windows.UIElement3D.AllowDrop%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-172"><xref:System.Windows.UIElement3D.AllowDrop%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-173">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-173">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-174">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-174">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-175">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-175">Identifier field</span></span>|<xref:System.Windows.UIElement3D.AllowDropProperty>|  
|<span data-ttu-id="ba0f1-176">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-176">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-177">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-177">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-178">識別 <see cref="P:System.Windows.UIElement3D.AllowDrop" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-178">Identifies the <see cref="P:System.Windows.UIElement3D.AllowDrop" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-179"><xref:System.Windows.UIElement3D.AllowDropProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-179"><xref:System.Windows.UIElement3D.AllowDropProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-180">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-180">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-181">取得值，這個值表示是否至少有一個觸控擷取至這個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-181">Gets a value that indicates whether at least one touch is captured to this element.</span></span></summary>
        <value><span data-ttu-id="ba0f1-182">如果至少有一個觸控擷取至這個項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-182"><see langword="true" /> if at least one touch is captured to this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-183">識別 <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-183">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-184">取得值，這個值表示是否至少有一個觸控擷取至這個項目或其視覺化樹狀結構中的任何子項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-184">Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="ba0f1-185">如果至少有一個觸控擷取至這個項目或其視覺化樹狀結構中的任何子項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-185"><see langword="true" /> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-186">識別 <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-186">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-187">取得值，這個值表示是否至少有一個觸控在這個項目上按下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-187">Gets a value that indicates whether at least one touch is pressed over this element.</span></span></summary>
        <value><span data-ttu-id="ba0f1-188">如果至少有一個觸控在這個項目上按下，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-188"><see langword="true" /> if at least one touch is pressed over this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-189">識別 <see cref="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-189">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-190">取得值，這個值表示是否至少有一個觸控在這個項目或其視覺化樹狀結構中的任何子項目上按下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-190">Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="ba0f1-191">如果至少有一個觸控在這個項目或其視覺化樹狀結構中的任何子項目上按下，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-191"><see langword="true" /> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-192">識別 <see cref="P:System.Windows.UIElement3D.AreAnyTouchesOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-192">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement3D.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-193">嘗試強制將滑鼠的捕捉給這個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-193">Attempts to force capture of the mouse to this element.</span></span></summary>
        <returns><span data-ttu-id="ba0f1-194">如果成功捕捉到滑鼠則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-194"><see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-195">若要擷取項目必須先啟用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-195">To be captured, an element must be enabled.</span></span> <span data-ttu-id="ba0f1-196">檢查是否<xref:System.Windows.UIElement3D.IsEnabled%2A>已`true`之前先呼叫<xref:System.Windows.UIElement3D.CaptureMouse%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-196">Check whether <xref:System.Windows.UIElement3D.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement3D.CaptureMouse%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-197">如果呼叫<xref:System.Windows.UIElement3D.CaptureMouse%2A>會傳回`true`，然後<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>也是`true`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-197">If calling <xref:System.Windows.UIElement3D.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement3D.IsMouseCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="ba0f1-198">如果呼叫<xref:System.Windows.UIElement3D.CaptureMouse%2A>傳回`true`，則<xref:System.Windows.UIElement3D.GotMouseCapture>並<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>引發事件，與<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType>事件中的項目報告資料其中<xref:System.Windows.UIElement3D.CaptureMouse%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-198">If calling <xref:System.Windows.UIElement3D.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement3D.GotMouseCapture> and <xref:System.Windows.UIElement3D.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> in the event data reported as the element where the <xref:System.Windows.UIElement3D.CaptureMouse%2A> method is called.</span></span> <span data-ttu-id="ba0f1-199">如果您強制擷取時，您可能會干擾現有的擷取-特別是使用與拖曳和置放滑鼠的擷取。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-199">If you force capture, you might interfere with existing captures - especially with captures that relate to drag-and-drop with the mouse.</span></span>  
  
 <span data-ttu-id="ba0f1-200">若要清除滑鼠捕捉，從所有的項目，請呼叫<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType>具有`element`提供的參數`null`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-200">To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with the `element` parameter provided as `null`.</span></span>  
  
 <span data-ttu-id="ba0f1-201"><xref:System.Windows.UIElement3D.CaptureMouse%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-201"><xref:System.Windows.UIElement3D.CaptureMouse%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-202">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-202">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement3D.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-203">嘗試強制將手寫筆的捕捉給這個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-203">Attempts to force capture of the stylus to this element.</span></span></summary>
        <returns><span data-ttu-id="ba0f1-204">如果成功捕捉到手寫筆則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-204"><see langword="true" /> if the stylus was successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-205">一律根據基礎的預設手寫筆裝置的預設實作會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-205">The default implementation based on the underlying default stylus device always returns `true`.</span></span> <span data-ttu-id="ba0f1-206">不過，如果您要擴充提供輸入系統的裝置實作的輸入的裝置，就可以建立一個系統可能會傳回不同結果的替代的手寫筆裝置實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-206">However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</span></span>  
  
 <span data-ttu-id="ba0f1-207">元素擷取手寫筆，當它收到手寫筆輸入，即使手寫筆位於其範圍外也一樣。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-207">When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</span></span> <span data-ttu-id="ba0f1-208">要捕捉手寫筆通常只會在拖放作業期間。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-208">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="ba0f1-209">呼叫這個方法會呼叫基礎靜態<xref:System.Windows.Input.Stylus>方法<xref:System.Windows.Input.Stylus.Capture%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-209">Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>.</span></span> <span data-ttu-id="ba0f1-210">實際擷取行為被藉由使用中的手寫筆裝置實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-210">The actual capture behavior is implemented by the active stylus device implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-211">若要擷取項目必須先啟用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-211">To be captured, an element must be enabled.</span></span> <span data-ttu-id="ba0f1-212">檢查是否<xref:System.Windows.UIElement3D.IsEnabled%2A>已`true`傳回才能呼叫<xref:System.Windows.UIElement3D.CaptureStylus%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-212">Check whether <xref:System.Windows.UIElement3D.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement3D.CaptureStylus%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-213">如果呼叫<xref:System.Windows.UIElement3D.CaptureStylus%2A>會傳回`true`，<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>也是`true`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-213">If calling <xref:System.Windows.UIElement3D.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement3D.IsStylusCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="ba0f1-214"><xref:System.Windows.UIElement3D.CaptureStylus%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-214"><xref:System.Windows.UIElement3D.CaptureStylus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-215">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-215">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement3D.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="ba0f1-216">要擷取的裝置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-216">The device to capture.</span></span></param>
        <summary><span data-ttu-id="ba0f1-217">嘗試強制將觸控擷取至這個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-217">Attempts to force capture of a touch to this element.</span></span></summary>
        <returns><span data-ttu-id="ba0f1-218">如果指定的觸控已擷取至這個項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-218"><see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-219"><xref:System.Windows.UIElement3D.CaptureTouch%2A> 會傳回`false`如果<xref:System.Windows.Input.TouchDevice>目前擷取至另一個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-219"><xref:System.Windows.UIElement3D.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.</span></span>  
  
 <span data-ttu-id="ba0f1-220">如果<xref:System.Windows.UIElement3D.CaptureTouch%2A>會傳回`true`，然後在<xref:System.Windows.UIElement3D.GotTouchCapture>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-220">If <xref:System.Windows.UIElement3D.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement3D.GotTouchCapture> event is raised.</span></span>  
  
 <span data-ttu-id="ba0f1-221">若要釋放的單一觸控從這個項目擷取，請使用<xref:System.Windows.UIElement3D.ReleaseTouchCapture%2A>方法並指定要釋放的觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-221">To release capture of a single touch from this element, use the <xref:System.Windows.UIElement3D.ReleaseTouchCapture%2A> method and specify the touch device to release.</span></span> <span data-ttu-id="ba0f1-222">若要釋放所有修飾，從這個項目，請使用<xref:System.Windows.UIElement3D.ReleaseAllTouchCaptures%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-222">To release all touches from this element, use the <xref:System.Windows.UIElement3D.ReleaseAllTouchCaptures%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ba0f1-223"><paramref name="touchDevice" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-223"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement3D.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-224">取得與這個項目關聯的 <see cref="T:System.Windows.Input.CommandBinding" /> 物件集合。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-224">Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element.</span></span></summary>
        <value><span data-ttu-id="ba0f1-225">所有 <see cref="T:System.Windows.Input.CommandBinding" /> 物件的集合。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-225">The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-226">A<xref:System.Windows.Input.CommandBinding>啟用這個項目的特定命令的命令處理，並宣告命令、 其事件及這個項目所附加之處理常式之間的連結。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-226">A <xref:System.Windows.Input.CommandBinding> enables command handling of a specific command for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</span></span>  
  
 <span data-ttu-id="ba0f1-227">典型的另一種方式填入<xref:System.Windows.UIElement3D.CommandBindings%2A>集合是使用<xref:System.Windows.Input.CommandManager>方法以程式設計的方式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-227">Another typical way to populate the <xref:System.Windows.UIElement3D.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.</span></span>  
  
 <span data-ttu-id="ba0f1-228"><xref:System.Windows.UIElement3D.CommandBindings%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-228"><xref:System.Windows.UIElement3D.CommandBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-229">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-229">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="ba0f1-230">XAML 屬性項目用法</span><span class="sxs-lookup"><span data-stu-id="ba0f1-230">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ba0f1-231">XAML 值</span><span class="sxs-lookup"><span data-stu-id="ba0f1-231">XAML Values</span></span>  
 <span data-ttu-id="ba0f1-232">*oneOrMoreCommandBindings*</span><span class="sxs-lookup"><span data-stu-id="ba0f1-232">*oneOrMoreCommandBindings*</span></span>  
 <span data-ttu-id="ba0f1-233">一或多個<xref:System.Windows.Input.CommandBinding>項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-233">One or more <xref:System.Windows.Input.CommandBinding> elements.</span></span> <span data-ttu-id="ba0f1-234">每一種應有<xref:System.Windows.Input.CommandBinding.Command%2A>屬性設為已知的命令，並針對設定屬性<xref:System.Windows.Input.CommandBinding.CanExecute>和<xref:System.Windows.Input.CommandBinding.Executed>處理常式實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-234">Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations.</span></span> <span data-ttu-id="ba0f1-235">如需詳細資訊，請參閱<xref:System.Windows.Input.CommandBinding>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-235">For more information see <xref:System.Windows.Input.CommandBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-236">輸入系統報告其下以此項目作為拖曳目標的拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-236">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-237">此事件建立的別名<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.DragEnter?displayProperty=nameWithType>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-237">This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.DragEnter?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-238">附加至事件處理常式<xref:System.Windows.UIElement3D.DragEnter>事件會附加至基礎<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-238">Event handlers that are attached to the <xref:System.Windows.UIElement3D.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-239"><xref:System.Windows.UIElement3D.DragEnter> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-239"><xref:System.Windows.UIElement3D.DragEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-240">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-240">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-241">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-241">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-242">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-242">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DragEnterEvent>|  
|<span data-ttu-id="ba0f1-243">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-243">Routing strategy</span></span>|<span data-ttu-id="ba0f1-244">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-244">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-245">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-245">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="ba0f1-246">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewDragEnter>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-246">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDragEnter>.</span></span>  
  
-   <span data-ttu-id="ba0f1-247">覆寫<xref:System.Windows.UIElement3D.OnDragEnter%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-247">Override <xref:System.Windows.UIElement3D.OnDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-248">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-248">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-249">識別 <see cref="E:System.Windows.UIElement3D.DragEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-249">Identifies the <see cref="E:System.Windows.UIElement3D.DragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-250">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-250">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-251">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-251">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-252">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-252">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-253">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-253">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-254">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-254">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-255"><xref:System.Windows.UIElement3D.DragEnterEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-255"><xref:System.Windows.UIElement3D.DragEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-256">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-256">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-257">輸入系統報告其下以此項目作為拖曳來源的拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-257">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-258">本項目中建立的別名<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement3D.DragLeave?displayProperty=nameWithType>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-258">This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.DragLeave?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-259">附加至事件處理常式<xref:System.Windows.UIElement3D.DragLeave>事件會附加至基礎<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-259">Event handlers that are attached to the <xref:System.Windows.UIElement3D.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-260"><xref:System.Windows.UIElement3D.DragLeave> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-260"><xref:System.Windows.UIElement3D.DragLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-261">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-261">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-262">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-262">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-263">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-263">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DragLeaveEvent>|  
|<span data-ttu-id="ba0f1-264">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-264">Routing strategy</span></span>|<span data-ttu-id="ba0f1-265">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-265">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-266">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-266">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="ba0f1-267">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewDragLeave>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-267">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDragLeave>.</span></span>  
  
-   <span data-ttu-id="ba0f1-268">覆寫<xref:System.Windows.UIElement3D.OnDragLeave%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-268">Override <xref:System.Windows.UIElement3D.OnDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragEnter" />
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
        <altmember cref="E:System.Windows.UIElement3D.GiveFeedback" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-269">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-269">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-270">識別 <see cref="E:System.Windows.UIElement3D.DragLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-270">Identifies the <see cref="E:System.Windows.UIElement3D.DragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-271">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-271">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-272">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-272">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-273">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-273">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-274">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-274">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-275">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-275">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-276"><xref:System.Windows.UIElement3D.DragLeaveEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-276"><xref:System.Windows.UIElement3D.DragLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-277">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-277">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-278">在輸入系統回報以此項目作為可能置放目標的基礎拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-278">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-279">即使拖曳來源中項目範圍，就會發生此事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-279">This event occurs even if the drag originates in the element bounds.</span></span> <span data-ttu-id="ba0f1-280">如果拖曳開始界限之外，然後將移內，也會引發這個事件，以及<xref:System.Windows.UIElement3D.DragEnter>和相關預覽事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-280">If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement3D.DragEnter> and related preview events.</span></span>  
  
 <span data-ttu-id="ba0f1-281">本項目中建立的別名<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement3D.DragOver?displayProperty=nameWithType>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-281">This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.DragOver?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-282">附加至事件處理常式<xref:System.Windows.UIElement3D.DragOver>事件會附加至基礎<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-282">Event handlers that are attached to the <xref:System.Windows.UIElement3D.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-283"><xref:System.Windows.UIElement3D.DragOver> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-283"><xref:System.Windows.UIElement3D.DragOver> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-284">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-284">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-285">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-285">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-286">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-286">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DragOverEvent>|  
|<span data-ttu-id="ba0f1-287">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-287">Routing strategy</span></span>|<span data-ttu-id="ba0f1-288">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-288">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-289">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-289">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="ba0f1-290">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewDragOver>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-290">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDragOver>.</span></span>  
  
-   <span data-ttu-id="ba0f1-291">覆寫<xref:System.Windows.UIElement3D.OnDragOver%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-291">Override <xref:System.Windows.UIElement3D.OnDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragEnter" />
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
        <altmember cref="E:System.Windows.UIElement3D.Drop" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-292">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-292">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-293">識別 <see cref="E:System.Windows.UIElement3D.DragOver" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-293">Identifies the <see cref="E:System.Windows.UIElement3D.DragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-294">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-294">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-295">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-295">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-296">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-296">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-297">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-297">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-298">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-298">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-299"><xref:System.Windows.UIElement3D.DragOverEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-299"><xref:System.Windows.UIElement3D.DragOverEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-300">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-300">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-301">輸入系統報告其下以這個項目作為置放目標的置放事件時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-301">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-302">本項目中建立的別名<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement3D.Drop?displayProperty=nameWithType>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-302">This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.Drop?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-303">附加至事件處理常式<xref:System.Windows.UIElement3D.Drop>事件會附加至基礎<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-303">Event handlers that are attached to the <xref:System.Windows.UIElement3D.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-304"><xref:System.Windows.UIElement3D.Drop> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-304"><xref:System.Windows.UIElement3D.Drop> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-305">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-305">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-306">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-306">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-307">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-307">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DropEvent>|  
|<span data-ttu-id="ba0f1-308">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-308">Routing strategy</span></span>|<span data-ttu-id="ba0f1-309">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-309">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-310">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-310">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="ba0f1-311">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewDrop>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-311">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDrop>.</span></span>  
  
-   <span data-ttu-id="ba0f1-312">覆寫<xref:System.Windows.UIElement3D.OnDrop%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-312">Override <xref:System.Windows.UIElement3D.OnDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
        <altmember cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-313">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-313">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-314">識別 <see cref="E:System.Windows.UIElement3D.Drop" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-314">Identifies the <see cref="E:System.Windows.UIElement3D.Drop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-315">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-315">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-316">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-316">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-317">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-317">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-318">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-318">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-319">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-319">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-320"><xref:System.Windows.UIElement3D.DropEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-320"><xref:System.Windows.UIElement3D.DropEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-321">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-321">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement3D.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-322">嘗試在項目上設定邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-322">Attempts to set the logical focus on this element.</span></span></summary>
        <returns><span data-ttu-id="ba0f1-323">如果邏輯與鍵盤焦點皆設定至此項目則為 <see langword="true" />，如果只有設定邏輯焦點則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-323"><see langword="true" /> if both logical and keyboard focus were set to this element; <see langword="false" /> if only logical focus was set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-324">若要可設定焦點，<xref:System.Windows.UIElement3D.Focusable%2A>並<xref:System.Windows.UIElement3D.IsEnabled%2A>兩者都必須是`true`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-324">To be focusable, <xref:System.Windows.UIElement3D.Focusable%2A> and <xref:System.Windows.UIElement3D.IsEnabled%2A> must both be `true`.</span></span>  
  
 <span data-ttu-id="ba0f1-325">即使項目是在特定樹狀結構中的可設定焦點且已啟用，事件處理，（例如針對複合控制項） 可能會回應預覽焦點事件可藉由不允許焦點，因此這個方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-325">Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.</span></span>  
  
 <span data-ttu-id="ba0f1-326">如果呼叫<xref:System.Windows.UIElement3D.Focus%2A>會傳回`true`，<xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>並<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>還有`true`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-326">If calling  <xref:System.Windows.UIElement3D.Focus%2A> returns `true`, <xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> are also `true`.</span></span>  
  
 <span data-ttu-id="ba0f1-327">如果相關的屬性尚未存在`true`，當您呼叫<xref:System.Windows.UIElement3D.Focus%2A>，以下列順序引發一或多個下列事件： <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>， <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> （來源為新的焦點目標）， <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>， <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>，<xref:System.Windows.UIElement3D.LostKeyboardFocus>， <xref:System.Windows.UIElement3D.GotKeyboardFocus> （來源為新的焦點目標）。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-327">If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement3D.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement3D.LostKeyboardFocus>, <xref:System.Windows.UIElement3D.GotKeyboardFocus> (source is the new focus target).</span></span>  
  
 <span data-ttu-id="ba0f1-328">為了讓這個呼叫才會成功，應用程式中的某個其他項目需要先前擁有焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-328">In order for this call to be successful, some other element in the application needed to have focus previously.</span></span>  
  
 <span data-ttu-id="ba0f1-329">焦點通常由兩個不同的概念︰ 鍵盤焦點和邏輯焦點，並不一定相同。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-329">Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</span></span> <span data-ttu-id="ba0f1-330">這個方法會設定邏輯焦點，而且也會嘗試將鍵盤焦點設定。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-330">This method sets the logical focus, and also attempts to set the keyboard focus.</span></span> <span data-ttu-id="ba0f1-331">沒有設定鍵盤焦點特別是，這是由使用者輸入的程式設計方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-331">There is no programmatic means to set keyboard focus specifically, this happens due to user input.</span></span> <span data-ttu-id="ba0f1-332">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-332">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-333"><xref:System.Windows.UIElement3D.Focus%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-333"><xref:System.Windows.UIElement3D.Focus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-334">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-334">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement3D.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-335">取得或設定元素是否能夠接收焦點的值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-335">Gets or sets a value that indicates whether the element can receive focus.</span></span></summary>
        <value><span data-ttu-id="ba0f1-336">如果這個項目為可設定焦點，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-336"><see langword="true" /> if the element is focusable; otherwise <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-337">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-337">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-338">只有具有焦點的項目收到鍵盤輸入。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-338">Only the focused element receives keyboard input.</span></span>  
  
 <span data-ttu-id="ba0f1-339"><xref:System.Windows.UIElement3D.Focusable%2A> 是[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]屬性存取子是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-339"><xref:System.Windows.UIElement3D.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="ba0f1-340">這個特定的相依性屬性很通常會有衍生的項目類別中以不同的方式設定其明顯的 「 預設 」 值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-340">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes.</span></span> <span data-ttu-id="ba0f1-341">這通常是在兩種方式之一：</span><span class="sxs-lookup"><span data-stu-id="ba0f1-341">This commonly occurs in one of two ways:</span></span>  
  
-   <span data-ttu-id="ba0f1-342">相依性屬性繼承自特定的衍生類別，但是，衍生類別覆寫相依性屬性中繼資料，並變更屬性的預設值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-342">The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</span></span>  
  
 <span data-ttu-id="ba0f1-343"><xref:System.Windows.UIElement3D.Focusable%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-343"><xref:System.Windows.UIElement3D.Focusable%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-344">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-344">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-345">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-345">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-346">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-346">Identifier field</span></span>|<xref:System.Windows.UIElement3D.FocusableProperty>|  
|<span data-ttu-id="ba0f1-347">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-347">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-348">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-348">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement3D.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-349">發生於 <see cref="P:System.Windows.UIElement3D.Focusable" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-349">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.Focusable" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-350">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-350">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-351"><xref:System.Windows.UIElement3D.FocusableChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-351"><xref:System.Windows.UIElement3D.FocusableChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-352">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-352">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.Focusable" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-353">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-353">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-354">識別 <see cref="P:System.Windows.UIElement3D.Focusable" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-354">Identifies the <see cref="P:System.Windows.UIElement3D.Focusable" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-355"><xref:System.Windows.UIElement3D.FocusableProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-355"><xref:System.Windows.UIElement3D.FocusableProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-356">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-356">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="member this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement3D.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-357">當在衍生類別中覆寫時，如果沒有視覺化父項目存在，則會為這個項目傳回替代的[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 父項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-357">When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</span></span></summary>
        <returns><span data-ttu-id="ba0f1-358">一個物件，如果衍生類別的實作有替代父代連接要報告。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-358">An object, if implementation of a derived class has an alternate parent connection to report.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-359">預設虛擬實作這個方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-359">The default virtual implementation of this method returns `null`.</span></span> <span data-ttu-id="ba0f1-360"><xref:System.Windows.FrameworkElement> 提供實用的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-360"><xref:System.Windows.FrameworkElement> provides a practical implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-361">替代的父代是用於事件的路由，在其中項目會建立替代父結構，讓它的事件會路由傳送分離至標準的父代，則視覺樹狀結構路由傳送的標準模式的方式的情況下則會在向下預覽路由策略。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-361">Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</span></span>  
  
 <span data-ttu-id="ba0f1-362"><xref:System.Windows.UIElement3D.GetUIParentCore%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-362"><xref:System.Windows.UIElement3D.GetUIParentCore%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-363">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-363">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-364">輸入系統報告其下牽涉此元素的拖放事件時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-364">Occurs when the input system reports an underlying drag-and-drop event that involves this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-365"><xref:System.Windows.UIElement3D.GiveFeedback>事件允許來源修改滑鼠指標外觀，以便將使用者的視覺化回饋提供拖放作業期間的拖曳事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-365">The <xref:System.Windows.UIElement3D.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span> <span data-ttu-id="ba0f1-366">視覺化回饋強調拖放作業正在處理中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-366">The visual feedback reinforces that a drag-and-drop operation is in process.</span></span>  
  
 <span data-ttu-id="ba0f1-367">本項目中建立的別名<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement3D.GiveFeedback>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-367">This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-368">附加至事件處理常式<xref:System.Windows.UIElement3D.GiveFeedback>事件會附加至基礎<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-368">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-369"><xref:System.Windows.UIElement3D.GiveFeedback> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-369"><xref:System.Windows.UIElement3D.GiveFeedback> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-370">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-370">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-371">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-371">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-372">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-372">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GiveFeedbackEvent>|  
|<span data-ttu-id="ba0f1-373">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-373">Routing strategy</span></span>|<span data-ttu-id="ba0f1-374">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-374">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-375">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-375">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="ba0f1-376">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewGiveFeedback>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-376">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewGiveFeedback>.</span></span>  
  
-   <span data-ttu-id="ba0f1-377">覆寫<xref:System.Windows.UIElement3D.OnGiveFeedback%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-377">Override <xref:System.Windows.UIElement3D.OnGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-378">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-378">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-379">識別 <see cref="E:System.Windows.UIElement3D.GiveFeedback" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-379">Identifies the <see cref="E:System.Windows.UIElement3D.GiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-380">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-380">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-381">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-381">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-382">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-382">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-383">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-383">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-384">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-384">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-385"><xref:System.Windows.UIElement3D.GiveFeedbackEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-385"><xref:System.Windows.UIElement3D.GiveFeedbackEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-386">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-386">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-387">此元素取得邏輯焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-387">Occurs when this element gets logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-388">如果使用的方法呼叫刻意強制焦點，但存在於不同範圍的上一個鍵盤焦點，則邏輯焦點與鍵盤焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-388">Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="ba0f1-389">在此案例中，鍵盤焦點會維持其所在和項目其中<xref:System.Windows.UIElement3D.Focus%2A>方法呼叫仍取得邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-389">In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement3D.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="ba0f1-390">此事件的更精確地解譯時，就是引發時間的值<xref:System.Windows.UIElement3D.IsFocused%2A>路由的項目屬性變更時，從`false`來`true`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-390">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement3D.IsFocused%2A> property of an element in the route is changed from `false` to `true`.</span></span>  
  
 <span data-ttu-id="ba0f1-391">此事件會使用事件反昇的路由，因為接收焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-391">Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="ba0f1-392">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際取得焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-392">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
 <span data-ttu-id="ba0f1-393"><xref:System.Windows.UIElement3D.GotFocus> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-393"><xref:System.Windows.UIElement3D.GotFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-394">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-394">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-395">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-395">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-396">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-396">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotFocusEvent>|  
|<span data-ttu-id="ba0f1-397">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-397">Routing strategy</span></span>|<span data-ttu-id="ba0f1-398">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-398">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-399">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-399">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="ba0f1-400">沒有任何對應的通道事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-400">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="ba0f1-401">覆寫<xref:System.Windows.UIElement3D.OnGotFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-401">Override <xref:System.Windows.UIElement3D.OnGotFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-402">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-402">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-403">識別 <see cref="E:System.Windows.UIElement3D.GotFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-403">Identifies the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-404">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-404">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-405">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-405">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-406">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-406">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-407">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-407">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-408">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-408">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-409"><xref:System.Windows.UIElement3D.GotFocusEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-409"><xref:System.Windows.UIElement3D.GotFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-410">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-410">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-411">鍵盤以此元素為焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-411">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-412"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> 是類似的事件追蹤會維護項目中; 的焦點狀態的屬性中的狀態變更<xref:System.Windows.UIElement3D.GotKeyboardFocus>的許多相同的情況下，就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-412"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement3D.GotKeyboardFocus> event is raised in many of the same circumstances.</span></span>  
  
 <span data-ttu-id="ba0f1-413">此事件會使用事件反昇的路由，因為具有焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-413">Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="ba0f1-414">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際擁有焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-414">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="ba0f1-415">本項目中建立的別名<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement3D.GotKeyboardFocus>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-415">This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-416">附加至事件處理常式<xref:System.Windows.UIElement3D.GotKeyboardFocus>事件會附加至基礎<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-416">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-417"><xref:System.Windows.UIElement3D.GotKeyboardFocus> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-417"><xref:System.Windows.UIElement3D.GotKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-418">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-418">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-419">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-419">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-420">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-420">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotKeyboardFocusEvent>|  
|<span data-ttu-id="ba0f1-421">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-421">Routing strategy</span></span>|<span data-ttu-id="ba0f1-422">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-422">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-423">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-423">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="ba0f1-424">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-424">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="ba0f1-425">覆寫<xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-425">Override <xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-426">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-426">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-427">識別 <see cref="E:System.Windows.UIElement3D.GotKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-427">Identifies the <see cref="E:System.Windows.UIElement3D.GotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-428">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-428">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-429">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-429">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-430">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-430">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-431">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-431">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-432">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-432">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-433"><xref:System.Windows.UIElement3D.GotKeyboardFocusEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-433"><xref:System.Windows.UIElement3D.GotKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-434">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-434">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-435">此元素擷取滑鼠時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-435">Occurs when this element captures the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-436">元素擷取滑鼠，當它收到滑鼠輸入，即使滑鼠指標位於其範圍外也一樣。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-436">When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</span></span> <span data-ttu-id="ba0f1-437">滑鼠通常只會在拖放作業期間擷取，直到擷取拖放作業的拖放動作，就會發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-437">The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="ba0f1-438">此事件會使用事件反昇的路由，因為已擷取的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-438">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="ba0f1-439">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>在事件資料，以判斷實際項目具有滑鼠擷取。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-439">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.</span></span>  
  
 <span data-ttu-id="ba0f1-440">本項目中建立的別名<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement3D.GotMouseCapture>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-440">This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event for  this class so that <xref:System.Windows.UIElement3D.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-441">附加至事件處理常式<xref:System.Windows.UIElement3D.GotMouseCapture>事件會附加至基礎<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-441">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-442"><xref:System.Windows.UIElement3D.GotMouseCapture> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-442"><xref:System.Windows.UIElement3D.GotMouseCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-443">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-443">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-444">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-444">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-445">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-445">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotMouseCaptureEvent>|  
|<span data-ttu-id="ba0f1-446">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-446">Routing strategy</span></span>|<span data-ttu-id="ba0f1-447">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-447">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-448">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-448">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="ba0f1-449">沒有任何已定義的對應通道事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-449">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="ba0f1-450">覆寫<xref:System.Windows.UIElement3D.OnGotMouseCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-450">Override <xref:System.Windows.UIElement3D.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureMouse" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-451">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-451">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-452">識別 <see cref="E:System.Windows.UIElement3D.GotMouseCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-452">Identifies the <see cref="E:System.Windows.UIElement3D.GotMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-453">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-453">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-454">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-454">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-455">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-455">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-456">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-456">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-457">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-457">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-458"><xref:System.Windows.UIElement3D.GotMouseCaptureEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-458"><xref:System.Windows.UIElement3D.GotMouseCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-459">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-459">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-460">此元素擷取手寫筆時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-460">Occurs when this element captures the stylus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-461">元素擷取手寫筆，當它收到手寫筆輸入，即使在指標位於其範圍外也一樣。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-461">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="ba0f1-462">手寫筆通常只會在拖放作業期間擷取，並且保持擷取，直到拖放作業的拖放動作發生為止。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-462">The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="ba0f1-463">此事件會使用事件反昇的路由，因為已擷取的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-463">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="ba0f1-464">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷已擷取的實際項目中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-464">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.</span></span>  
  
 <span data-ttu-id="ba0f1-465">此事件會建立這個類別的附加事件的別名，讓<xref:System.Windows.UIElement3D.GotStylusCapture>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-465">This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement3D.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-466">附加至事件處理常式<xref:System.Windows.UIElement3D.GotStylusCapture>事件會附加至基礎<xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-466">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-467"><xref:System.Windows.UIElement3D.GotStylusCapture> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-467"><xref:System.Windows.UIElement3D.GotStylusCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-468">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-468">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-469">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-469">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-470">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-470">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotStylusCaptureEvent>|  
|<span data-ttu-id="ba0f1-471">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-471">Routing strategy</span></span>|<span data-ttu-id="ba0f1-472">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-472">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-473">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-473">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-474">沒有任何已定義的對應通道事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-474">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="ba0f1-475">覆寫<xref:System.Windows.UIElement3D.OnGotStylusCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-475">Override <xref:System.Windows.UIElement3D.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-476">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-476">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-477">識別 <see cref="E:System.Windows.UIElement3D.GotStylusCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-477">Identifies the <see cref="E:System.Windows.UIElement3D.GotStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-478">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-478">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-479">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-479">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-480">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-480">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-481">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-481">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-482">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-482">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-483"><xref:System.Windows.UIElement3D.GotStylusCaptureEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-483"><xref:System.Windows.UIElement3D.GotStylusCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-484">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-484">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-485">當觸控擷取至這個項目時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-485">Occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-486">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-486">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-487">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-487">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotTouchCaptureEvent>|  
|<span data-ttu-id="ba0f1-488">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-488">Routing strategy</span></span>|<span data-ttu-id="ba0f1-489">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-489">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-490">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-490">Delegate</span></span>|<span data-ttu-id="ba0f1-491">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs></span><span class="sxs-lookup"><span data-stu-id="ba0f1-491"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs></span></span>|  
  
-   <span data-ttu-id="ba0f1-492">覆寫<xref:System.Windows.UIElement3D.OnGotTouchCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-492">Override <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-493">識別 <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-493">Identifies the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement3D.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-494">取得與此元素關聯的輸入繫結集合。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-494">Gets the collection of input bindings associated with this element.</span></span></summary>
        <value><span data-ttu-id="ba0f1-495">輸入繫結的集合。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-495">The collection of input bindings.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-496">輸入繫結支援命令與輸入裝置繫的結。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-496">Input bindings support the binding of commands to input devices.</span></span> <span data-ttu-id="ba0f1-497">比方說，<xref:System.Windows.Input.MouseBinding>實作輸入繫結包含滑鼠裝置特定的屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-497">For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.</span></span>  
  
 <span data-ttu-id="ba0f1-498">輸入繫結的集合會包含屬於此類型的輸入繫結以及宣告執行個體的輸入繫結。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-498">The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</span></span>  
  
 <span data-ttu-id="ba0f1-499">相關的屬性， <xref:System.Windows.UIElement3D.CommandBindings%2A>，維護命令繫結的集合。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-499">A related property, <xref:System.Windows.UIElement3D.CommandBindings%2A>, maintains a collection of command bindings.</span></span> <span data-ttu-id="ba0f1-500">這些不同於輸入繫結，因為它們代表的下一個層級的命令處理動作繫結至已知的命令所示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-500">These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</span></span>  
  
 <span data-ttu-id="ba0f1-501"><xref:System.Windows.UIElement3D.InputBindings%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-501"><xref:System.Windows.UIElement3D.InputBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-502">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-502">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="ba0f1-503">XAML 屬性項目用法</span><span class="sxs-lookup"><span data-stu-id="ba0f1-503">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="ba0f1-504">XAML 值</span><span class="sxs-lookup"><span data-stu-id="ba0f1-504">XAML Values</span></span>  
 <span data-ttu-id="ba0f1-505">*oneOrMoreInputBindings*</span><span class="sxs-lookup"><span data-stu-id="ba0f1-505">*oneOrMoreInputBindings*</span></span>  
 <span data-ttu-id="ba0f1-506">一或多個<xref:System.Windows.Input.InputBinding>項目 (通常<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>衍生的類別)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-506">One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes).</span></span> <span data-ttu-id="ba0f1-507">每一種應該要有<xref:System.Windows.Input.InputBinding.Command%2A>和<xref:System.Windows.Input.InputBinding.Gesture%2A>屬性設定。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-507">Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateModel">
      <MemberSignature Language="C#" Value="public void InvalidateModel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateModel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.InvalidateModel" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateModel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateModel();" />
      <MemberSignature Language="F#" Value="member this.InvalidateModel : unit -&gt; unit" Usage="uIElement3D.InvalidateModel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-508">讓代表項目的模型失效。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-508">Invalidates the model that represents the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-509">當您衍生的類別<xref:System.Windows.UIElement3D>類別，您可以使用這個方法並搭配<xref:System.Windows.UIElement3D.OnUpdateModel%2A>方法，以重新整理之項目的模型。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-509">When you derive a class from the <xref:System.Windows.UIElement3D> class, you can use this method together with the <xref:System.Windows.UIElement3D.OnUpdateModel%2A> method to refresh the model of the element.</span></span>  
  
 <span data-ttu-id="ba0f1-510">您只需要在進階案例中呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-510">You only need to call this method in advanced scenarios.</span></span> <span data-ttu-id="ba0f1-511">這類進階的案例之一是，如果衍生的類別有多個屬性會影響外觀，而且您想要一次更新基礎的模型。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-511">One such advanced scenario is if the derived class has multiple properties that affect the appearance, and you want to update the underlying model only once.</span></span>  
  
 <span data-ttu-id="ba0f1-512"><xref:System.Windows.UIElement3D.InvalidateModel%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-512"><xref:System.Windows.UIElement3D.InvalidateModel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-513">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-513">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba0f1-514">下列範例示範如何從衍生<xref:System.Windows.UIElement3D>類別來建立`Sphere`類別：</span><span class="sxs-lookup"><span data-stu-id="ba0f1-514">The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:</span></span>  
  
 [!code-csharp[Shapes#Sphere](~/samples/snippets/csharp/VS_Snippets_Wpf/Shapes/CSharp/Sphere.cs#sphere)]
 [!code-vb[Shapes#Sphere](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Shapes/visualbasic/sphere.vb#sphere)]  
  
 <span data-ttu-id="ba0f1-515">如需完整的範例，請參閱[UIElement3D 球體範例](https://go.microsoft.com/fwlink/?LinkID=160044)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-515">For the complete sample, see [UIElement3D Sphere Sample](https://go.microsoft.com/fwlink/?LinkID=160044).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement3D.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-516">取得或設定值，這個值表示 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中是否已啟用這個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-516">Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span></summary>
        <value><span data-ttu-id="ba0f1-517">如果啟用這個項目，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-517"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-518">預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-518">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-519">請注意這個屬性會受到特定類別的實作<xref:System.Windows.UIElement3D.IsEnabledCore%2A>上特定的項目，通常在執行階段。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-519">Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement3D.IsEnabledCore%2A> on particular elements, often at runtime.</span></span> <span data-ttu-id="ba0f1-520">因此，此處所列的預設值有時不是有效。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-520">Therefore, the default value listed here is sometimes not effective.</span></span> <span data-ttu-id="ba0f1-521">嘗試設定這個值會也可能會覆寫所傳回的值<xref:System.Windows.UIElement3D.IsEnabledCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-521">Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement3D.IsEnabledCore%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-522">未啟用的項目不會參與點擊測試或焦點，因此不可能會輸入事件的來源。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-522">Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</span></span>  
  
 <span data-ttu-id="ba0f1-523"><xref:System.Windows.UIElement3D.IsEnabled%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-523"><xref:System.Windows.UIElement3D.IsEnabled%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-524">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-524">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-525">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-525">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-526">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-526">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsEnabledProperty>|  
|<span data-ttu-id="ba0f1-527">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-527">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-528">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-528">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-529">當這個項目的 <see cref="P:System.Windows.UIElement3D.IsEnabled" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-529">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> property on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-530">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-530">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-531"><xref:System.Windows.UIElement3D.IsEnabledChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-531"><xref:System.Windows.UIElement3D.IsEnabledChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-532">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-532">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-533">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-533">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement3D.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-534">取得值，這個值會成為衍生類別中 <see cref="P:System.Windows.UIElement3D.IsEnabled" /> 的傳回值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-534">Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement3D.IsEnabled" /> in derived classes.</span></span></summary>
        <value><span data-ttu-id="ba0f1-535">如果啟用這個項目，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-535"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-536"><xref:System.Windows.UIElement3D.IsEnabledCore%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-536"><xref:System.Windows.UIElement3D.IsEnabledCore%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-537">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-537">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ba0f1-538">這個屬性的預設實作會快取的值，並也會計算這個項目的父項目是否已啟用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-538">The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</span></span> <span data-ttu-id="ba0f1-539">(如果未啟用父代，不能在實際有效地啟用的子項目[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]。)如果您選擇覆寫這個實作，請確定您呼叫以保留此行為的基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-539">(If the parent is not enabled, the child element cannot be effectively enabled in practical [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</span></span></para></block>
        <altmember cref="E:System.Windows.UIElement3D.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement3D.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-540">識別 <see cref="P:System.Windows.UIElement3D.IsEnabled" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-540">Identifies the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-541"><xref:System.Windows.UIElement3D.IsEnabledProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-541"><xref:System.Windows.UIElement3D.IsEnabledProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-542">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-542">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement3D.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-543">取得值，決定這個項目是否具有邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-543">Gets a value that determines whether this element has logical focus.</span></span></summary>
        <value><span data-ttu-id="ba0f1-544">如果這個項目具有邏輯焦點，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-544"><see langword="true" /> if this element has logical focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-545">如果某個應用程式多個焦點分區，例如功能表內容和應用程式的其餘部分之間，可能會與鍵盤焦點不同邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-545">Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</span></span> <span data-ttu-id="ba0f1-546">在此案例中，鍵盤焦點都只能有一個應用程式的 UI 項目上，不過，其他焦點分割中的特定項目可能仍會保有邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-546">In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</span></span> <span data-ttu-id="ba0f1-547">如需有關邏輯焦點的詳細資訊，請參閱 <<c0> [ 焦點概觀](~/docs/framework/wpf/advanced/focus-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-547">For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-548">您未設定這個屬性 （它是唯讀） 設定焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-548">You do not set focus by setting this property (it is read-only).</span></span> <span data-ttu-id="ba0f1-549">這個屬性的一般用法是做為相依性屬性<xref:System.Windows.Setter>或<xref:System.Windows.EventTrigger>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-549">The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>.</span></span> <span data-ttu-id="ba0f1-550">若要以程式設計方式設定焦點，呼叫<xref:System.Windows.UIElement3D.Focus%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-550">To set focus programmatically, call <xref:System.Windows.UIElement3D.Focus%2A>.</span></span> <span data-ttu-id="ba0f1-551">由使用者動作或控制項實作，可能會包含滑鼠捕捉的行為，也可以設定焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-551">Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</span></span>  
  
 <span data-ttu-id="ba0f1-552"><xref:System.Windows.UIElement3D.IsFocused%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-552"><xref:System.Windows.UIElement3D.IsFocused%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-553">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-553">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-554">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-554">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-555">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-555">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsFocusedProperty>|  
|<span data-ttu-id="ba0f1-556">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-556">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-557">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-557">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.Focusable" />
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-558">識別 <see cref="P:System.Windows.UIElement3D.IsFocused" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-558">Identifies the <see cref="P:System.Windows.UIElement3D.IsFocused" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-559"><xref:System.Windows.UIElement3D.IsFocusedProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-559"><xref:System.Windows.UIElement3D.IsFocusedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-560">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-560">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement3D.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-561">取得或設定宣告此元素是否可以從其呈現內容的某些部分傳回，作為點擊測試結果的值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-561">Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</span></span></summary>
        <value><span data-ttu-id="ba0f1-562">如果無法從至少一個點將這個項目作為點擊測試結果傳回，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-562"><see langword="true" /> if this element could be returned as a hit test result from at least one point; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-563">預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-563">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-564">點擊測試的項目邏輯樹狀結構中的相對位置會影響這個屬性的有效值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-564">The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</span></span> <span data-ttu-id="ba0f1-565">比方說，如果某個元素的子元素的項目，不進行點擊測試顯示，有效子系上的屬性值將會維持`false`，即使試圖將該值設為在本機。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-565">For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally.</span></span> <span data-ttu-id="ba0f1-566">基於這個理由，是很重要，您未設定<xref:System.Windows.UIElement3D.IsHitTestVisible%2A>至`false`複合控制項上，除非您不想要的任何輸入或點擊測試的控制項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-566">For this reason, it is important that you do not set <xref:System.Windows.UIElement3D.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control.</span></span> <span data-ttu-id="ba0f1-567">如需點擊測試的詳細資訊，請參閱[視覺分層中的點擊測試](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-567">For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).</span></span>  
  
 <span data-ttu-id="ba0f1-568"><xref:System.Windows.UIElement3D.IsHitTestVisible%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-568"><xref:System.Windows.UIElement3D.IsHitTestVisible%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-569">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-569">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-570">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-570">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-571">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-571">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsHitTestVisibleProperty>|  
|<span data-ttu-id="ba0f1-572">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-572">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-573">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-573">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-574">當這個項目的 <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> 相依性屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-574">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> dependency property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-575">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-575">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-576"><xref:System.Windows.UIElement3D.IsHitTestVisibleChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-576"><xref:System.Windows.UIElement3D.IsHitTestVisibleChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-577">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-577">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-578">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-578">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-579">識別 <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-579">Identifies the <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-580"><xref:System.Windows.UIElement3D.IsHitTestVisibleProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-580"><xref:System.Windows.UIElement3D.IsHitTestVisibleProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-581">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-581">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement3D.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-582">取得值，指出輸入法系統 (例如 [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]) 是否已為處理這個項目的輸入而啟用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-582">Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.</span></span></summary>
        <value><span data-ttu-id="ba0f1-583">如果輸入法為使用中，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-583"><see langword="true" /> if an input method is active; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-584">基礎附加屬性的預設值為 <see langword="true;" />，不過這會受到輸入法在執行階段的實際狀態所影響。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-584">The default value of the underlying attached property is <see langword="true;" /> however, this will be influenced by the actual state of input methods at runtime.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-585">這個屬性會傳回值，該附加屬性由<xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType>針對目前已啟用輸入法 （鍵盤、 語音、 其他輸入的裝置）。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-585">This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> for the currently enabled input methods (keyboard, speech, other input devices).</span></span>  
  
 <span data-ttu-id="ba0f1-586"><xref:System.Windows.UIElement3D.IsInputMethodEnabled%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-586"><xref:System.Windows.UIElement3D.IsInputMethodEnabled%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-587">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-587">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement3D.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-588">取得值，指出這個項目是否具有鍵盤焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-588">Gets a value indicating whether this element has keyboard focus.</span></span></summary>
        <value><span data-ttu-id="ba0f1-589">如果這個項目具有鍵盤焦點，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-589"><see langword="true" /> if this element has keyboard focus; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-590">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-590">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-591">決定的值，這個屬性的變更可能會伴隨著焦點相關的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-591">Changes to the determined value of this property may be accompanied by focus-related events.</span></span>  
  
 <span data-ttu-id="ba0f1-592"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> 和<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>常用類別事件處理常式內的其他輸入相關的事件，例如來判斷項目已經有鍵盤焦點，還是要決定當滑鼠事件和鍵盤事件一起出現。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-592"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
 <span data-ttu-id="ba0f1-593"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-593"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-594">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-594">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-595">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-595">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-596">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-596">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty>|  
|<span data-ttu-id="ba0f1-597">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-597">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-598">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-598">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotFocus" />
        <altmember cref="E:System.Windows.UIElement3D.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-599">當這個項目的 <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-599">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-600">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-600">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-601"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-601"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-602">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-602">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-603">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-603">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-604">識別 <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-604">Identifies the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-605"><xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-605"><xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-606">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-606">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement3D.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-607">取得值，表示鍵盤焦點是否在項目或其視覺化樹狀子項目內的任何位置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-607">Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</span></span></summary>
        <value><span data-ttu-id="ba0f1-608">如果鍵盤焦點在項目或其子項目上，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-608"><see langword="true" /> if keyboard focus is on the element or its child elements; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-609">這個屬性值的變更通常會引發<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>事件，除非在衍生的類別已覆寫<xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A>隱藏的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-609">Changes to the value of this property typically raise the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.</span></span>  
  
 <span data-ttu-id="ba0f1-610">您未設定此屬性直接，但您也可以呼叫的項目設定焦點<xref:System.Windows.UIElement3D.Focus%2A>，或藉由<xref:System.Windows.UIElement3D.MoveFocus%2A>要求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-610">You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement3D.Focus%2A>, or by making a <xref:System.Windows.UIElement3D.MoveFocus%2A> request.</span></span> <span data-ttu-id="ba0f1-611">這些方法會呼叫其中一種方法可能會變更這個屬性值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-611">Either of these method calls might change this property value.</span></span>  
  
 <span data-ttu-id="ba0f1-612"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> 和<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>通常用於類別事件處理常式內其他輸入相關的事件，例如來判斷項目已經有鍵盤焦點，還是要決定當滑鼠事件和鍵盤事件一起出現。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-612"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
 <span data-ttu-id="ba0f1-613"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-613"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-614">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-614">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-615">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-615">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-616">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-616">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty>|  
|<span data-ttu-id="ba0f1-617">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-617">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-618">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-618">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-619">當這個項目的 <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-619">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-620">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-620">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-621"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-621"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-622">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-622">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-623">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-623">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-624">識別 <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-624">Identifies the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-625"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-625"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-626">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-626">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement3D.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-627">取得值，指出是否將滑鼠擷取至這個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-627">Gets a value indicating whether the mouse is captured to this element.</span></span></summary>
        <value><span data-ttu-id="ba0f1-628">如果項目具有滑鼠擷取，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-628"><see langword="true" /> if the element has mouse capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-629">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-629">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-630">滑鼠捕捉狀態與相關程序中的拖放作業。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-630">Mouse capture state is related to in-process drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="ba0f1-631"><xref:System.Windows.UIElement3D.IsMouseCaptured%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-631"><xref:System.Windows.UIElement3D.IsMouseCaptured%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-632">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-632">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-633">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-633">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-634">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-634">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseCapturedProperty>|  
|<span data-ttu-id="ba0f1-635">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-635">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-636">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-636">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement3D.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement3D.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-637">當這個項目的 <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-637">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-638">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-638">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-639"><xref:System.Windows.UIElement3D.IsMouseCapturedChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-639"><xref:System.Windows.UIElement3D.IsMouseCapturedChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-640">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-640">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-641">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-641">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-642">識別 <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-642">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-643"><xref:System.Windows.UIElement3D.IsMouseCapturedProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-643"><xref:System.Windows.UIElement3D.IsMouseCapturedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-644">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-644">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement3D.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-645">取得值，這個值決定滑鼠擷取是由這個項目持有，還是由其視覺化樹狀結構中的子項目持有。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-645">Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="ba0f1-646">如果這個項目或包含的項目具有滑鼠擷取，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-646"><see langword="true" /> if this element or a contained element has mouse capture; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-647"><xref:System.Windows.UIElement3D.IsMouseCaptureWithin%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-647"><xref:System.Windows.UIElement3D.IsMouseCaptureWithin%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-648">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-648">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-649">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-649">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-650">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-650">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty>|  
|<span data-ttu-id="ba0f1-651">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-651">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-652">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-652">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement3D.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-653">當這個項目的 <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-653">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-654">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-654">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-655"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-655"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-656">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-656">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-657">識別 <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-657">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-658"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-658"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-659">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-659">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement3D.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-660">取得值，指出滑鼠指標位置是否與點擊測試結果對應，該結果會將複合項目納入考量。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-660">Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</span></span></summary>
        <value><span data-ttu-id="ba0f1-661">如果滑鼠指標位於與點擊測試相同的項目結果上方，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-661"><see langword="true" /> if the mouse pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-662">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-662">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-663">不同於<xref:System.Windows.UIElement3D.IsMouseOver%2A>，這個屬性才`true`如果滑鼠指標位在常值的項目-以用於點擊測試。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-663">Unlike <xref:System.Windows.UIElement3D.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element - as it is for a hit test.</span></span> <span data-ttu-id="ba0f1-664">如果滑鼠指標位於於子項目，這個屬性會是`false`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-664">If the mouse pointer is instead over a child element, this property will be `false`.</span></span> <span data-ttu-id="ba0f1-665">大部分的情況下，您不撰寫控制項，使用<xref:System.Windows.UIElement3D.IsMouseOver%2A>改。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-665">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement3D.IsMouseOver%2A> instead.</span></span>  
  
 <span data-ttu-id="ba0f1-666">如果將滑鼠擷取由這個項目，而且這個屬性為`true`次擷取的詳細資訊，此屬性會繼續傳回`true`直到遺失滑鼠捕捉並的指標不是透過其範圍。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-666">If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.</span></span>  
  
 <span data-ttu-id="ba0f1-667"><xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-667"><xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-668">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-668">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-669">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-669">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-670">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-670">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty>|  
|<span data-ttu-id="ba0f1-671">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-671">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-672">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-672">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement3D.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-673">當這個項目的 <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-673">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-674">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-674">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-675"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-675"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-676">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-676">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-677">識別 <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-677">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-678"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-678"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-679">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-679">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement3D.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-680">取得值，指出滑鼠指標是否在這個項目上方 (包括視覺化樹狀中的子項目)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-680">Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</span></span></summary>
        <value><span data-ttu-id="ba0f1-681">如果滑鼠指標位在這個項目或其子項目上方，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-681"><see langword="true" /> if mouse pointer is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-682">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-682">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-683">通常，控制項是複合，使得控制項 （視覺化樹狀結構） 內的各種項目都會報告包含控制項的滑鼠狀態。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-683">Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</span></span> <span data-ttu-id="ba0f1-684">例如，<xref:System.Windows.Controls.ListBox>樣式控制項將會報告<xref:System.Windows.UIElement3D.IsMouseOver%2A>作為`true`如果在滑鼠位於任何地方網格的幾何，包括任何<xref:System.Windows.Controls.ListBoxItem>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-684">For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement3D.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.</span></span>  
  
 <span data-ttu-id="ba0f1-685">雖然類似"IsMouseOverChanged 」 事件不存在，便會執行數個類似的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-685">Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</span></span> <span data-ttu-id="ba0f1-686">例如，您可以處理<xref:System.Windows.UIElement3D.MouseEnter>， <xref:System.Windows.UIElement3D.MouseMove>，和<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-686">For example, you can handle <xref:System.Windows.UIElement3D.MouseEnter>, <xref:System.Windows.UIElement3D.MouseMove>, and <xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>.</span></span>  
  
 <span data-ttu-id="ba0f1-687">如果此元素擷取滑鼠，這個屬性會保持`true`直到遺失滑鼠捕捉並滑鼠指標離開項目範圍。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-687">If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.</span></span>  
  
 <span data-ttu-id="ba0f1-688">有些控制項刻意擷取將滑鼠停在特定似乎未直接涉及滑鼠的動作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-688">Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</span></span> <span data-ttu-id="ba0f1-689">這可能會導致<xref:System.Windows.UIElement3D.IsMouseOver%2A>正在`true`即使滑鼠已移動不明顯。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-689">This can lead to <xref:System.Windows.UIElement3D.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.</span></span>  
  
 <span data-ttu-id="ba0f1-690"><xref:System.Windows.UIElement3D.IsMouseOver%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-690"><xref:System.Windows.UIElement3D.IsMouseOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-691">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-691">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-692">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-692">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-693">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-693">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseOverProperty>|  
|<span data-ttu-id="ba0f1-694">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-694">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-695">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-695">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-696">識別 <see cref="P:System.Windows.UIElement3D.IsMouseOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-696">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseOver" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-697"><xref:System.Windows.UIElement3D.IsMouseOverProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-697"><xref:System.Windows.UIElement3D.IsMouseOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-698">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-698">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement3D.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-699">取得值，指出這個項目是否擷取手寫筆。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-699">Gets a value indicating whether the stylus is captured by this element.</span></span></summary>
        <value><span data-ttu-id="ba0f1-700">如果項目具有手寫筆擷取，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-700"><see langword="true" /> if the element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-701">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-701">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-702">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-702">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-703">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-703">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-704"><xref:System.Windows.UIElement3D.IsStylusCaptured%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-704"><xref:System.Windows.UIElement3D.IsStylusCaptured%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-705">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-705">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-706">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-706">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-707">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-707">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusCapturedProperty>|  
|<span data-ttu-id="ba0f1-708">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-708">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-709">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-709">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement3D.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement3D.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-710">當這個項目的 <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-710">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-711">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-711">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-712"><xref:System.Windows.UIElement3D.IsStylusCapturedChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-712"><xref:System.Windows.UIElement3D.IsStylusCapturedChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-713">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-713">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-714">識別 <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-714">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-715"><xref:System.Windows.UIElement3D.IsStylusCapturedProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-715"><xref:System.Windows.UIElement3D.IsStylusCapturedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-716">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-716">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement3D.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-717">取得值，這個值決定手寫筆擷取是由這個項目持有，還是由項目範圍及其視覺化樹狀中的項目持有。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-717">Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</span></span></summary>
        <value><span data-ttu-id="ba0f1-718">如果這個項目或包含的項目具有手寫筆擷取，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-718"><see langword="true" /> if this element or a contained element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-719">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-719">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-720">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-720">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-721">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-721">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-722"><xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-722"><xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-723">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-723">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-724">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-724">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-725">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-725">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty>|  
|<span data-ttu-id="ba0f1-726">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-726">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-727">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-727">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement3D.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-728">當這個項目的 <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-728">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-729">這是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-729">This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-730"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-730"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-731">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-731">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-732">識別 <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-732">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-733"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-733"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-734">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-734">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement3D.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-735">取得值，指出手寫筆位置是否與點擊測試結果相對應，該結果會將複合項目納入考量。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-735">Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</span></span></summary>
        <value><span data-ttu-id="ba0f1-736">如果手寫筆指標的項目結果與點擊測試相同，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-736"><see langword="true" /> if the stylus pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-737">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-737">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-738">不同於<xref:System.Windows.UIElement3D.IsStylusOver%2A>，這個屬性才`true`如果手寫筆在元素上方。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-738">Unlike <xref:System.Windows.UIElement3D.IsStylusOver%2A>, this property is only `true` if the stylus is over the element.</span></span> <span data-ttu-id="ba0f1-739">如果手寫筆改為透過子項目或項目的更深入的複合 （視覺化樹狀結構） 的一部分的項目，這個屬性會是`false`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-739">If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.</span></span>  
  
 <span data-ttu-id="ba0f1-740">除非您知道控制項的複合 （比方說，您使用這個屬性的自訂控制項範本中的控制項，您所定義），這個屬性可能會傳回非預期的結果。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-740">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="ba0f1-741">大部分的情況下，您不撰寫控制項，使用<xref:System.Windows.UIElement3D.IsStylusOver%2A>改。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-741">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement3D.IsStylusOver%2A> instead.</span></span>  
  
 <span data-ttu-id="ba0f1-742">如果這個項目具有手寫筆擷取，而且這個屬性就`true`擷取時，這個屬性會保持`true`直到手寫筆擷取遺失，且其範圍不是手寫筆。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-742">If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.</span></span>  
  
 <span data-ttu-id="ba0f1-743">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-743">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-744">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-744">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-745"><xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-745"><xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-746">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-746">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-747">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-747">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-748">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-748">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty>|  
|<span data-ttu-id="ba0f1-749">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-749">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-750">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-750">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-751">當這個項目的 <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-751">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-752">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-752">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-753"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-753"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-754">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-754">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-755">識別 <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-755">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-756"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-756"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-757">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-757">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement3D.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-758">取得值，指出手寫筆游標是否位在這個項目上方 (包括視覺子項目)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-758">Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</span></span></summary>
        <value><span data-ttu-id="ba0f1-759">如果手寫筆游標位在項目或其子項目上方，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-759"><see langword="true" /> if stylus cursor is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="ba0f1-760">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-760">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-761">如果這個項目具有手寫筆擷取，這個屬性會繼續傳回`true`直到遺失手寫筆捕捉並指標超出其範圍。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-761">If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds.</span></span>  
  
 <span data-ttu-id="ba0f1-762">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-762">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-763">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-763">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-764"><xref:System.Windows.UIElement3D.IsStylusOver%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-764"><xref:System.Windows.UIElement3D.IsStylusOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-765">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-765">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-766">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-766">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-767">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-767">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusOverProperty>|  
|<span data-ttu-id="ba0f1-768">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-768">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-769">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-769">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-770">識別 <see cref="P:System.Windows.UIElement3D.IsStylusOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-770">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusOver" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-771"><xref:System.Windows.UIElement3D.IsStylusOverProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-771"><xref:System.Windows.UIElement3D.IsStylusOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-772">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-772">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement3D.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-773">取得值，表示這個項目在 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中是否可見。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-773">Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span></summary>
        <value><span data-ttu-id="ba0f1-774">如果項目可見，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-774"><see langword="true" /> if the element is visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-775">判斷<xref:System.Windows.UIElement3D.IsVisible%2A>值會將許多因素列入考量。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-775">Determination of the <xref:System.Windows.UIElement3D.IsVisible%2A> value takes many factors into account.</span></span> <span data-ttu-id="ba0f1-776">相反地， <xref:System.Windows.UIElement3D.Visibility%2A>，這是可設定的屬性，只表示可見或不可見，以程式設計的方式讓元素。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-776">In contrast, <xref:System.Windows.UIElement3D.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</span></span>  
  
 <span data-ttu-id="ba0f1-777">這個屬性值的變更通常會引發<xref:System.Windows.UIElement3D.IsVisibleChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-777">Changes to the value of this property will typically raise the <xref:System.Windows.UIElement3D.IsVisibleChanged> event.</span></span> <span data-ttu-id="ba0f1-778">沒有相符[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]"上 \* 」 類別處理覆寫方法，可讓某些衍生類別覆寫該行為，並處理事件，但仍無法直接與附加的類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-778">There is no matching [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] "On\*" class handling override method that would allow some derived class to override that behavior and handle the event, but a class handler could still be attached directly with <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-779">項目所在<xref:System.Windows.UIElement3D.IsVisible%2A>是`false`參與輸入的事件 （或命令），請執行不影響量值或排列傳遞的版面配置、 不是可設定焦點、 不是在索引標籤順序中，和將不會報告在點擊測試。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-779">Elements where <xref:System.Windows.UIElement3D.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</span></span> <span data-ttu-id="ba0f1-780">相較之下，項目所在<xref:System.Windows.UIElement3D.IsEnabled%2A>是`false`仍要參與的事件和命令，以及點擊測試，但也不是可設定焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-780">In contrast, elements where <xref:System.Windows.UIElement3D.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.</span></span>  
  
 <span data-ttu-id="ba0f1-781"><xref:System.Windows.UIElement3D.IsVisible%2A> 不是要使用的樣式觸發程序。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-781"><xref:System.Windows.UIElement3D.IsVisible%2A> is not intended to be used as a style trigger.</span></span> <span data-ttu-id="ba0f1-782">使用<xref:System.Windows.UIElement3D.IsVisible%2A>為樣式觸發程序可能會有無法預期的結果。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-782">Using <xref:System.Windows.UIElement3D.IsVisible%2A> as a style trigger might have unpredictable results.</span></span> <span data-ttu-id="ba0f1-783"><xref:System.Windows.UIElement3D.IsVisible%2A> 適用於較低層級的輸入實作所檢查的狀態。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-783"><xref:System.Windows.UIElement3D.IsVisible%2A> is intended for state checking by lower level input implementations.</span></span>  
  
 <span data-ttu-id="ba0f1-784"><xref:System.Windows.UIElement3D.IsVisible%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-784"><xref:System.Windows.UIElement3D.IsVisible%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-785">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-785">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-786">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-786">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-787">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-787">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsVisibleProperty>|  
|<span data-ttu-id="ba0f1-788">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-788">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-789">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-789">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-790">當這個項目的 <see cref="P:System.Windows.UIElement3D.IsVisible" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-790">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsVisible" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-791">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-791">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="ba0f1-792"><xref:System.Windows.UIElement3D.IsVisibleChanged> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-792"><xref:System.Windows.UIElement3D.IsVisibleChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-793">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-793">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-794">識別 <see cref="P:System.Windows.UIElement3D.IsVisible" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-794">Identifies the <see cref="P:System.Windows.UIElement3D.IsVisible" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-795"><xref:System.Windows.UIElement3D.IsVisibleProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-795"><xref:System.Windows.UIElement3D.IsVisibleProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-796">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-796">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-797">鍵盤以此元素為焦點且按下按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-797">Occurs when a key is pressed while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-798">本項目中建立的別名<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement3D.KeyDown>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-798">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.KeyDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-799">附加至事件處理常式<xref:System.Windows.UIElement3D.KeyDown>事件會附加至基礎<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-799">Event handlers that are attached to the <xref:System.Windows.UIElement3D.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-800"><xref:System.Windows.UIElement3D.KeyDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-800"><xref:System.Windows.UIElement3D.KeyDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-801">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-801">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-802">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-802">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-803">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-803">Identifier field</span></span>|<xref:System.Windows.UIElement3D.KeyDownEvent>|  
|<span data-ttu-id="ba0f1-804">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-804">Routing strategy</span></span>|<span data-ttu-id="ba0f1-805">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-805">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-806">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-806">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="ba0f1-807">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewKeyDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-807">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewKeyDown>.</span></span>  
  
-   <span data-ttu-id="ba0f1-808">覆寫<xref:System.Windows.UIElement3D.OnKeyDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-808">Override <xref:System.Windows.UIElement3D.OnKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyUp" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-809">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-809">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-810">識別 <see cref="E:System.Windows.UIElement3D.KeyDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-810">Identifies the <see cref="E:System.Windows.UIElement3D.KeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-811">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-811">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-812">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-812">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-813">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-813">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-814">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-814">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-815">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-815">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-816"><xref:System.Windows.UIElement3D.KeyDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-816"><xref:System.Windows.UIElement3D.KeyDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-817">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-817">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-818">鍵盤以此元素為焦點且放開按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-818">Occurs when a key is released while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-819">本項目中建立的別名<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement3D.KeyUp>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-819">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.KeyUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-820">附加至事件處理常式<xref:System.Windows.UIElement3D.KeyUp>事件會附加至基礎<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-820">Event handlers that are attached to the <xref:System.Windows.UIElement3D.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-821"><xref:System.Windows.UIElement3D.KeyUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-821"><xref:System.Windows.UIElement3D.KeyUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-822">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-822">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-823">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-823">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-824">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-824">Identifier field</span></span>|<xref:System.Windows.UIElement3D.KeyUpEvent>|  
|<span data-ttu-id="ba0f1-825">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-825">Routing strategy</span></span>|<span data-ttu-id="ba0f1-826">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-826">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-827">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-827">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="ba0f1-828">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewKeyUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-828">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewKeyUp>.</span></span>  
  
-   <span data-ttu-id="ba0f1-829">覆寫<xref:System.Windows.UIElement3D.OnKeyUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-829">Override <xref:System.Windows.UIElement3D.OnKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyDown" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-830">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-830">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-831">識別 <see cref="E:System.Windows.UIElement3D.KeyUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-831">Identifies the <see cref="E:System.Windows.UIElement3D.KeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-832">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-832">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-833">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-833">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-834">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-834">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-835">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-835">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-836">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-836">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-837"><xref:System.Windows.UIElement3D.KeyUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-837"><xref:System.Windows.UIElement3D.KeyUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-838">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-838">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-839">此元素失去邏輯焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-839">Occurs when this element loses logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-840">如果使用方法呼叫刻意強制焦點，但上一個鍵盤焦點存在於不同範圍中，則邏輯焦點會與鍵盤焦點不同。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-840">Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="ba0f1-841">在此案例中，鍵盤焦點會維持其所在位置和項目其中<xref:System.Windows.UIElement3D.Focus%2A>方法呼叫仍取得邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-841">In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement3D.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="ba0f1-842">此事件的更精確地解譯時，就是引發時間的值<xref:System.Windows.UIElement3D.IsFocused%2A>路由的項目屬性變更時從`true`至`false`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-842">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement3D.IsFocused%2A> property of an element in the route changes from `true` to `false`.</span></span>  
  
 <span data-ttu-id="ba0f1-843">因為此事件會使用事件反昇的路由，失去焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-843">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="ba0f1-844">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際取得焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-844">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
 <span data-ttu-id="ba0f1-845"><xref:System.Windows.UIElement3D.LostFocus> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-845"><xref:System.Windows.UIElement3D.LostFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-846">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-846">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-847">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-847">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-848">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-848">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostFocusEvent>|  
|<span data-ttu-id="ba0f1-849">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-849">Routing strategy</span></span>|<span data-ttu-id="ba0f1-850">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-850">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-851">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-851">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="ba0f1-852">沒有任何對應的通道事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-852">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="ba0f1-853">覆寫<xref:System.Windows.UIElement3D.OnLostFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-853">Override <xref:System.Windows.UIElement3D.OnLostFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-854">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-854">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-855">識別 <see cref="E:System.Windows.UIElement3D.LostFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-855">Identifies the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-856">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-856">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-857">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-857">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-858">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-858">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-859">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-859">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-860">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-860">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-861"><xref:System.Windows.UIElement3D.LostFocusEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-861"><xref:System.Windows.UIElement3D.LostFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-862">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-862">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-863">鍵盤不再以此元素為焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-863">Occurs when the keyboard is no longer focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-864">因為此事件會使用事件反昇的路由，失去焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-864">Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="ba0f1-865">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-865">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="ba0f1-866">此事件建立的別名<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.LostKeyboardFocus>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-866">This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-867">附加至事件處理常式<xref:System.Windows.UIElement3D.LostKeyboardFocus>事件會附加至基礎<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-867">Event handlers that are attached to the <xref:System.Windows.UIElement3D.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-868"><xref:System.Windows.UIElement3D.LostKeyboardFocus> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-868"><xref:System.Windows.UIElement3D.LostKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-869">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-869">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-870">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-870">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-871">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-871">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostKeyboardFocusEvent>|  
|<span data-ttu-id="ba0f1-872">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-872">Routing strategy</span></span>|<span data-ttu-id="ba0f1-873">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-873">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-874">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-874">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="ba0f1-875">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-875">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="ba0f1-876">覆寫<xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-876">Override <xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-877">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-877">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-878">識別 <see cref="E:System.Windows.UIElement3D.LostKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-878">Identifies the <see cref="E:System.Windows.UIElement3D.LostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-879">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-879">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-880">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-880">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-881">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-881">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-882">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-882">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-883">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-883">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-884"><xref:System.Windows.UIElement3D.LostKeyboardFocusEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-884"><xref:System.Windows.UIElement3D.LostKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-885">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-885">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-886">此元素失去滑鼠擷取時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-886">Occurs when this element loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-887">當項目捕捉到滑鼠時，它收到滑鼠輸入，即使在指標位於其範圍外。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-887">When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="ba0f1-888">是通常只有在捕捉滑鼠拖放作業。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-888">The mouse is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="ba0f1-889">因為此事件會使用事件反昇的路由，失去擷取的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-889">Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="ba0f1-890">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際遺失擷取的項目中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-890">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.</span></span>  
  
 <span data-ttu-id="ba0f1-891">此事件建立的別名<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.LostMouseCapture>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-891">This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-892">附加至事件處理常式<xref:System.Windows.UIElement3D.LostMouseCapture>事件會附加至基礎<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-892">Event handlers that are attached to the <xref:System.Windows.UIElement3D.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-893"><xref:System.Windows.UIElement3D.LostMouseCapture> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-893"><xref:System.Windows.UIElement3D.LostMouseCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-894">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-894">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-895">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-895">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-896">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-896">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostMouseCaptureEvent>|  
|<span data-ttu-id="ba0f1-897">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-897">Routing strategy</span></span>|<span data-ttu-id="ba0f1-898">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-898">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-899">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-899">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="ba0f1-900">沒有任何已定義的對應通道事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-900">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="ba0f1-901">覆寫<xref:System.Windows.UIElement3D.OnLostMouseCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-901">Override <xref:System.Windows.UIElement3D.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-902">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-902">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-903">識別 <see cref="E:System.Windows.UIElement3D.LostMouseCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-903">Identifies the <see cref="E:System.Windows.UIElement3D.LostMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-904">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-904">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-905">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-905">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-906">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-906">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-907">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-907">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-908">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-908">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-909"><xref:System.Windows.UIElement3D.LostMouseCaptureEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-909"><xref:System.Windows.UIElement3D.LostMouseCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-910">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-910">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-911">此元素失去手寫筆擷取時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-911">Occurs when this element loses stylus capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-912">元素擷取手寫筆，當它收到手寫筆輸入，即使在指標位於其範圍外也一樣。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-912">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="ba0f1-913">要捕捉手寫筆通常只會在拖放作業期間。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-913">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="ba0f1-914">因為此事件會使用事件反昇的路由，失去焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-914">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="ba0f1-915">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-915">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="ba0f1-916">此事件建立的別名<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.LostStylusCapture>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-916">This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-917">附加至事件處理常式<xref:System.Windows.UIElement3D.LostStylusCapture>事件會附加至基礎<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-917">Event handlers that are attached to the <xref:System.Windows.UIElement3D.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-918"><xref:System.Windows.UIElement3D.LostStylusCapture> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-918"><xref:System.Windows.UIElement3D.LostStylusCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-919">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-919">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-920">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-920">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-921">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-921">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostStylusCaptureEvent>|  
|<span data-ttu-id="ba0f1-922">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-922">Routing strategy</span></span>|<span data-ttu-id="ba0f1-923">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-923">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-924">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-924">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-925">沒有任何已定義的對應通道事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-925">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="ba0f1-926">覆寫<xref:System.Windows.UIElement3D.OnLostStylusCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-926">Override <xref:System.Windows.UIElement3D.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-927">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-927">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-928">識別 <see cref="E:System.Windows.UIElement3D.LostStylusCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-928">Identifies the <see cref="E:System.Windows.UIElement3D.LostStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-929">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-929">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-930">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-930">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-931">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-931">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-932">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-932">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-933">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-933">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-934"><xref:System.Windows.UIElement3D.LostStylusCaptureEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-934"><xref:System.Windows.UIElement3D.LostStylusCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-935">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-935">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-936">當這個項目失去觸控擷取時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-936">Occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-937">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-937">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-938">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-938">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostTouchCaptureEvent>|  
|<span data-ttu-id="ba0f1-939">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-939">Routing strategy</span></span>|<span data-ttu-id="ba0f1-940">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-940">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-941">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-941">Delegate</span></span>|<span data-ttu-id="ba0f1-942">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-942"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="ba0f1-943">覆寫<xref:System.Windows.UIElement3D.OnLostTouchCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-943">Override <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-944">識別 <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-944">Identifies the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-945">指標在此元素上方且按下任何滑鼠按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-945">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-946">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.MouseDown>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-946">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-947">附加至事件處理常式<xref:System.Windows.UIElement3D.MouseDown>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-947">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-948"><xref:System.Windows.UIElement3D.MouseDown>通常就會引發事件一起<xref:System.Windows.UIElement3D.MouseLeftButtonDown>或<xref:System.Windows.UIElement3D.MouseRightButtonDown>，對應到其中的兩個標準的滑鼠按鈕按下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-948">The <xref:System.Windows.UIElement3D.MouseDown> event is often raised together with either <xref:System.Windows.UIElement3D.MouseLeftButtonDown> or <xref:System.Windows.UIElement3D.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="ba0f1-949"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> 並<xref:System.Windows.UIElement3D.MouseRightButtonDown>也是路由的事件，但它們是直接路由的事件，並適當按鈕特有的事件引發時<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件到達事件路由中的此項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-949"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> and <xref:System.Windows.UIElement3D.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="ba0f1-950">請參閱備註<xref:System.Windows.UIElement3D.MouseLeftButtonDown>或<xref:System.Windows.UIElement3D.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-950">See Remarks for <xref:System.Windows.UIElement3D.MouseLeftButtonDown> or <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ba0f1-951">某些控制項可能會繼承類別處理滑鼠按鈕的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-951">Some controls might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="ba0f1-952">滑鼠左的按鈕向下事件是最可能的事件，讓控制項中的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-952">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="ba0f1-953">類別處理，通常會將標示基礎<xref:System.Windows.Input.Mouse>為已處理的類別事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-953">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="ba0f1-954">一旦被標示為已處理，通常無法引發另一個執行個體處理常式附加至該項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-954">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="ba0f1-955">也不通常會引發任何其他類別或執行個體處理常式附加至事件反昇方向朝向 UI 樹狀目錄中的根項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-955">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="ba0f1-956">您可以解決的問題，在上述的重要概述，並仍收到<xref:System.Windows.UIElement3D.MouseDown>滑鼠左的按鈕向下事件已處理就使用任一這些方案的類別衍生類別上的事件：</span><span class="sxs-lookup"><span data-stu-id="ba0f1-956">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement3D.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="ba0f1-957">附加的處理常式<xref:System.Windows.UIElement3D.PreviewMouseDown>未標示為已由控制項所處理的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-957">Attach handlers for the <xref:System.Windows.UIElement3D.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="ba0f1-958">請注意，因為這是預覽事件，路由從根目錄開始，並向下控制項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-958">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="ba0f1-959">藉由呼叫可循序註冊控制項上的處理常式<xref:System.Windows.UIElement3D.AddHandler%2A>，然後選擇 [簽章] 選項，可讓處理常式來接聽事件，即使它們已經標示為已處理路由的事件資料中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-959">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement3D.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
 <span data-ttu-id="ba0f1-960"><xref:System.Windows.UIElement3D.MouseDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-960"><xref:System.Windows.UIElement3D.MouseDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-961">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-961">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-962">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-962">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-963">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-963">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseDownEvent>|  
|<span data-ttu-id="ba0f1-964">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-964">Routing strategy</span></span>|<span data-ttu-id="ba0f1-965">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-965">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-966">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-966">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-967">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewMouseDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-967">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseDown>.</span></span>  
  
-   <span data-ttu-id="ba0f1-968">覆寫<xref:System.Windows.UIElement3D.OnMouseDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-968">Override <xref:System.Windows.UIElement3D.OnMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-969">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-969">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-970">識別 <see cref="E:System.Windows.UIElement3D.MouseDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-970">Identifies the <see cref="E:System.Windows.UIElement3D.MouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-971">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-971">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-972">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-972">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-973">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-973">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-974">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-974">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-975">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-975">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-976"><xref:System.Windows.UIElement3D.MouseDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-976"><xref:System.Windows.UIElement3D.MouseDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-977">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-977">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-978">滑鼠指標進入此元素的邊界時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-978">Occurs when the mouse pointer enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-979"><xref:System.Windows.UIElement3D.MouseEnter> 已[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)使用直接的事件處理路由策略。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-979"><xref:System.Windows.UIElement3D.MouseEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="ba0f1-980">直接路由的事件不會引發路由;相反地，它們會以處理相同的項目引發的狀況。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-980">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span>  
  
 <span data-ttu-id="ba0f1-981">雖然<xref:System.Windows.UIElement3D.MouseEnter>播放軌，當滑鼠指標進入範圍的項目，這個事件更多解譯為常值回報<xref:System.Windows.UIElement3D.IsMouseOver%2A>屬性值已從`false`至`true`這個項目上。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-981">Although <xref:System.Windows.UIElement3D.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsMouseOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="ba0f1-982">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.MouseEnter>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-982">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-983">附加至事件處理常式<xref:System.Windows.UIElement3D.MouseEnter>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-983">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-984"><xref:System.Windows.UIElement3D.MouseEnter> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-984"><xref:System.Windows.UIElement3D.MouseEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-985">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-985">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-986">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-986">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-987">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-987">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseEnterEvent>|  
|<span data-ttu-id="ba0f1-988">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-988">Routing strategy</span></span>|<span data-ttu-id="ba0f1-989">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-989">Direct</span></span>|  
|<span data-ttu-id="ba0f1-990">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-990">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="ba0f1-991">覆寫<xref:System.Windows.UIElement3D.OnMouseEnter%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-991">Override <xref:System.Windows.UIElement3D.OnMouseEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-992">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-992">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-993">識別 <see cref="E:System.Windows.UIElement3D.MouseEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-993">Identifies the <see cref="E:System.Windows.UIElement3D.MouseEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-994">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-994">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-995">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-995">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-996">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-996">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-997">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-997">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-998">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-998">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-999"><xref:System.Windows.UIElement3D.MouseEnterEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-999"><xref:System.Windows.UIElement3D.MouseEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1000">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1000">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1001">滑鼠指標離開此元素的邊界時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1001">Occurs when the mouse pointer leaves the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1002"><xref:System.Windows.UIElement3D.MouseLeave> 已[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)使用直接的事件處理路由策略。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1002"><xref:System.Windows.UIElement3D.MouseLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="ba0f1-1003">直接路由的事件不會引發路由;相反地，它們會以處理相同的項目引發的狀況。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1003">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span>  
  
 <span data-ttu-id="ba0f1-1004">雖然<xref:System.Windows.UIElement3D.MouseLeave>播放軌，當滑鼠離開項目，這個事件更多解譯為常值回報<xref:System.Windows.UIElement3D.IsMouseOver%2A>屬性值已從`true`至`false`這個項目上。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1004">Although <xref:System.Windows.UIElement3D.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="ba0f1-1005">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.MouseLeave>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1005">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-1006">附加至事件處理常式<xref:System.Windows.UIElement3D.MouseLeave>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1006">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-1007"><xref:System.Windows.UIElement3D.MouseLeave> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1007"><xref:System.Windows.UIElement3D.MouseLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1008">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1008">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-1009">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1009">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-1010">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1010">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseLeaveEvent>|  
|<span data-ttu-id="ba0f1-1011">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1011">Routing strategy</span></span>|<span data-ttu-id="ba0f1-1012">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1012">Direct</span></span>|  
|<span data-ttu-id="ba0f1-1013">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1013">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="ba0f1-1014">覆寫<xref:System.Windows.UIElement3D.OnMouseLeave%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1014">Override <xref:System.Windows.UIElement3D.OnMouseLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-1015">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1015">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1016">識別 <see cref="E:System.Windows.UIElement3D.MouseLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1016">Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1017">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1017">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-1018">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1018">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-1019">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1019">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-1020">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1020">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-1021">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1021">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1022"><xref:System.Windows.UIElement3D.MouseLeaveEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1022"><xref:System.Windows.UIElement3D.MouseLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1023">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1023">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1024">滑鼠指標在此元素上方且按下滑鼠左按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1024">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1025">雖然這[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)似乎會遵循事件反昇路由項目樹狀結構中，它實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1025">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-1026">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1026">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="ba0f1-1027">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1027">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="ba0f1-1028">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1028">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="ba0f1-1029">如果您將標示<xref:System.Windows.UIElement3D.MouseLeftButtonDown>處理，您基本上將標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1029">If you mark <xref:System.Windows.UIElement3D.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="ba0f1-1030">這可能包含的類別處理常式產生事件這類<xref:System.Windows.Controls.Control.MouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1030">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="ba0f1-1031">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1031">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="ba0f1-1032">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1032">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="ba0f1-1033">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1033">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ba0f1-1034">類別處理，通常會將標示基礎<xref:System.Windows.Input.Mouse>為已處理的類別事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1034">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="ba0f1-1035">一旦被標示為已處理，通常無法引發另一個執行個體處理常式附加至該項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1035">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="ba0f1-1036">也不通常會引發任何其他類別或執行個體處理常式附加至事件反昇方向朝向 UI 樹狀目錄中的根項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1036">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="ba0f1-1037">您可以解決的問題，在上述的重要概述，並仍收到<xref:System.Windows.UIElement3D.MouseLeftButtonDown>滑鼠左的按鈕向下事件已處理就使用任一這些方案的類別衍生類別上的事件：</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1037">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement3D.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="ba0f1-1038">附加的處理常式<xref:System.Windows.UIElement3D.PreviewMouseDown>未標示為已由控制項所處理的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1038">Attach handlers for the <xref:System.Windows.UIElement3D.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="ba0f1-1039">請注意，因為這是預覽事件，路由從根目錄開始，並向下控制項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1039">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="ba0f1-1040">藉由呼叫可循序註冊控制項上的處理常式<xref:System.Windows.UIElement3D.AddHandler%2A>，然後選擇 [簽章] 選項，可讓處理常式來接聽事件，即使它們已經標示為已處理路由的事件資料中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1040">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement3D.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
 <span data-ttu-id="ba0f1-1041"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1041"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1042">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1042">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-1043">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1043">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-1044">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1044">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent>|  
|<span data-ttu-id="ba0f1-1045">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1045">Routing strategy</span></span>|<span data-ttu-id="ba0f1-1046">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1046">Direct</span></span>|  
|<span data-ttu-id="ba0f1-1047">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1047">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-1048">覆寫<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1048">Override <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-1049">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1049">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1050">識別 <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1050">Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1051">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1051">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-1052">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1052">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-1053">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1053">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-1054">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1054">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-1055">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1055">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1056"><xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1056"><xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1057">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1057">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1058">滑鼠指標在此元素上方且放開滑鼠左按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1058">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1059">雖然這[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)似乎會遵循事件反昇路由項目樹狀結構中，它實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1059">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-1060">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1060">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="ba0f1-1061">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1061">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="ba0f1-1062">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1062">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="ba0f1-1063">如果您將標示<xref:System.Windows.UIElement3D.MouseLeftButtonUp>處理，您基本上將標示<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1063">If you mark <xref:System.Windows.UIElement3D.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="ba0f1-1064">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1064">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="ba0f1-1065">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1065">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="ba0f1-1066">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1066">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-1067"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1067"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1068">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1068">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-1069">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1069">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-1070">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1070">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent>|  
|<span data-ttu-id="ba0f1-1071">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1071">Routing strategy</span></span>|<span data-ttu-id="ba0f1-1072">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1072">Direct</span></span>|  
|<span data-ttu-id="ba0f1-1073">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1073">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-1074">覆寫<xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1074">Override <xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-1075">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1075">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1076">識別 <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1076">Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1077">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1077">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-1078">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1078">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-1079">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1079">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-1080">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1080">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-1081">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1081">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1082"><xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1082"><xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1083">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1083">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1084">滑鼠指標在此元素上方移動時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1084">Occurs when the mouse pointer moves while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1085">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.MouseMove>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1085">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-1086">附加至事件處理常式<xref:System.Windows.UIElement3D.MouseMove>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1086">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-1087"><xref:System.Windows.UIElement3D.MouseMove> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1087"><xref:System.Windows.UIElement3D.MouseMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1088">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1088">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-1089">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1089">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-1090">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1090">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseMoveEvent>|  
|<span data-ttu-id="ba0f1-1091">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1091">Routing strategy</span></span>|<span data-ttu-id="ba0f1-1092">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1092">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-1093">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1093">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="ba0f1-1094">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewMouseMove>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1094">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseMove>.</span></span>  
  
-   <span data-ttu-id="ba0f1-1095">覆寫<xref:System.Windows.UIElement3D.OnMouseMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1095">Override <xref:System.Windows.UIElement3D.OnMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement3D.MouseLeave" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-1096">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1096">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1097">識別 <see cref="E:System.Windows.UIElement3D.MouseMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1097">Identifies the <see cref="E:System.Windows.UIElement3D.MouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1098">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1098">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-1099">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1099">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-1100">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1100">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-1101">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1101">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-1102">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1102">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1103"><xref:System.Windows.UIElement3D.MouseMoveEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1103"><xref:System.Windows.UIElement3D.MouseMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1104">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1104">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1105">滑鼠指標在此元素上方且按下滑鼠右按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1105">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1106">雖然這[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)似乎會遵循事件反昇路由項目樹狀結構中，它實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1106">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-1107">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1107">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="ba0f1-1108">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1108">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="ba0f1-1109">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1109">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="ba0f1-1110">如果您將標示<xref:System.Windows.UIElement3D.MouseRightButtonDown>處理，您基本上將標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1110">If you mark <xref:System.Windows.UIElement3D.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="ba0f1-1111">這可能包含的類別處理常式產生事件這類<xref:System.Windows.Controls.Control.MouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1111">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="ba0f1-1112">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1112">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="ba0f1-1113">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1113">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="ba0f1-1114">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1114">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-1115">向右按鈕的滑鼠事件中通常會有原生處理的應用程式案例。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1115">Right button mouse events frequently have native handling in application scenarios.</span></span> <span data-ttu-id="ba0f1-1116">比方說，向下的滑鼠右按鈕可能會顯示內容功能表。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1116">For instance, a right mouse button down might display a context menu.</span></span> <span data-ttu-id="ba0f1-1117">請參閱[ContextMenu 概觀](~/docs/framework/wpf/controls/contextmenu-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1117">See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-1118"><xref:System.Windows.UIElement3D.MouseRightButtonDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1118"><xref:System.Windows.UIElement3D.MouseRightButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1119">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1119">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-1120">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1120">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-1121">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1121">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseRightButtonDownEvent>|  
|<span data-ttu-id="ba0f1-1122">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1122">Routing strategy</span></span>|<span data-ttu-id="ba0f1-1123">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1123">Direct</span></span>|  
|<span data-ttu-id="ba0f1-1124">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1124">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-1125">覆寫<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1125">Override <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-1126">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1126">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1127">識別 <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1127">Identifies the <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1128">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1128">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-1129">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1129">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-1130">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1130">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-1131">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1131">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-1132">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1132">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1133"><xref:System.Windows.UIElement3D.MouseRightButtonDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1133"><xref:System.Windows.UIElement3D.MouseRightButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1134">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1134">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1135">滑鼠指標在此元素上方且放開滑鼠右按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1135">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1136">雖然這[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)似乎會遵循事件反昇路由項目樹狀結構中，它實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1136">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-1137">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1137">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="ba0f1-1138">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1138">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="ba0f1-1139">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1139">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="ba0f1-1140">如果您將標示<xref:System.Windows.UIElement3D.MouseRightButtonUp>處理，您基本上將標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1140">If you mark <xref:System.Windows.UIElement3D.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="ba0f1-1141">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1141">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="ba0f1-1142">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1142">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="ba0f1-1143">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1143">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-1144"><xref:System.Windows.UIElement3D.MouseRightButtonUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1144"><xref:System.Windows.UIElement3D.MouseRightButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1145">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1145">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-1146">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1146">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-1147">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1147">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseRightButtonUpEvent>|  
|<span data-ttu-id="ba0f1-1148">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1148">Routing strategy</span></span>|<span data-ttu-id="ba0f1-1149">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1149">Direct</span></span>|  
|<span data-ttu-id="ba0f1-1150">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1150">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-1151">覆寫<xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1151">Override <xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-1152">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1152">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1153">識別 <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1153">Identifies the <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1154">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1154">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-1155">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1155">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-1156">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1156">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-1157">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1157">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-1158">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1158">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1159"><xref:System.Windows.UIElement3D.MouseRightButtonUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1159"><xref:System.Windows.UIElement3D.MouseRightButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1160">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1160">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1161">在此元素上方放開任何滑鼠按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1161">Occurs when any mouse button is released over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1162">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.MouseUp>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1162">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-1163">附加至事件處理常式<xref:System.Windows.UIElement3D.MouseUp>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1163">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-1164"><xref:System.Windows.UIElement3D.MouseUp>通常就會引發事件一起<xref:System.Windows.UIElement3D.MouseLeftButtonUp>或<xref:System.Windows.UIElement3D.MouseRightButtonUp>，對應至其中的兩個標準的滑鼠按鈕的版本。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1164">The <xref:System.Windows.UIElement3D.MouseUp> event is often raised together with either <xref:System.Windows.UIElement3D.MouseLeftButtonUp> or <xref:System.Windows.UIElement3D.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons.</span></span> <span data-ttu-id="ba0f1-1165"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> 並<xref:System.Windows.UIElement3D.MouseRightButtonUp>也是路由的事件，但它們是直接路由的事件，並適當按鈕特有的事件引發時<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件到達事件路由中的此項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1165"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> and <xref:System.Windows.UIElement3D.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="ba0f1-1166">請參閱備註<xref:System.Windows.UIElement3D.MouseLeftButtonUp>或<xref:System.Windows.UIElement3D.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1166">See Remarks for <xref:System.Windows.UIElement3D.MouseLeftButtonUp> or <xref:System.Windows.UIElement3D.MouseRightButtonUp>.</span></span>  
  
 <span data-ttu-id="ba0f1-1167"><xref:System.Windows.UIElement3D.MouseUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1167"><xref:System.Windows.UIElement3D.MouseUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1168">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1168">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-1169">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1169">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-1170">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1170">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseUpEvent>|  
|<span data-ttu-id="ba0f1-1171">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1171">Routing strategy</span></span>|<span data-ttu-id="ba0f1-1172">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1172">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-1173">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1173">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-1174">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewMouseUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1174">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseUp>.</span></span>  
  
-   <span data-ttu-id="ba0f1-1175">覆寫<xref:System.Windows.UIElement3D.OnMouseUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1175">Override <xref:System.Windows.UIElement3D.OnMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-1176">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1176">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1177">識別 <see cref="E:System.Windows.UIElement3D.MouseUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1177">Identifies the <see cref="E:System.Windows.UIElement3D.MouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1178">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1178">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-1179">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1179">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-1180">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1180">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-1181">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1181">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-1182">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1182">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1183"><xref:System.Windows.UIElement3D.MouseUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1183"><xref:System.Windows.UIElement3D.MouseUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1184">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1184">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1185">滑鼠指標在此元素上方且使用者滾動滑鼠滾輪時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1185">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1186">焦點或滑鼠捕捉會優先於滑鼠指標的所在;因此，如果您收到<xref:System.Windows.UIElement3D.MouseWheel>焦點或擷取的項目中的事件，將滑鼠指標可能實際上是透過另一個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1186">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement3D.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="ba0f1-1187">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.MouseWheel>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1187">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-1188">附加至事件處理常式<xref:System.Windows.UIElement3D.MouseWheel>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1188">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-1189"><xref:System.Windows.UIElement3D.MouseWheel> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1189"><xref:System.Windows.UIElement3D.MouseWheel> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1190">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1190">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-1191">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1191">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-1192">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1192">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseWheelEvent>|  
|<span data-ttu-id="ba0f1-1193">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1193">Routing strategy</span></span>|<span data-ttu-id="ba0f1-1194">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1194">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-1195">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1195">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="ba0f1-1196">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewMouseWheel>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1196">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseWheel>.</span></span>  
  
-   <span data-ttu-id="ba0f1-1197">覆寫<xref:System.Windows.UIElement3D.OnMouseWheel%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1197">Override <xref:System.Windows.UIElement3D.OnMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=159992"><span data-ttu-id="ba0f1-1198">在 3d 的範例中處理事件</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1198">Handling Events in 3-D Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-1199">識別 <see cref="E:System.Windows.UIElement3D.MouseWheel" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1199">Identifies the <see cref="E:System.Windows.UIElement3D.MouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1200">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1200">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-1201">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1201">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-1202">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1202">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-1203">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1203">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-1204">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1204">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1205"><xref:System.Windows.UIElement3D.MouseWheelEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1205"><xref:System.Windows.UIElement3D.MouseWheelEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1206">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1206">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement3D.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="ba0f1-1207">包含屬性的周遊要求，該屬性指出在現有定位順序中周遊的模式，或以視覺化方式移動的方向。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1207">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1208">嘗試將焦點從這個項目移至另一個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1208">Attempts to move focus from this element to another element.</span></span> <span data-ttu-id="ba0f1-1209">移動焦點的方向是由指引方向所指定，該指引方向是在這個項目之視覺化父代的組織內解譯。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1209">The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</span></span></summary>
        <returns><span data-ttu-id="ba0f1-1210">如果已執行要求的周遊則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1210"><see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1211">請確定您檢查傳回的值，這個方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1211">Make sure you check the return value of this method.</span></span> <span data-ttu-id="ba0f1-1212">傳回值為`false`如果周遊時碰到控制項的組合所定義的定位停駐點，並周遊要求並未要求要包裝，可能會傳回。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1212">A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</span></span>  
  
 <span data-ttu-id="ba0f1-1213"><xref:System.Windows.UIElement3D.MoveFocus%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1213"><xref:System.Windows.UIElement3D.MoveFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1214">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1214">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement3D.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1215">便捷鍵事件的事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1215">The event data to the access key event.</span></span> <span data-ttu-id="ba0f1-1216">該事件資料會報告叫用哪個便捷鍵，並指出控制這些事件之傳送的 <see cref="T:System.Windows.Input.AccessKeyManager" /> 物件，是否也會將這個便捷鍵引動過程傳送至其他項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1216">The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1217">當叫用對這個項目有意義的便捷鍵 (Access Key) 時，為其提供類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1217">Provides class handling for when an access key that is meaningful for this element is invoked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1218">在任何實際 AccessKey 事件<xref:System.Windows.UIElement3D>類別，或其他位置，您可以引發，或附加的處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1218">There is no actual AccessKey event in the <xref:System.Windows.UIElement3D> class, or elsewhere, which you can raise or attach handlers for.</span></span> <span data-ttu-id="ba0f1-1219">相反地，透過專用的管理員類別，產生事件<xref:System.Windows.Input.AccessKeyManager>後, 置處理所有的輸入来搜尋適用於整個輸入模型的存取金鑰。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1219">Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.</span></span>  
  
 <span data-ttu-id="ba0f1-1220"><xref:System.Windows.UIElement3D.OnAccessKey%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1220"><xref:System.Windows.UIElement3D.OnAccessKey%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1221">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1221">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ba0f1-1222">在這個方法的預設實作<see cref="T:System.Windows.UIElement3D" />設定鍵盤焦點設定至這個項目 (藉由呼叫<see cref="M:System.Windows.UIElement3D.Focus" />)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1222">The default implementation of this method in <see cref="T:System.Windows.UIElement3D" /> sets keyboard focus to this element (by calling <see cref="M:System.Windows.UIElement3D.Focus" />).</span></span> <span data-ttu-id="ba0f1-1223">如果它們是可設定焦點，因為它是針對協助工具案例的預期的行為，實作應永久保存此行為。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1223">Implementations should perpetuate this behavior if they are focusable, because it is an expected behavior for accessibility scenarios.</span></span> <span data-ttu-id="ba0f1-1224">請注意，基底實作不使用傳遞的事件資料執行任何動作，而且會引發任何進一步的事件;它只會將焦點。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1224">Note that the base implementation does nothing with the passed event data and raises no further event; it just sets the focus.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement3D.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-1225">為 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基礎結構傳回類別特定的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1225">Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span></summary>
        <returns><span data-ttu-id="ba0f1-1226">因型別而異的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1226">The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1227"><xref:System.Windows.UIElement3D.OnCreateAutomationPeer%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1227"><xref:System.Windows.UIElement3D.OnCreateAutomationPeer%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1228">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1228">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ba0f1-1229">此方法的實作會在呼叫特定的建構函式通常是<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />實作，並將它傳回為傳回值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1229">The implementation of this method is typically to call the constructor of a specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation, and return it as the return value.</span></span>  
  
<span data-ttu-id="ba0f1-1230">所有<see cref="T:System.Windows.UIElement3D" />衍生的類別應該實作這個方法，以提供自己的特定<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />實作[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]基礎結構。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1230">All <see cref="T:System.Windows.UIElement3D" /> derived classes should implement this method in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations to the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span> <span data-ttu-id="ba0f1-1231">如需實作此模式的詳細資訊，請參閱<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1231">For details on implementing this pattern, see <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1232">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1232">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1233">當未處理的 <see cref="E:System.Windows.DragDrop.DragEnter" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1233">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1234">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1234">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1235">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1235">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1236">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1236">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1237">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1237">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1238">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1238">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1239">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1239">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1240">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1240">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1241">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1241">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1242">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1242">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1243">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1243">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1244"><xref:System.Windows.UIElement3D.OnDragEnter%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1244"><xref:System.Windows.UIElement3D.OnDragEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1245">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1245">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1246">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1246">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1247">當未處理的 <see cref="E:System.Windows.DragDrop.DragLeave" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1247">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1248">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1248">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1249">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1249">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1250">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1250">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1251">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1251">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1252">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1252">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1253">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1253">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1254">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1254">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1255">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1255">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1256">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1256">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1257">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1257">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1258"><xref:System.Windows.UIElement3D.OnDragLeave%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1258"><xref:System.Windows.UIElement3D.OnDragLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1259">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1259">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1260">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1260">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1261">當未處理的 <see cref="E:System.Windows.DragDrop.DragOver" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1261">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1262">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1262">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1263">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1263">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1264">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1264">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1265">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1265">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1266">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1266">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1267">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1267">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1268">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1268">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1269">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1269">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1270">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1270">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1271">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1271">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1272"><xref:System.Windows.UIElement3D.OnDragOver%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1272"><xref:System.Windows.UIElement3D.OnDragOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1273">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1273">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1274">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1274">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1275">當未處理的 <see cref="E:System.Windows.DragDrop.Drop" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1275">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.Drop" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1276">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1276">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1277">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1277">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1278">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1278">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1279">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1279">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1280">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1280">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1281">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1281">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1282">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1282">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1283">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1283">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1284">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1284">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1285">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1285">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1286"><xref:System.Windows.UIElement3D.OnDrop%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1286"><xref:System.Windows.UIElement3D.OnDrop%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1287">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1287">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement3D.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1288">包含事件資料的 <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1288">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1289">當未處理的 <see cref="E:System.Windows.DragDrop.GiveFeedback" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1289">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1290">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1290">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1291">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1291">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1292">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1292">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1293">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1293">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1294">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1294">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1295">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1295">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1296">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1296">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1297">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1297">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1298">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1298">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1299">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1299">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1300"><xref:System.Windows.UIElement3D.OnGiveFeedback%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1300"><xref:System.Windows.UIElement3D.OnGiveFeedback%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1301">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1301">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1302">包含事件資料的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1302">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="ba0f1-1303">此事件資料必須包含 <see cref="E:System.Windows.UIElement3D.GotFocus" /> 事件的識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1303">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement3D.GotFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1304">使用所提供的事件資料引發 <see cref="E:System.Windows.UIElement3D.GotFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1304">Raises the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event by using the event data provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1305">此方法中，雖然是虛擬的沒有預設實作會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1305">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="ba0f1-1306">這在 \* 方法實作用來引發事件，這個相同的方法實作是在內部叫用來引發事件時<xref:System.Windows.UIElement3D.IsFocused%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1306">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement3D.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="ba0f1-1307"><xref:System.Windows.UIElement3D.OnGotFocus%2A>實作不同於其他[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]上 \* 只提供便利的方式來加入類別處理該事件的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1307">The <xref:System.Windows.UIElement3D.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 <span data-ttu-id="ba0f1-1308"><xref:System.Windows.UIElement3D.OnGotFocus%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1308"><xref:System.Windows.UIElement3D.OnGotFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1309">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1309">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ba0f1-1310">除非您有不會引發焦點事件變成故意或不尋常的需要，請確定您的實作會呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1310">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="ba0f1-1311">否則，<see cref="E:System.Windows.UIElement3D.GotFocus" />通常將焦點設定至這個項目的一般使用者作業期間將不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1311">Otherwise, the <see cref="E:System.Windows.UIElement3D.GotFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="ba0f1-1312">如果您不想要您可設定焦點的項目，您可以防止項目設定成為可設定焦點<see cref="P:System.Windows.UIElement3D.Focusable" />至<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1312">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement3D.Focusable" /> to <see langword="false" />.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement3D.Focusable" />
        <altmember cref="E:System.Windows.UIElement3D.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1313">包含事件資料的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1313">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1314">當未處理的 <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1314">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1315">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1315">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1316">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1316">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1317">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1317">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1318">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1318">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1319">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1319">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1320">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1320">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1321">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1321">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1322">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1322">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1323">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1323">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1324">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1324">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1325"><xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1325"><xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1326">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1326">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1327">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1327">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1328">當未處理的 <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1328">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1329">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1329">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1330">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1330">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1331">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1331">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1332">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1332">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1333">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1333">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1334">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1334">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1335">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1335">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1336">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1336">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1337">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1337">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1338">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1338">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1339"><xref:System.Windows.UIElement3D.OnGotMouseCapture%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1339"><xref:System.Windows.UIElement3D.OnGotMouseCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1340">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1340">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1341">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1341">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1342">當未處理的 <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1342">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1343">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1343">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1344">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1344">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1345">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1345">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1346">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1346">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1347">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1347">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1348">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1348">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1349">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1349">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1350">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1350">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1351">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1351">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1352">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1352">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1353"><xref:System.Windows.UIElement3D.OnGotStylusCapture%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1353"><xref:System.Windows.UIElement3D.OnGotStylusCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1354">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1354">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1355"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1355">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1356">提供 <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> 路由事件的類別處理，而這個事件會在擷取到對此項目的觸控時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1356">Provides class handling for the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1357"><xref:System.Windows.UIElement3D.OnGotTouchCapture%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1357">The <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1358">覆寫<xref:System.Windows.UIElement3D.OnGotTouchCapture%2A>衍生類別來處理在<xref:System.Windows.UIElement3D.GotTouchCapture>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1358">Override <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.GotTouchCapture> event.</span></span> <span data-ttu-id="ba0f1-1359">請務必呼叫基底類別<xref:System.Windows.UIElement3D.OnGotTouchCapture%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1359">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1360">包含事件資料的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1360">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1361">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1361">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="ba0f1-1362">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1362">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1363">這個虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>相依性屬性變更。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1363">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> dependency property changes.</span></span> <span data-ttu-id="ba0f1-1364">虛擬方法會先呼叫，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1364">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="ba0f1-1365">則<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1365">Then the <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="ba0f1-1366">請注意，<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1366">Notice that the  <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> event is not a routed event.</span></span> <span data-ttu-id="ba0f1-1367">因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1367">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="ba0f1-1368">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1368">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1369">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1369">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-1370">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1370">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="ba0f1-1371"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusedChanged%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1371"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusedChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1372">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1372">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1373"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1373">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1374">在此項目引發 <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged" /> 事件前叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1374">Invoked just before the <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged" /> event is raised by this element.</span></span> <span data-ttu-id="ba0f1-1375">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1375">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1376">這個虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1376">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="ba0f1-1377">虛擬方法會先呼叫，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1377">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="ba0f1-1378">則<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1378">Then the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="ba0f1-1379">請注意，<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1379">Notice that the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> event is not a routed event.</span></span> <span data-ttu-id="ba0f1-1380">因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1380">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="ba0f1-1381">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1381">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1382">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1382">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-1383">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1383">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="ba0f1-1384"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1384"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1385">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1385">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1386">包含事件資料的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1386">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1387">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement3D.IsMouseCapturedChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1387">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="ba0f1-1388">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1388">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1389">這個虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1389">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsMouseCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="ba0f1-1390">虛擬方法會先呼叫，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1390">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="ba0f1-1391">則<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1391">Then the <xref:System.Windows.UIElement3D.IsMouseCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="ba0f1-1392">請注意，<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1392">Notice that the <xref:System.Windows.UIElement3D.IsMouseCapturedChanged> event is not a routed event.</span></span> <span data-ttu-id="ba0f1-1393">因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1393">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="ba0f1-1394">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1394">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1395">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1395">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-1396">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1396">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="ba0f1-1397"><xref:System.Windows.UIElement3D.OnIsMouseCapturedChanged%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1397"><xref:System.Windows.UIElement3D.OnIsMouseCapturedChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1398">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1398">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1399"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1399">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1400">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1400">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="ba0f1-1401">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1401">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1402"><xref:System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1402"><xref:System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1403">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1403">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ba0f1-1404">這個虛擬方法時，會呼叫的值<see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" />相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1404">This virtual method is called when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> dependency property changes its value.</span></span> <span data-ttu-id="ba0f1-1405">虛擬方法會先呼叫，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1405">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="ba0f1-1406">則<see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" />與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1406">Then the <see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> event is raised with that same event data instance.</span></span> <span data-ttu-id="ba0f1-1407">請注意，事件不是路由的事件。因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1407">Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</span></span>  
  
<span data-ttu-id="ba0f1-1408">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1408">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1409">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1409">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-1410">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1410">You may call base either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1411">包含事件資料的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1411">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1412">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1412">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="ba0f1-1413">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1413">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1414">這個虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A>相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1414">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="ba0f1-1415">虛擬方法會先呼叫，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1415">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="ba0f1-1416">則<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1416">Then the <xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="ba0f1-1417">請注意，<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1417">Notice that the <xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> event is not a routed event.</span></span> <span data-ttu-id="ba0f1-1418">因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1418">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="ba0f1-1419">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1419">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1420">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1420">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-1421">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1421">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="ba0f1-1422"><xref:System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1422"><xref:System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1423">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1423">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1424"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1424">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1425">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement3D.IsStylusCapturedChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1425">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="ba0f1-1426">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1426">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1427">這個虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1427">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsStylusCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="ba0f1-1428">虛擬方法會先呼叫，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1428">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="ba0f1-1429">則<xref:System.Windows.UIElement3D.IsStylusCapturedChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1429">Then the <xref:System.Windows.UIElement3D.IsStylusCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="ba0f1-1430">請注意，事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1430">Notice that the event is not a routed event.</span></span> <span data-ttu-id="ba0f1-1431">因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1431">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="ba0f1-1432">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1432">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1433">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1433">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-1434">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1434">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="ba0f1-1435"><xref:System.Windows.UIElement3D.OnIsStylusCapturedChanged%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1435"><xref:System.Windows.UIElement3D.OnIsStylusCapturedChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1436">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1436">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1437">包含事件資料的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1437">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1438">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1438">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="ba0f1-1439">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1439">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1440">這個虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A>相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1440">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="ba0f1-1441">虛擬方法會先呼叫，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1441">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="ba0f1-1442">則<xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1442">Then the <xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="ba0f1-1443">請注意，事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1443">Notice that the event is not a routed event.</span></span> <span data-ttu-id="ba0f1-1444">因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1444">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="ba0f1-1445">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1445">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1446">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1446">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-1447">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1447">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="ba0f1-1448"><xref:System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1448"><xref:System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1449">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1449">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1450">包含事件資料的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1450">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1451">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1451">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="ba0f1-1452">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1452">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1453">這個虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A>相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1453">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="ba0f1-1454">虛擬方法會先呼叫，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1454">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="ba0f1-1455">則<xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1455">Then the <xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="ba0f1-1456">請注意，事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1456">Notice that the event is not a routed event.</span></span> <span data-ttu-id="ba0f1-1457">因此您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1457">Therefore you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="ba0f1-1458">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1458">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1459">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1459">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-1460">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1460">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="ba0f1-1461"><xref:System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1461"><xref:System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1462">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1462">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1463">包含事件資料的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1463">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1464">當未處理的 <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1464">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1465">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1465">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1466">按鍵輸入是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1466">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="ba0f1-1467">其他可依賴按鍵，例如，輸入和命令繫結的程式設計功能可能會處理按鍵之前它會公開為一般的按鍵輸入。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1467">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="ba0f1-1468">如果這些輸入系統功能將事件標示為已處理，然後<xref:System.Windows.UIElement3D.OnKeyDown%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1468">If these input system features mark the event as handled, then <xref:System.Windows.UIElement3D.OnKeyDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1469">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1469">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1470">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1470">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1471">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1471">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1472">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1472">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1473">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1473">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1474">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1474">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1475">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1475">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1476">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1476">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1477">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1477">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1478"><xref:System.Windows.UIElement3D.OnKeyDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1478"><xref:System.Windows.UIElement3D.OnKeyDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1479">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1479">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1480">包含事件資料的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1480">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1481">當未處理的 <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1481">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1482">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1482">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1483">按鍵輸入是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1483">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="ba0f1-1484">其他可依賴按鍵，例如，輸入和命令繫結的程式設計功能可能會處理按鍵之前它會公開為一般的按鍵輸入。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1484">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="ba0f1-1485">如果這些輸入系統功能將事件標示為已處理，然後<xref:System.Windows.UIElement3D.OnKeyUp%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1485">If these input system features mark the event as handled, then <xref:System.Windows.UIElement3D.OnKeyUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1486">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1486">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1487">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1487">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1488">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1488">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1489">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1489">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1490">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1490">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1491">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1491">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1492">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1492">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1493">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1493">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1494">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1494">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1495"><xref:System.Windows.UIElement3D.OnKeyUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1495"><xref:System.Windows.UIElement3D.OnKeyUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1496">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1496">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1497">包含事件資料的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1497">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="ba0f1-1498">此事件資料必須包含 <see cref="E:System.Windows.UIElement3D.LostFocus" /> 事件的識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1498">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement3D.LostFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1499">使用所提供的事件資料引發 <see cref="E:System.Windows.UIElement3D.LostFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1499">Raises the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event by using the event data that is provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1500">此方法中，雖然是虛擬的沒有預設實作會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1500">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="ba0f1-1501">這在 \* 方法實作用來引發事件，這個相同的方法實作是在內部叫用來引發事件時<xref:System.Windows.UIElement3D.IsFocused%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1501">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement3D.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="ba0f1-1502">這項實作不同於其他[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]上 \* 只提供便利的方式來加入類別處理該事件的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1502">This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 <span data-ttu-id="ba0f1-1503"><xref:System.Windows.UIElement3D.OnLostFocus%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1503"><xref:System.Windows.UIElement3D.OnLostFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1504">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1504">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ba0f1-1505">除非您有不會引發焦點事件變成故意或不尋常的需要，請確定您的實作會呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1505">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="ba0f1-1506">否則，<see cref="E:System.Windows.UIElement3D.LostFocus" />通常將焦點設定至這個項目的一般使用者作業期間將不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1506">Otherwise, the <see cref="E:System.Windows.UIElement3D.LostFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="ba0f1-1507">如果您不想要您可設定焦點的項目，您可以防止項目設定成為可設定焦點<see cref="P:System.Windows.UIElement3D.Focusable" />至<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1507">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement3D.Focusable" /> to <see langword="false" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1508">包含事件資料的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1508">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1509">當未處理的 <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1509">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1510">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1510">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1511">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1511">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1512">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1512">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1513">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1513">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1514">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1514">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1515">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1515">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1516">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1516">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1517">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1517">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1518">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1518">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1519">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1519">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1520"><xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1520"><xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1521">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1521">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1522">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1522">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1523">當未處理的 <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1523">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1524">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1524">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1525">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1525">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1526">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1526">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1527">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1527">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1528">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1528">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1529">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1529">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1530">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1530">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1531">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1531">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1532">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1532">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1533">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1533">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1534"><xref:System.Windows.UIElement3D.OnLostMouseCapture%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1534"><xref:System.Windows.UIElement3D.OnLostMouseCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1535">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1535">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1536">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1536">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1537">當未處理的 <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1537">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1538">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1538">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1539">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1539">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1540">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1540">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1541">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1541">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1542">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1542">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1543">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1543">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1544">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1544">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1545">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1545">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1546">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1546">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1547">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1547">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1548"><xref:System.Windows.UIElement3D.OnLostStylusCapture%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1548"><xref:System.Windows.UIElement3D.OnLostStylusCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1549">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1549">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1550"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1550">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1551">提供 <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> 路由事件的類別處理，而這個事件會在此項目失去觸控擷取時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1551">Provides class handling for the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1552"><xref:System.Windows.UIElement3D.OnLostTouchCapture%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1552">The <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1553">覆寫<xref:System.Windows.UIElement3D.OnLostTouchCapture%2A>衍生類別來處理在<xref:System.Windows.UIElement3D.LostTouchCapture>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1553">Override <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.LostTouchCapture> event.</span></span> <span data-ttu-id="ba0f1-1554">請務必呼叫基底類別<xref:System.Windows.UIElement3D.OnLostTouchCapture%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1554">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1555">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1555">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1556">此事件資料會報告有關按下的滑鼠按鈕以及已處理狀態的詳細資訊。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1556">This event data reports details about the mouse button that was pressed and the handled state.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1557">當未處理的 <see cref="E:System.Windows.Input.Mouse.MouseDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1557">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1558">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1558">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1559">滑鼠按鈕的動作也是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1559">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="ba0f1-1560">其他可依賴滑鼠按鈕的動作，例如輸入和命令繫結的程式設計功能可能會叫用動作的處理常式之前它會公開為一般的滑鼠按鈕動作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1560">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="ba0f1-1561">如果這些輸入系統功能 mark<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>為已處理的事件<xref:System.Windows.UIElement3D.OnMouseDown%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1561">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1562">如果您使用這個類別處理常式將事件標示為已處理時，可能會影響下列事件：<xref:System.Windows.UIElement3D.MouseLeftButtonDown>和<xref:System.Windows.UIElement3D.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1562">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.MouseLeftButtonDown> and <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span> <span data-ttu-id="ba0f1-1563">其中一個這些事件可能會發生在接收端的項目上時<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1563">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="ba0f1-1564">如果您將標示為已處理的類別中處理這個事件時，仍然會引發子;不過，它們會傳遞事件資料中的處理的狀態。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1564">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="ba0f1-1565">如果類別處理在處理事件，副的執行個體處理常式不會叫用除非您明確地使用<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有`handledEventsToo``true`才能附加處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1565">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="ba0f1-1566">類別處理常式也不會叫用除非那些類別處理常式向<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1566">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="ba0f1-1567">藉由處理<xref:System.Windows.UIElement3D.OnMouseDown%2A>，當其中隱含類別處理負責動作下的所有可能的滑鼠按鈕。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1567">By handling <xref:System.Windows.UIElement3D.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="ba0f1-1568">此行為可能會不必要的。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1568">This behavior might be unwanted.</span></span> <span data-ttu-id="ba0f1-1569">因此，小心時將事件標記為已處理的情況下，您在使用這個虛擬方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1569">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1570">每個特定按鈕的直接事件也有虛擬機器 \* 方法;請考慮是否覆寫這些特定按鈕的類別處理常式可能更適合。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1570">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="ba0f1-1571">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1571">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1572">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1572">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1573">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1573">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1574">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1574">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1575">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1575">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1576">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1576">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1577">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1577">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1578">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1578">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1579">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1579">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1580"><xref:System.Windows.UIElement3D.OnMouseDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1580"><xref:System.Windows.UIElement3D.OnMouseDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1581">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1581">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1582">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1582">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1583">當這個項目上引發未處理的 <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 附加事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1583">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element.</span></span> <span data-ttu-id="ba0f1-1584">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1584">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1585">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1585">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1586">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1586">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-1587">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1587">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="ba0f1-1588">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1588">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1589">在此情況下，符合的事件是路由的事件，提供直接的路由策略。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1589">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="ba0f1-1590">將事件標示為已處理時仍適用於防止一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1590">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1591"><xref:System.Windows.UIElement3D.OnMouseEnter%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1591"><xref:System.Windows.UIElement3D.OnMouseEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1592">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1592">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1593">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1593">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1594">當這個項目上引發未處理的 <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 附加事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1594">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element.</span></span> <span data-ttu-id="ba0f1-1595">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1595">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1596">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1596">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1597">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1597">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-1598">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1598">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="ba0f1-1599">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1599">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1600">在此情況下，符合的事件是路由的事件，提供直接的路由策略。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1600">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="ba0f1-1601">將事件標示為已處理時仍適用於防止一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1601">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1602"><xref:System.Windows.UIElement3D.OnMouseLeave%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1602"><xref:System.Windows.UIElement3D.OnMouseLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1603">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1603">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1604">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1604">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1605">事件資料會報告滑鼠左鍵已按下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1605">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1606">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> 路由事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1606">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event is raised on this element.</span></span> <span data-ttu-id="ba0f1-1607">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1607">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1608"><xref:System.Windows.UIElement3D.MouseLeftButtonDown>似乎事件反昇路由事件，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1608">The <xref:System.Windows.UIElement3D.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="ba0f1-1609"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 是路由傳送，泡泡圖的基礎事件和每個<xref:System.Windows.UIElement3D>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement3D.MouseLeftButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1609"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseLeftButtonDown>.</span></span> <span data-ttu-id="ba0f1-1610">雖然您可以將標記<xref:System.Windows.UIElement3D.MouseLeftButtonDown>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1610">Although you can mark the <xref:System.Windows.UIElement3D.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="ba0f1-1611">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1611">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1612">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1612">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="ba0f1-1613">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1613">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="ba0f1-1614">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1614">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ba0f1-1615">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1615">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1616">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1616">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="ba0f1-1617">不論您選擇呼叫的基底實作，取決於您的案例。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1617">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="ba0f1-1618">無法呼叫基底會停用該也預期要叫用的上階類別上的滑鼠事件的預設輸入的處理<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1618">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="ba0f1-1619">例如，您可以從衍生<xref:System.Windows.Controls.Button>，並覆寫<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>在您的衍生類別，而不需要呼叫基底實作中，不過，這會覆寫停用<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1619">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="ba0f1-1620"><xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1620"><xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1621">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1621">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1622">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1622">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1623">事件資料會報告已放開滑鼠左鍵。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1623">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1624">當未處理的 <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1624">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1625">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1625">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1626"><xref:System.Windows.UIElement3D.MouseLeftButtonUp>似乎事件反昇路由事件，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1626">The <xref:System.Windows.UIElement3D.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="ba0f1-1627"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 是路由傳送，泡泡圖的基礎事件和每個<xref:System.Windows.UIElement3D>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement3D.MouseLeftButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1627"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseLeftButtonUp>.</span></span> <span data-ttu-id="ba0f1-1628">雖然您可以將標記<xref:System.Windows.UIElement3D.MouseLeftButtonUp>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1628">Although you can mark the <xref:System.Windows.UIElement3D.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="ba0f1-1629">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1629">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1630">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1630">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="ba0f1-1631">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1631">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="ba0f1-1632">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1632">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ba0f1-1633">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫<xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1633">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1634"><xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1634"><xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1635">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1635">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1636">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1636">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1637">當未處理的 <see cref="E:System.Windows.Input.Mouse.MouseMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1637">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1638">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1638">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1639">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1639">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1640">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1640">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1641">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1641">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1642">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1642">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1643">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1643">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1644">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1644">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1645">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1645">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1646">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1646">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1647">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1647">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1648"><xref:System.Windows.UIElement3D.OnMouseMove%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1648"><xref:System.Windows.UIElement3D.OnMouseMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1649">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1649">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1650">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1650">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1651">事件資料會報告滑鼠右鍵已按下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1651">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1652">當未處理的 <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1652">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1653">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1653">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1654"><xref:System.Windows.UIElement3D.MouseRightButtonDown>似乎事件反昇路由事件，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1654">The <xref:System.Windows.UIElement3D.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="ba0f1-1655"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 是路由傳送，泡泡圖的基礎事件和每個<xref:System.Windows.UIElement3D>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement3D.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1655"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span> <span data-ttu-id="ba0f1-1656">雖然您可以將標記<xref:System.Windows.UIElement3D.MouseRightButtonDown>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1656">Although you can mark the <xref:System.Windows.UIElement3D.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="ba0f1-1657">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1657">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1658">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1658">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="ba0f1-1659">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1659">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="ba0f1-1660">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1660">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ba0f1-1661">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1661">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1662">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1662">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="ba0f1-1663">不論您選擇呼叫的基底實作，取決於您的案例。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1663">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="ba0f1-1664">無法呼叫基底會停用該也預期要叫用的上階類別上的滑鼠事件的預設輸入的處理<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1664">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="ba0f1-1665">例如，您可以從衍生<xref:System.Windows.Controls.Control>，並覆寫<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>在您的衍生類別，而不需要呼叫基底; 不過，此覆寫會停用內容功能表上的服務您的控制項，也就是組件的<xref:System.Windows.Controls.Control>預設行為。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1665">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 <span data-ttu-id="ba0f1-1666"><xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1666"><xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1667">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1667">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1668">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1668">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1669">事件資料會報告已放開滑鼠右鍵。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1669">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1670">當未處理的 <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1670">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1671">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1671">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1672"><xref:System.Windows.UIElement3D.MouseRightButtonUp>似乎事件反昇路由事件，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1672">The <xref:System.Windows.UIElement3D.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="ba0f1-1673"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 是路由傳送，泡泡圖的基礎事件和每個<xref:System.Windows.UIElement3D>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement3D.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1673"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseRightButtonUp>.</span></span> <span data-ttu-id="ba0f1-1674">雖然您可以將標記<xref:System.Windows.UIElement3D.MouseRightButtonUp>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1674">Although you can mark the <xref:System.Windows.UIElement3D.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="ba0f1-1675">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1675">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1676">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1676">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="ba0f1-1677">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1677">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="ba0f1-1678">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1678">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ba0f1-1679">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫<xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1679">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1680"><xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1680"><xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1681">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1681">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1682">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1682">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1683">事件資料會報告滑鼠按鈕已釋放。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1683">The event data reports that the mouse button was released.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1684">當未處理的 <see cref="E:System.Windows.Input.Mouse.MouseUp" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1684">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1685">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1685">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1686">滑鼠按鈕的動作也是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1686">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="ba0f1-1687">其他可依賴滑鼠按鈕的動作，例如輸入和命令繫結的程式設計功能可能會叫用動作的處理常式之前它會公開為一般的滑鼠按鈕動作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1687">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="ba0f1-1688">如果這些輸入系統功能 mark<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>為已處理的事件<xref:System.Windows.UIElement3D.OnMouseUp%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1688">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1689">如果您使用這個類別處理常式將事件標示為已處理時，可能會影響下列事件：<xref:System.Windows.UIElement3D.MouseLeftButtonUp>和<xref:System.Windows.UIElement3D.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1689">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.MouseLeftButtonUp> and <xref:System.Windows.UIElement3D.MouseRightButtonUp>.</span></span> <span data-ttu-id="ba0f1-1690">其中一個這些事件可能會接收的項目上引發時<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1690">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="ba0f1-1691">如果您將標示為已處理的類別中處理這個事件時，仍然會引發子;不過，它們會傳遞事件資料中的處理的狀態。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1691">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="ba0f1-1692">如果類別處理在處理事件，副的執行個體處理常式不會叫用除非您明確地使用<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有`handledEventsToo``true`才能附加處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1692">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="ba0f1-1693">類別處理常式也不會叫用除非那些類別處理常式向<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1693">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="ba0f1-1694">藉由處理<xref:System.Windows.UIElement3D.OnMouseUp%2A>，當其中隱含類別處理負責處理動作的所有可能的滑鼠按鈕。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1694">By handling <xref:System.Windows.UIElement3D.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="ba0f1-1695">此行為可能會不必要的。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1695">This behavior might be unwanted.</span></span> <span data-ttu-id="ba0f1-1696">因此，小心時將事件標記為已處理的情況下，您在使用這個虛擬方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1696">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1697">每個特定按鈕的直接事件也有虛擬機器 \* 方法;請考慮是否覆寫這些特定按鈕的類別處理常式可能更適合。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1697">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="ba0f1-1698">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1698">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1699">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1699">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1700">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1700">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1701">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1701">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1702">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1702">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1703">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1703">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1704">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1704">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1705">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1705">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1706">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1706">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1707"><xref:System.Windows.UIElement3D.OnMouseUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1707"><xref:System.Windows.UIElement3D.OnMouseUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1708">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1708">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement3D.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1709">包含事件資料的 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1709">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1710">當未處理的 <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1710">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1711">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1711">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1712">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1712">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1713">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1713">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1714">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1714">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1715">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1715">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1716">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1716">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1717">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1717">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1718">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1718">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1719">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1719">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1720">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1720">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1721"><xref:System.Windows.UIElement3D.OnMouseWheel%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1721"><xref:System.Windows.UIElement3D.OnMouseWheel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1722">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1722">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1723">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1723">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1724">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1724">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1725">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1725">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1726">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1726">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1727">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1727">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1728">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1728">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1729">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1729">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1730">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1730">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1731">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1731">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1732">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1732">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1733">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1733">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1734">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1734">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-1735">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1735">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1736"><xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1736"><xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1737">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1737">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1738">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1738">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1739">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1739">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1740">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1740">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1741">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1741">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1742">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1742">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1743">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1743">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1744">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1744">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1745">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1745">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1746">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1746">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1747">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1747">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1748">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1748">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1749">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1749">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-1750">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1750">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1751"><xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1751"><xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1752">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1752">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1753">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1753">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1754">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1754">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1755">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1755">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1756">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1756">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1757">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1757">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1758">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1758">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1759">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1759">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1760">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1760">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1761">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1761">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1762">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1762">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1763">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1763">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1764">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1764">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-1765">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1765">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1766"><xref:System.Windows.UIElement3D.OnPreviewDragOver%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1766"><xref:System.Windows.UIElement3D.OnPreviewDragOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1767">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1767">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1768">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1768">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1769">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewDrop" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1769">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1770">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1770">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1771">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1771">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1772">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1772">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1773">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1773">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1774">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1774">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1775">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1775">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1776">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1776">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1777">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1777">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1778">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1778">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1779">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1779">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-1780">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1780">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1781"><xref:System.Windows.UIElement3D.OnPreviewDrop%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1781"><xref:System.Windows.UIElement3D.OnPreviewDrop%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1782">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1782">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1783">包含事件資料的 <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1783">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1784">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1784">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1785">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1785">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1786">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1786">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1787">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1787">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1788">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1788">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1789">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1789">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1790">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1790">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1791">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1791">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1792">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1792">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1793">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1793">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1794">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1794">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-1795">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1795">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1796"><xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1796"><xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1797">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1797">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1798">包含事件資料的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1798">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1799">當未處理的 <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1799">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1800">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1800">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1801">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1801">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1802">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1802">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1803">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1803">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1804">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1804">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1805">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1805">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1806">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1806">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1807">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1807">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1808">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1808">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1809">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1809">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-1810">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1810">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1811"><xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1811"><xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1812">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1812">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1813">包含事件資料的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1813">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1814">當未處理的 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1814">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1815">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1815">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1816">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1816">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1817">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1817">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1818">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1818">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1819">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1819">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1820">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1820">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1821">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1821">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1822">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1822">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1823">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1823">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1824">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1824">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-1825">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1825">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1826"><xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1826"><xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1827">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1827">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1828">包含事件資料的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1828">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1829">當未處理的 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1829">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1830">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1830">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1831">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1831">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1832">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1832">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1833">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1833">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1834">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1834">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1835">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1835">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1836">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1836">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1837">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1837">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1838">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1838">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1839">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1839">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-1840">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1840">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1841"><xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1841"><xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1842">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1842">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1843">包含事件資料的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1843">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1844">當未處理的 <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1844">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1845">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1845">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1846">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1846">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1847">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1847">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1848">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1848">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1849">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1849">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1850">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1850">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1851">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1851">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1852">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1852">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1853">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1853">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1854">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1854">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-1855">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1855">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1856"><xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1856"><xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1857">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1857">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1858">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1858">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1859">事件資料會報告一個或多個滑鼠按鈕已按下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1859">The event data reports that one or more mouse buttons were pressed.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1860">當未處理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 附加路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1860">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1861">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1861">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1862">滑鼠按鈕的動作也是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1862">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="ba0f1-1863">其他可依賴滑鼠按鈕的動作，例如輸入和命令繫結的程式設計功能可能會叫用動作的處理常式之前它會公開為一般的滑鼠按鈕動作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1863">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="ba0f1-1864">如果這些輸入系統功能 mark<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>為已處理的事件<xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1864">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1865">如果您使用這個類別處理常式將事件標示為已處理時，可能會影響下列事件：<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>和<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1865">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="ba0f1-1866">其中一個這些事件可能會發生在接收端的項目上時<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1866">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="ba0f1-1867">如果您將標示為已處理的類別中處理這個事件時，仍然會引發子;不過，它們會傳遞事件資料中的處理的狀態。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1867">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="ba0f1-1868">如果類別處理在處理事件，副的執行個體處理常式不會叫用除非您明確地使用<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有`handledEventsToo``true`才能附加處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1868">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="ba0f1-1869">類別處理常式也不會叫用除非那些類別處理常式向<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1869">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="ba0f1-1870">藉由處理<xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>，當其中隱含類別處理負責動作下的所有可能的滑鼠按鈕。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1870">By handling <xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="ba0f1-1871">此行為可能會不必要的。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1871">This behavior might be unwanted.</span></span> <span data-ttu-id="ba0f1-1872">因此，小心時將事件標記為已處理的情況下，您在使用這個虛擬方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1872">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1873">每個特定按鈕的直接事件也有虛擬機器 \* 方法;請考慮是否覆寫這些特定按鈕的類別處理常式可能更適合。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1873">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="ba0f1-1874">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1874">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1875">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1875">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1876">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1876">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1877">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1877">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1878">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1878">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1879">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1879">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1880">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1880">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1881">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1881">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1882">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1882">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-1883">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1883">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1884"><xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1884"><xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1885">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1885">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1886">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1886">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1887">事件資料會報告滑鼠左鍵已按下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1887">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1888">當未處理的 <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1888">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1889">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1889">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1890"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>事件似乎旅遊通道的路由，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1890">The <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="ba0f1-1891"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 為基礎的事件通道路由傳送，且每個<xref:System.Windows.UIElement3D>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1891"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>.</span></span> <span data-ttu-id="ba0f1-1892">雖然您可以將標記<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1892">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="ba0f1-1893">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1893">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1894">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1894">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="ba0f1-1895">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1895">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="ba0f1-1896">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1896">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ba0f1-1897">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1897">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1898">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1898">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="ba0f1-1899">不論您選擇呼叫的基底實作，取決於您的案例。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1899">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="ba0f1-1900">無法呼叫基底會停用該也預期要叫用的上階類別上的滑鼠事件的預設輸入的處理<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1900">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="ba0f1-1901">例如，您可以從衍生<xref:System.Windows.Controls.Button>，並覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>在您的衍生類別，而不需要呼叫基底實作中，不過，這會覆寫停用<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1901">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="ba0f1-1902"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1902"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1903">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1903">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1904">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1904">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1905">事件資料會報告已放開滑鼠左鍵。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1905">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1906">當未處理的 <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1906">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1907">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1907">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1908"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>事件似乎旅遊通道的路由，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1908">The <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="ba0f1-1909"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 為基礎的事件通道路由傳送，且每個<xref:System.Windows.UIElement3D>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1909"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>.</span></span> <span data-ttu-id="ba0f1-1910">雖然您可以將標記<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1910">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="ba0f1-1911">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1911">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1912">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1912">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="ba0f1-1913">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1913">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="ba0f1-1914">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1914">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ba0f1-1915">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1915">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1916"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1916"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1917">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1917">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1918">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1918">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1919">當未處理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1919">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1920">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1920">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1921">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1921">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1922">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1922">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1923">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1923">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1924">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1924">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1925">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1925">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1926">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1926">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1927">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1927">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1928">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1928">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1929">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1929">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-1930">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1930">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1931"><xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1931"><xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1932">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1932">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1933">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1933">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1934">事件資料會報告滑鼠右鍵已按下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1934">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1935">當未處理的 <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1935">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1936">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1936">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1937"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>事件似乎旅遊通道的路由，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1937">The <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="ba0f1-1938"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 為基礎的事件通道路由傳送，且每個<xref:System.Windows.UIElement3D>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement3D.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1938"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span> <span data-ttu-id="ba0f1-1939">雖然您可以將標記<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1939">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="ba0f1-1940">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1940">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1941">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1941">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="ba0f1-1942">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1942">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="ba0f1-1943">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1943">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ba0f1-1944">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1944">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1945">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1945">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="ba0f1-1946">不論您選擇呼叫的基底實作，取決於您的案例。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1946">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="ba0f1-1947">無法呼叫基底會停用該也預期要叫用的上階類別上的滑鼠事件的預設輸入的處理<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1947">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="ba0f1-1948">例如，您可以從衍生<xref:System.Windows.Controls.Control>，並覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>在您的衍生類別，而不需要呼叫基底; 不過，此覆寫會停用內容功能表上的服務您的控制項，也就是組件的<xref:System.Windows.Controls.Control>預設行為。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1948">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 <span data-ttu-id="ba0f1-1949"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1949"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1950">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1950">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1951">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1951">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1952">事件資料會報告已放開滑鼠右鍵。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1952">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1953">當未處理的 <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1953">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1954">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1954">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1955"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>事件似乎旅遊通道的路由，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1955">The <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="ba0f1-1956"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 為基礎的事件通道路由傳送，且每個<xref:System.Windows.UIElement3D>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1956"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="ba0f1-1957">雖然您可以將標記<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1957">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="ba0f1-1958">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1958">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1959">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1959">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="ba0f1-1960">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1960">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="ba0f1-1961">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1961">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ba0f1-1962">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1962">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-1963"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1963"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1964">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1964">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1965">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1965">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="ba0f1-1966">事件資料會報告一個或多個滑鼠按鈕已釋放。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1966">The event data reports that one or more mouse buttons were released.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1967">當未處理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1967">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1968">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1968">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1969">滑鼠按鈕的動作也是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1969">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="ba0f1-1970">其他可依賴滑鼠按鈕的動作，例如輸入和命令繫結的程式設計功能可能會叫用動作的處理常式之前它會公開為一般的滑鼠按鈕動作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1970">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="ba0f1-1971">如果這些輸入系統功能 mark<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>為已處理的事件<xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1971">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-1972">如果您使用這個類別處理常式將事件標示為已處理時，可能會影響下列事件：<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>和<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1972">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="ba0f1-1973">其中一個這些事件可能會接收的項目上引發時<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1973">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="ba0f1-1974">如果您將標示為已處理的類別中處理這個事件時，仍然會引發子;不過，它們會傳遞事件資料中的處理的狀態。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1974">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="ba0f1-1975">如果類別處理在處理事件，副的執行個體處理常式不會叫用除非您明確地使用<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有`handledEventsToo``true`才能附加處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1975">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="ba0f1-1976">類別處理常式也不會叫用除非那些類別處理常式向<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1976">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="ba0f1-1977">藉由處理<xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>，當其中隱含類別處理負責處理動作的所有可能的滑鼠按鈕。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1977">By handling <xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="ba0f1-1978">此行為可能會不必要的。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1978">This behavior might be unwanted.</span></span> <span data-ttu-id="ba0f1-1979">因此，小心時將事件標記為已處理的情況下，您在使用這個虛擬方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1979">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1980">每個特定按鈕的直接事件也有虛擬機器 \* 方法;請考慮是否覆寫這些特定按鈕的類別處理常式可能更適合。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1980">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="ba0f1-1981">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1981">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1982">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1982">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1983">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1983">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1984">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1984">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1985">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1985">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-1986">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1986">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-1987">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1987">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-1988">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1988">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-1989">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1989">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-1990"><xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1990"><xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-1991">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1991">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-1992">包含事件資料的 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1992">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-1993">當未處理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1993">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-1994">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1994">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-1995">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1995">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-1996">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1996">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-1997">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1997">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-1998">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1998">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-1999">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-1999">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2000">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2000">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2001">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2001">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2002">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2002">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2003">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2003">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2004">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2004">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2005"><xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2005"><xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2006">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2006">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2007">包含事件資料的 <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2007">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2008">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2008">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2009">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2009">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2010">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2010">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2011">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2011">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2012">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2012">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2013">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2013">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2014">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2014">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2015">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2015">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2016">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2016">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2017">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2017">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2018">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2018">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2019">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2019">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2020"><xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2020"><xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2021">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2021">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2022">包含事件資料的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2022">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2023">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2023">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2024">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2024">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2025">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2025">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2026">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2026">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2027">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2027">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2028">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2028">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2029">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2029">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2030">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2030">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2031">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2031">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2032">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2032">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2033">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2033">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2034">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2034">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2035"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2035"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2036">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2036">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2037">包含事件資料的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2037">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2038">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2038">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2039">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2039">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2040">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2040">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2041">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2041">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2042">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2042">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2043">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2043">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2044">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2044">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2045">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2045">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2046">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2046">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2047">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2047">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2048">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2048">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2049">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2049">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2050"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2050"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2051">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2051">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2052">包含事件資料的 <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2052">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2053">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2053">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2054">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2054">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2055">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2055">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2056">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2056">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2057">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2057">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2058">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2058">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2059">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2059">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2060">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2060">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2061">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2061">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2062">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2062">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2063">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2063">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2064">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2064">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2065"><xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2065"><xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2066">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2066">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2067">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2067">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2068">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2068">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2069">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2069">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2070">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2070">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2071">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2071">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2072">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2072">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2073">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2073">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2074">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2074">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2075">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2075">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2076">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2076">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2077">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2077">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2078">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2078">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2079">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2079">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2080"><xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2080"><xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2081">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2081">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2082">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2082">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2083">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2083">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2084">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2084">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2085">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2085">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2086">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2086">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2087">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2087">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2088">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2088">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2089">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2089">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2090">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2090">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2091">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2091">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2092">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2092">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2093">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2093">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2094">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2094">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2095"><xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2095"><xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2096">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2096">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2097">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2097">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2098">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2098">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2099">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2099">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2100">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2100">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2101">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2101">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2102">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2102">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2103">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2103">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2104">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2104">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2105">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2105">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2106">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2106">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2107">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2107">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2108">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2108">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2109">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2109">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2110"><xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2110"><xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2111">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2111">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2112">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2112">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2113">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2113">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2114">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2114">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2115">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2115">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2116">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2116">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2117">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2117">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2118">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2118">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2119">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2119">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2120">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2120">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2121">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2121">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2122">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2122">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2123">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2123">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2124">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2124">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2125"><xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2125"><xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2126">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2126">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2127">包含事件資料的 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2127">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2128">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2128">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2129">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2129">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2130">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2130">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2131">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2131">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2132">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2132">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2133">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2133">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2134">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2134">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2135">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2135">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2136">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2136">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2137">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2137">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2138">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2138">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2139">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2139">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2140"><xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2140"><xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2141">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2141">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2142">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2142">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2143">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2143">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2144">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2144">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2145">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2145">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2146">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2146">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2147">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2147">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2148">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2148">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2149">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2149">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2150">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2150">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2151">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2151">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2152">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2152">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2153">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2153">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2154">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2154">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2155"><xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2155"><xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2156">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2156">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2157">包含事件資料的 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2157">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2158">當未處理的 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2158">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2159">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2159">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2160">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2160">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2161">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2161">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2162">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2162">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2163">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2163">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2164">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2164">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2165">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2165">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2166">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2166">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2167">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2167">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2168">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2168">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="ba0f1-2169">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2169">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2170"><xref:System.Windows.UIElement3D.OnPreviewTextInput%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2170"><xref:System.Windows.UIElement3D.OnPreviewTextInput%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2171">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2171">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement3D.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2172"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2172">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2173">提供 <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> 路由事件的類別處理，而這個事件會在觸控按下此項目時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2173">Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2174"><xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2174">The <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2175">覆寫<xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>衍生類別來處理在<xref:System.Windows.UIElement3D.PreviewTouchDown>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2175">Override <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.PreviewTouchDown> event.</span></span> <span data-ttu-id="ba0f1-2176">請務必呼叫基底類別<xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2176">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2177"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2177">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2178">提供 <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> 路由事件的類別處理，而這個事件會在觸控尚處於此項目內並有所移動時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2178">Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2179"><xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2179">The <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2180">覆寫<xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>衍生類別來處理在<xref:System.Windows.UIElement3D.PreviewTouchMove>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2180">Override <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.PreviewTouchMove> event.</span></span> <span data-ttu-id="ba0f1-2181">請務必呼叫基底類別<xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2181">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2182"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2182">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2183">提供 <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> 路由事件的類別處理，而這個事件會在觸控於此項目內放開時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2183">Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2184"><xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2184">The <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2185">覆寫<xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>衍生類別來處理在<xref:System.Windows.UIElement3D.PreviewTouchUp>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2185">Override <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.PreviewTouchUp> event.</span></span> <span data-ttu-id="ba0f1-2186">請務必呼叫基底類別<xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2186">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement3D.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2187">包含事件資料的 <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2187">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2188">當未處理的 <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2188">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2189">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2189">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2190">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2190">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2191">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2191">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2192">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2192">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2193">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2193">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2194">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2194">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2195">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2195">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2196">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2196">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2197">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2197">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2198">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2198">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2199"><xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2199"><xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2200">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2200">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement3D.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2201">包含事件資料的 <see cref="T:System.Windows.Input.QueryCursorEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2201">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2202">當未處理的 <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2202">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2203">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2203">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2204">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2204">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2205">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2205">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2206">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2206">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2207">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2207">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2208">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2208">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2209">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2209">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2210">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2210">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2211">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2211">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2212">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2212">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2213"><xref:System.Windows.UIElement3D.OnQueryCursor%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2213"><xref:System.Windows.UIElement3D.OnQueryCursor%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2214">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2214">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2215">包含事件資料的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2215">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2216">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2216">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2217">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2217">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2218">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2218">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2219">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2219">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2220">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2220">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2221">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2221">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2222">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2222">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2223">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2223">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2224">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2224">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2225">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2225">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2226">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2226">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2227"><xref:System.Windows.UIElement3D.OnStylusButtonDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2227"><xref:System.Windows.UIElement3D.OnStylusButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2228">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2228">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2229">包含事件資料的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2229">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2230">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2230">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2231">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2231">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2232">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2232">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2233">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2233">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2234">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2234">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2235">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2235">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2236">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2236">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2237">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2237">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2238">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2238">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2239">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2239">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2240">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2240">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2241"><xref:System.Windows.UIElement3D.OnStylusButtonUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2241"><xref:System.Windows.UIElement3D.OnStylusButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2242">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2242">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement3D.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2243">包含事件資料的 <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2243">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2244">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2244">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2245">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2245">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2246">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2246">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2247">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2247">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2248">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2248">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2249">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2249">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2250">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2250">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2251">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2251">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2252">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2252">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2253">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2253">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2254">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2254">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2255"><xref:System.Windows.UIElement3D.OnStylusDown%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2255"><xref:System.Windows.UIElement3D.OnStylusDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2256">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2256">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2257">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2257">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2258">當這個項目引發未處理的 <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 附加事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2258">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element.</span></span> <span data-ttu-id="ba0f1-2259">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2259">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2260">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2260">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2261">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2261">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-2262">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2262">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="ba0f1-2263">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2263">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2264">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2264">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2265">將事件標示為已處理時仍適用於防止一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2265">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2266"><xref:System.Windows.UIElement3D.OnStylusEnter%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2266"><xref:System.Windows.UIElement3D.OnStylusEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2267">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2267">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2268">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2268">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2269">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2269">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2270">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2270">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2271">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2271">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2272">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2272">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2273">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2273">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2274">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2274">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2275">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2275">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2276">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2276">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2277">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2277">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2278">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2278">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2279">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2279">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2280"><xref:System.Windows.UIElement3D.OnStylusInAirMove%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2280"><xref:System.Windows.UIElement3D.OnStylusInAirMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2281">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2281">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2282">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2282">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2283">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2283">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2284">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2284">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2285">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2285">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2286">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2286">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2287">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2287">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2288">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2288">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2289">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2289">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2290">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2290">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2291">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2291">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2292">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2292">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2293">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2293">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2294"><xref:System.Windows.UIElement3D.OnStylusInRange%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2294"><xref:System.Windows.UIElement3D.OnStylusInRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2295">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2295">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2296">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2296">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2297">當這個項目引發未處理的 <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 附加事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2297">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element.</span></span> <span data-ttu-id="ba0f1-2298">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2298">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2299">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2299">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2300">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2300">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="ba0f1-2301">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2301">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="ba0f1-2302">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2302">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2303">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2303">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2304">將事件標示為已處理時仍適用於防止一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2304">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="ba0f1-2305"><xref:System.Windows.UIElement3D.OnStylusLeave%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2305"><xref:System.Windows.UIElement3D.OnStylusLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2306">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2306">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2307">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2307">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2308">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2308">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2309">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2309">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2310">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2310">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2311">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2311">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2312">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2312">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2313">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2313">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2314">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2314">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2315">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2315">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2316">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2316">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2317">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2317">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2318">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2318">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2319"><xref:System.Windows.UIElement3D.OnStylusMove%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2319"><xref:System.Windows.UIElement3D.OnStylusMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2320">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2320">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2321">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2321">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2322">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2322">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2323">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2323">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2324">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2324">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2325">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2325">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2326">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2326">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2327">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2327">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2328">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2328">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2329">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2329">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2330">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2330">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2331">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2331">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2332">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2332">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2333"><xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2333"><xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2334">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2334">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement3D.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2335">包含事件資料的 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2335">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2336">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2336">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2337">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2337">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2338">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2338">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2339">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2339">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2340">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2340">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2341">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2341">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2342">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2342">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2343">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2343">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2344">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2344">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2345">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2345">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2346">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2346">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2347"><xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2347"><xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2348">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2348">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2349">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2349">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2350">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2350">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2351">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2351">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2352">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2352">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2353">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2353">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2354">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2354">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2355">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2355">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2356">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2356">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2357">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2357">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2358">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2358">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2359">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2359">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2360">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2360">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2361"><xref:System.Windows.UIElement3D.OnStylusUp%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2361"><xref:System.Windows.UIElement3D.OnStylusUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2362">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2362">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement3D.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2363">包含事件資料的 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2363">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2364">當未處理的 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2364">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="ba0f1-2365">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2365">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2366">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2366">This method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2367">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2367">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="ba0f1-2368">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2368">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="ba0f1-2369">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2369">In this case the matching event is a routed event.</span></span> <span data-ttu-id="ba0f1-2370">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2370">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="ba0f1-2371">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2371">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="ba0f1-2372">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2372">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="ba0f1-2373">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement3D>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2373">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="ba0f1-2374">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2374">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="ba0f1-2375"><xref:System.Windows.UIElement3D.OnTextInput%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2375"><xref:System.Windows.UIElement3D.OnTextInput%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2376">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2376">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2377"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2377">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2378">提供 <see cref="E:System.Windows.UIElement3D.TouchDown" /> 路由事件的類別處理，而這個事件會在觸控按下此項目內部時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2378">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event that occurs when a touch presses inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2379"><xref:System.Windows.UIElement3D.OnTouchDown%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2379">The <xref:System.Windows.UIElement3D.OnTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2380">覆寫<xref:System.Windows.UIElement3D.OnTouchDown%2A>衍生類別來處理在<xref:System.Windows.UIElement3D.TouchDown>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2380">Override <xref:System.Windows.UIElement3D.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchDown> event.</span></span> <span data-ttu-id="ba0f1-2381">請務必呼叫基底類別<xref:System.Windows.UIElement3D.OnTouchDown%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2381">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2382"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2382">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2383">提供 <see cref="E:System.Windows.UIElement3D.TouchEnter" /> 路由事件的類別處理，而這個事件會在觸控從外面移至此項目範圍內時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2383">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2384"><xref:System.Windows.UIElement3D.OnTouchEnter%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2384">The <xref:System.Windows.UIElement3D.OnTouchEnter%2A> method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2385">覆寫<xref:System.Windows.UIElement3D.OnTouchEnter%2A>衍生類別來處理在<xref:System.Windows.UIElement3D.TouchEnter>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2385">Override <xref:System.Windows.UIElement3D.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchEnter> event.</span></span> <span data-ttu-id="ba0f1-2386">請務必呼叫基底類別<xref:System.Windows.UIElement3D.OnTouchEnter%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2386">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnTouchEnter%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2387"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2387">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2388">提供 <see cref="E:System.Windows.UIElement3D.TouchLeave" /> 路由事件的類別處理，而這個事件會在觸控從此項目內部移至其範圍外時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2388">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2389"><xref:System.Windows.UIElement3D.OnTouchLeave%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2389">The <xref:System.Windows.UIElement3D.OnTouchLeave%2A> method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2390">覆寫<xref:System.Windows.UIElement3D.OnTouchLeave%2A>衍生類別來處理在<xref:System.Windows.UIElement3D.TouchLeave>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2390">Override <xref:System.Windows.UIElement3D.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchLeave> event.</span></span> <span data-ttu-id="ba0f1-2391">請務必呼叫基底類別<xref:System.Windows.UIElement3D.OnTouchLeave%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2391">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnTouchLeave%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2392"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2392">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2393">提供 <see cref="E:System.Windows.UIElement3D.TouchMove" /> 路由事件的類別處理，而這個事件會在觸控尚處於此項目內並有所移動時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2393">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2394"><xref:System.Windows.UIElement3D.OnTouchMove%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2394">The <xref:System.Windows.UIElement3D.OnTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2395">覆寫<xref:System.Windows.UIElement3D.OnTouchMove%2A>衍生類別來處理在<xref:System.Windows.UIElement3D.TouchMove>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2395">Override <xref:System.Windows.UIElement3D.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchMove> event.</span></span> <span data-ttu-id="ba0f1-2396">請務必呼叫基底類別<xref:System.Windows.UIElement3D.OnTouchMove%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2396">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-2397"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2397">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2398">提供 <see cref="E:System.Windows.UIElement3D.TouchUp" /> 路由事件的類別處理，而這個事件會在觸控於此項目內放開時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2398">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2399"><xref:System.Windows.UIElement3D.OnTouchUp%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2399">The <xref:System.Windows.UIElement3D.OnTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="ba0f1-2400">覆寫<xref:System.Windows.UIElement3D.OnTouchUp%2A>衍生類別來處理在<xref:System.Windows.UIElement3D.TouchUp>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2400">Override <xref:System.Windows.UIElement3D.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchUp> event.</span></span> <span data-ttu-id="ba0f1-2401">請務必呼叫基底類別<xref:System.Windows.UIElement3D.OnTouchUp%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2401">Be sure to call the base class' <xref:System.Windows.UIElement3D.OnTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUpdateModel">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdateModel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdateModel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnUpdateModel" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUpdateModel ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUpdateModel();" />
      <MemberSignature Language="F#" Value="abstract member OnUpdateModel : unit -&gt; unit&#xA;override this.OnUpdateModel : unit -&gt; unit" Usage="uIElement3D.OnUpdateModel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-2402">在衍生類別中覆寫時，參與的呈現作業。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2402">Participates in rendering operations when overridden in a derived class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2403">當您衍生的類別<xref:System.Windows.UIElement3D>類別，您可以使用這個方法並搭配<xref:System.Windows.UIElement3D.InvalidateModel%2A>方法，以重新整理之項目的模型。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2403">When you derive a class from the <xref:System.Windows.UIElement3D> class, you can use this method together with the <xref:System.Windows.UIElement3D.InvalidateModel%2A> method to refresh the model of the element.</span></span>  
  
 <span data-ttu-id="ba0f1-2404">您只需要在進階案例中呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2404">You only need to call this method in advanced scenarios.</span></span> <span data-ttu-id="ba0f1-2405">這類進階的案例之一是，如果衍生的類別有多個屬性會影響外觀，而且您想要一次更新基礎的模型。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2405">One such advanced scenario is if the derived class has multiple properties that affect the appearance, and you want to update the underlying model only once.</span></span> <span data-ttu-id="ba0f1-2406">內<xref:System.Windows.UIElement3D.OnUpdateModel%2A>方法則可以更新<xref:System.Windows.Media.Media3D.Visual3D.Visual3DModel%2A>屬性<xref:System.Windows.Media.Media3D.Visual3D>類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2406">Within the <xref:System.Windows.UIElement3D.OnUpdateModel%2A> method you could update the <xref:System.Windows.Media.Media3D.Visual3D.Visual3DModel%2A> property of the <xref:System.Windows.Media.Media3D.Visual3D> class.</span></span>  
  
 <span data-ttu-id="ba0f1-2407">這個方法有預設的實作<xref:System.Windows.UIElement3D>類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2407">This method has no default implementation in the <xref:System.Windows.UIElement3D> class.</span></span>  
  
 <span data-ttu-id="ba0f1-2408"><xref:System.Windows.UIElement3D.OnUpdateModel%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2408"><xref:System.Windows.UIElement3D.OnUpdateModel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2409">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2409">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba0f1-2410">下列範例示範如何從衍生<xref:System.Windows.UIElement3D>類別來建立`Sphere`類別：</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2410">The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:</span></span>  
  
 [!code-csharp[Shapes#Sphere](~/samples/snippets/csharp/VS_Snippets_Wpf/Shapes/CSharp/Sphere.cs#sphere)]
 [!code-vb[Shapes#Sphere](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Shapes/visualbasic/sphere.vb#sphere)]  
  
 <span data-ttu-id="ba0f1-2411">如需完整的範例，請參閱[UIElement3D 球體範例](https://go.microsoft.com/fwlink/?LinkID=160044)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2411">For the complete sample, see [UIElement3D Sphere Sample](https://go.microsoft.com/fwlink/?LinkID=160044).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement3D.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="ba0f1-2412">先前的父代。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2412">The previous parent.</span></span> <span data-ttu-id="ba0f1-2413">如果 <see cref="T:System.Windows.DependencyObject" /> 先前沒有父項目，這可提供為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2413">This may be provided as <see langword="null" /> if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2414">當這個 <see cref="T:System.Windows.UIElement3D" /> 的父項目報告其基礎視覺化父項目的變更時叫用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2414">Invoked when the parent element of this <see cref="T:System.Windows.UIElement3D" /> reports a change to its underlying visual parent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2415"><xref:System.Windows.UIElement3D.OnVisualParentChanged%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2415"><xref:System.Windows.UIElement3D.OnVisualParentChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2416">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2416">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ba0f1-2417">如果您覆寫這個方法，請務必呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2417">If you override this method, always call the base implementation.</span></span> <span data-ttu-id="ba0f1-2418">預設的基底實作會執行反向繼承的屬性狀態的某些內部維護。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2418">The default base implementation performs some internal maintenance of reverse-inherited property state.</span></span> <span data-ttu-id="ba0f1-2419">無法呼叫基底實作，會導致無效此狀態。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2419">Failing to call the base implementation will invalidate this state.</span></span>  
  
<span data-ttu-id="ba0f1-2420">這個方法會覆寫 <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2420">This method overrides <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span> <span data-ttu-id="ba0f1-2421"><see cref="T:System.Windows.FrameworkElement" /> 並<see cref="T:System.Windows.Window" />同時也會覆寫<see cref="T:System.Windows.UIElement3D" />實作<see cref="M:System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)" />，和<see cref="T:System.Windows.Window" />密封它。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2421"><see cref="T:System.Windows.FrameworkElement" /> and <see cref="T:System.Windows.Window" /> both also override the <see cref="T:System.Windows.UIElement3D" /> implementation of <see cref="M:System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)" />, and <see cref="T:System.Windows.Window" /> seals it.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement3D.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="ba0f1-2422">要求的焦點周遊方向。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2422">The direction of the requested focus traversal.</span></span></param>
        <summary><span data-ttu-id="ba0f1-2423">在衍生類別中覆寫時，傳回會針對指定之焦點周遊方向接收焦點的項目，而不用實際將焦點移至該項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2423">When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</span></span></summary>
        <returns><span data-ttu-id="ba0f1-2424">如果實際上有叫用 <see cref="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" />，就會取得焦點的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2424">The element that would have received focus if <see cref="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2425">這個類別中，這個方法的預設實作不完整，且一律會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2425">The default implementation of this method in this class is incomplete, and always returns `null`.</span></span>  
  
 <span data-ttu-id="ba0f1-2426"><xref:System.Windows.UIElement3D.PredictFocus%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2426"><xref:System.Windows.UIElement3D.PredictFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2427">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2427">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2428">輸入系統報告其下以此項目作為拖曳目標的拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2428">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2429">此事件建立的別名<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewDragEnter>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2429">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2430">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewDragEnter>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2430">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2431"><xref:System.Windows.UIElement3D.PreviewDragEnter> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2431"><xref:System.Windows.UIElement3D.PreviewDragEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2432">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2432">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2433">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2433">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2434">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2434">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDragEnterEvent>|  
|<span data-ttu-id="ba0f1-2435">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2435">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2436">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2436">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2437">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2437">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2438">對應的事件反昇事件是<xref:System.Windows.UIElement3D.DragEnter>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2438">The corresponding bubbling event is <xref:System.Windows.UIElement3D.DragEnter>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2439">覆寫<xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2439">Override <xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2440">識別 <see cref="E:System.Windows.UIElement3D.PreviewDragEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2440">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2441">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2441">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2442">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2442">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2443">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2443">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2444">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2444">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2445">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2445">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2446"><xref:System.Windows.UIElement3D.PreviewDragEnterEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2446"><xref:System.Windows.UIElement3D.PreviewDragEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2447">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2447">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2448">輸入系統報告其下以此項目作為拖曳來源的拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2448">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2449">此事件建立的別名<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewDragLeave>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2449">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2450">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewDragLeave>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2450">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2451"><xref:System.Windows.UIElement3D.PreviewDragLeave> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2451"><xref:System.Windows.UIElement3D.PreviewDragLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2452">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2452">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2453">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2453">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2454">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2454">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDragLeaveEvent>|  
|<span data-ttu-id="ba0f1-2455">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2455">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2456">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2456">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2457">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2457">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2458">對應的事件反昇事件是<xref:System.Windows.UIElement3D.DragLeave>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2458">The corresponding bubbling event is <xref:System.Windows.UIElement3D.DragLeave>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2459">覆寫<xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2459">Override <xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2460">識別 <see cref="E:System.Windows.UIElement3D.PreviewDragLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2460">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2461">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2461">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2462">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2462">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2463">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2463">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2464">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2464">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2465">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2465">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2466"><xref:System.Windows.UIElement3D.PreviewDragLeaveEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2466"><xref:System.Windows.UIElement3D.PreviewDragLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2467">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2467">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2468">在輸入系統回報以此項目作為可能置放目標的基礎拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2468">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2469">此事件建立的別名<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewDragOver>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2469">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2470">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewDragOver>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2470">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2471"><xref:System.Windows.UIElement3D.PreviewDragOver> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2471"><xref:System.Windows.UIElement3D.PreviewDragOver> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2472">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2472">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2473">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2473">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2474">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2474">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDragOverEvent>|  
|<span data-ttu-id="ba0f1-2475">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2475">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2476">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2476">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2477">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2477">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2478">對應的事件反昇事件是<xref:System.Windows.UIElement3D.DragOver>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2478">The corresponding bubbling event is <xref:System.Windows.UIElement3D.DragOver>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2479">覆寫<xref:System.Windows.UIElement3D.OnPreviewDragOver%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2479">Override <xref:System.Windows.UIElement3D.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2480">識別 <see cref="E:System.Windows.UIElement3D.PreviewDragOver" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2480">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2481">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2481">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2482">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2482">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2483">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2483">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2484">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2484">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2485">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2485">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2486"><xref:System.Windows.UIElement3D.PreviewDragOverEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2486"><xref:System.Windows.UIElement3D.PreviewDragOverEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2487">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2487">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2488">輸入系統報告其下以這個項目作為置放目標的置放事件時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2488">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2489">此事件建立的別名<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewDrop>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2489">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2490">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewDrop>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2490">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2491"><xref:System.Windows.UIElement3D.PreviewDrop> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2491"><xref:System.Windows.UIElement3D.PreviewDrop> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2492">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2492">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2493">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2493">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2494">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2494">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDropEvent>|  
|<span data-ttu-id="ba0f1-2495">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2495">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2496">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2496">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2497">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2497">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2498">對應的事件反昇事件是<xref:System.Windows.UIElement3D.Drop>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2498">The corresponding bubbling event is <xref:System.Windows.UIElement3D.Drop>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2499">覆寫<xref:System.Windows.UIElement3D.OnPreviewDrop%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2499">Override <xref:System.Windows.UIElement3D.OnPreviewDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2500">識別 <see cref="E:System.Windows.UIElement3D.PreviewDrop" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2500">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDrop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2501">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2501">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2502">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2502">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2503">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2503">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2504">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2504">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2505">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2505">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2506"><xref:System.Windows.UIElement3D.PreviewDropEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2506"><xref:System.Windows.UIElement3D.PreviewDropEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2507">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2507">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2508">拖放操作開始時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2508">Occurs when a drag-and-drop operation is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2509"><xref:System.Windows.UIElement3D.PreviewGiveFeedback>事件可讓使用者視覺化回饋提供拖放作業期間修改滑鼠指標的外觀的拖曳事件的來源。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2509">The <xref:System.Windows.UIElement3D.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="ba0f1-2510">此事件建立的別名<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewGiveFeedback>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2510">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2511">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewGiveFeedback>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2511">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2512"><xref:System.Windows.UIElement3D.PreviewGiveFeedback> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2512"><xref:System.Windows.UIElement3D.PreviewGiveFeedback> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2513">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2513">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2514">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2514">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2515">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2515">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent>|  
|<span data-ttu-id="ba0f1-2516">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2516">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2517">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2517">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2518">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2518">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2519">對應的事件反昇事件是<xref:System.Windows.UIElement3D.GiveFeedback>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2519">The corresponding bubbling event is <xref:System.Windows.UIElement3D.GiveFeedback>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2520">覆寫<xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2520">Override <xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2521">識別 <see cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2521">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2522">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2522">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2523">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2523">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2524">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2524">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2525">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2525">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2526">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2526">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2527"><xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2527"><xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2528">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2528">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2529">鍵盤以此元素為焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2529">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2530">這個事件會使用通道路由，因為具有焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2530">Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="ba0f1-2531">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際擁有焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2531">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="ba0f1-2532">此事件建立的別名<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2532">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2533">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>事件會附加至基礎<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2533">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2534"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2534"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2535">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2535">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2536">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2536">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2537">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2537">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="ba0f1-2538">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2538">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2539">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2539">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2540">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2540">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2541">對應的事件反昇事件是<xref:System.Windows.UIElement3D.GotKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2541">The corresponding bubbling event is <xref:System.Windows.UIElement3D.GotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2542">覆寫<xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2542">Override <xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2543">識別 <see cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2543">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2544">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2544">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2545">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2545">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2546">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2546">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2547">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2547">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2548">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2548">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2549"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2549"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2550">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2550">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2551">鍵盤以此元素為焦點且按下按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2551">Occurs when a key is pressed while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2552">索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2552">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="ba0f1-2553">此事件建立的別名<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewKeyDown>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2553">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2554">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewKeyDown>事件會附加至基礎<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2554">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2555"><xref:System.Windows.UIElement3D.PreviewKeyDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2555"><xref:System.Windows.UIElement3D.PreviewKeyDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2556">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2556">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2557">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2557">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2558">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2558">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewKeyDownEvent>|  
|<span data-ttu-id="ba0f1-2559">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2559">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2560">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2560">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2561">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2561">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2562">對應的事件反昇事件是<xref:System.Windows.UIElement3D.KeyDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2562">The corresponding bubbling event is <xref:System.Windows.UIElement3D.KeyDown>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2563">覆寫<xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2563">Override <xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2564">識別 <see cref="E:System.Windows.UIElement3D.PreviewKeyDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2564">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewKeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2565">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2565">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2566">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2566">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2567">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2567">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2568">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2568">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2569">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2569">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2570"><xref:System.Windows.UIElement3D.PreviewKeyDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2570"><xref:System.Windows.UIElement3D.PreviewKeyDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2571">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2571">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2572">鍵盤以此元素為焦點且放開按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2572">Occurs when a key is released while the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2573">索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2573">Key handling interacts with other platform features such as commanding and text composition.</span></span>  
  
 <span data-ttu-id="ba0f1-2574">此事件建立的別名<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewKeyUp>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2574">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2575">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewKeyUp>事件會附加至基礎<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2575">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2576"><xref:System.Windows.UIElement3D.PreviewKeyUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2576"><xref:System.Windows.UIElement3D.PreviewKeyUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2577">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2577">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2578">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2578">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2579">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2579">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewKeyUpEvent>|  
|<span data-ttu-id="ba0f1-2580">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2580">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2581">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2581">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2582">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2582">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2583">對應的事件反昇事件是<xref:System.Windows.UIElement3D.KeyUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2583">The corresponding bubbling event is <xref:System.Windows.UIElement3D.KeyUp>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2584">覆寫<xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2584">Override <xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2585">識別 <see cref="E:System.Windows.UIElement3D.PreviewKeyUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2585">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewKeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2586">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2586">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2587">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2587">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2588">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2588">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2589">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2589">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2590">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2590">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2591"><xref:System.Windows.UIElement3D.PreviewKeyUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2591"><xref:System.Windows.UIElement3D.PreviewKeyUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2592">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2592">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2593">鍵盤不再以此元素為焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2593">Occurs when the keyboard is no longer focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2594">由於這個事件會使用通道路由，失去焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2594">Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="ba0f1-2595">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2595">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="ba0f1-2596">此事件建立的別名<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2596">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2597">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>事件會附加至基礎<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2597">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2598"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2598"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2599">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2599">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2600">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2600">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2601">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2601">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="ba0f1-2602">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2602">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2603">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2603">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2604">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2604">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2605">對應的事件反昇事件是<xref:System.Windows.UIElement3D.LostKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2605">The corresponding bubbling event is <xref:System.Windows.UIElement3D.LostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2606">覆寫<xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2606">Override <xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2607">識別 <see cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2607">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2608">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2608">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2609">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2609">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2610">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2610">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2611">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2611">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2612">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2612">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2613"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2613"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2614">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2614">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2615">指標在此元素上方且按下任何滑鼠按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2615">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2616">此事件建立的別名<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewMouseDown>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2616">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2617">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewMouseDown>事件會附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2617">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2618"><xref:System.Windows.UIElement3D.PreviewMouseDown>通常就會引發事件一起<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>，對應到其中的兩個標準的滑鼠按鈕按下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2618">The <xref:System.Windows.UIElement3D.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="ba0f1-2619"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> 並<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>也是路由的事件，但它們是直接路由的事件，並適當按鈕特有的事件引發時<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件到達事件路由中的此項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2619"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="ba0f1-2620">請參閱備註<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2620">See Remarks for <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>.</span></span>  
  
 <span data-ttu-id="ba0f1-2621"><xref:System.Windows.UIElement3D.PreviewMouseDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2621"><xref:System.Windows.UIElement3D.PreviewMouseDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2622">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2622">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2623">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2623">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2624">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2624">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseDownEvent>|  
|<span data-ttu-id="ba0f1-2625">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2625">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2626">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2626">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2627">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2627">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2628">對應的事件反昇事件是<xref:System.Windows.UIElement3D.MouseDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2628">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseDown>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2629">覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2629">Override <xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2630">識別 <see cref="E:System.Windows.UIElement3D.PreviewMouseDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2630">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2631">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2631">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2632">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2632">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2633">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2633">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2634">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2634">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2635">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2635">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2636"><xref:System.Windows.UIElement3D.PreviewMouseDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2636"><xref:System.Windows.UIElement3D.PreviewMouseDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2637">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2637">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2638">滑鼠指標在此元素上方且按下滑鼠左按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2638">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2639">雖然這[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)似乎會遵循通道路由項目樹狀結構中，它實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2639">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-2640">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2640">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="ba0f1-2641">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2641">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="ba0f1-2642">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2642">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="ba0f1-2643">如果您將標示<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>處理，您基本上將標示<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2643">If you mark <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="ba0f1-2644">這可能包含的類別處理常式產生事件這類<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2644">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="ba0f1-2645">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2645">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="ba0f1-2646">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2646">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="ba0f1-2647">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2647">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-2648"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2648"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2649">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2649">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2650">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2650">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2651">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2651">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent>|  
|<span data-ttu-id="ba0f1-2652">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2652">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2653">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2653">Direct</span></span>|  
|<span data-ttu-id="ba0f1-2654">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2654">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2655">覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2655">Override <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2656">識別 <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2656">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2657">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2657">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2658">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2658">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2659">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2659">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2660">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2660">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2661">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2661">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2662"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2662"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2663">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2663">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2664">滑鼠指標在此元素上方且放開滑鼠左按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2664">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2665">雖然這[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)似乎會遵循通道路由項目樹狀結構中，它實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2665">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-2666">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2666">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="ba0f1-2667">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2667">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="ba0f1-2668">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2668">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="ba0f1-2669">如果您將標示<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>處理，您基本上將標示<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2669">If you mark <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="ba0f1-2670">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2670">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="ba0f1-2671">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2671">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="ba0f1-2672">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2672">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-2673"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2673"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2674">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2674">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2675">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2675">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2676">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2676">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent>|  
|<span data-ttu-id="ba0f1-2677">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2677">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2678">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2678">Direct</span></span>|  
|<span data-ttu-id="ba0f1-2679">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2679">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2680">覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2680">Override <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2681">識別 <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2681">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2682">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2682">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2683">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2683">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2684">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2684">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2685">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2685">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2686">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2686">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2687"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2687"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2688">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2688">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2689">滑鼠指標在此元素上方且移動滑鼠指標時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2689">Occurs when the mouse pointer moves while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2690">當發生這個事件都將滑鼠指標第一次進入項目的範圍中，也當滑鼠指標移動同時仍保有的項目範圍內。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2690">This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</span></span>  
  
 <span data-ttu-id="ba0f1-2691">此事件建立的別名<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewMouseMove>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2691">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2692">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewMouseMove>事件會附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2692">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2693"><xref:System.Windows.UIElement3D.PreviewMouseMove> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2693"><xref:System.Windows.UIElement3D.PreviewMouseMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2694">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2694">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2695">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2695">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2696">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2696">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseMoveEvent>|  
|<span data-ttu-id="ba0f1-2697">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2697">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2698">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2698">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2699">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2699">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2700">對應的事件反昇事件是<xref:System.Windows.UIElement3D.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2700">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseMove>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2701">覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2701">Override <xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2702">識別 <see cref="E:System.Windows.UIElement3D.PreviewMouseMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2702">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2703">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2703">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2704">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2704">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2705">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2705">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2706">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2706">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2707">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2707">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2708"><xref:System.Windows.UIElement3D.PreviewMouseMoveEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2708"><xref:System.Windows.UIElement3D.PreviewMouseMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2709">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2709">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2710">滑鼠指標在此元素上方且按下滑鼠右按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2710">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2711">雖然這[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)似乎會遵循通道路由項目樹狀結構中，它實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2711">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-2712">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2712">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="ba0f1-2713">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2713">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="ba0f1-2714">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2714">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="ba0f1-2715">如果您將標示<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>處理，您基本上將標示<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2715">If you mark <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="ba0f1-2716">這可能包含的類別處理常式產生事件這類<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2716">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="ba0f1-2717">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2717">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="ba0f1-2718">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2718">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="ba0f1-2719">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2719">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-2720"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2720"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2721">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2721">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2722">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2722">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2723">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2723">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent>|  
|<span data-ttu-id="ba0f1-2724">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2724">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2725">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2725">Direct</span></span>|  
|<span data-ttu-id="ba0f1-2726">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2726">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2727">覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2727">Override <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2728">識別 <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2728">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2729">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2729">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2730">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2730">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2731">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2731">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2732">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2732">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2733">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2733">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2734"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2734"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2735">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2735">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2736">滑鼠指標在此元素上方且放開滑鼠右按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2736">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2737">雖然這[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)似乎會遵循通道路由項目樹狀結構中，它實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2737">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-2738">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2738">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="ba0f1-2739">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2739">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="ba0f1-2740">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2740">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="ba0f1-2741">如果您將標示<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>處理，您基本上將標示<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2741">If you mark <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="ba0f1-2742">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2742">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="ba0f1-2743">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2743">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="ba0f1-2744">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2744">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-2745"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2745"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2746">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2746">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2747">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2747">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2748">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2748">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent>|  
|<span data-ttu-id="ba0f1-2749">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2749">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2750">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2750">Direct</span></span>|  
|<span data-ttu-id="ba0f1-2751">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2751">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2752">覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2752">Override <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2753">識別 <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2753">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2754">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2754">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2755">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2755">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2756">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2756">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2757">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2757">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2758">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2758">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2759"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2759"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2760">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2760">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2761">滑鼠指標在此元素上方且放開任何滑鼠按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2761">Occurs when any mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2762">此事件建立的別名<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewMouseUp>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2762">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2763">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewMouseUp>事件會附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2763">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2764"><xref:System.Windows.UIElement3D.PreviewMouseUp>通常就會引發事件一起<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>，對應到其中的兩個標準的滑鼠按鈕按下。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2764">The <xref:System.Windows.UIElement3D.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="ba0f1-2765"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> 並<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>也是路由的事件，但它們是直接路由的事件，並適當按鈕特有的事件引發時<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件到達事件路由中的此項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2765"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="ba0f1-2766">請參閱備註<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2766">See Remarks for <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</span></span>  
  
 <span data-ttu-id="ba0f1-2767"><xref:System.Windows.UIElement3D.PreviewMouseUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2767"><xref:System.Windows.UIElement3D.PreviewMouseUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2768">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2768">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2769">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2769">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2770">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2770">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseUpEvent>|  
|<span data-ttu-id="ba0f1-2771">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2771">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2772">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2772">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2773">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2773">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2774">對應的事件反昇事件是<xref:System.Windows.UIElement3D.MouseUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2774">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseUp>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2775">覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2775">Override <xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2776">識別 <see cref="E:System.Windows.UIElement3D.PreviewMouseUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2776">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2777">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2777">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2778">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2778">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2779">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2779">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2780">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2780">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2781">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2781">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2782"><xref:System.Windows.UIElement3D.PreviewMouseUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2782"><xref:System.Windows.UIElement3D.PreviewMouseUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2783">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2783">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2784">滑鼠指標在此元素上方且使用者滾動滑鼠滾輪時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2784">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2785">焦點或滑鼠捕捉會優先於滑鼠指標的所在;因此，如果您接收這個事件的焦點或擷取的項目時，滑鼠指標實際上可能是透過另一個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2785">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="ba0f1-2786">此事件建立的別名<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewMouseMove>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2786">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2787">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewMouseMove>事件會附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2787">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2788"><xref:System.Windows.UIElement3D.PreviewMouseWheel> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2788"><xref:System.Windows.UIElement3D.PreviewMouseWheel> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2789">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2789">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2790">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2790">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2791">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2791">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseWheelEvent>|  
|<span data-ttu-id="ba0f1-2792">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2792">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2793">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2793">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2794">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2794">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2795">對應的事件反昇事件是<xref:System.Windows.UIElement3D.MouseWheel>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2795">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseWheel>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2796">覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2796">Override <xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2797">識別 <see cref="E:System.Windows.UIElement3D.PreviewMouseWheel" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2797">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2798">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2798">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2799">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2799">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2800">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2800">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2801">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2801">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2802">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2802">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2803"><xref:System.Windows.UIElement3D.PreviewMouseWheelEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2803"><xref:System.Windows.UIElement3D.PreviewMouseWheelEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2804">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2804">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2805">拖放操作期間，鍵盤或滑鼠按鈕狀態變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2805">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2806"><xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>事件可讓拖曳來源，來宣告是否應取消拖放作業。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2806">The <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="ba0f1-2807">此事件建立的別名<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2807">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2808">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2808">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2809"><xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2809"><xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2810">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2810">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2811">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2811">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2812">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2812">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent>|  
|<span data-ttu-id="ba0f1-2813">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2813">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2814">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2814">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2815">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2815">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2816">對應的事件反昇事件是<xref:System.Windows.UIElement3D.QueryContinueDrag>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2816">The corresponding bubbling event is <xref:System.Windows.UIElement3D.QueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2817">覆寫<xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2817">Override <xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2818">識別 <see cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2818">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2819">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2819">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2820">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2820">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2821">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2821">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2822">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2822">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2823">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2823">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2824"><xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2824"><xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2825">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2825">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2826">手寫筆指標在此元素上方且按下手寫筆按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2826">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2827">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewStylusButtonDown>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2827">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2828">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewStylusButtonDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2828">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2829">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2829">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-2830">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2830">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-2831"><xref:System.Windows.UIElement3D.PreviewStylusButtonDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2831"><xref:System.Windows.UIElement3D.PreviewStylusButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2832">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2832">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2833">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2833">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2834">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2834">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent>|  
|<span data-ttu-id="ba0f1-2835">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2835">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2836">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2836">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2837">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2837">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2838">對應的事件反昇事件是<xref:System.Windows.UIElement3D.StylusButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2838">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2839">覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2839">Override <xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2840">識別 <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2840">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2841">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2841">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2842">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2842">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2843">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2843">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2844">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2844">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2845">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2845">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2846"><xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2846"><xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2847">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2847">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2848">手寫筆指標在此元素上方且放開手寫筆按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2848">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2849">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewStylusButtonUp>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2849">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2850">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewStylusButtonUp>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2850">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2851">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2851">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-2852">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2852">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-2853"><xref:System.Windows.UIElement3D.PreviewStylusButtonUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2853"><xref:System.Windows.UIElement3D.PreviewStylusButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2854">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2854">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2855">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2855">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2856">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2856">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent>|  
|<span data-ttu-id="ba0f1-2857">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2857">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2858">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2858">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2859">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2859">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2860">對應的事件反昇事件是<xref:System.Windows.UIElement3D.StylusButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2860">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2861">覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2861">Override <xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2862">識別 <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2862">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2863">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2863">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2864">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2864">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2865">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2865">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2866">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2866">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2867">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2867">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2868"><xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2868"><xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2869">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2869">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2870">手寫筆在此項目上方且碰觸數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2870">Occurs when the stylus touches the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2871">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewStylusDown>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2871">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2872">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewStylusDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2872">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2873">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2873">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-2874">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2874">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-2875"><xref:System.Windows.UIElement3D.PreviewStylusDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2875"><xref:System.Windows.UIElement3D.PreviewStylusDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2876">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2876">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2877">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2877">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2878">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2878">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusDownEvent>|  
|<span data-ttu-id="ba0f1-2879">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2879">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2880">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2880">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2881">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2881">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2882">對應的事件反昇事件是<xref:System.Windows.UIElement3D.StylusDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2882">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusDown>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2883">覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2883">Override <xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2884">識別 <see cref="E:System.Windows.UIElement3D.PreviewStylusDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2884">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2885">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2885">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2886">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2886">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2887">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2887">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2888">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2888">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2889">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2889">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2890"><xref:System.Windows.UIElement3D.PreviewStylusDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2890"><xref:System.Windows.UIElement3D.PreviewStylusDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2891">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2891">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2892">手寫筆在項目上方移動，但沒有真正碰觸數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2892">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2893">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewStylusInAirMove>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2893">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2894">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewStylusInAirMove>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2894">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2895">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2895">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-2896">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2896">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-2897"><xref:System.Windows.UIElement3D.PreviewStylusInAirMove> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2897"><xref:System.Windows.UIElement3D.PreviewStylusInAirMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2898">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2898">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2899">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2899">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2900">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2900">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent>|  
|<span data-ttu-id="ba0f1-2901">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2901">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2902">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2902">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2903">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2903">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2904">對應的事件反昇事件是<xref:System.Windows.UIElement3D.StylusInAirMove>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2904">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2905">覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2905">Override <xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2906">識別 <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2906">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2907">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2907">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2908">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2908">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2909">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2909">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2910">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2910">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2911">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2911">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2912"><xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2912"><xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2913">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2913">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2914">手寫筆在此項目上方，且夠靠近數位板而被偵測到時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2914">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2915">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewStylusInRange>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2915">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2916">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewStylusInRange>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2916">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2917">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2917">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-2918">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2918">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-2919"><xref:System.Windows.UIElement3D.PreviewStylusInRange> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2919"><xref:System.Windows.UIElement3D.PreviewStylusInRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2920">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2920">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2921">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2921">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2922">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2922">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent>|  
|<span data-ttu-id="ba0f1-2923">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2923">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2924">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2924">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2925">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2925">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2926">對應的事件反昇事件是<xref:System.Windows.UIElement3D.StylusInRange>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2926">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusInRange>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2927">覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2927">Override <xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2928">識別 <see cref="E:System.Windows.UIElement3D.PreviewStylusInRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2928">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2929">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2929">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2930">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2930">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2931">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2931">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2932">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2932">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2933">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2933">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2934"><xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2934"><xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2935">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2935">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2936">當手寫筆位在項目上方並移動時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2936">Occurs when the stylus moves while over the element.</span></span> <span data-ttu-id="ba0f1-2937">手寫筆必須在受到數位板偵測時移動才能引發此事件，否則會改為引發 <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2937">The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2938">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewStylusMove>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2938">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2939">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewStylusMove>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2939">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2940">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2940">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-2941">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2941">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-2942"><xref:System.Windows.UIElement3D.PreviewStylusMove> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2942"><xref:System.Windows.UIElement3D.PreviewStylusMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2943">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2943">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2944">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2944">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2945">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2945">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusMoveEvent>|  
|<span data-ttu-id="ba0f1-2946">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2946">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2947">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2947">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2948">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2948">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2949">對應的事件反昇事件是<xref:System.Windows.UIElement3D.StylusMove>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2949">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusMove>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2950">覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2950">Override <xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2951">識別 <see cref="E:System.Windows.UIElement3D.PreviewStylusMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2951">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2952">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2952">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2953">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2953">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2954">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2954">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2955">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2955">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2956">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2956">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2957"><xref:System.Windows.UIElement3D.PreviewStylusMoveEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2957"><xref:System.Windows.UIElement3D.PreviewStylusMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2958">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2958">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2959">手寫筆遠離數位板而無法被偵測到時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2959">Occurs when the stylus is too far from the digitizer to be detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2960">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2960">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2961">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2961">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2962">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2962">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-2963">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2963">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-2964"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2964"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2965">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2965">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2966">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2966">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2967">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2967">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent>|  
|<span data-ttu-id="ba0f1-2968">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2968">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2969">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2969">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2970">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2970">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2971">對應的事件反昇事件是<xref:System.Windows.UIElement3D.StylusOutOfRange>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2971">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2972">覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2972">Override <xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2973">識別 <see cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2973">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2974">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2974">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2975">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2975">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2976">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2976">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-2977">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2977">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-2978">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2978">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-2979"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2979"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2980">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2980">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2981">使用者執行其中一種手寫筆筆勢時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2981">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2982">手寫筆筆勢的相關資訊，請參閱<xref:System.Windows.Input.SystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2982">For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="ba0f1-2983">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2983">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-2984">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2984">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-2985">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2985">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-2986">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2986">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-2987"><xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2987"><xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-2988">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2988">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-2989">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2989">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-2990">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2990">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent>|  
|<span data-ttu-id="ba0f1-2991">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2991">Routing strategy</span></span>|<span data-ttu-id="ba0f1-2992">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2992">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-2993">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2993">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="ba0f1-2994">對應的事件反昇事件是<xref:System.Windows.UIElement3D.StylusSystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2994">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="ba0f1-2995">覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2995">Override <xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-2996">識別 <see cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2996">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-2997">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2997">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-2998">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2998">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-2999">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-2999">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3000">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3000">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3001">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3001">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3002"><xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3002"><xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3003">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3003">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3004">手寫筆在此項目上方，且使用者將手寫筆舉起離開數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3004">Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3005">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewStylusDown>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3005">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3006">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewStylusDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3006">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3007">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3007">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3008">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3008">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3009"><xref:System.Windows.UIElement3D.PreviewStylusUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3009"><xref:System.Windows.UIElement3D.PreviewStylusUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3010">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3010">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3011">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3011">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3012">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3012">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusUpEvent>|  
|<span data-ttu-id="ba0f1-3013">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3013">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3014">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3014">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-3015">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3015">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3016">對應的事件反昇事件是<xref:System.Windows.UIElement3D.StylusUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3016">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusUp>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3017">覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3017">Override <xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3018">識別 <see cref="E:System.Windows.UIElement3D.PreviewStylusUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3018">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3019">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3019">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3020">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3020">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3021">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3021">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3022">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3022">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3023">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3023">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3024"><xref:System.Windows.UIElement3D.PreviewStylusUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3024"><xref:System.Windows.UIElement3D.PreviewStylusUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3025">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3025">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3026">此元素以一種與裝置無關的方式取得文字時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3026">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3027"><xref:System.Windows.UIElement3D.PreviewTextInput>事件可讓元件或應用程式以與裝置無關的方式接聽文字輸入。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3027">The <xref:System.Windows.UIElement3D.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="ba0f1-3028">鍵盤是主要的方法<xref:System.Windows.UIElement3D.PreviewTextInput>; 不過也可以產生語音、 手寫和其他輸入的裝置<xref:System.Windows.UIElement3D.PreviewTextInput>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3028">The keyboard is the primary means of <xref:System.Windows.UIElement3D.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement3D.PreviewTextInput>.</span></span>  
  
 <span data-ttu-id="ba0f1-3029">因為索引鍵組合-在預設鍵盤或輸入的法編輯器-透過多個索引鍵的事件可能會引發一個文字輸入的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3029">Because of key combinations - either in default keyboards or through input method editors - multiple key events may raise just one text input event.</span></span>  
  
 <span data-ttu-id="ba0f1-3030">此事件建立的別名<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.PreviewTextInput>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3030">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3031">附加至事件處理常式<xref:System.Windows.UIElement3D.PreviewTextInput>事件會附加至基礎<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3031">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3032"><xref:System.Windows.UIElement3D.PreviewTextInput> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3032"><xref:System.Windows.UIElement3D.PreviewTextInput> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3033">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3033">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3034">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3034">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3035">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3035">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTextInputEvent>|  
|<span data-ttu-id="ba0f1-3036">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3036">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3037">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3037">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-3038">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3038">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3039">對應的事件反昇事件是<xref:System.Windows.UIElement3D.TextInput>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3039">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TextInput>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3040">覆寫<xref:System.Windows.UIElement3D.OnPreviewTextInput%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3040">Override <xref:System.Windows.UIElement3D.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3041">識別 <see cref="E:System.Windows.UIElement3D.PreviewTextInput" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3041">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3042">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3042">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3043">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3043">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3044">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3044">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3045">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3045">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3046">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3046">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3047"><xref:System.Windows.UIElement3D.PreviewTextInputEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3047"><xref:System.Windows.UIElement3D.PreviewTextInputEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3048">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3048">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3049">手指在這個項目上方且在螢幕上觸控時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3049">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3050">根據預設，<xref:System.Windows.UIElement3D.PreviewTouchDown>和<xref:System.Windows.UIElement3D.TouchDown>手指觸控螢幕，並移動之前不會發生的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3050">By default, the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="ba0f1-3051">手指在螢幕上按住卻不必移動它會使用按下並按住行為<xref:System.Windows.Input.Stylus>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3051">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="ba0f1-3052">按住不放的行為相當於按一下滑鼠右鍵。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3052">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="ba0f1-3053">會造成<xref:System.Windows.UIElement3D.PreviewTouchDown>並<xref:System.Windows.UIElement3D.TouchDown>事件發生在手指觸控螢幕，如設定<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>; 附加屬性`false`此元素。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3053">To cause the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3054">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3054">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3055">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3055">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTouchDownEvent>|  
|<span data-ttu-id="ba0f1-3056">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3056">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3057">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3057">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-3058">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3058">Delegate</span></span>|<span data-ttu-id="ba0f1-3059">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3059"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="ba0f1-3060">對應的事件反昇事件是<xref:System.Windows.UIElement3D.TouchDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3060">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TouchDown>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3061">覆寫<xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3061">Override <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3062">識別 <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3062">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3063">手指在這個項目上方且在螢幕上移動時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3063">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3064">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3064">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3065">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3065">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTouchMoveEvent>|  
|<span data-ttu-id="ba0f1-3066">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3066">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3067">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3067">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-3068">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3068">Delegate</span></span>|<span data-ttu-id="ba0f1-3069">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3069"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="ba0f1-3070">對應的事件反昇事件是<xref:System.Windows.UIElement3D.TouchMove>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3070">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TouchMove>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3071">覆寫<xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3071">Override <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3072">識別 <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3072">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3073">手指在這個項目上方且離開螢幕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3073">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3074">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3074">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3075">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3075">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTouchUpEvent>|  
|<span data-ttu-id="ba0f1-3076">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3076">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3077">通道</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3077">Tunneling</span></span>|  
|<span data-ttu-id="ba0f1-3078">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3078">Delegate</span></span>|<span data-ttu-id="ba0f1-3079">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3079"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="ba0f1-3080">對應的事件反昇事件是<xref:System.Windows.UIElement3D.TouchUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3080">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TouchUp>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3081">覆寫<xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3081">Override <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3082">識別 <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3082">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3083">拖放操作期間，鍵盤或滑鼠按鈕狀態變更時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3083">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3084"><xref:System.Windows.UIElement3D.QueryContinueDrag>事件可讓拖曳來源能夠決定是否應取消拖放作業。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3084">The <xref:System.Windows.UIElement3D.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="ba0f1-3085">此事件建立的別名<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.QueryContinueDrag>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3085">This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3086">附加至事件處理常式<xref:System.Windows.UIElement3D.QueryContinueDrag>事件會附加至基礎<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3086">Event handlers that are attached to the <xref:System.Windows.UIElement3D.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3087"><xref:System.Windows.UIElement3D.QueryContinueDrag> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3087"><xref:System.Windows.UIElement3D.QueryContinueDrag> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3088">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3088">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3089">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3089">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3090">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3090">Identifier field</span></span>|<xref:System.Windows.UIElement3D.QueryContinueDragEvent>|  
|<span data-ttu-id="ba0f1-3091">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3091">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3092">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3092">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3093">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3093">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3094">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3094">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3095">覆寫<xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3095">Override <xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3096">識別 <see cref="E:System.Windows.UIElement3D.QueryContinueDrag" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3096">Identifies the <see cref="E:System.Windows.UIElement3D.QueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3097">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3097">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3098">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3098">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3099">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3099">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3100">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3100">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3101">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3101">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3102"><xref:System.Windows.UIElement3D.QueryContinueDragEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3102"><xref:System.Windows.UIElement3D.QueryContinueDragEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3103">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3103">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3104">要求顯示游標時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3104">Occurs when the cursor is requested to display.</span></span> <span data-ttu-id="ba0f1-3105">每當滑鼠指標移動至新位置時，都會引發此事件，這意謂游標物件可能會根據其新位置而變更。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3105">This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3106">此事件建立的別名<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.QueryCursor>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3106">This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3107">附加至事件處理常式<xref:System.Windows.UIElement3D.QueryCursor>事件會附加至基礎<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3107">Event handlers that are attached to the <xref:System.Windows.UIElement3D.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3108">此事件名稱所參考的資料指標不一定是文字游標 （有時稱為插入點）。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3108">The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</span></span> <span data-ttu-id="ba0f1-3109">相反地，此內容中的資料指標是宣告螢幕上的圖形化顯示數個可能的輸入相關的裝置或在 Windows 程式設計的概念相關的物件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3109">Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</span></span> <span data-ttu-id="ba0f1-3110">該物件由<xref:System.Windows.Input.Cursor>在 WPF 中的類別。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3110">That object is represented by the <xref:System.Windows.Input.Cursor> class in WPF.</span></span> <span data-ttu-id="ba0f1-3111">WPF 輸入的系統可讓您變更這個資料指標，當它表示滑鼠指標的螢幕上的位置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3111">The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</span></span> <span data-ttu-id="ba0f1-3112">您可以使用預先定義的值從<xref:System.Windows.Input.Cursors>列舉型別，或者您可以宣告為影像檔的自訂游標。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3112">You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.</span></span>  
  
 <span data-ttu-id="ba0f1-3113">接聽<xref:System.Windows.UIElement3D.QueryCursor>事件就不會針對資料指標管理而有效率的技術。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3113">Listening for the <xref:System.Windows.UIElement3D.QueryCursor> event is not an efficient technique for cursor management.</span></span> <span data-ttu-id="ba0f1-3114">相反地，每個項目應該定義自己的資料指標行為<xref:System.Windows.FrameworkContentElement.Cursor%2A>和<xref:System.Windows.FrameworkContentElement.ForceCursor%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3114">Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</span></span> <span data-ttu-id="ba0f1-3115">您只應依賴<xref:System.Windows.UIElement3D.QueryCursor>如果您不使用 WPF 架構層級基底項目，或在異常的情況下，其中定義每個項目為基礎的資料指標的行為不符合您的需求。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3115">You should only rely on <xref:System.Windows.UIElement3D.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</span></span> <span data-ttu-id="ba0f1-3116">如需有關實作資料指標行為，以回應<xref:System.Windows.UIElement3D.QueryCursor>，請參閱<xref:System.Windows.Input.QueryCursorEventHandler>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3116">For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement3D.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.</span></span>  
  
 <span data-ttu-id="ba0f1-3117"><xref:System.Windows.UIElement3D.QueryCursor> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3117"><xref:System.Windows.UIElement3D.QueryCursor> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3118">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3118">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3119">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3119">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3120">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3120">Identifier field</span></span>|<xref:System.Windows.UIElement3D.QueryCursorEvent>|  
|<span data-ttu-id="ba0f1-3121">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3121">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3122">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3122">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3123">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3123">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3124">沒有任何已定義的對應通道事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3124">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="ba0f1-3125">覆寫<xref:System.Windows.UIElement3D.OnQueryCursor%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3125">Override <xref:System.Windows.UIElement3D.OnQueryCursor%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3126">識別 <see cref="E:System.Windows.UIElement3D.QueryCursor" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3126">Identifies the <see cref="E:System.Windows.UIElement3D.QueryCursor" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3127">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3127">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3128">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3128">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3129">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3129">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3130">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3130">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3131">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3131">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3132"><xref:System.Windows.UIElement3D.QueryCursorEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3132"><xref:System.Windows.UIElement3D.QueryCursorEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3133">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3133">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="ba0f1-3134"><see cref="T:System.Windows.RoutedEventArgs" />，包含事件資料，也會識別要引發的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3134">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</span></span></param>
        <summary><span data-ttu-id="ba0f1-3135">引發特定路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3135">Raises a specific routed event.</span></span> <span data-ttu-id="ba0f1-3136">要引發的 <see cref="T:System.Windows.RoutedEvent" /> 是在所提供的 <see cref="T:System.Windows.RoutedEventArgs" /> 執行個體內識別 (作為該事件資料的 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 屬性)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3136">The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3137">`e`參數的型別為路由的事件的所有資料的通用基底類型; 不過，事件資料應該被授與為最特定的事件資料類型，可供所引發的事件，因為<xref:System.Windows.RoutedEventArgs>衍生的類別包含實際的特定資料是針對特定的事件時，會引發這個事件的屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3137">The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</span></span>  
  
 <span data-ttu-id="ba0f1-3138"><xref:System.Windows.RoutedEventArgs> 不是狀態屬性事件;它也會識別要引發哪個路由的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3138"><xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise.</span></span> <span data-ttu-id="ba0f1-3139">此事件引發的模式和路由的事件資料，同時與不同[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件和資料類別，通常只包含事件相關的屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3139">This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.</span></span>  
  
 <span data-ttu-id="ba0f1-3140"><xref:System.Windows.UIElement3D.RaiseEvent%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3140"><xref:System.Windows.UIElement3D.RaiseEvent%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3141">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3141">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement3D.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-3142">從這個項目釋放所有擷取到的觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3142">Releases all captured touch devices from this element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement3D.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-3143">如果這個項目保有滑鼠捕捉，則釋放捕捉。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3143">Releases the mouse capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3144">如果這個項目未存放擷取，呼叫這個方法沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3144">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="ba0f1-3145">請考慮檢查值<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>之前先呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3145">Consider checking the value of <xref:System.Windows.UIElement3D.IsMouseCaptured%2A> before you call this method.</span></span>  
  
 <span data-ttu-id="ba0f1-3146"><xref:System.Windows.UIElement3D.ReleaseMouseCapture%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3146"><xref:System.Windows.UIElement3D.ReleaseMouseCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3147">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3147">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement3D.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-3148">如果這個項目保有手寫筆裝置捕捉，則釋放捕捉。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3148">Releases the stylus device capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3149">如果這個項目未存放擷取，呼叫這個方法沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3149">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="ba0f1-3150">請考慮檢查值<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>之前先呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3150">Consider checking the value of <xref:System.Windows.UIElement3D.IsStylusCaptured%2A> before you call this method.</span></span>  
  
 <span data-ttu-id="ba0f1-3151"><xref:System.Windows.UIElement3D.ReleaseStylusCapture%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3151"><xref:System.Windows.UIElement3D.ReleaseStylusCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3152">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3152">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement3D.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="ba0f1-3153">要釋放的裝置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3153">The device to release.</span></span></param>
        <summary><span data-ttu-id="ba0f1-3154">嘗試從這個項目中釋放指定的觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3154">Attempts to release the specified touch device from this element.</span></span></summary>
        <returns><span data-ttu-id="ba0f1-3155">如果已釋放觸控裝置則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3155"><see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ba0f1-3156"><paramref name="touchDevice" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3156"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement3D.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="ba0f1-3157">要附加處理常式之路由事件的識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3157">The identifier of the routed event for which the handler is attached.</span></span></param>
        <param name="handler"><span data-ttu-id="ba0f1-3158">要從這個項目上的事件處理常式集合中移除的特定處理常式實作。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3158">The specific handler implementation to remove from the event handler collection on this element.</span></span></param>
        <summary><span data-ttu-id="ba0f1-3159">從這個項目中移除指定的路由事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3159">Removes the specified routed event handler from this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3160">最常見的案例，使用這[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]是您實作時會[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]自訂路由事件，特別是當您實作在處理常式的 「 移除 」 邏輯時相關聯的 「 包裝函式 」 事件[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]層級。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3160">The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level.</span></span>  
  
 <span data-ttu-id="ba0f1-3161">如果沒有任何處理常式註冊以比對方法呼叫的輸入的參數的準則，則呼叫這個方法任何作用。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3161">Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.</span></span>  
  
 <span data-ttu-id="ba0f1-3162">如果多個處理常式已連結的事件處理常式存放區中，比對準則，也就是第一個處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3162">If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</span></span> <span data-ttu-id="ba0f1-3163">此行為是配合[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]行為`-=`運算子。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3163">This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.</span></span>  
  
 <span data-ttu-id="ba0f1-3164">既不`routedEvent`也`handler`可能是`null`。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3164">Neither `routedEvent` nor `handler` may be `null`.</span></span> <span data-ttu-id="ba0f1-3165">嘗試提供其中一個值做為`null`會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3165">Attempting to provide either value as `null` will raise an exception.</span></span>  
  
 <span data-ttu-id="ba0f1-3166">這個方法會忽略`handledEventsToo`加上第一個處理常式是否提供的參數資訊<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章，可讓已處理事件的處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3166">This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events.</span></span> <span data-ttu-id="ba0f1-3167">任一種類型的處理常式會移除。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3167">Either type of handler is removed.</span></span>  
  
 <span data-ttu-id="ba0f1-3168"><xref:System.Windows.UIElement3D.RemoveHandler%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3168"><xref:System.Windows.UIElement3D.RemoveHandler%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3169">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3169">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement3D.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-3170">傳回序列化 (Serialization) 處理序是否應該在這個類別的執行個體上，將 <see cref="P:System.Windows.UIElement3D.CommandBindings" /> 屬性的內容序列化。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3170">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement3D.CommandBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="ba0f1-3171">如果應序列化 <see cref="P:System.Windows.UIElement3D.CommandBindings" /> 屬性值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3171"><see langword="true" /> if the <see cref="P:System.Windows.UIElement3D.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3172">這會傳回`true`如果<xref:System.Windows.UIElement3D.CommandBindings%2A>本機設定。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3172">This will return `true` if <xref:System.Windows.UIElement3D.CommandBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="ba0f1-3173">這`ShouldSerialize`提供方法，因為<xref:System.Windows.UIElement3D.CommandBindings%2A>屬性並沒有簡單的預設值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3173">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement3D.CommandBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="ba0f1-3174">這個方法會指出屬性是否已變更其預設值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3174">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="ba0f1-3175">您通常叫用這個方法如果在開發設計工具或開發您自己的控制項併入<xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3175">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-3176">如需詳細資訊，請參閱 <<c0> [ 定義預設值使用 ShouldSerialize 和重設方法](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3176">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3177"><xref:System.Windows.UIElement3D.ShouldSerializeCommandBindings%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3177"><xref:System.Windows.UIElement3D.ShouldSerializeCommandBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3178">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3178">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement3D.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba0f1-3179">傳回序列化 (Serialization) 處理序是否應該在這個類別的執行個體上，將 <see cref="P:System.Windows.UIElement3D.InputBindings" /> 屬性的內容序列化。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3179">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement3D.InputBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="ba0f1-3180">如果應序列化 <see cref="P:System.Windows.UIElement3D.InputBindings" /> 屬性值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3180"><see langword="true" /> if the <see cref="P:System.Windows.UIElement3D.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3181">這會傳回`true`如果<xref:System.Windows.UIElement3D.InputBindings%2A>本機設定。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3181">This will return `true` if <xref:System.Windows.UIElement3D.InputBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="ba0f1-3182">這`ShouldSerialize`提供方法，因為<xref:System.Windows.UIElement3D.InputBindings%2A>屬性並沒有簡單的預設值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3182">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement3D.InputBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="ba0f1-3183">這個方法會指出屬性是否已變更其預設值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3183">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="ba0f1-3184">您通常叫用這個方法如果在開發設計工具或開發您自己的控制項併入<xref:System.Windows.UIElement3D>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3184">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="ba0f1-3185">如需詳細資訊，請參閱 <<c0> [ 定義預設值使用 ShouldSerialize 和重設方法](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3185">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3186"><xref:System.Windows.UIElement3D.ShouldSerializeInputBindings%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3186"><xref:System.Windows.UIElement3D.ShouldSerializeInputBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3187">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3187">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3188">手寫筆指標在此元素上方且按下手寫筆按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3188">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3189">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.StylusButtonDown>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3189">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3190">附加至事件處理常式<xref:System.Windows.UIElement3D.StylusButtonDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3190">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3191">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3191">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3192">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3192">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3193"><xref:System.Windows.UIElement3D.StylusButtonDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3193"><xref:System.Windows.UIElement3D.StylusButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3194">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3194">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3195">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3195">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3196">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3196">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusButtonDownEvent>|  
|<span data-ttu-id="ba0f1-3197">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3197">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3198">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3198">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3199">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3199">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3200">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewStylusButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3200">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3201">覆寫<xref:System.Windows.UIElement3D.OnStylusButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3201">Override <xref:System.Windows.UIElement3D.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3202">識別 <see cref="E:System.Windows.UIElement3D.StylusButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3202">Identifies the <see cref="E:System.Windows.UIElement3D.StylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3203">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3203">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3204">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3204">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3205">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3205">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3206">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3206">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3207">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3207">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3208"><xref:System.Windows.UIElement3D.StylusButtonDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3208"><xref:System.Windows.UIElement3D.StylusButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3209">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3209">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3210">手寫筆指標在此元素上方且放開手寫筆按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3210">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3211">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.StylusButtonUp>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3211">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3212">附加至事件處理常式<xref:System.Windows.UIElement3D.StylusButtonUp>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3212">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3213">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3213">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3214">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3214">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3215"><xref:System.Windows.UIElement3D.StylusButtonUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3215"><xref:System.Windows.UIElement3D.StylusButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3216">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3216">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3217">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3217">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3218">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3218">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusButtonUpEvent>|  
|<span data-ttu-id="ba0f1-3219">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3219">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3220">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3220">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3221">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3221">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3222">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewStylusButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3222">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3223">覆寫<xref:System.Windows.UIElement3D.OnStylusButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3223">Override <xref:System.Windows.UIElement3D.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3224">識別 <see cref="E:System.Windows.UIElement3D.StylusButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3224">Identifies the <see cref="E:System.Windows.UIElement3D.StylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3225">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3225">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3226">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3226">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3227">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3227">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3228">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3228">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3229">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3229">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3230"><xref:System.Windows.UIElement3D.StylusButtonUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3230"><xref:System.Windows.UIElement3D.StylusButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3231">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3231">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3232">手寫筆在此項目上方且碰觸數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3232">Occurs when the stylus touches the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3233">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.StylusDown>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3233">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3234">附加至事件處理常式<xref:System.Windows.UIElement3D.StylusDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3234">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3235">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3235">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3236">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3236">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3237"><xref:System.Windows.UIElement3D.StylusDown> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3237"><xref:System.Windows.UIElement3D.StylusDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3238">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3238">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3239">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3239">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3240">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3240">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusDownEvent>|  
|<span data-ttu-id="ba0f1-3241">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3241">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3242">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3242">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3243">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3243">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3244">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewStylusDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3244">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusDown>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3245">覆寫<xref:System.Windows.UIElement3D.OnStylusDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3245">Override <xref:System.Windows.UIElement3D.OnStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3246">識別 <see cref="E:System.Windows.UIElement3D.StylusDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3246">Identifies the <see cref="E:System.Windows.UIElement3D.StylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3247">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3247">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3248">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3248">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3249">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3249">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3250">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3250">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3251">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3251">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3252"><xref:System.Windows.UIElement3D.StylusDownEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3252"><xref:System.Windows.UIElement3D.StylusDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3253">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3253">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3254">手寫筆進入此元素的邊界時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3254">Occurs when the stylus enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3255"><xref:System.Windows.UIElement3D.StylusEnter> 已[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)使用直接的事件處理路由策略。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3255"><xref:System.Windows.UIElement3D.StylusEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="ba0f1-3256">直接路由的事件不會引發路由;相反地，它們會以處理相同的項目引發的狀況。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3256">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="ba0f1-3257">不過，它們會啟用路由的事件的行為，例如樣式中的事件觸發程序的其他層面。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3257">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="ba0f1-3258">雖然<xref:System.Windows.UIElement3D.StylusEnter>手寫筆輸入的項目，這個事件更多的界限時的追蹤記錄解譯為常值回報<xref:System.Windows.UIElement3D.IsStylusOver%2A>屬性值已從`false`至`true`這個項目上。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3258">Although <xref:System.Windows.UIElement3D.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsStylusOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="ba0f1-3259">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.StylusEnter>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3259">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3260">附加至事件處理常式<xref:System.Windows.UIElement3D.StylusEnter>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3260">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3261">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3261">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3262">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3262">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3263"><xref:System.Windows.UIElement3D.StylusEnter> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3263"><xref:System.Windows.UIElement3D.StylusEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3264">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3264">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3265">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3265">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3266">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3266">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusEnterEvent>|  
|<span data-ttu-id="ba0f1-3267">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3267">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3268">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3268">Direct</span></span>|  
|<span data-ttu-id="ba0f1-3269">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3269">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3270">覆寫<xref:System.Windows.UIElement3D.OnStylusEnter%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3270">Override <xref:System.Windows.UIElement3D.OnStylusEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3271">識別 <see cref="E:System.Windows.UIElement3D.StylusEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3271">Identifies the <see cref="E:System.Windows.UIElement3D.StylusEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3272">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3272">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3273">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3273">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3274">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3274">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3275">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3275">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3276">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3276">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3277"><xref:System.Windows.UIElement3D.StylusEnterEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3277"><xref:System.Windows.UIElement3D.StylusEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3278">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3278">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3279">手寫筆在項目上方移動，但沒有真正碰觸數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3279">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3280">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.StylusInAirMove>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3280">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3281">附加至事件處理常式<xref:System.Windows.UIElement3D.StylusInAirMove>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3281">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3282">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3282">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3283">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3283">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3284"><xref:System.Windows.UIElement3D.StylusInAirMove> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3284"><xref:System.Windows.UIElement3D.StylusInAirMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3285">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3285">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3286">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3286">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3287">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3287">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusInAirMoveEvent>|  
|<span data-ttu-id="ba0f1-3288">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3288">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3289">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3289">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3290">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3290">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3291">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewStylusInAirMove>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3291">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3292">覆寫<xref:System.Windows.UIElement3D.OnStylusInAirMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3292">Override <xref:System.Windows.UIElement3D.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3293">識別 <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3293">Identifies the <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3294">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3294">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3295">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3295">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3296">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3296">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3297">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3297">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3298">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3298">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3299"><xref:System.Windows.UIElement3D.StylusInAirMoveEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3299"><xref:System.Windows.UIElement3D.StylusInAirMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3300">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3300">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3301">手寫筆在此項目上方，且夠靠近數位板而被偵測到時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3301">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3302">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.StylusInRange>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3302">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3303">附加至事件處理常式<xref:System.Windows.UIElement3D.StylusInRange>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3303">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3304">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3304">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3305">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3305">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3306"><xref:System.Windows.UIElement3D.StylusInRange> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3306"><xref:System.Windows.UIElement3D.StylusInRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3307">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3307">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3308">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3308">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3309">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3309">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusInRangeEvent>|  
|<span data-ttu-id="ba0f1-3310">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3310">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3311">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3311">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3312">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3312">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3313">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewStylusInRange>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3313">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusInRange>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3314">覆寫<xref:System.Windows.UIElement3D.OnStylusInRange%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3314">Override <xref:System.Windows.UIElement3D.OnStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3315">識別 <see cref="E:System.Windows.UIElement3D.StylusInRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3315">Identifies the <see cref="E:System.Windows.UIElement3D.StylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3316">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3316">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3317">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3317">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3318">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3318">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3319">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3319">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3320">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3320">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3321"><xref:System.Windows.UIElement3D.StylusInRangeEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3321"><xref:System.Windows.UIElement3D.StylusInRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3322">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3322">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3323">手寫筆離開元素的邊界時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3323">Occurs when the stylus leaves the bounds of the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3324"><xref:System.Windows.UIElement3D.StylusLeave> 已[路由事件概觀](~/docs/framework/wpf/advanced/routed-events-overview.md)使用直接的事件處理路由策略。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3324"><xref:System.Windows.UIElement3D.StylusLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="ba0f1-3325">直接路由的事件不會引發路由;相反地，它們會以處理相同的項目引發的狀況。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3325">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="ba0f1-3326">不過，它們會啟用路由的事件的行為，例如樣式中的事件觸發程序的其他層面。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3326">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="ba0f1-3327">雖然<xref:System.Windows.UIElement3D.StylusLeave>追蹤何時手寫筆離開元素，此事件的邊界更多解譯為常值回報<xref:System.Windows.UIElement3D.IsStylusOver%2A>屬性值已從`true`至`false`這個項目上。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3327">Although <xref:System.Windows.UIElement3D.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsStylusOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="ba0f1-3328">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.StylusLeave>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3328">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3329">附加至事件處理常式<xref:System.Windows.UIElement3D.StylusLeave>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3329">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3330">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3330">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3331">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3331">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3332"><xref:System.Windows.UIElement3D.StylusLeave> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3332"><xref:System.Windows.UIElement3D.StylusLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3333">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3333">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3334">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3334">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3335">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3335">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusLeaveEvent>|  
|<span data-ttu-id="ba0f1-3336">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3336">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3337">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3337">Direct</span></span>|  
|<span data-ttu-id="ba0f1-3338">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3338">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3339">覆寫<xref:System.Windows.UIElement3D.OnStylusLeave%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3339">Override <xref:System.Windows.UIElement3D.OnStylusLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3340">識別 <see cref="E:System.Windows.UIElement3D.StylusLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3340">Identifies the <see cref="E:System.Windows.UIElement3D.StylusLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3341">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3341">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3342">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3342">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3343">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3343">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3344">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3344">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3345">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3345">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3346"><xref:System.Windows.UIElement3D.StylusLeaveEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3346"><xref:System.Windows.UIElement3D.StylusLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3347">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3347">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3348">當手寫筆移至此項目上方時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3348">Occurs when the stylus moves over this element.</span></span> <span data-ttu-id="ba0f1-3349">手寫筆在數位板上必須移動才會引發這個事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3349">The stylus must move while on the digitizer to raise this event.</span></span> <span data-ttu-id="ba0f1-3350">否則，會改為引發 <see cref="E:System.Windows.UIElement3D.StylusInAirMove" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3350">Otherwise, <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3351">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.StylusMove>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3351">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3352">附加至事件處理常式<xref:System.Windows.UIElement3D.StylusMove>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3352">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3353">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3353">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3354">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3354">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3355"><xref:System.Windows.UIElement3D.StylusMove> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3355"><xref:System.Windows.UIElement3D.StylusMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3356">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3356">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3357">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3357">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3358">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3358">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusMoveEvent>|  
|<span data-ttu-id="ba0f1-3359">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3359">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3360">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3360">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3361">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3361">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3362">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewStylusMove>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3362">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusMove>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3363">覆寫<xref:System.Windows.UIElement3D.OnStylusMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3363">Override <xref:System.Windows.UIElement3D.OnStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3364">識別 <see cref="E:System.Windows.UIElement3D.StylusMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3364">Identifies the <see cref="E:System.Windows.UIElement3D.StylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3365">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3365">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3366">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3366">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3367">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3367">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3368">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3368">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3369">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3369">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3370"><xref:System.Windows.UIElement3D.StylusMoveEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3370"><xref:System.Windows.UIElement3D.StylusMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3371">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3371">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3372">手寫筆在此項目上方，且遠離數位板而無法被偵測到時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3372">Occurs when the stylus is too far from the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3373">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.StylusOutOfRange>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3373">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3374">附加至事件處理常式<xref:System.Windows.UIElement3D.StylusOutOfRange>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3374">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3375">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3375">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3376">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3376">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3377"><xref:System.Windows.UIElement3D.StylusOutOfRange> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3377"><xref:System.Windows.UIElement3D.StylusOutOfRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3378">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3378">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3379">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3379">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3380">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3380">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusOutOfRangeEvent>|  
|<span data-ttu-id="ba0f1-3381">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3381">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3382">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3382">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3383">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3383">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3384">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3384">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3385">覆寫<xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3385">Override <xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3386">識別 <see cref="E:System.Windows.UIElement3D.StylusOutOfRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3386">Identifies the <see cref="E:System.Windows.UIElement3D.StylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3387">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3387">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3388">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3388">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3389">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3389">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3390">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3390">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3391">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3391">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3392"><xref:System.Windows.UIElement3D.StylusOutOfRangeEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3392"><xref:System.Windows.UIElement3D.StylusOutOfRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3393">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3393">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3394">使用者執行其中一種手寫筆筆勢時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3394">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3395">手寫筆筆勢的相關資訊的詳細資訊，請參閱<xref:System.Windows.Input.SystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3395">For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="ba0f1-3396">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.StylusSystemGesture>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3396">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3397">附加至事件處理常式<xref:System.Windows.UIElement3D.StylusSystemGesture>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3397">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3398">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3398">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3399">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3399">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3400"><xref:System.Windows.UIElement3D.StylusSystemGesture> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3400"><xref:System.Windows.UIElement3D.StylusSystemGesture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3401">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3401">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3402">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3402">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3403">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3403">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusSystemGestureEvent>|  
|<span data-ttu-id="ba0f1-3404">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3404">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3405">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3405">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3406">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3406">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3407">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3407">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3408">覆寫<xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3408">Override <xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3409">識別 <see cref="E:System.Windows.UIElement3D.StylusSystemGesture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3409">Identifies the <see cref="E:System.Windows.UIElement3D.StylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3410">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3410">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3411">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3411">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3412">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3412">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3413">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3413">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3414">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3414">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3415"><xref:System.Windows.UIElement3D.StylusSystemGestureEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3415"><xref:System.Windows.UIElement3D.StylusSystemGestureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3416">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3416">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3417">手寫筆在此項目上方，且使用者將手寫筆舉起離開數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3417">Occurs when the user raises the stylus off the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3418">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.StylusUp>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3418">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3419">附加至事件處理常式<xref:System.Windows.UIElement3D.StylusUp>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3419">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3420">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3420">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="ba0f1-3421">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3421">For more information, see [Touch Input Support in Windows Vista](https://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="ba0f1-3422"><xref:System.Windows.UIElement3D.StylusUp> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3422"><xref:System.Windows.UIElement3D.StylusUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3423">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3423">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3424">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3424">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3425">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3425">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusUpEvent>|  
|<span data-ttu-id="ba0f1-3426">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3426">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3427">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3427">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3428">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3428">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3429">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewStylusUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3429">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusUp>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3430">覆寫<xref:System.Windows.UIElement3D.OnStylusUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3430">Override <xref:System.Windows.UIElement3D.OnStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3431">識別 <see cref="E:System.Windows.UIElement3D.StylusUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3431">Identifies the <see cref="E:System.Windows.UIElement3D.StylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3432">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3432">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3433">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3433">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3434">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3434">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3435">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3435">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3436">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3436">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3437"><xref:System.Windows.UIElement3D.StylusUpEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3437"><xref:System.Windows.UIElement3D.StylusUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3438">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3438">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3439">此元素以一種與裝置無關的方式取得文字時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3439">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3440"><xref:System.Windows.UIElement3D.TextInput>事件可讓元件或應用程式以與裝置無關的方式接聽文字輸入。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3440">The <xref:System.Windows.UIElement3D.TextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="ba0f1-3441">鍵盤是主要的方法<xref:System.Windows.UIElement3D.TextInput>，但也可以將語音、 手寫和其他輸入的裝置<xref:System.Windows.UIElement3D.TextInput>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3441">The keyboard is the primary means of <xref:System.Windows.UIElement3D.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement3D.TextInput>.</span></span>  
  
 <span data-ttu-id="ba0f1-3442">因為索引鍵組合-在預設鍵盤或輸入的法編輯器-透過多個索引鍵的事件可能會引發一個文字輸入的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3442">Because of key combinations - either in default keyboards or through input method editors - multiple key events might raise just one text input event.</span></span>  
  
 <span data-ttu-id="ba0f1-3443">此事件建立的別名<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement3D.TextInput>屬於類別的成員清單時<xref:System.Windows.UIElement3D>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3443">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.TextInput> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="ba0f1-3444">附加至事件處理常式<xref:System.Windows.UIElement3D.TextInput>事件會附加至基礎<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3444">Event handlers that are attached to the <xref:System.Windows.UIElement3D.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="ba0f1-3445"><xref:System.Windows.UIElement3D.TextInput> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3445"><xref:System.Windows.UIElement3D.TextInput> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3446">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3446">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3447">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3447">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3448">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3448">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TextInputEvent>|  
|<span data-ttu-id="ba0f1-3449">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3449">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3450">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3450">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3451">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3451">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="ba0f1-3452">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewTextInput>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3452">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTextInput>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3453">覆寫<xref:System.Windows.UIElement3D.OnTextInput%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3453">Override <xref:System.Windows.UIElement3D.OnTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3454">識別 <see cref="E:System.Windows.UIElement3D.TextInput" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3454">Identifies the <see cref="E:System.Windows.UIElement3D.TextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3455">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3455">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="ba0f1-3456">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3456">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="ba0f1-3457">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3457">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="ba0f1-3458">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3458">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="ba0f1-3459">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3459">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="ba0f1-3460"><xref:System.Windows.UIElement3D.TextInputEvent> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3460"><xref:System.Windows.UIElement3D.TextInputEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3461">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3461">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3462">手指在這個項目上方且在螢幕上觸控時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3462">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3463">根據預設，<xref:System.Windows.UIElement3D.PreviewTouchDown>和<xref:System.Windows.UIElement3D.TouchDown>手指觸控螢幕，並移動之前不會發生的事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3463">By default, the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="ba0f1-3464">手指在螢幕上按住卻不必移動它會使用按下並按住行為<xref:System.Windows.Input.Stylus>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3464">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="ba0f1-3465">按住不放的行為相當於按一下滑鼠右鍵。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3465">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="ba0f1-3466">會造成<xref:System.Windows.UIElement3D.PreviewTouchDown>並<xref:System.Windows.UIElement3D.TouchDown>事件發生在手指觸控螢幕，如設定<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>; 附加屬性`false`此元素。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3466">To cause the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3467">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3467">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3468">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3468">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchDownEvent>|  
|<span data-ttu-id="ba0f1-3469">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3469">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3470">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3470">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3471">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3471">Delegate</span></span>|<span data-ttu-id="ba0f1-3472">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3472"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="ba0f1-3473">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewTouchDown>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3473">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTouchDown>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3474">覆寫<xref:System.Windows.UIElement3D.OnTouchDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3474">Override <xref:System.Windows.UIElement3D.OnTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3475">識別 <see cref="E:System.Windows.UIElement3D.TouchDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3475">Identifies the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3476">當觸控從這個項目的界限外部移至內部時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3476">Occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3477">一律引發這個事件，或有觸控式裝置擷取至這個項目。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3477">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3478">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3478">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3479">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3479">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchEnterEvent>|  
|<span data-ttu-id="ba0f1-3480">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3480">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3481">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3481">Direct</span></span>|  
|<span data-ttu-id="ba0f1-3482">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3482">Delegate</span></span>|<span data-ttu-id="ba0f1-3483">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3483"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="ba0f1-3484">覆寫<xref:System.Windows.UIElement3D.OnTouchEnter%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3484">Override <xref:System.Windows.UIElement3D.OnTouchEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3485">識別 <see cref="E:System.Windows.UIElement3D.TouchEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3485">Identifies the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3486">取得已擷取至這個項目的所有觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3486">Gets all touch devices that are captured to this element.</span></span></summary>
        <value><span data-ttu-id="ba0f1-3487">已擷取至這個項目之 <see cref="T:System.Windows.Input.TouchDevice" /> 物件的列舉。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3487">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3488">取得已擷取至這個項目或其視覺化樹狀結構中之任何子項目的所有觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3488">Gets all touch devices that are captured to this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="ba0f1-3489">已擷取至這個項目或其視覺化樹狀結構中之任何子項目的 <see cref="T:System.Windows.Input.TouchDevice" /> 物件列舉。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3489">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3490">取得在這個項目上停留的所有觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3490">Gets all touch devices that are over this element.</span></span></summary>
        <value><span data-ttu-id="ba0f1-3491">在這個項目之上的 <see cref="T:System.Windows.Input.TouchDevice" /> 物件列舉。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3491">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3492">取得在這個項目或其視覺化樹狀結構中之任何子項目上停留的所有觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3492">Gets all touch devices that are over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="ba0f1-3493">在這個項目或其視覺化樹狀結構中之任何子項目上停留的 <see cref="T:System.Windows.Input.TouchDevice" /> 物件列舉。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3493">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3494">當觸控從這個項目的界限內部移至外部時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3494">Occurs when a touch moves from inside to outside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3495">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3495">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3496">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3496">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchLeaveEvent>|  
|<span data-ttu-id="ba0f1-3497">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3497">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3498">直接</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3498">Direct</span></span>|  
|<span data-ttu-id="ba0f1-3499">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3499">Delegate</span></span>|<span data-ttu-id="ba0f1-3500">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3500"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="ba0f1-3501">覆寫<xref:System.Windows.UIElement3D.OnTouchLeave%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3501">Override <xref:System.Windows.UIElement3D.OnTouchLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3502">識別 <see cref="E:System.Windows.UIElement3D.TouchLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3502">Identifies the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3503">手指在這個項目上方且在螢幕上移動時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3503">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3504">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3504">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3505">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3505">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchMoveEvent>|  
|<span data-ttu-id="ba0f1-3506">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3506">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3507">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3507">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3508">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3508">Delegate</span></span>|<span data-ttu-id="ba0f1-3509">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3509"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="ba0f1-3510">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewTouchMove>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3510">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTouchMove>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3511">覆寫<xref:System.Windows.UIElement3D.OnTouchMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3511">Override <xref:System.Windows.UIElement3D.OnTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3512">識別 <see cref="E:System.Windows.UIElement3D.TouchMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3512">Identifies the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3513">手指在這個項目上方且離開螢幕時發生。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3513">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="ba0f1-3514">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3514">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3515">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3515">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchUpEvent>|  
|<span data-ttu-id="ba0f1-3516">路由策略</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3516">Routing strategy</span></span>|<span data-ttu-id="ba0f1-3517">事件反昇</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3517">Bubbling</span></span>|  
|<span data-ttu-id="ba0f1-3518">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3518">Delegate</span></span>|<span data-ttu-id="ba0f1-3519">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3519"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="ba0f1-3520">對應的通道事件是<xref:System.Windows.UIElement3D.PreviewTouchUp>。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3520">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTouchUp>.</span></span>  
  
-   <span data-ttu-id="ba0f1-3521">覆寫<xref:System.Windows.UIElement3D.OnTouchUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3521">Override <xref:System.Windows.UIElement3D.OnTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3522">識別 <see cref="E:System.Windows.UIElement3D.TouchUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3522">Identifies the <see cref="E:System.Windows.UIElement3D.TouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement3D.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3523">取得或設定這個項目的 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 可見性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3523">Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.</span></span></summary>
        <value><span data-ttu-id="ba0f1-3524">列舉值。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3524">A value of the enumeration.</span></span> <span data-ttu-id="ba0f1-3525">預設值為 <see cref="F:System.Windows.Visibility.Visible" />。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3525">The default value is <see cref="F:System.Windows.Visibility.Visible" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3526">設定這個屬性會影響的值影響<xref:System.Windows.UIElement3D.IsVisible%2A>，其接著可能會引發<xref:System.Windows.UIElement3D.IsVisibleChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3526">Setting this property affects the value of <xref:System.Windows.UIElement3D.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement3D.IsVisibleChanged> event.</span></span> <span data-ttu-id="ba0f1-3527">不過，<xref:System.Windows.UIElement3D.IsVisible%2A>有影響其他因素，例如包含它的父代的可見性設定。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3527">However, <xref:System.Windows.UIElement3D.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.</span></span>  
  
 <span data-ttu-id="ba0f1-3528">項目所在<xref:System.Windows.UIElement3D.Visibility%2A>不是<xref:System.Windows.Visibility.Visible>不會參與輸入的事件 （或命令），並不會報告在點擊測試。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3528">Elements where <xref:System.Windows.UIElement3D.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands) and are not reported in hit testing.</span></span>  
  
 <span data-ttu-id="ba0f1-3529"><xref:System.Windows.UIElement3D.Visibility%2A> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3529"><xref:System.Windows.UIElement3D.Visibility%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3530">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3530">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="ba0f1-3531">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3531">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="ba0f1-3532">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3532">Identifier field</span></span>|<xref:System.Windows.UIElement3D.VisibilityProperty>|  
|<span data-ttu-id="ba0f1-3533">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3533">Metadata properties set to `true`</span></span>|<span data-ttu-id="ba0f1-3534">無</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3534">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba0f1-3535">識別 <see cref="P:System.Windows.UIElement3D.Visibility" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3535">Identifies the <see cref="P:System.Windows.UIElement3D.Visibility" /> dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba0f1-3536"><xref:System.Windows.UIElement3D.VisibilityProperty> .NET Framework 3.5 版中引進。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3536"><xref:System.Windows.UIElement3D.VisibilityProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="ba0f1-3537">如需詳細資訊，請參閱[版本和相依性](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="ba0f1-3537">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>