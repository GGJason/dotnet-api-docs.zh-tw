<Type Name="HierarchicalDataTemplate" FullName="System.Windows.HierarchicalDataTemplate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="667fe03184862a5b4c23082d8ac8d3aa264c8933" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39808255" /></Metadata><TypeSignature Language="C#" Value="public class HierarchicalDataTemplate : System.Windows.DataTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HierarchicalDataTemplate extends System.Windows.DataTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.HierarchicalDataTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class HierarchicalDataTemplate&#xA;Inherits DataTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class HierarchicalDataTemplate : System::Windows::DataTemplate" />
  <TypeSignature Language="F#" Value="type HierarchicalDataTemplate = class&#xA;    inherit DataTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DataTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示支援 <see cref="T:System.Windows.DataTemplate" /> 的 <see cref="T:System.Windows.Controls.HeaderedItemsControl" />，例如 <see cref="T:System.Windows.Controls.TreeViewItem" /> 或 <see cref="T:System.Windows.Controls.MenuItem" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 在下列範例中，`ListLeagueList` 是 `League` 物件的清單。 每個 `League` 物件都有一個 `Name` 和一組 `Division` 物件集合。 每一個 `Division` 都有一個 `Name` 和 `Team` 物件的集合，並且每一個 `Team` 物件都有一個 `Name`。  
  
 [!code-xaml[HierarchicalDataTemplateSnippet#HDT](~/samples/snippets/csharp/VS_Snippets_Wpf/HierarchicalDataTemplateSnippet/CS/window1.xaml#hdt)]   
  
 此範例所示範的是，使用<xref:System.Windows.HierarchicalDataTemplate>，您可以輕鬆地顯示包含其他清單的清單資料。 以下是範例的螢幕擷取畫面。  
  
 ![HierarchicalDataTemplate 範例螢幕擷取畫面](~/add/media/databinding-hierarchicaldatatemplate.png "HierarchicalDataTemplate 範例螢幕擷取畫面")  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.HierarchicalDataTemplate" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HierarchicalDataTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.HierarchicalDataTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HierarchicalDataTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.HierarchicalDataTemplate" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HierarchicalDataTemplate (object dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.HierarchicalDataTemplate.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataType As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HierarchicalDataTemplate(System::Object ^ dataType);" />
      <MemberSignature Language="F#" Value="new System.Windows.HierarchicalDataTemplate : obj -&gt; System.Windows.HierarchicalDataTemplate" Usage="new System.Windows.HierarchicalDataTemplate dataType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="dataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataType">這個樣板要套用至的型別。</param>
        <summary>使用樣板要套用至的指定型別，初始化 <see cref="T:System.Windows.HierarchicalDataTemplate" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `dataType`參數是[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]物件或字串，表示[!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]項目。 如需詳細資訊，請參閱[繫結來源概觀](~/docs/framework/wpf/data/binding-sources-overview.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlternationCount">
      <MemberSignature Language="C#" Value="public int AlternationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AlternationCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.AlternationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property AlternationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AlternationCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AlternationCount : int with get, set" Usage="System.Windows.HierarchicalDataTemplate.AlternationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定子項目的替代項目容器個數。</summary>
        <value>下一層級項目的替代項目容器個數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ItemsControl.AlternationCount%2A>和<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>屬性可讓您指定兩個或多個替代項目容器的外觀。 比方說，您可以指定每個第三個項目中替換背景色彩<xref:System.Windows.Controls.ItemsControl>。  <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>指派給每個項目容器<xref:System.Windows.Controls.ItemsControl>。  <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 從 0 開始，遞增為止<xref:System.Windows.Controls.ItemsControl.AlternationCount%2A>減 1 和 0 然後重新啟動。 例如，如果<xref:System.Windows.Controls.ItemsControl.AlternationCount%2A>為 3，有七個項目中的<xref:System.Windows.Controls.ItemsControl>下, 表列出<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>每個項目。  
  
|中的項目位置 <xref:System.Windows.Controls.ItemsControl>|<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>|  
|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|1|0|  
|2|1|  
|3|2|  
|4|0|  
|5|1|  
|6|2|  
|7|0|  
  
 當您設定<xref:System.Windows.HierarchicalDataTemplate.AlternationCount%2A>屬性，您將指定的子項目應該會看到<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>在該範圍內，不具有這樣的項目<xref:System.Windows.HierarchicalDataTemplate>套用到它。 比方說，如果<xref:System.Windows.Controls.HeaderedItemsControl>稱為`aHeaderedItemsControl`會使用<xref:System.Windows.HierarchicalDataTemplate>與<xref:System.Windows.HierarchicalDataTemplate.AlternationCount%2A>設定，項目容器的子系項目`aHeaderedItemsControl`將會有<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>，不的項目容器`aHeaderedItemsControl`。  
  
 有幾種的方法可用來指定不同的外觀的替代項目容器。 其中一個方法是將繫結屬性的項目容器<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>。 然後您可以使用<xref:System.Windows.Controls.AlternationConverter>指定的值應該套用至有特定項目容器<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>值。 您也可以使用觸發程序來變更項目容器的屬性值而定的值及其<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Windows.Controls.TreeView>三個層級的深度，資料繫結，而每個項目會顯示在<xref:System.Windows.Controls.TextBlock>。  <xref:System.Windows.Controls.TextBlock>中的第一層物件具有相同的屬性值，<xref:System.Windows.Controls.TextBlock>中的第二個層級的物件使用的替代值<xref:System.Windows.Controls.TextBlock.FontStyle%2A>屬性，而<xref:System.Windows.Controls.TextBlock>第三個層級中的物件使用的替代值<xref:System.Windows.Controls.TextBlock.Background%2A>屬性。  
  
 因為<xref:System.Windows.HierarchicalDataTemplate>第一層， `Level1Data`，已<xref:System.Windows.HierarchicalDataTemplate.AlternationCount%2A>屬性設定為 2，<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>如<xref:System.Windows.Controls.TreeViewItem>中第二個層級的替代字，介於 0 和 1 之間的物件。 在<xref:System.Windows.HierarchicalDataTemplate>針對第二個層級中， `Level2Data`，則<xref:System.Windows.Controls.TextBlock.FontStyle%2A>的<xref:System.Windows.Controls.TextBlock>繫結至<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>並<xref:System.Windows.Controls.AlternationConverter>提供要轉換<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>至替代<xref:System.Windows.Controls.TextBlock.FontStyle%2A>。  之間有類似的關聯性`Level2Data`並`Level3Data`:<xref:System.Windows.HierarchicalDataTemplate.AlternationCount%2A>上已設定為 3 `Level2Data`，和<xref:System.Windows.Controls.TextBlock>中`Level3Ddata`具有其<xref:System.Windows.Controls.TextBlock.Background%2A>屬性繫結至<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>。  
  
 [!code-xaml[AlternationIndexSnippets#5](~/samples/snippets/csharp/VS_Snippets_Wpf/AlternationIndexSnippets/CS/Window1.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemBindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup ItemBindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup ItemBindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemBindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemBindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ ItemBindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemBindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemBindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定複製至每一個子項目的 <see cref="T:System.Windows.Data.BindingGroup" />。</summary>
        <value>複製至每一個子項目的 <see cref="T:System.Windows.Data.BindingGroup" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您設定<xref:System.Windows.Controls.ItemsControl.ItemBindingGroup%2A>屬性，每個項目容器會取得<xref:System.Windows.Data.BindingGroup>具有相同<xref:System.Windows.Controls.ValidationRule>物件當做<xref:System.Windows.Controls.ItemsControl.ItemBindingGroup%2A>，但之屬性的描述中的繫結的資料，例如<xref:System.Windows.Data.BindingGroup.Items%2A>和<xref:System.Windows.Data.BindingGroup.BindingExpressions%2A>，是每個項目中資料的特定<xref:System.Windows.Controls.ItemsControl>。  您必須存取項目容器的<xref:System.Windows.FrameworkContentElement.BindingGroup%2A>執行作業這類驗證資料，並檢查是否有錯誤的項目。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemContainerStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style ItemContainerStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style ItemContainerStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemContainerStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemContainerStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ ItemContainerStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemContainerStyle : System.Windows.Style with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemContainerStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.Style" />，它會套用至每一個子項目的項目容器。</summary>
        <value><see cref="T:System.Windows.Style" />，要套用至每一個子項目的項目容器。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用這個屬性或<xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyleSelector%2A>屬性來設定要會影響包含資料項目的項目外觀的樣式。 比方說，針對<xref:System.Windows.Controls.TreeView>，產生的容器<xref:System.Windows.Controls.TreeViewItem>控制項，如<xref:System.Windows.Controls.Menu>，它們是<xref:System.Windows.Controls.MenuItem>控制項。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Windows.Controls.TreeView>其第一個層級中的項目使用一種樣式和其第二個層級中的另一個樣式項目。  設定第一層的樣式<xref:System.Windows.Controls.ItemsControl.ItemContainerStyle%2A>屬性<xref:System.Windows.Controls.TreeView>。  設定第二個層級的樣式<xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyle%2A>屬性<xref:System.Windows.HierarchicalDataTemplate>。  
  
 [!code-xaml[RecycleItemContainerShippets#VirtualizingTreeView](~/samples/snippets/csharp/VS_Snippets_Wpf/RecycleItemContainerShippets/CSharp/Window1.xaml#virtualizingtreeview)]  
  
 下列範例會建立在上述範例中使用的資料。  
  
 [!code-csharp[RecycleItemContainerShippets#TreeViewData](~/samples/snippets/csharp/VS_Snippets_Wpf/RecycleItemContainerShippets/CSharp/Window1.xaml.cs#treeviewdata)]
 [!code-vb[RecycleItemContainerShippets#TreeViewData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RecycleItemContainerShippets/visualbasic/window1.xaml.vb#treeviewdata)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemContainerStyleSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.StyleSelector ItemContainerStyleSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.StyleSelector ItemContainerStyleSelector" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemContainerStyleSelector" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemContainerStyleSelector As StyleSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::StyleSelector ^ ItemContainerStyleSelector { System::Windows::Controls::StyleSelector ^ get(); void set(System::Windows::Controls::StyleSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemContainerStyleSelector : System.Windows.Controls.StyleSelector with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemContainerStyleSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.StyleSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定自訂的樣式選取邏輯，這個樣式可以套用至每一個項目容器。</summary>
        <value><see cref="T:System.Windows.Controls.StyleSelector" />，選擇要使用哪一個樣式做為 <see cref="P:System.Windows.HierarchicalDataTemplate.ItemContainerStyle" />。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用<xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyle%2A>屬性來設定要會影響包含資料項目的項目外觀的樣式。 比方說，針對<xref:System.Windows.Controls.TreeView>，產生的容器<xref:System.Windows.Controls.TreeViewItem>控制項，如<xref:System.Windows.Controls.Menu>，它們是<xref:System.Windows.Controls.MenuItem>控制項。 如果您有多個定義的樣式，而且必須提供邏輯以選擇要套用，則您使用<xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyleSelector%2A>屬性而非<xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyle%2A>屬性。 請注意，是否將會忽略此屬性<xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyle%2A>屬性設定。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Windows.Controls.TreeView>使用<xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyle%2A>的<xref:System.Windows.HierarchicalDataTemplate>兩種樣式中的第二個層級的項目之間進行選擇<xref:System.Windows.Controls.TreeView>。  
  
 [!code-xaml[RecycleItemContainerShippets#ItemContainerStyleSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/RecycleItemContainerShippets/CSharp/Window1.xaml#itemcontainerstyleselector)]  
  
 下列範例所示<xref:System.Windows.Controls.StyleSelector>前一個範例中所用。  
  
 [!code-csharp[RecycleItemContainerShippets#TreeViewItemStyleSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/RecycleItemContainerShippets/CSharp/Window1.xaml.cs#treeviewitemstyleselector)]
 [!code-vb[RecycleItemContainerShippets#TreeViewItemStyleSelector](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RecycleItemContainerShippets/visualbasic/window1.xaml.vb#treeviewitemstyleselector)]  
  
 下列範例會建立在上述範例中使用的資料。  
  
 [!code-csharp[RecycleItemContainerShippets#TreeViewData](~/samples/snippets/csharp/VS_Snippets_Wpf/RecycleItemContainerShippets/CSharp/Window1.xaml.cs#treeviewdata)]
 [!code-vb[RecycleItemContainerShippets#TreeViewData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RecycleItemContainerShippets/visualbasic/window1.xaml.vb#treeviewdata)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemsSource">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingBase ItemsSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingBase ItemsSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemsSource" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemsSource As BindingBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingBase ^ ItemsSource { System::Windows::Data::BindingBase ^ get(); void set(System::Windows::Data::BindingBase ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemsSource : System.Windows.Data.BindingBase with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemsSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定此資料範本的繫結。此資料範本會指出代表資料層中下一個層級之集合的位置。</summary>
        <value>預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這會套用至<xref:System.Windows.Controls.ItemsControl.ItemsSource%2A>屬性產生<xref:System.Windows.Controls.HeaderedItemsControl>(例如<xref:System.Windows.Controls.MenuItem>或<xref:System.Windows.Controls.TreeViewItem>) 來指出哪裡可以找到代表資料階層中的下一個層級的集合。  
  
<a name="xamlTextUsage_ItemsSource"></a>   
## <a name="xaml-text-usage"></a>XAML 文字使用方式  
 針對[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的詳細資訊，請參閱<xref:System.Windows.Data.Binding>型別。  
  
   
  
## Examples  
 在下列範例中，`ListLeagueList` 是 `League` 物件的清單。 每個 `League` 物件都有一個 `Name` 和一組 `Division` 物件集合。 每一個 `Division` 都有一個 `Name` 和 `Team` 物件的集合，並且每一個 `Team` 物件都有一個 `Name`。  
  
 [!code-xaml[HierarchicalDataTemplateSnippet#HDT](~/samples/snippets/csharp/VS_Snippets_Wpf/HierarchicalDataTemplateSnippet/CS/window1.xaml#hdt)]   
  
 此範例所示範的是，使用<xref:System.Windows.HierarchicalDataTemplate>，您可以輕鬆地顯示包含其他清單的清單資料。 以下是範例的螢幕擷取畫面。  
  
 ![HierarchicalDataTemplate 範例螢幕擷取畫面](~/add/media/databinding-hierarchicaldatatemplate.png "HierarchicalDataTemplate 範例螢幕擷取畫面")  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemStringFormat">
      <MemberSignature Language="C#" Value="public string ItemStringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ItemStringFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemStringFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemStringFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ItemStringFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemStringFormat : string with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemStringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定一個複合字串，這個字串指定如何將資料階層架構內下一個層級中的項目 (如果項目顯示為字串的話) 格式化。</summary>
        <value>複合字串，它會指定如何將資料階層架構內下一個層級中的項目 (如果項目顯示為字串的話) 格式化。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate ItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate ItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemTemplate As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DataTemplate ^ ItemTemplate { System::Windows::DataTemplate ^ get(); void set(System::Windows::DataTemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemTemplate : System.Windows.DataTemplate with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要套用至所產生之 <see cref="T:System.Windows.DataTemplate" /> (例如 <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> 或 <see cref="T:System.Windows.Controls.HeaderedItemsControl" />) 上 <see cref="T:System.Windows.Controls.MenuItem" /> 屬性的 <see cref="T:System.Windows.Controls.TreeViewItem" />，以指出如何顯示資料階層架構中下一個層級的項目。</summary>
        <value><see cref="T:System.Windows.DataTemplate" />，要套用至所產生之 <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> (例如 <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> 或 <see cref="T:System.Windows.Controls.MenuItem" />) 上的 <see cref="T:System.Windows.Controls.TreeViewItem" /> 屬性，以指出如何顯示資料階層架構中下一個層級的項目。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector ItemTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector ItemTemplateSelector" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemTemplateSelector" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemTemplateSelector As DataTemplateSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::DataTemplateSelector ^ ItemTemplateSelector { System::Windows::Controls::DataTemplateSelector ^ get(); void set(System::Windows::Controls::DataTemplateSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemTemplateSelector : System.Windows.Controls.DataTemplateSelector with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemTemplateSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要套用至所產生之 <see cref="T:System.Windows.Controls.DataTemplateSelector" /> (例如 <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplateSelector" /> 或 <see cref="T:System.Windows.Controls.HeaderedItemsControl" />) 上 <see cref="T:System.Windows.Controls.MenuItem" /> 屬性的 <see cref="T:System.Windows.Controls.TreeViewItem" />，以指出如何選取樣板來顯示資料階層架構中下一個層級的項目。</summary>
        <value><see cref="T:System.Windows.Controls.DataTemplateSelector" /> 物件，要套用至所產生之 <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplateSelector" /> (例如 <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> 或 <see cref="T:System.Windows.Controls.MenuItem" />) 上的 <see cref="T:System.Windows.Controls.TreeViewItem" /> 屬性，以指出如何選取樣板來顯示資料階層架構中下一個層級的項目。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>