<Type Name="VisualStateGroup" FullName="System.Windows.VisualStateGroup">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f158c8d81a2f4694ed16551106363c676ea449c3" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39941683" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class VisualStateGroup : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateGroup extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateGroup" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateGroup&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateGroup : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateGroup = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.Markup.ContentProperty("States")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>包含互斥的 <see cref="T:System.Windows.VisualState" /> 物件與 <see cref="T:System.Windows.VisualTransition" /> 物件，用於從某一個狀態移動至另一個狀態。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每個<xref:System.Windows.VisualStateGroup>包含的集合<xref:System.Windows.VisualState>物件。 A<xref:System.Windows.VisualState>包含的集合<xref:System.Windows.Media.Animation.Storyboard>物件，以指定控制項的外觀變更當控制項處於特定狀態的變更。 比方說，<xref:System.Windows.Controls.Button>未按下時，於按下時，可能有稍微不同的外觀。 兩個指出<xref:System.Windows.Controls.Button>定義按下時，對應到 (`"Pressed"`) 並不是 (`"Normal"`)。  
  
 您將新增<xref:System.Windows.VisualState>藉由設定控制`VisualStateManager.VisualStateGroups`附加在控制項上的屬性。 您將狀態互斥彼此在同一個<xref:System.Windows.VisualStateGroup>。 例如，<xref:System.Windows.Controls.CheckBox>有兩個<xref:System.Windows.VisualStateGroup>物件。 其中包含狀態， `Normal`， `MouseOver`， `Pressed`，和`Disabled`。 另一個包含州`Checked`， `UnChecked`，和`Indeterminate`。 <xref:System.Windows.Controls.CheckBox>可能處於狀態`MouseOver`並`UnChecked`在此同時，但不是能在`MouseOver`和`Pressed`一次的狀態。  
  
 雖然您可以新增<xref:System.Windows.VisualState>物件的任何項目，是特別有用的方式，讓他人以重新定義的視覺行為<xref:System.Windows.Controls.Control>。 如果您建立使用自訂控制項<xref:System.Windows.Controls.ControlTemplate>，您可以指定哪些狀態控制項，可以藉由新增在成為<xref:System.Windows.TemplateVisualStateAttribute>在其類別定義。 然後建立新的人<xref:System.Windows.Controls.ControlTemplate>針對您的控制項可以新增<xref:System.Windows.VisualState>物件至範本。 <xref:System.Windows.TemplateVisualStateAttribute>可讓設計工具，例如 Expression Blend，來公開控制項的狀態。 具有相同的狀態<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType>屬於相同<xref:System.Windows.VisualStateGroup>。  
  
 如需有關如何使用<xref:System.Windows.VisualStateGroup>中的物件<xref:System.Windows.Controls.ControlTemplate>，請參閱[透過建立 ControlTemplate 自訂現有控制項的外觀](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。 如需有關如何建立可控制使用<xref:System.Windows.VisualStateManager>，請參閱 <<c2> [ 建立具有可自訂外觀](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)。  
  
 <xref:System.Windows.VisualStateGroup.Transitions%2A>屬性包含<xref:System.Windows.VisualTransition>控制項轉換之間狀態時，會套用的物件定義於<xref:System.Windows.VisualStateGroup>。  
  
   
  
## Examples  
 下列範例會建立簡單<xref:System.Windows.Controls.ControlTemplate>for<xref:System.Windows.Controls.Button>包含一個<xref:System.Windows.Controls.Grid>。 它也包含<xref:System.Windows.VisualStateGroup>名為`CommonStates`，其定義`MouseOver`和`Normal`狀態。 <xref:System.Windows.VisualStateGroup>還有<xref:System.Windows.VisualTransition>，指定一個半秒所需<xref:System.Windows.Controls.Grid>當使用者將滑鼠指標移至上方時，從綠色變更為紅色<xref:System.Windows.Controls.Button>。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateGroup.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateGroup();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.VisualStateGroup" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.VisualState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.VisualState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As VisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VisualState ^ CurrentState { System::Windows::VisualState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Windows.VisualState" Usage="System.Windows.VisualStateGroup.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.VisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前套用至控制項的 <see cref="T:System.Windows.VisualState" />。</summary>
        <value>目前套用至控制項的 <see cref="T:System.Windows.VisualState" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanged As EventHandler(Of VisualStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanged;" />
      <MemberSignature Language="F#" Value="member this.CurrentStateChanged : EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " Usage="member this.CurrentStateChanged : System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在控制項轉換至不同狀態之後發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個事件發生之後，控制會轉換成新的狀態和<xref:System.Windows.VisualStateGroup.CurrentStateChanging>就會發生事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanging" />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanging As EventHandler(Of VisualStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanging;" />
      <MemberSignature Language="F#" Value="member this.CurrentStateChanging : EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " Usage="member this.CurrentStateChanging : System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在控制項開始轉換至不同狀態時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當控制項開始轉換狀態時，就會發生的事件。 如果<xref:System.Windows.VisualTransition>套用狀態變更，此事件發生於轉換開始時。 如果<xref:System.Windows.VisualTransition>不會套用，就會發生此事件後的控制項轉換至新的狀態，但尚未<xref:System.Windows.VisualStateGroup.CurrentStateChanged>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.VisualStateGroup.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Windows.VisualStateGroup" /> 的名稱。</summary>
        <value>
          <see cref="T:System.Windows.VisualStateGroup" /> 的名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控制項作者可讓您指定哪些狀態控制項加上時，可以在<xref:System.Windows.TemplateVisualStateAttribute>在其類別定義。 具有相同的狀態<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType>屬於相同<xref:System.Windows.VisualStateGroup>。 設定<xref:System.Windows.VisualStateGroup.Name%2A>的<xref:System.Windows.VisualStateGroup>的值<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType>屬性。  
  
   
  
## Examples  
 下列範例會建立兩個<xref:System.Windows.VisualStateGroup>命名的物件`CommonStates`和`FocusStates`。 控制項將會從每一個狀態<xref:System.Windows.VisualStateGroup>隨時。 完整的範例，請參閱 <<c0> [ 透過建立 ControlTemplate 自訂現有控制項的外觀](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
 [!code-xaml[VSMButtonTemplate#5](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="States">
      <MemberSignature Language="C#" Value="public System.Collections.IList States { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList States" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.States" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property States As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ States { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.States : System.Collections.IList" Usage="System.Windows.VisualStateGroup.States" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得互斥 <see cref="T:System.Windows.VisualState" /> 物件的集合。</summary>
        <value>互斥 <see cref="T:System.Windows.VisualState" /> 物件的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會建立簡單<xref:System.Windows.Controls.ControlTemplate>for<xref:System.Windows.Controls.Button>包含一個<xref:System.Windows.Controls.Grid>。 它也包含<xref:System.Windows.VisualStateGroup>名為`CommonStates`，其定義`MouseOver`和`Normal`狀態。 <xref:System.Windows.VisualStateGroup>還有<xref:System.Windows.VisualTransition>，指定一個半秒所需<xref:System.Windows.Controls.Grid>當使用者將滑鼠指標移至上方時，從綠色變更為紅色<xref:System.Windows.Controls.Button>。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transitions">
      <MemberSignature Language="C#" Value="public System.Collections.IList Transitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Transitions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Transitions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transitions As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Transitions { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transitions : System.Collections.IList" Usage="System.Windows.VisualStateGroup.Transitions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Windows.VisualTransition" /> 物件的集合。</summary>
        <value>
          <see cref="T:System.Windows.VisualTransition" /> 物件的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualTransition>中的物件<xref:System.Windows.VisualStateGroup.Transitions%2A>之間的控制項轉換狀態中所定義時，會套用<xref:System.Windows.VisualStateGroup>。  
  
   
  
## Examples  
 下列範例會建立簡單<xref:System.Windows.Controls.ControlTemplate>for<xref:System.Windows.Controls.Button>包含一個<xref:System.Windows.Controls.Grid>。 它也包含<xref:System.Windows.VisualStateGroup>名為`CommonStates`，其定義`MouseOver`和`Normal`狀態。 <xref:System.Windows.VisualStateGroup>還有<xref:System.Windows.VisualTransition>，指定一個半秒所需<xref:System.Windows.Controls.Grid>當使用者將滑鼠指標移至上方時，從綠色變更為紅色<xref:System.Windows.Controls.Button>。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>