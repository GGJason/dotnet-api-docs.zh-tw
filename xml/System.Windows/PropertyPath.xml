<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8557652b4b165aa49213450463eba1ffb0a2f7de" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679792" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyPath" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyPath sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>實作資料結構，用以將屬性描述為另一個屬性下或擁有者型別下的路徑。 屬性路徑會用於物件的資料繫結，以及分鏡腳本與時間表的動畫。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別包含字串<xref:System.Windows.PropertyPath.Path%2A>，和相依性屬性的清單<xref:System.Windows.PropertyPath.PathParameters%2A>插入字串<xref:System.Windows.PropertyPath.Path%2A>。  
  
 <xref:System.Windows.PropertyPath> 支援兩種模式的行為：  
  
 **來源模式**描述作業所用做為來源的某些其他屬性的路徑。 這個模式由<xref:System.Windows.Data.Binding>類別，以支援資料繫結。  
  
 **目標模式**描述的路徑會設定為目標屬性的屬性。 此模式會使用以腳本及時間表的 setter 支援動畫。  
  
 比方說，`Background.Opacity`是兩個步驟的路徑。 此路徑所示： 首先，尋找`Background`屬性的物件，會得到值物件，`Background`屬性設定為，，，然後取得的值`Opacity`上該物件的屬性。  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## <a name="xaml-values"></a>XAML 值  
 *propertyPath*  
 評估為簡單或複雜屬性的路徑字串。 設定語法<xref:System.Windows.PropertyPath>中[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]靈活，但是複雜，並會在個別的主題描述[PropertyPath XAML 語法](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.PropertyPath" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::Object ^ parameter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">屬性路徑，描述到 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 屬性的路徑或為單一相依性屬性。</param>
        <summary>初始化 <see cref="T:System.Windows.PropertyPath" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式有兩個完全不同的使用方式取決於是否它正在使用的繫結，或分鏡腳本目標的目標模式單一步驟的屬性路徑的來源模式屬性路徑。  
  
 如果使用這個<xref:System.Windows.PropertyPath>在來源模式下的繫結`parameter`是字串，表示屬性名稱，或可以是字串，描述中的屬性的 「 逐步執行 「 路徑[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]正做為來源之物件的物件模型繫結。 針對繫結屬性路徑識別 」 步驟"的字元是句點 （.）。 也支援索引子 （包括多個索引子和型別差異） 的參考。 如需詳細資訊，明確地使用字串的語法上<xref:System.Windows.Data.Binding>物件，請參閱<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>。 當做來源使用的繫結的屬性不需要相依性屬性。 雙向更新繫結，如果參考的屬性必須可讀寫。 也請注意，繫結目標並沒有相依性屬性。 如需詳細資訊，請參閱[資料繫結概觀](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
 如果使用這個<xref:System.Windows.PropertyPath>分鏡腳本目標的單一步驟路徑的目標模式`parameter`通常提供做為型別<xref:System.Windows.DependencyProperty>。 您也可以指定的字串<xref:System.Windows.DependencyProperty.Name%2A>。 任一種評估相同的結果，因為它在內部儲存為字串。 提供<xref:System.Windows.DependencyProperty>會轉換成字串，以透過<xref:System.Windows.Markup.DependencyPropertyConverter>。 <xref:System.Windows.Markup.DependencyPropertyConverter>支援相依性屬性的限定的命名格式，因此您可以指定*typeName*。*propertyName*限定到相依性屬性名稱的字串<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>建構函式程式碼中的。 相依性屬性的識別項的完整的路徑是不同的概念，比複雜的路徑。 複合路徑<xref:System.Windows.PropertyPath>改以建立<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType>建構函式。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, params object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ParamArray pathParameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::String ^ path, ... cli::array &lt;System::Object ^&gt; ^ pathParameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">指定 <see cref="P:System.Windows.PropertyPath.Path" /> 的字串，採用語彙基元化格式。</param>
        <param name="pathParameters">設定 <see cref="P:System.Windows.PropertyPath.PathParameters" /> 之物件的陣列。</param>
        <summary>使用提供的路徑語彙基元 (Token) 字串和參數，初始化 <see cref="T:System.Windows.PropertyPath" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此簽章通常僅用於目標模式<xref:System.Windows.PropertyPath>複雜的路徑與使用方式。  
  
 這個建構函式支援`params`如`pathParameters`建構函式引數。 因此，您可以指定的內容`pathParameters`為一系列以逗號分隔的建構函式引數所填入的陣列，而不是無須維度陣列，並於其中填入它與`pathParameters`項目。 您指定每個項目必須是下列類型之一： <xref:System.Windows.DependencyProperty>， <xref:System.Reflection.PropertyInfo>， <xref:System.ComponentModel.PropertyDescriptor>。  
  
 如需有關參數的需求的詳細資訊，請參閱<xref:System.Windows.PropertyPath.Path%2A>和<xref:System.Windows.PropertyPath.PathParameters%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定描述路徑的字串。</summary>
        <value>描述路徑的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性中所包含的字串有三個完全不同的意義取決於是否<xref:System.Windows.PropertyPath>用於分鏡腳本目標時，目標模式的單一步驟屬性路徑的繫結，或複雜的來源模式屬性路徑分鏡腳本目標路徑。  
  
 如果使用這個<xref:System.Windows.PropertyPath>在來源模式下的繫結<xref:System.Windows.PropertyPath.Path%2A>是字串，表示屬性名稱，或可以是字串，描述中的屬性的 「 逐步執行 「 路徑[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]正做為來源之物件的物件模型繫結。 針對繫結屬性路徑識別 」 步驟"的字元是句點 （.）。 也支援索引子 （包括多個索引子和型別差異） 的參考。 如需詳細資訊，明確地使用字串的語法上<xref:System.Windows.Data.Binding>物件，請參閱<xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>。 當做來源使用的繫結的屬性不需要相依性屬性。 如果繫結雙向更新，內容來源必須可讀寫。 也請注意，繫結目標並沒有相依性屬性。 如需詳細資訊，請參閱[資料繫結概觀](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
 如果使用這個<xref:System.Windows.PropertyPath>分鏡腳本目標的單一步驟路徑的目標模式<xref:System.Windows.PropertyPath>是一個字串，是*typeName*。*propertyName*限定相依性屬性名稱的字串。  
  
 如果使用這個<xref:System.Windows.PropertyPath>分鏡腳本目標的複雜路徑<xref:System.Windows.PropertyPath.Path%2A>是描述所提供之各種物件的關聯性的語彙基元化的字串格式<xref:System.Windows.PropertyPath.PathParameters%2A>。  
  
-   此格式指定陣列中的每個項目放在括號項目的陣列索引。 例如，若要指定陣列中的第一個項目，字串語彙基元是`(0)`。  
  
-   項目 （在路徑中的 「 步驟 」） 之間的關聯性指定的點 （.）。 之前的點屬性是第一個步驟在路徑中之後, 的屬性是第二個步驟中，以此類推 （您可以指定兩個以上的步驟）。 鏈結中的最後一個步驟永遠代表正在顯示動畫之屬性。  
  
-   使用索引子的語法，使用方括號內的索引存取集合屬性中的項目 （[和]）。 索引子會附加至代表之屬性的語彙基元。 例如，下列是兩個步驟路徑，與語彙基元的組合中的第一個步驟指定該屬性的集合中的第二個項目： `(0)[1].(1)` 。 您無法使用索引子上鏈結; 中的最後一個屬性您不能以動畫顯示的實際集合的位置，您必須建立該物件上的屬性的動畫。  
  
 路徑字串<xref:System.Windows.PropertyPath>通常透過建構函式所建立：<xref:System.Windows.PropertyPath.%23ctor%28System.Object%29>繫結或單一步驟分鏡腳本目標簽章<xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29>multi-step 分鏡腳本目標的簽章。  
  
 **XAML:** 當您使用<xref:System.Windows.PropertyPath>來描述中的屬性參考[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，如屬性值，您所指定的字串第一次由型別轉換子 (<xref:System.Windows.PropertyPathConverter>)。 此型別轉換子，以處理字串，然後根據它的語法會呼叫其中一種<xref:System.Windows.PropertyPath>建構函式簽章。 處理屬性值的類型轉換子透過這個間接取值通常是您如何使用<xref:System.Windows.PropertyPath>中[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，而不是宣告<xref:System.Windows.PropertyPath>物件項目，然後這類屬性套用特定值<xref:System.Windows.PropertyPath.Path%2A>和<xref:System.Windows.PropertyPath.PathParameters%2A>. 如需詳細資訊，請參閱[PropertyPath XAML 語法](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)。  
  
<a name="xamlTextUsage_Path"></a>   
## <a name="xaml-text-usage"></a>XAML 文字用法  
 成員<xref:System.Windows.PropertyPath>類型未通常設定在直接[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]語法。 請參閱＜備註＞。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathParameters As Collection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ PathParameters { System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得要使用的參數之清單，這些參數會在路徑參考索引參數時使用。</summary>
        <value>參數清單。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性<xref:System.Windows.PropertyPath>通常透過建構函式所建立。 設定<xref:System.Windows.PropertyPath.PathParameters%2A>、<xref:System.Windows.PropertyPath.%23ctor%2A>建構函式會格外方便因為`pathParameters`建構函式引數指定為`params`，這表示您不需要建立或維度的陣列建構的。 您只需指定陣列的每個成員，做為額外的參數。  
  
 如果最後一個屬性的目標是<xref:System.Windows.Freezable>輸入時，值將會複製。 如需詳細資訊，請參閱[概觀腳本](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)。  
  
 實際評估屬性鏈結是由 分鏡腳本動畫機制執行。 在<xref:System.Windows.PropertyPath>層級，不會執行驗證以確定路徑的步驟完全連接。 比方說，您可以建構包含的屬性路徑<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType>的第一個步驟，和<xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType>做為第二個步驟。 但這類屬性的路徑將會失敗實際套用做為目標，如果因為筆刷類型的填滿<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType>沒有<xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType>屬性。 無效的屬性路徑會以無訊息模式失敗。 如需詳細資訊，請參閱[分鏡腳本概觀](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)。  
  
 **XAML:** 當您使用<xref:System.Windows.PropertyPath>來描述中的屬性參考[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，如屬性值，您所指定的字串第一次由型別轉換子 (<xref:System.Windows.PropertyPathConverter>)。 此型別轉換子，以處理字串，然後根據它的語法會呼叫其中一種<xref:System.Windows.PropertyPath>建構函式簽章。 處理屬性值的類型轉換子透過這個間接取值通常是您如何使用<xref:System.Windows.PropertyPath>中[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，而不是宣告<xref:System.Windows.PropertyPath>物件項目，然後這類屬性套用特定值<xref:System.Windows.PropertyPath.Path%2A>和<xref:System.Windows.PropertyPath.PathParameters%2A>. 如需詳細資訊，請參閱[PropertyPath XAML 語法](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)。  
  
<a name="xamlTextUsage_PathParameters"></a>   
## <a name="xaml-text-usage"></a>XAML 文字用法  
 成員<xref:System.Windows.PropertyPath>類型未通常設定在直接[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]語法。 請參閱＜備註＞。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>