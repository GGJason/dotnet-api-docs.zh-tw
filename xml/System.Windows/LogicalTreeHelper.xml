<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f2fd27ad4c537a177069b372af2f1a949e102361" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30678222" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供靜態 Helper 方法來查詢邏輯樹狀中的物件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.LogicalTreeHelper>類別提供方法，您可以使用傳回子物件的集合，或特定物件之邏輯樹狀結構的子節點內。 不過，大部分的通常要執行的物件樹狀目錄作業也會公開類似的方法或屬性上<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>。 例如，請嘗試下列各項：  
  
-   而不是呼叫靜態<xref:System.Windows.LogicalTreeHelper.GetChildren%2A>方法，傳回的列舉值的邏輯子物件，使用專用的集合，該物件的內容模型中公開。 支援內容模型的幾乎所有物件會都公開一些屬性，其中包含子物件的集合，並在該集合會提供直接集合介面的支援。  
  
-   而不是呼叫靜態<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>方法，以取得所指定名稱： 呼叫的子物件<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType>或<xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType>特定物件上的方法。  
  
 <xref:System.Windows.LogicalTreeHelper> 是最適合用於分析情況下您向上或向下到多個層級，則邏輯樹狀結構以遞迴方式在出差，想要用於檢查不同的父或子物件一致的方法。 在此情況下，您可能會存取的內容模型，混合，因此使用更多的內容模型特定的應用程式開發介面會太複雜。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">要帶入檢視的 UI 項目。</param>
        <summary>嘗試將所要求的 UI 項目帶入檢視，同時對目標引發 <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> 事件以報告結果。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫執行個體方法通常較為方便<xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType>或<xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType>而不是此靜態公用程式方法。 執行個體方法的行為就相當於靜態方法的行為。  
  
 即使`current`UI 項目提供<xref:System.Windows.FrameworkContentElement>，產生的事件方法仍然相同<xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType>事件，以起始端<xref:System.Windows.FrameworkContentElement>可識別藉由檢查事件的事件資料。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">做為搜尋起點的物件。 這個物件必須是 <see cref="T:System.Windows.FrameworkElement" /> 或 <see cref="T:System.Windows.FrameworkContentElement" />。</param>
        <param name="elementName">要尋找之物件的名稱。</param>
        <summary>嘗試尋找並傳回具有指定之名稱的物件。 搜尋將從指定的物件開始，並持續至邏輯樹狀結構的子節點。</summary>
        <returns>具有相符名稱的物件 (如果找到的話)。如果在邏輯樹狀結構中找不到相符名稱，則傳回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法<xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType>和<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType>表面上類似於<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>，但運作方式為不同的邏輯：  
  
-   搜尋方向<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>朝向 （向下樹狀目錄）; 的子物件的搜尋方向`FindName`方法會向父物件 （向上樹狀目錄）。  
  
-   `FindName`方法由 XAML 名稱範圍的概念。 使用`FindName`保證都只有一個該名稱的物件存在，因為 XAML namescopes 強制執行唯一性。 相反地，<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>在搜尋期間，會忽略 XAML 名稱範圍和可能會跨 XAML 名稱範圍界限。 因此，建議您不能保證唯一性的`elementName`名稱一旦越過界限。 如需 XAML 名稱範圍的詳細資訊，請參閱[WPF XAML Namescopes](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>藉由處理邏輯樹狀結構，傳回指定之物件的直接子物件集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">要從中開始處理邏輯樹狀的物件。 這必須是 <see cref="T:System.Windows.FrameworkElement" /> 或 <see cref="T:System.Windows.FrameworkContentElement" />。</param>
        <summary>透過處理邏輯樹狀，傳回所指定物件的立即子物件集合。</summary>
        <returns>所指定物件之邏輯樹狀結構中的可列舉立即子物件集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此簽章與協助程式方法主要是當您不確定是否`current`是<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>和也是不確定該物件的類別是否支援它自己的內容模型的集合。 如果您可以判斷您要查詢之物件的類型，請檢查您知道的特定內容屬性存在於該型別。 例如，如果您知道物件查詢的是<xref:System.Windows.Controls.ItemsControl>，檢查<xref:System.Windows.Controls.ItemsControl.Items%2A>屬性來取得強類型的集合，其中具有集合介面的支援，而且可能比更清楚的列舉值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">要從中開始處理邏輯樹狀的物件。</param>
        <summary>藉由處理邏輯樹狀結構，傳回指定之 <see cref="T:System.Windows.FrameworkContentElement" /> 的直接子物件集合。</summary>
        <returns>邏輯樹狀結構中，從 <paramref name="current" /> 開始的直接子物件之可列舉的集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">要從中開始處理邏輯樹狀的物件。</param>
        <summary>藉由處理邏輯樹狀結構，傳回指定之 <see cref="T:System.Windows.FrameworkElement" /> 的直接子物件集合。</summary>
        <returns>邏輯樹狀結構中，從 <paramref name="current" /> 開始的直接子物件之可列舉的集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">要尋找父物件的物件。 這個物件應該是 <see cref="T:System.Windows.FrameworkElement" /> 或 <see cref="T:System.Windows.FrameworkContentElement" />。</param>
        <summary>藉由處理邏輯樹狀結構，傳回指定之物件的父物件。</summary>
        <returns>要求的父物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法是只包裝函式可取得適當的型別版本 (<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>) 的<xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType>或<xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType>屬性，則為，除非您無法判斷`current`您可能想要檢查個別的型別，改為執行個體屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>