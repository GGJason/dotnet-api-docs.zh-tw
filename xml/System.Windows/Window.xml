<Type Name="Window" FullName="System.Windows.Window">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9dd7e936ea22b7525eb1d45f6018d5044891941f" />
    <Meta Name="ms.sourcegitcommit" Value="6f3d3181d9ca22a1ab46a7f61f3ee152f2b844ea" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/27/2018" />
    <Meta Name="ms.locfileid" Value="50178220" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Window : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Window extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Window" />
  <TypeSignature Language="VB.NET" Value="Public Class Window&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Window : System::Windows::Controls::ContentControl" />
  <TypeSignature Language="F#" Value="type Window = class&#xA;    inherit ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d15ad-101">提供建立、設定、顯示和管理視窗與對話方塊存留期的能力。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d15ad-101">Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-102">使用者與獨立的應用程式之間點是互動的一個視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-102">The point of interaction between a user and a standalone application is a window.</span></span> <span data-ttu-id="d15ad-103">A[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]視窗是由兩個不同區域所組成：</span><span class="sxs-lookup"><span data-stu-id="d15ad-103">A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:</span></span>  
  
-   <span data-ttu-id="d15ad-104">非工作區，它會裝載 windows 裝飾，包括圖示、 標題、 系統 功能表中，最小化按鈕、 最大化 按鈕、 還原 按鈕、 關閉 按鈕，並加上框線。</span><span class="sxs-lookup"><span data-stu-id="d15ad-104">A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</span></span>  
  
-   <span data-ttu-id="d15ad-105">工作區，裝載應用程式特定內容。</span><span class="sxs-lookup"><span data-stu-id="d15ad-105">A client area, which hosts application-specific content.</span></span>  
  
 <span data-ttu-id="d15ad-106">下圖顯示標準的視窗：</span><span class="sxs-lookup"><span data-stu-id="d15ad-106">A standard window is shown in the following figure:</span></span>  
  
 <span data-ttu-id="d15ad-107">![視窗項目](~/add/media/windowoverviewfigure1.PNG "視窗項目")</span><span class="sxs-lookup"><span data-stu-id="d15ad-107">![Window elements](~/add/media/windowoverviewfigure1.PNG "Window elements")</span></span>  
  
 <span data-ttu-id="d15ad-108"><xref:System.Windows.Window> 封裝建立、 設定、 顯示，以及管理視窗和對話方塊的存留期的能力，並提供下列索引鍵的服務：</span><span class="sxs-lookup"><span data-stu-id="d15ad-108"><xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</span></span>  
  
 <span data-ttu-id="d15ad-109">**生命週期管理**: <xref:System.Windows.Window.Activate%2A>， <xref:System.Windows.Window.Activated>， <xref:System.Windows.Window.Close%2A>， <xref:System.Windows.Window.Closed>， <xref:System.Windows.Window.Closing>， <xref:System.Windows.Window.Deactivated>， <xref:System.Windows.Window.Hide%2A>， <xref:System.Windows.Window.IsActive%2A>， <xref:System.Windows.Window.Show%2A>， <xref:System.Windows.Window.SourceInitialized>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-109">**Lifetime Management**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</span></span>  
  
 <span data-ttu-id="d15ad-110">**視窗管理**: <xref:System.Windows.Window.GetWindow%2A>， <xref:System.Windows.Window.OwnedWindows%2A>， <xref:System.Windows.Window.Owner%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-110">**Window Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.</span></span>  
  
 <span data-ttu-id="d15ad-111">**外觀和行為**: <xref:System.Windows.Window.AllowsTransparency%2A>， <xref:System.Windows.Window.ContentRendered>， <xref:System.Windows.Window.DragMove%2A>， <xref:System.Windows.Window.Icon%2A>， <xref:System.Windows.Window.Left%2A>， <xref:System.Windows.Window.LocationChanged>， <xref:System.Windows.Window.ResizeMode%2A>， <xref:System.Windows.Window.RestoreBounds%2A>， <xref:System.Windows.Window.ShowActivated%2A>， <xref:System.Windows.Window.ShowInTaskbar%2A>， <xref:System.Windows.Window.SizeToContent%2A>，<xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span><span class="sxs-lookup"><span data-stu-id="d15ad-111">**Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span></span>  
  
 <span data-ttu-id="d15ad-112">**Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>， <xref:System.Windows.Window.ShowDialog%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-112">**Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="d15ad-113">此外，<xref:System.Windows.Application>公開 （expose) 來管理所有的 windows 應用程式中的特殊支援：</span><span class="sxs-lookup"><span data-stu-id="d15ad-113">Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:</span></span>  
  
-   <span data-ttu-id="d15ad-114">應用程式會維護一份所有目前的應用程式中執行個體化的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-114">Application maintains a list of all the windows that are currently instantiated in the application.</span></span> <span data-ttu-id="d15ad-115">這份清單由<xref:System.Windows.Application.Windows%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-115">This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.</span></span>  
  
-   <span data-ttu-id="d15ad-116">根據預設，<xref:System.Windows.Application.MainWindow%2A>會自動設定的第一個參考<xref:System.Windows.Window>，具現化的應用程式中。</span><span class="sxs-lookup"><span data-stu-id="d15ad-116">By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application.</span></span> <span data-ttu-id="d15ad-117">這藉此讓主應用程式視窗的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-117">This thereby making the window the main application window.</span></span>  
  
 <span data-ttu-id="d15ad-118">A<xref:System.Windows.Window>可以使用標記、 標記和程式碼後置或程式碼來實作。</span><span class="sxs-lookup"><span data-stu-id="d15ad-118">A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code.</span></span>  
  
 <span data-ttu-id="d15ad-119"><xref:System.Windows.Window> 主要用來顯示視窗和對話方塊的獨立應用程式。</span><span class="sxs-lookup"><span data-stu-id="d15ad-119"><xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications.</span></span> <span data-ttu-id="d15ad-120">不過，對於需要在視窗層級，例如精靈中，瀏覽應用程式，您可以使用<xref:System.Windows.Navigation.NavigationWindow>在內。<xref:System.Windows.Navigation.NavigationWindow>衍生自<xref:System.Windows.Window>並與瀏覽器樣式巡覽支援加以擴充。</span><span class="sxs-lookup"><span data-stu-id="d15ad-120">However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-121">可巡覽內容的資料島可以合併到使用其他內容與內容容器<xref:System.Windows.Controls.Frame>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-121">Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="d15ad-122"><xref:System.Windows.Window> 需要`UnmanagedCode`具現化的安全性權限。</span><span class="sxs-lookup"><span data-stu-id="d15ad-122"><xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated.</span></span> <span data-ttu-id="d15ad-123">這會有下列結果：</span><span class="sxs-lookup"><span data-stu-id="d15ad-123">This has the following consequences:</span></span>  
  
-   [!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]<span data-ttu-id="d15ad-124">-已部署的獨立應用程式會要求從網際網路或近端內部網路區域啟動時的權限提高權限。</span><span class="sxs-lookup"><span data-stu-id="d15ad-124">-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</span></span>  
  
-   [!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)] <span data-ttu-id="d15ad-125">所要求的任何項目少於完整權限不能具現化的視窗和對話方塊。</span><span class="sxs-lookup"><span data-stu-id="d15ad-125">that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</span></span>  
  
 <span data-ttu-id="d15ad-126">如需獨立應用程式部署和安全性考量的詳細資訊，請參閱[WPF 安全性策略 – 平台安全性](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)。</span><span class="sxs-lookup"><span data-stu-id="d15ad-126">For information about standalone application deployment and security considerations, see [WPF Security Strategy - Platform Security](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).</span></span>  
  
 <span data-ttu-id="d15ad-127">A<xref:System.Windows.Window>是<xref:System.Windows.Controls.ContentControl>，這表示它可以包含任何類型 （例如字串、 影像或工作面板） 的單一物件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-127">A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</span></span> <span data-ttu-id="d15ad-128">如需詳細資訊，請參閱 <xref:System.Windows.Controls.ContentControl> 類別。</span><span class="sxs-lookup"><span data-stu-id="d15ad-128">For more information, see the <xref:System.Windows.Controls.ContentControl> class.</span></span> <span data-ttu-id="d15ad-129">此外，<xref:System.Windows.Window>是根元素，因此，不能屬於另一個項目的內容。</span><span class="sxs-lookup"><span data-stu-id="d15ad-129">Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-130"><xref:System.Windows.FrameworkElement.Height%2A>， <xref:System.Windows.FrameworkElement.Width%2A>， <xref:System.Windows.Window.Top%2A>，以及<xref:System.Windows.Window.Left%2A>上設定屬性<xref:System.Windows.Window>透過樣式不會在執行階段套用。</span><span class="sxs-lookup"><span data-stu-id="d15ad-130">The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time.</span></span>  
  
## <a name="customizing-the-window-control"></a><span data-ttu-id="d15ad-131">自訂視窗控制項</span><span class="sxs-lookup"><span data-stu-id="d15ad-131">Customizing the Window Control</span></span>  
 <span data-ttu-id="d15ad-132">若要將相同的屬性設定套用至多個<xref:System.Windows.Window>控制項，可使用<xref:System.Windows.FrameworkElement.Style%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-132">To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="d15ad-133">您可以修改預設<xref:System.Windows.Controls.ControlTemplate>，讓控制項的獨特的外觀。</span><span class="sxs-lookup"><span data-stu-id="d15ad-133">You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance.</span></span> <span data-ttu-id="d15ad-134">如需有關建立<xref:System.Windows.Controls.ControlTemplate>，請參閱 <<c2> [ 透過建立 ControlTemplate 自訂現有控制項的外觀](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。</span><span class="sxs-lookup"><span data-stu-id="d15ad-134">For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  <span data-ttu-id="d15ad-135">若要查看的組件和狀態所特有<xref:System.Windows.Window>，請參閱 < [Window 樣式和範本](~/docs/framework/wpf/controls/window-styles-and-templates.md)。</span><span class="sxs-lookup"><span data-stu-id="d15ad-135">To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md).</span></span>  
  
 <span data-ttu-id="d15ad-136">此控制項的相依性屬性可能會設定控制項的預設樣式。</span><span class="sxs-lookup"><span data-stu-id="d15ad-136">Dependency properties for this control might be set by the control’s default style.</span></span>  <span data-ttu-id="d15ad-137">如果屬性設定為預設樣式，屬性可能會變更其預設值，當控制項出現在應用程式。</span><span class="sxs-lookup"><span data-stu-id="d15ad-137">If a property is set by a default style, the property might change from its default value when the control appears in the application.</span></span> <span data-ttu-id="d15ad-138">預設樣式會決定由哪一個桌面佈景主題時，會使用應用程式正在執行。</span><span class="sxs-lookup"><span data-stu-id="d15ad-138">The default style is determined by which desktop theme is used when the application is running.</span></span>  <span data-ttu-id="d15ad-139">如需詳細資訊，請參閱 <<c0> [ 預設 WPF 佈景主題](http://go.microsoft.com/fwlink/?LinkID=158252)。</span><span class="sxs-lookup"><span data-stu-id="d15ad-139">For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-140">設定視覺化屬性只能影響該屬性是否都存在於<xref:System.Windows.Window>控制項的預設範本，並設定使用。</span><span class="sxs-lookup"><span data-stu-id="d15ad-140">Setting a visual property will only have an effect if that property is both present in <xref:System.Windows.Window> control's default template and is set by using a .</span></span> <span data-ttu-id="d15ad-141">您可以找到的視覺化屬性清單中的 「 變更視覺結構的控制項 」 一節[透過建立 ControlTemplate 自訂現有控制項的外觀](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。</span><span class="sxs-lookup"><span data-stu-id="d15ad-141">You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-142">下列範例示範如何以標準視窗是定義只使用標記：</span><span class="sxs-lookup"><span data-stu-id="d15ad-142">The following example shows how a standard window is defined using only markup:</span></span>  
  
 [!code-xaml[WindowSnippets#WindowMARKUPONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  
  
 <span data-ttu-id="d15ad-143">下列範例示範如何使用定義標準的視窗只有程式碼：</span><span class="sxs-lookup"><span data-stu-id="d15ad-143">The following example shows how a standard window is defined using only code:</span></span>  
  
 [!code-csharp[WindowSnippets#WindowCODEONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/CodeOnlyWindow.cs#windowcodeonly)]
 [!code-vb[WindowSnippets#WindowCODEONLY](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/codeonlywindow.vb#windowcodeonly)]  
  
 <span data-ttu-id="d15ad-144">下列範例示範如何以標準視窗是使用標記和程式碼後置的組合所定義。</span><span class="sxs-lookup"><span data-stu-id="d15ad-144">The following example shows how a standard window is defined using a combination of markup and code-behind.</span></span>  
  
 [!code-xaml[WindowSnippets#WindowXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml#windowxaml)]  
  
 [!code-csharp[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml.cs#windowcodebehind)]
 [!code-vb[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/mainwindow.xaml.vb#windowcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Window.Show" />
    <altmember cref="M:System.Windows.Window.ShowDialog" />
    <altmember cref="P:System.Windows.Window.DialogResult" />
    <altmember cref="T:System.Windows.Application" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Window ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Window();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-145">初始化 <see cref="T:System.Windows.Window" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-145">Initializes a new instance of the <see cref="T:System.Windows.Window" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-146">建構函式初始化<xref:System.Windows.FrameworkElement.Width%2A>， <xref:System.Windows.FrameworkElement.Height%2A>， <xref:System.Windows.Window.Top%2A>，以及<xref:System.Windows.Window.Left%2A>屬性設為預設<xref:System.Windows.Window>值。</span><span class="sxs-lookup"><span data-stu-id="d15ad-146">The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values.</span></span>  
  
 <span data-ttu-id="d15ad-147">如果在建立視窗<xref:System.AppDomain>具有<xref:System.Windows.Application>物件，建構函式加入<xref:System.Windows.Window>物件的一組<xref:System.Windows.Application>-管理透過 windows<xref:System.Windows.Application.Windows%2A>屬性<xref:System.Windows.Application>物件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-147">If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="d15ad-148">呼叫不安全的原生方法，這個物件的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-148">for permission for this object to call unsafe native methods.</span>
          </span>
          <span data-ttu-id="d15ad-149">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-149">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public bool Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Activate();" />
      <MemberSignature Language="F#" Value="member this.Activate : unit -&gt; bool" Usage="window.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-150">嘗試將視窗帶到前景並加以啟動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-150">Attempts to bring the window to the foreground and activates it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d15ad-151">如果已成功啟動 <see cref="T:System.Windows.Window" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-151">
              <see langword="true" /> if the <see cref="T:System.Windows.Window" /> was successfully activated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-152">規則，判斷是否已啟動 視窗是與所使用的相同[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]`SetForegroundWindow`函式 (User32.dll)。</span><span class="sxs-lookup"><span data-stu-id="d15ad-152">The rules that determine whether the window is activated are the same as those used by the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` function (User32.dll).</span></span>  
  
 <span data-ttu-id="d15ad-153">如果不是使用者的前景應用程式，Windows Presentation Foundation 應用程式中啟動視窗則<xref:System.Windows.Application.Activated>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-153">If the window is activated in a Windows Presentation Foundation application that is not the user's foreground application, <xref:System.Windows.Application.Activated> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-154">在瀏覽器裝載的視窗時，無法呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="d15ad-154">This method cannot be called when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d15ad-155">若要啟用視窗的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-155">for permission to activate a window.</span>
          </span>
          <span data-ttu-id="d15ad-156">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-156">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="Activated">
      <MemberSignature Language="C#" Value="public event EventHandler Activated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Activated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Activated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Activated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Activated;" />
      <MemberSignature Language="F#" Value="member this.Activated : EventHandler " Usage="member this.Activated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-157">視窗變成前景視窗時發生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-157">Occurs when a window becomes the foreground window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-158">視窗已啟動 （變成前景視窗） 時：</span><span class="sxs-lookup"><span data-stu-id="d15ad-158">A window is activated (becomes the foreground window) when:</span></span>  
  
-   <span data-ttu-id="d15ad-159">第一次開啟視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-159">The window is first opened.</span></span>  
  
-   <span data-ttu-id="d15ad-160">使用者選項切換到視窗中，使用滑鼠按下 ALT + TAB，或從 [工作管理員] 中選取它。</span><span class="sxs-lookup"><span data-stu-id="d15ad-160">A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</span></span>  
  
-   <span data-ttu-id="d15ad-161">使用者按一下視窗的工作列按鈕。</span><span class="sxs-lookup"><span data-stu-id="d15ad-161">A user clicks the window's taskbar button.</span></span>  
  
 <span data-ttu-id="d15ad-162">需要偵測當它們變成啟動的 Windows 可處理<xref:System.Windows.Window.Activated>事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-162">Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="d15ad-163">視窗第一次啟動之後，它可能會停用並重新啟動幾次在其存留期間。</span><span class="sxs-lookup"><span data-stu-id="d15ad-163">After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</span></span> <span data-ttu-id="d15ad-164">如果應用程式的狀態或行為取決於其啟用狀態，它可以檢查<xref:System.Windows.Window.IsActive%2A>來判斷哪一個啟用的狀態。</span><span class="sxs-lookup"><span data-stu-id="d15ad-164">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="d15ad-165">應用程式也可以是<xref:System.Windows.Application.Activated>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-165">An application can also be <xref:System.Windows.Application.Activated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparency">
      <MemberSignature Language="C#" Value="public bool AllowsTransparency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsTransparency" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.AllowsTransparency" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowsTransparency As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsTransparency { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowsTransparency : bool with get, set" Usage="System.Windows.Window.AllowsTransparency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-166">取得或設定值，這個值表示視窗的工作區是否支援透明度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-166">Gets or sets a value that indicates whether a window's client area supports transparency.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-167">如果視窗支援透明度則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-167">
              <see langword="true" /> if the window supports transparency; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-168">當<xref:System.Windows.Controls.Control.Background%2A>之視窗的屬性設定為透明色彩、 使用<xref:System.Windows.Media.Brushes.Transparent%2A>比方說，視窗會保持不透明。</span><span class="sxs-lookup"><span data-stu-id="d15ad-168">When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque.</span></span> <span data-ttu-id="d15ad-169">這表示，不能看到桌面和任何執行中的應用程式"beneath"視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-169">This means that the desktop and any running applications "beneath" the window cannot be seen.</span></span> <span data-ttu-id="d15ad-170">若要啟用這種類型的透明度<xref:System.Windows.Window.AllowsTransparency%2A>必須設為`true`。</span><span class="sxs-lookup"><span data-stu-id="d15ad-170">To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="d15ad-171"><xref:System.Windows.Window.AllowsTransparency%2A> 可協助建立非矩形視窗，，因此當<xref:System.Windows.Window.AllowsTransparency%2A>設定為`true`，視窗<xref:System.Windows.Window.WindowStyle%2A>屬性必須設為<xref:System.Windows.WindowStyle.None>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-171"><xref:System.Windows.Window.AllowsTransparency%2A> exists to facilitate the creation of non-rectangular windows, and, consequently, when <xref:System.Windows.Window.AllowsTransparency%2A> is set to `true`, a window's <xref:System.Windows.Window.WindowStyle%2A> property must be set to <xref:System.Windows.WindowStyle.None>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowAllowsTransparency"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-172">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-172">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-173">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-173">Identifier field</span></span>|<xref:System.Windows.Window.AllowsTransparencyProperty>|  
|<span data-ttu-id="d15ad-174">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-174">Metadata properties set to `true`</span></span>|<span data-ttu-id="d15ad-175">無</span><span class="sxs-lookup"><span data-stu-id="d15ad-175">None</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d15ad-176">視窗的 <see cref="P:System.Windows.Window.WindowStyle" /> 值不是 <see cref="F:System.Windows.WindowStyle.None" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-176">A window that has a <see cref="P:System.Windows.Window.WindowStyle" /> value of anything other than <see cref="F:System.Windows.WindowStyle.None" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparencyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowsTransparencyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.AllowsTransparencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowsTransparencyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowsTransparencyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowsTransparencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.AllowsTransparencyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-177">識別 <see cref="P:System.Windows.Window.AllowsTransparency" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-177">Identifies the <see cref="P:System.Windows.Window.AllowsTransparency" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size arrangeBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ArrangeOverride (arrangeBounds As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size ArrangeOverride(System::Windows::Size arrangeBounds);" />
      <MemberSignature Language="F#" Value="override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="window.ArrangeOverride arrangeBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrangeBounds" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="arrangeBounds">
          <span data-ttu-id="d15ad-178">
            <see cref="T:System.Windows.Size" />，反映視窗排列本身和其子系後應該呈現的最終大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-178">A <see cref="T:System.Windows.Size" /> that reflects the final size that the window should use to arrange itself and its children.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-179">覆寫這個方法可以調整視窗和其子項目的位置和大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-179">Override this method to arrange and size a window and its child elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d15ad-180">
            <see cref="T:System.Windows.Size" />，反映實際呈現的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-180">A <see cref="T:System.Windows.Size" /> that reflects the actual size that was used.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-181"><xref:System.Windows.Window.ArrangeOverride%2A> 不會呼叫的時機<xref:System.Windows.UIElement.Visibility%2A>屬性的值為<xref:System.Windows.Visibility.Collapsed>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-181"><xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="d15ad-182">如果值<xref:System.Windows.UIElement.Visibility%2A>屬性是<xref:System.Windows.Visibility.Hidden>或是<xref:System.Windows.Visibility.Visible>，<xref:System.Windows.Window.ArrangeOverride%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="d15ad-182">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-183">當可能<xref:System.Windows.Window.Show%2A>或<xref:System.Windows.Window.ShowDialog%2A>呼叫時，<xref:System.Windows.UIElement.Visibility%2A>屬性<xref:System.Windows.Window>設定為<xref:System.Windows.Visibility.Visible>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-183">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="window.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-184">手動關閉 <see cref="T:System.Windows.Window" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-184">Manually closes a <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-185">A<xref:System.Windows.Window>可以使用其中一種，關閉已知和系統提供的機制位於其標題列，包括：</span><span class="sxs-lookup"><span data-stu-id="d15ad-185">A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</span></span>  
  
-   <span data-ttu-id="d15ad-186">ALT + F4。</span><span class="sxs-lookup"><span data-stu-id="d15ad-186">ALT+F4.</span></span>  
  
-   <span data-ttu-id="d15ad-187">系統功能表&#124;**關閉**。</span><span class="sxs-lookup"><span data-stu-id="d15ad-187">System menu &#124; **Close**.</span></span>  
  
-   <span data-ttu-id="d15ad-188">**關閉** 按鈕。</span><span class="sxs-lookup"><span data-stu-id="d15ad-188">**Close** button.</span></span>  
  
 <span data-ttu-id="d15ad-189">A<xref:System.Windows.Window>也可以關閉使用其中幾項的已知機制工作區內所提供的開發人員，包括：</span><span class="sxs-lookup"><span data-stu-id="d15ad-189">A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</span></span>  
  
-   <span data-ttu-id="d15ad-190">**檔案** &#124; **結束**在主視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-190">**File** &#124; **Exit** on a main window.</span></span>  
  
-   <span data-ttu-id="d15ad-191">**檔案** &#124; **關閉**或是**關閉**子視窗的按鈕。</span><span class="sxs-lookup"><span data-stu-id="d15ad-191">**File** &#124; **Close** or a **Close** button on a child window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-192">**確定**並**取消** 對話方塊上的按鈕也是開發人員提供，雖然將可能集<xref:System.Windows.Window.DialogResult%2A>，這會自動關閉呼叫已開啟的視窗<xref:System.Windows.Window.ShowDialog%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-192">**OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="d15ad-193">這些機制需要您明確地呼叫<xref:System.Windows.Window.Close%2A>關閉視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-193">These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-194">如果藉由呼叫的視窗中，開啟<xref:System.Windows.Window.ShowDialog%2A>，且具有<xref:System.Windows.Controls.Button>具有其<xref:System.Windows.Controls.Button.IsCancel%2A>屬性設定為 true，將會自動關閉，或是按一下按鈕，或按下 esc 鍵時。</span><span class="sxs-lookup"><span data-stu-id="d15ad-194">If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</span></span> <span data-ttu-id="d15ad-195">如果使用已開啟視窗<xref:System.Windows.Window.Show%2A>，不過<xref:System.Windows.Window.Close%2A>必須明確呼叫，例如，於<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件處理常式<xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-195">If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="d15ad-196">關閉視窗會導致<xref:System.Windows.Window.Closing>會引發事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-196">Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised.</span></span> <span data-ttu-id="d15ad-197">如果<xref:System.Windows.Window.Closing>事件未取消，則發生下列情況：</span><span class="sxs-lookup"><span data-stu-id="d15ad-197">If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:</span></span>  
  
-   <span data-ttu-id="d15ad-198"><xref:System.Windows.Window>脫離<xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType>(如果<xref:System.Windows.Application>物件存在)。</span><span class="sxs-lookup"><span data-stu-id="d15ad-198">The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (if an <xref:System.Windows.Application> object exists).</span></span>  
  
-   <span data-ttu-id="d15ad-199"><xref:System.Windows.Window>移除擁有者<xref:System.Windows.Window>如果已建立的擁有者/擁有的關聯性之前擁有<xref:System.Windows.Window>所示和後擁有者<xref:System.Windows.Window>已開啟。</span><span class="sxs-lookup"><span data-stu-id="d15ad-199">The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened.</span></span>  
  
-   <span data-ttu-id="d15ad-200">便會引發 <xref:System.Windows.Window.Closed> 事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-200">The <xref:System.Windows.Window.Closed> event is raised.</span></span>  
  
-   <span data-ttu-id="d15ad-201">Unmanaged 資源所建立<xref:System.Windows.Window>處置掉。</span><span class="sxs-lookup"><span data-stu-id="d15ad-201">Unmanaged resources created by the <xref:System.Windows.Window> are disposed.</span></span>  
  
-   <span data-ttu-id="d15ad-202">如果<xref:System.Windows.Window.ShowDialog%2A>呼叫來顯示<xref:System.Windows.Window>，<xref:System.Windows.Window.ShowDialog%2A>傳回。</span><span class="sxs-lookup"><span data-stu-id="d15ad-202">If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns.</span></span>  
  
 <span data-ttu-id="d15ad-203">關閉<xref:System.Windows.Window>會使任何擁有要關閉的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-203">Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed.</span></span> <span data-ttu-id="d15ad-204">此外，關閉<xref:System.Windows.Window>可能會導致應用程式停止執行依據<xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType>屬性設定。</span><span class="sxs-lookup"><span data-stu-id="d15ad-204">Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> property is set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-205">在瀏覽器裝載的視窗時，無法呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="d15ad-205">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-206">下列範例所示**檔案** &#124; **結束**明確呼叫所處理的功能表<xref:System.Windows.Window.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-206">The following example shows a **File** &#124; **Exit** menu being handled to explicitly call <xref:System.Windows.Window.Close%2A>.</span></span>  
  
 [!code-xaml[WindowCloseSnippets#WindowCloseXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml#windowclosexaml)]  
  
 [!code-csharp[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml.cs#windowclosecodebehind)]
 [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowCloseSnippets/visualbasic/mainwindow.xaml.vb#windowclosecodebehind)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d15ad-207">若要使用的所有 windows 和不受限制的使用者輸入的事件的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-207">for permission to use all windows and user input events without restriction.</span>
          </span>
          <span data-ttu-id="d15ad-208">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-208">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="P:System.Windows.Window.DialogResult" />
        <altmember cref="P:System.Windows.Window.Owner" />
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public event EventHandler Closed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Closed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Closed;" />
      <MemberSignature Language="F#" Value="member this.Closed : EventHandler " Usage="member this.Closed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-209">視窗即將關閉時發生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-209">Occurs when the window is about to close.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-210">之後會引發這個事件，無法防止視窗關閉。</span><span class="sxs-lookup"><span data-stu-id="d15ad-210">Once this event is raised, a window cannot be prevented from closing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d15ad-211">視窗要關閉時，設定了 <see cref="P:System.Windows.UIElement.Visibility" /> 或是呼叫了 <see cref="M:System.Windows.Window.Show" />、<see cref="M:System.Windows.Window.ShowDialog" /> 或 <see cref="M:System.Windows.Window.Hide" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-211">
              <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Hide" /> is called while a window is closing.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closing" />
        <altmember cref="M:System.Windows.Application.Shutdown" />
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="E:System.Windows.Application.SessionEnding" />
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Closing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Closing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closing As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Closing;" />
      <MemberSignature Language="F#" Value="member this.Closing : System.ComponentModel.CancelEventHandler " Usage="member this.Closing : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-212">在呼叫 <see cref="M:System.Windows.Window.Close" /> 後立即發生，可以用來取消視窗關閉動作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-212">Occurs directly after <see cref="M:System.Windows.Window.Close" /> is called, and can be handled to cancel window closure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-213"><xref:System.Windows.Window.Closing> 可以用來偵測視窗關閉時 (例如，當<xref:System.Windows.Window.Close%2A>稱為)。</span><span class="sxs-lookup"><span data-stu-id="d15ad-213"><xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called).</span></span> <span data-ttu-id="d15ad-214">此外，<xref:System.Windows.Window.Closing>可用來防止關閉視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-214">Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing.</span></span> <span data-ttu-id="d15ad-215">若要防止關閉視窗，您可以設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>的屬性<xref:System.ComponentModel.CancelEventArgs>引數`true`。</span><span class="sxs-lookup"><span data-stu-id="d15ad-215">To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`.</span></span>  
  
 <span data-ttu-id="d15ad-216"><xref:System.Windows.Window.Closing>就會引發事件時<xref:System.Windows.Window.Close%2A>呼叫時，如果按一下視窗的 [關閉] 按鈕，或如果使用者按下 alt+f4。</span><span class="sxs-lookup"><span data-stu-id="d15ad-216">The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</span></span>  
  
 <span data-ttu-id="d15ad-217">如果擁有的視窗已開啟藉由其擁有者視窗<xref:System.Windows.Window.Show%2A>，以及擁有者視窗已關閉，擁有的視窗<xref:System.Windows.Window.Closing>不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-217">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span> <span data-ttu-id="d15ad-218">如果已關閉之視窗的擁有者 (請參閱<xref:System.Windows.Window.Owner%2A>)，<xref:System.Windows.Window.Closing>就不會引發上擁有的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-218">If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.</span></span>  
  
 <span data-ttu-id="d15ad-219">如果<xref:System.Windows.Application.Shutdown%2A>呼叫時，<xref:System.Windows.Window.Closing>就會引發事件的每個視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-219">If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised.</span></span> <span data-ttu-id="d15ad-220">不過，如果<xref:System.Windows.Window.Closing>已取消，取消作業會被忽略。</span><span class="sxs-lookup"><span data-stu-id="d15ad-220">However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.</span></span>  
  
 <span data-ttu-id="d15ad-221">如果工作階段結束，因為使用者登出或關閉，所以<xref:System.Windows.Window.Closing>不會引發; 處理<xref:System.Windows.Application.SessionEnding>實作取消應用程式關閉的程式碼。</span><span class="sxs-lookup"><span data-stu-id="d15ad-221">If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure.</span></span>  
  
 <span data-ttu-id="d15ad-222">如果您想要顯示和隱藏視窗的應用程式的存留期間多次，而且您不想要重新執行個體化的視窗每次您將其顯示，您可以處理<xref:System.Windows.Window.Closing>事件時，取消它，並呼叫<xref:System.Windows.Window.Hide%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d15ad-222">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="d15ad-223">然後，您可以呼叫<xref:System.Windows.Window.Show%2A>上相同的執行個體，將它重新開啟。</span><span class="sxs-lookup"><span data-stu-id="d15ad-223">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-224">下列範例示範<xref:System.Windows.Window>，判斷它是否需要使用者介入，才能關閉。</span><span class="sxs-lookup"><span data-stu-id="d15ad-224">The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.</span></span>  
  
 [!code-xaml[WindowClosingSnippets#WindowClosingXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml#windowclosingxaml1)]  
  
 [!code-csharp[WindowClosingSnippets](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml.cs)]
 [!code-vb[WindowClosingSnippets](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowClosingSnippets/visualbasic/datawindow.xaml.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d15ad-225">視窗要關閉時，設定了 <see cref="P:System.Windows.UIElement.Visibility" /> 或是呼叫了 <see cref="M:System.Windows.Window.Show" />、<see cref="M:System.Windows.Window.ShowDialog" /> 或 <see cref="M:System.Windows.Window.Close" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-225">
              <see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Close" /> is called while a window is closing.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closed" />
      </Docs>
    </Member>
    <Member MemberName="ContentRendered">
      <MemberSignature Language="C#" Value="public event EventHandler ContentRendered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContentRendered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.ContentRendered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContentRendered As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ ContentRendered;" />
      <MemberSignature Language="F#" Value="member this.ContentRendered : EventHandler " Usage="member this.ContentRendered : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-226">視窗內容呈現後發生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-226">Occurs after a window's content has been rendered.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-227">如果視窗不有任何內容，不會引發此事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-227">If the window has no content, this event is not raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.ContentControl.Content" />
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Deactivated">
      <MemberSignature Language="C#" Value="public event EventHandler Deactivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Deactivated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Deactivated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deactivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Deactivated;" />
      <MemberSignature Language="F#" Value="member this.Deactivated : EventHandler " Usage="member this.Deactivated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-228">視窗變成背景視窗時發生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-228">Occurs when a window becomes a background window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-229">視窗已停用 （變成背景視窗） 時：</span><span class="sxs-lookup"><span data-stu-id="d15ad-229">A window is deactivated (becomes a background window) when:</span></span>  
  
-   <span data-ttu-id="d15ad-230">使用者切換至另一個視窗中目前的應用程式。</span><span class="sxs-lookup"><span data-stu-id="d15ad-230">A user switches to another window in the current application.</span></span>  
  
-   <span data-ttu-id="d15ad-231">使用 ALT + TAB，或使用 工作管理員，使用者會切換至另一個應用程式視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-231">A user switches to the window in another application by using ALT+TAB or by using Task Manager.</span></span>  
  
-   <span data-ttu-id="d15ad-232">使用者按一下另一個應用程式的視窗的工作列按鈕。</span><span class="sxs-lookup"><span data-stu-id="d15ad-232">A user clicks the taskbar button for a window in another application.</span></span>  
  
 <span data-ttu-id="d15ad-233">需要偵測當它們變成處理停用的 Windows<xref:System.Windows.Window.Deactivated>事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-233">Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="d15ad-234">先停用視窗之後，它可能會重新啟動並在其存留期間多次停用。</span><span class="sxs-lookup"><span data-stu-id="d15ad-234">After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</span></span> <span data-ttu-id="d15ad-235">如果應用程式的狀態或行為取決於其啟用狀態，它可以檢查<xref:System.Windows.Window.IsActive%2A>來判斷哪一個啟用的狀態。</span><span class="sxs-lookup"><span data-stu-id="d15ad-235">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="d15ad-236">應用程式也可以是<xref:System.Windows.Application.Deactivated>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-236">An application can also be <xref:System.Windows.Application.Deactivated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.DialogResult" />
      <MemberSignature Language="VB.NET" Value="Public Property DialogResult As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; DialogResult { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.DialogResult : Nullable&lt;bool&gt; with get, set" Usage="System.Windows.Window.DialogResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.DialogResultConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-237">取得或設定對話方塊結果值，這個值就是 <see cref="M:System.Windows.Window.ShowDialog" /> 方法傳回的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-237">Gets or sets the dialog result value, which is the value that is returned from the <see cref="M:System.Windows.Window.ShowDialog" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-238">
            <see cref="T:System.Nullable`1" /> 型別的 <see cref="T:System.Boolean" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-238">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" />.</span>
          </span>
          <span data-ttu-id="d15ad-239">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-239">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-240"><xref:System.Windows.Window.DialogResult%2A> 可從顯示的對話方塊，來判斷使用者是否已接受的程式碼 (`true`) 或取消 (`false`) 對話方塊。</span><span class="sxs-lookup"><span data-stu-id="d15ad-240"><xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box.</span></span> <span data-ttu-id="d15ad-241">如果已接受 對話方塊中，這表示開啟對話方塊，以擷取使用者所收集的資料，並處理的程式碼。</span><span class="sxs-lookup"><span data-stu-id="d15ad-241">If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</span></span> <span data-ttu-id="d15ad-242">如果對話方塊已取消，不過，這表示呼叫的程式碼應該停止任何進一步處理。</span><span class="sxs-lookup"><span data-stu-id="d15ad-242">If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</span></span>  
  
 <span data-ttu-id="d15ad-243">根據預設，當使用者執行下列其中一項，已取消對話方塊：</span><span class="sxs-lookup"><span data-stu-id="d15ad-243">By default, a dialog box is canceled when a user does one of the following:</span></span>  
  
-   <span data-ttu-id="d15ad-244">PressesALT + F4。</span><span class="sxs-lookup"><span data-stu-id="d15ad-244">PressesALT+F4.</span></span>  
  
-   <span data-ttu-id="d15ad-245">按下**關閉** 按鈕。</span><span class="sxs-lookup"><span data-stu-id="d15ad-245">Clicks the **Close** button.</span></span>  
  
-   <span data-ttu-id="d15ad-246">選取**關閉**從系統功能表。</span><span class="sxs-lookup"><span data-stu-id="d15ad-246">Selects **Close** from the System menu.</span></span>  
  
 <span data-ttu-id="d15ad-247">在所有這些情況下，<xref:System.Windows.Window.DialogResult%2A>是`false`預設。</span><span class="sxs-lookup"><span data-stu-id="d15ad-247">In all of these cases, <xref:System.Windows.Window.DialogResult%2A> is `false` by default.</span></span>  
  
 <span data-ttu-id="d15ad-248">對話方塊通常會提供特殊的按鈕，即可取消對話方塊中，也就是按鈕其<xref:System.Windows.Controls.Button.IsCancel%2A>屬性設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="d15ad-248">A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`.</span></span> <span data-ttu-id="d15ad-249">這種方式設定的按鈕是已按下時，或按下 ESC 鍵時，將會自動關閉視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-249">A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</span></span> <span data-ttu-id="d15ad-250">在這些情況下，任一<xref:System.Windows.Window.DialogResult%2A>維持`false`。</span><span class="sxs-lookup"><span data-stu-id="d15ad-250">In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`.</span></span>  
  
 <span data-ttu-id="d15ad-251">對話方塊通常也會提供 [接受] 按鈕，為按鈕的<xref:System.Windows.Controls.Button.IsDefault%2A>屬性設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="d15ad-251">A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`.</span></span> <span data-ttu-id="d15ad-252">這種方式設定按鈕將會引發其<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件時按下它或 ENTER 鍵。</span><span class="sxs-lookup"><span data-stu-id="d15ad-252">A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed.</span></span> <span data-ttu-id="d15ad-253">不過，它將不會自動關閉對話方塊中，也將它設定<xref:System.Windows.Window.DialogResult%2A>至`true`。</span><span class="sxs-lookup"><span data-stu-id="d15ad-253">However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`.</span></span> <span data-ttu-id="d15ad-254">您需要以手動方式從通常撰寫這個程式碼，<xref:System.Windows.Controls.Primitives.ButtonBase.Click>預設按鈕的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="d15ad-254">You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button.</span></span>  
  
 <span data-ttu-id="d15ad-255"><xref:System.Windows.Window.DialogResult%2A> 是`null`時顯示的對話方塊但不接受或已取消。</span><span class="sxs-lookup"><span data-stu-id="d15ad-255"><xref:System.Windows.Window.DialogResult%2A> is `null` when the dialog box is shown but neither accepted nor canceled.</span></span>  
  
 <span data-ttu-id="d15ad-256">對話方塊關閉之後，您可以從傳回的值來取得對話方塊結果<xref:System.Windows.Window.ShowDialog%2A>方法，或藉由檢查<xref:System.Windows.Window.DialogResult%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-256">After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property.</span></span>  
  
 <span data-ttu-id="d15ad-257"><xref:System.Windows.Window.DialogResult%2A> 只可設定的時機<xref:System.Windows.Window>開啟藉由呼叫其<xref:System.Windows.Window.ShowDialog%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d15ad-257"><xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-258">您無法設定或取得這個屬性，當瀏覽器中裝載的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-258">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-259">下列範例示範如何設定 [確定] 按鈕和 [取消] 按鈕，以傳回適當<xref:System.Windows.Window.DialogResult%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-259">The following example shows how to configure an OK button and a Cancel button to return the appropriate <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 [!code-xaml[WindowDialogResultSnippets#WindowDialogResultXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml#windowdialogresultxaml)]  
  
 [!code-csharp[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]
 [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDialogResultSnippets/visualbasic/dialogbox.xaml.vb#windowdialogresultcodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d15ad-260">藉由呼叫 <see cref="P:System.Windows.Window.DialogResult" /> 開啟視窗之前設定 <see cref="M:System.Windows.Window.ShowDialog" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-260">
              <see cref="P:System.Windows.Window.DialogResult" /> is set before a window is opened by calling <see cref="M:System.Windows.Window.ShowDialog" />.</span>
          </span>
          <span data-ttu-id="d15ad-261">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-261">-or-</span>
          </span>
          <span data-ttu-id="d15ad-262">在藉由呼叫 <see cref="P:System.Windows.Window.DialogResult" /> 開啟的視窗上設定 <see cref="M:System.Windows.Window.Show" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-262">
              <see cref="P:System.Windows.Window.DialogResult" /> is set on a window that is opened by calling <see cref="M:System.Windows.Window.Show" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DpiChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DpiChangedEventHandler DpiChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DpiChangedEventHandler DpiChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.DpiChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChanged As DpiChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DpiChangedEventHandler ^ DpiChanged;" />
      <MemberSignature Language="F#" Value="member this.DpiChanged : System.Windows.DpiChangedEventHandler " Usage="member this.DpiChanged : System.Windows.DpiChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DpiChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-263">發生於顯示視窗的螢幕 DPI 變更之後。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-263">Occurs after the DPI of the screen on which the Window is displayed changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DpiChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DpiChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.DpiChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DpiChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DpiChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DpiChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Window.DpiChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-264">在視窗變更時用於螢幕 DPI 的 <see cref="T:System.Windows.RoutedEvent" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-264">A <see cref="T:System.Windows.RoutedEvent" /> for when the DPI of the screen the Window is on changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragMove">
      <MemberSignature Language="C#" Value="public void DragMove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DragMove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.DragMove" />
      <MemberSignature Language="VB.NET" Value="Public Sub DragMove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DragMove();" />
      <MemberSignature Language="F#" Value="member this.DragMove : unit -&gt; unit" Usage="window.DragMove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-265">允許透過在視窗工作區的公開區域按下滑鼠左鍵來拖曳視窗。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-265">Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-266">滑鼠左的按鈕必須關閉時<xref:System.Windows.Window.DragMove%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="d15ad-266">The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called.</span></span> <span data-ttu-id="d15ad-267">偵測何時按下滑鼠左鍵的方法之一是處理<xref:System.Windows.UIElement.MouseLeftButtonDown>事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-267">One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.</span></span>  
  
 <span data-ttu-id="d15ad-268">當<xref:System.Windows.Window.DragMove%2A>呼叫時，左側必須按下滑鼠按鈕的視窗的工作區的公開區域上方。</span><span class="sxs-lookup"><span data-stu-id="d15ad-268">When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-269">在瀏覽器裝載的視窗時，無法呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="d15ad-269">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-270">下列範例示範如何覆寫<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>呼叫<xref:System.Windows.Window.DragMove%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-270">The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call <xref:System.Windows.Window.DragMove%2A>.</span></span>  
  
 [!code-csharp[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDragMoveSnippets/CSharp/MainWindow.xaml.cs#callwindowdragmovecodebehind)]
 [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDragMoveSnippets/visualbasic/mainwindow.xaml.vb#callwindowdragmovecodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d15ad-271">未按下滑鼠左鍵。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-271">The left mouse button is not down.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d15ad-272">若要將視窗拖曳的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-272">for permission to drag a window.</span>
          </span>
          <span data-ttu-id="d15ad-273">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-273">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="E:System.Windows.Window.LocationChanged" />
      </Docs>
    </Member>
    <Member MemberName="GetWindow">
      <MemberSignature Language="C#" Value="public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Window GetWindow(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Window ^ GetWindow(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="static member GetWindow : System.Windows.DependencyObject -&gt; System.Windows.Window" Usage="System.Windows.Window.GetWindow dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="d15ad-274">相依性物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-274">The dependency object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-275">傳回 <see cref="T:System.Windows.Window" /> 物件的參考，這個物件含有相依性物件所在的內容樹狀結構。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-275">Returns a reference to the <see cref="T:System.Windows.Window" /> object that hosts the content tree within which the dependency object is located.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d15ad-276">對主視窗的 <see cref="T:System.Windows.Window" /> 參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-276">A <see cref="T:System.Windows.Window" /> reference to the host window.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d15ad-277">
            <paramref name="dependencyObject" /> 為 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-277">
              <paramref name="dependencyObject" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberSignature Language="F#" Value="member this.Hide : unit -&gt; unit" Usage="window.Hide " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-278">讓視窗看不見。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-278">Makes a window invisible.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-279">當它隱藏的未關閉的視窗及兩者皆無<xref:System.Windows.Window.Closing>也不<xref:System.Windows.Window.Closed>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-279">A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised.</span></span> <span data-ttu-id="d15ad-280">相反地，視窗<xref:System.Windows.UIElement.Visibility%2A>屬性設定為<xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-280">Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d15ad-281">應用程式的視窗是否<xref:System.Windows.Application.MainWindow%2A>和 應用程式的<xref:System.Windows.Application.ShutdownMode%2A>是<xref:System.Windows.ShutdownMode.OnMainWindowClose>，應用程式不會關機。</span><span class="sxs-lookup"><span data-stu-id="d15ad-281">If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down.</span></span> <span data-ttu-id="d15ad-282">同樣地，應用程式不會關機如果視窗是唯一的視窗，而且應用程式的關機模式<xref:System.Windows.ShutdownMode.OnLastWindowClose>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-282">Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.</span></span>  
  
 <span data-ttu-id="d15ad-283">如果您想要顯示和隱藏視窗的應用程式的存留期間多次，而且您不想要重新具現化的視窗每次您將其顯示，您可以處理<xref:System.Windows.Window.Closing>事件時，取消它，並呼叫<xref:System.Windows.Window.Hide%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d15ad-283">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="d15ad-284">然後，您可以呼叫<xref:System.Windows.Window.Show%2A>即可重新開啟相同的執行個體上。</span><span class="sxs-lookup"><span data-stu-id="d15ad-284">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d15ad-285">
            <see cref="M:System.Windows.Window.Hide" /> 的呼叫對象是正在關閉 (<see cref="E:System.Windows.Window.Closing" />) 或已經關閉 (<see cref="E:System.Windows.Window.Closed" />) 的視窗。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-285">
              <see cref="M:System.Windows.Window.Hide" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="M:System.Windows.Window.Close" />
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ImageSource Icon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.ImageSource Icon" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Icon" />
      <MemberSignature Language="VB.NET" Value="Public Property Icon As ImageSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::ImageSource ^ Icon { System::Windows::Media::ImageSource ^ get(); void set(System::Windows::Media::ImageSource ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Icon : System.Windows.Media.ImageSource with get, set" Usage="System.Windows.Window.Icon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ImageSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-286">取得或設定視窗的圖示。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-286">Gets or sets a window's icon.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-287">表示圖示的 <see cref="T:System.Windows.Media.ImageSource" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-287">An <see cref="T:System.Windows.Media.ImageSource" /> object that represents the icon.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-288">Windows Presentation Foundation (WPF) 獨立應用程式有兩種類型的圖示：</span><span class="sxs-lookup"><span data-stu-id="d15ad-288">Windows Presentation Foundation (WPF) standalone applications have two types of icons:</span></span>  
  
-   <span data-ttu-id="d15ad-289">使用指定的一個組件圖示`<ApplicationIcon>`檔案建置應用程式的專案中的屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-289">One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file.</span></span> <span data-ttu-id="d15ad-290">做為桌面的圖示會使用此圖示，組件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-290">This icon is used as the desktop icon for an assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="d15ad-291">當偵錯在 Visual Studio 中，由於裝載處理序可能不會出現圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-291">When debugging in Visual Studio, your icon may not appear due to the hosting process.</span></span> <span data-ttu-id="d15ad-292">如果您執行可執行檔時，會出現圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-292">If you run the executable, the icon will appear.</span></span> <span data-ttu-id="d15ad-293">如需詳細資訊，請參閱[裝載處理序 (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)。</span><span class="sxs-lookup"><span data-stu-id="d15ad-293">For more information, see [Hosting Process (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).</span></span>  
  
-   <span data-ttu-id="d15ad-294">每個設定，來指定的視窗的一個圖示<xref:System.Windows.Window.Icon%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-294">One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>.</span></span> <span data-ttu-id="d15ad-295">針對每個視窗中，其 ALT TAB 應用程式選取項目清單項目和其工作列按鈕，其標題列中，會使用此圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-295">For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</span></span>  
  
 <span data-ttu-id="d15ad-296">WPF 視窗一律會顯示的圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-296">A WPF window always displays an icon.</span></span> <span data-ttu-id="d15ad-297">當未提供設定<xref:System.Windows.Window.Icon%2A>，WPF 會選擇圖示以顯示根據下列規則：</span><span class="sxs-lookup"><span data-stu-id="d15ad-297">When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, WPF chooses an icon to display based on the following rules:</span></span>  
  
1.  <span data-ttu-id="d15ad-298">如果指定，請使用組件 圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-298">Use the assembly icon, if specified.</span></span>  
  
2.  <span data-ttu-id="d15ad-299">如果未指定的組件圖示，使用預設的 Microsoft Windows 圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-299">If the assembly icon is not specified, use the default Microsoft Windows icon.</span></span>  
  
 <span data-ttu-id="d15ad-300">如果您使用<xref:System.Windows.Window.Icon%2A>若要指定自訂視窗圖示，您可以還原預設的應用程式圖示，藉由設定<xref:System.Windows.Window.Icon%2A>至`null`。</span><span class="sxs-lookup"><span data-stu-id="d15ad-300">If you use <xref:System.Windows.Window.Icon%2A> to specify a custom window icon, you can restore the default application icon by setting <xref:System.Windows.Window.Icon%2A> to `null`.</span></span>  
  
 <span data-ttu-id="d15ad-301">各種不同的方式，在 Windows，包括顯示視窗標題列，工作列視窗時，ALT + TAB 檔案選取清單中，可以使用單一的圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-301">A single icon can be used in a variety of ways in Windows, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</span></span> <span data-ttu-id="d15ad-302">每一種顯示的圖示，使用不同的大小;ALT + TAB 檔案選取清單中顯示 32 x 32 像素圖示時，視窗標題列中，並在工作列上，會顯示 16 x 16 像素圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-302">Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</span></span> <span data-ttu-id="d15ad-303">某些應用程式，像是[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]，提供**檢視**功能表，可讓您選擇您想要檢視之圖示的大小。</span><span class="sxs-lookup"><span data-stu-id="d15ad-303">Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view.</span></span>  
  
 <span data-ttu-id="d15ad-304">若要符合各種不同的顯示大小，其中每個代表特定的大小和色彩深度為目標的圖示版本的一或多個實際的圖示被由圖示檔。</span><span class="sxs-lookup"><span data-stu-id="d15ad-304">To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</span></span> <span data-ttu-id="d15ad-305">例如，一個圖示只能有單一的 16 x 16 像素圖示，使用 16 個色彩，而另一個可能包含 16 x 16 像素和具有 256 種色彩和 16 種色彩的 32 x 32 像素圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-305">For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</span></span>  
  
 <span data-ttu-id="d15ad-306">如果針對所有可能的大小和色彩深度圖示存在於圖示檔，<xref:System.Windows.Window>會使用適當的圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-306">If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon.</span></span> <span data-ttu-id="d15ad-307">圖示檔只包含一部分的所有可能的圖示，如果<xref:System.Windows.Window>使用下一個最合適的圖示大小和色彩深度遞減的順序。</span><span class="sxs-lookup"><span data-stu-id="d15ad-307">If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.</span></span>  
  
 <span data-ttu-id="d15ad-308">結果是一律會藉由使用圖示<xref:System.Windows.Window>，但使用的圖示可能會不會針對所需的大小和色彩深度。</span><span class="sxs-lookup"><span data-stu-id="d15ad-308">The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth.</span></span> <span data-ttu-id="d15ad-309">比方說，使用 16 個色彩的 16 x 16 像素圖示都可能會用於顯示為 32 x 32 像素的 256 色圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-309">For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</span></span> <span data-ttu-id="d15ad-310">這可能會導致不想要視覺效果的詳細資訊，例如化，但可能會避免建立的所有目標的大小和色彩深度的圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-310">This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-311">您無法設定或取得這個屬性，當瀏覽器中裝載的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-311">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIcon"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-312">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-312">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-313">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-313">Identifier field</span></span>|<xref:System.Windows.Window.IconProperty>|  
|<span data-ttu-id="d15ad-314">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-314">Metadata properties set to `true`</span></span>|<span data-ttu-id="d15ad-315">無</span><span class="sxs-lookup"><span data-stu-id="d15ad-315">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-316">下列範例示範如何設定視窗的圖示。</span><span class="sxs-lookup"><span data-stu-id="d15ad-316">The following example shows how to set a window icon.</span></span>  
  
 [!code-xaml[WindowIconSnippets#WindowIconSetXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/WindowIconSnippets/XAML/MainWindow.xaml#windowiconsetxaml)]  
  
 [!code-csharp[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowIconSnippets/CSharp/MainWindow.xaml.cs#setwindowiconincode)]
 [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowIconSnippets/visualbasic/mainwindow.xaml.vb#setwindowiconincode)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d15ad-317">若要設定圖示的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-317">for permission to set the icon.</span>
          </span>
          <span data-ttu-id="d15ad-318">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-318">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IconProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IconProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IconProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IconProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IconProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IconProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IconProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.IconProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-319">識別 <see cref="P:System.Windows.Window.Icon" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-319">Identifies the <see cref="P:System.Windows.Window.Icon" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Windows.Window.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-320">取得值，這個值表示視窗是否在使用中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-320">Gets a value that indicates whether the window is active.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-321">如果視窗為使用中則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-321">
              <see langword="true" /> if the window is active; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d15ad-322">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-322">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-323">現用視窗是使用者目前的前景視窗，並具有焦點，以作用中的標題列的外觀。</span><span class="sxs-lookup"><span data-stu-id="d15ad-323">An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</span></span> <span data-ttu-id="d15ad-324">現用視窗也會不明確設定的所有最上層視窗頂部<xref:System.Windows.Window.Topmost%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-324">An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIsActive"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-325">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-325">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-326">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-326">Identifier field</span></span>|<xref:System.Windows.Window.IsActiveProperty>|  
|<span data-ttu-id="d15ad-327">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-327">Metadata properties set to `true`</span></span>|<span data-ttu-id="d15ad-328">無</span><span class="sxs-lookup"><span data-stu-id="d15ad-328">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="IsActiveProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsActiveProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsActiveProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IsActiveProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsActiveProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsActiveProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsActiveProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.IsActiveProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-329">識別 <see cref="P:System.Windows.Window.IsActive" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-329">Identifies the <see cref="P:System.Windows.Window.IsActive" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Left { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Left : double with get, set" Usage="System.Windows.Window.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-330">取得或設定視窗左邊緣相對於桌面的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-330">Gets or sets the position of the window's left edge, in relation to the desktop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-331">視窗左邊緣的位置，以邏輯單位 (1/96 英吋) 計。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-331">The position of the window's left edge, in logical units (1/96th of an inch).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-332">當<xref:System.Windows.Window>是最大化或最小化，左邊的緣的還原點，以取得此值代表<xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-332">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="d15ad-333">這個屬性不能透過樣式設定。</span><span class="sxs-lookup"><span data-stu-id="d15ad-333">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="d15ad-334">如果您未指定值，<xref:System.Windows.Window.Left%2A>設為系統預設值。</span><span class="sxs-lookup"><span data-stu-id="d15ad-334">If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value.</span></span> <span data-ttu-id="d15ad-335">您也可以藉由設定指定系統的預設值<xref:System.Windows.Window.Left%2A>至<xref:System.Double.NaN>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-335">You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="d15ad-336">既不<xref:System.Double.NegativeInfinity>也<xref:System.Double.PositiveInfinity>是有效的值，如<xref:System.Windows.Window.Left%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-336">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-337">您無法設定或取得這個屬性，當瀏覽器中裝載的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-337">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowLeft"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-338">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-338">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-339">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-339">Identifier field</span></span>|<xref:System.Windows.Window.LeftProperty>|  
|<span data-ttu-id="d15ad-340">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-340">Metadata properties set to `true`</span></span>|<span data-ttu-id="d15ad-341">無</span><span class="sxs-lookup"><span data-stu-id="d15ad-341">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="LeftProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LeftProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LeftProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.LeftProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LeftProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LeftProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LeftProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.LeftProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-342">識別 <see cref="P:System.Windows.Window.Left" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-342">Identifies the <see cref="P:System.Windows.Window.Left" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberSignature Language="F#" Value="member this.LocationChanged : EventHandler " Usage="member this.LocationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-343">視窗的位置變更時發生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-343">Occurs when the window's location changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-344">視窗的位置變更時：</span><span class="sxs-lookup"><span data-stu-id="d15ad-344">A window's location changes when:</span></span>  
  
-   <span data-ttu-id="d15ad-345">使用者會使用中視窗標題列拖曳它，來移動的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-345">A user moves a window by dragging it with the window's title bar.</span></span>  
  
-   <span data-ttu-id="d15ad-346">視窗移之後<xref:System.Windows.Window.DragMove%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="d15ad-346">A window is moved after <xref:System.Windows.Window.DragMove%2A> is called.</span></span>  
  
-   <span data-ttu-id="d15ad-347">請<xref:System.Windows.Window.Left%2A>或<xref:System.Windows.Window.Top%2A>屬性以程式設計方式設定。</span><span class="sxs-lookup"><span data-stu-id="d15ad-347">Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically.</span></span>  
  
-   <span data-ttu-id="d15ad-348">**移動**選擇視窗的 [系統] 功能表的功能表項目。</span><span class="sxs-lookup"><span data-stu-id="d15ad-348">The **Move** menu item of a window's System menu is chosen.</span></span>  
  
-   <span data-ttu-id="d15ad-349"><xref:System.Windows.Window.WindowState%2A>屬性變更。</span><span class="sxs-lookup"><span data-stu-id="d15ad-349">The <xref:System.Windows.Window.WindowState%2A> property is changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.Window.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-350">取得列舉值，這個列舉值列出視窗的邏輯子項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-350">Gets an enumerator for a window's logical child elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-351">
            <see cref="T:System.Collections.IEnumerator" />，列出視窗的邏輯子項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-351">An <see cref="T:System.Collections.IEnumerator" /> a window's logical child elements.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.FrameworkElement.LogicalChildren" />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="window.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">
          <span data-ttu-id="d15ad-352">
            <see cref="T:System.Windows.Size" />，反映這個視窗可以提供給子系使用的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-352">A <see cref="T:System.Windows.Size" /> that reflects the available size that this window can give to the child.</span>
          </span>
          <span data-ttu-id="d15ad-353">您可以指定 Infinity，這個值表示視窗可以隨任何內容大小調整。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-353">Infinity can be given as a value to indicate that the window will size to whatever content is available.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-354">覆寫這個方法可以測量視窗大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-354">Override this method to measure the size of a window.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d15ad-355">
            <see cref="T:System.Windows.Size" />，反映這個視窗在配置期間依據子系大小計算得來的大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-355">A <see cref="T:System.Windows.Size" /> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-356"><xref:System.Windows.Window.MeasureOverride%2A> 不會呼叫的時機<xref:System.Windows.UIElement.Visibility%2A>屬性的值為<xref:System.Windows.Visibility.Collapsed>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-356"><xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="d15ad-357">如果值<xref:System.Windows.UIElement.Visibility%2A>屬性是<xref:System.Windows.Visibility.Hidden>或是<xref:System.Windows.Visibility.Visible>，<xref:System.Windows.Window.MeasureOverride%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="d15ad-357">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-358">當可能<xref:System.Windows.Window.Show%2A>或<xref:System.Windows.Window.ShowDialog%2A>呼叫時，<xref:System.Windows.UIElement.Visibility%2A>屬性<xref:System.Windows.Window>設定為<xref:System.Windows.Visibility.Visible>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-358">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="OnActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnActivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnActivated : EventArgs -&gt; unit&#xA;override this.OnActivated : EventArgs -&gt; unit" Usage="window.OnActivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d15ad-359">包含事件資料的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-359">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-360">引發 <see cref="E:System.Windows.Window.Activated" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-360">Raises the <see cref="E:System.Windows.Window.Activated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-361"><xref:System.Windows.Window.OnActivated%2A> 會引發 <xref:System.Windows.Window.Activated> 事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-361"><xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="d15ad-362">衍生自類型<xref:System.Windows.Window>可能會覆寫<xref:System.Windows.Window.OnActivated%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-362">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>.</span></span> <span data-ttu-id="d15ad-363">覆寫的方法必須呼叫<xref:System.Windows.Window.OnActivated%2A>基底類別上如果<xref:System.Windows.Window.Activated>必須引發。</span><span class="sxs-lookup"><span data-stu-id="d15ad-363">The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnClosed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClosed : EventArgs -&gt; unit&#xA;override this.OnClosed : EventArgs -&gt; unit" Usage="window.OnClosed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d15ad-364">包含事件資料的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-364">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-365">引發 <see cref="E:System.Windows.Window.Closed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-365">Raises the <see cref="E:System.Windows.Window.Closed" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-366"><xref:System.Windows.Window.OnClosed%2A> 會引發 <xref:System.Windows.Window.Closed> 事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-366"><xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event.</span></span>  
  
 <span data-ttu-id="d15ad-367">衍生自類型<xref:System.Windows.Window>可能會覆寫<xref:System.Windows.Window.OnClosed%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-367">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>.</span></span> <span data-ttu-id="d15ad-368">覆寫的方法必須呼叫<xref:System.Windows.Window.OnClosed%2A>基底類別上如果<xref:System.Windows.Window.Closed>必須引發。</span><span class="sxs-lookup"><span data-stu-id="d15ad-368">The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosing(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosing (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosing(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClosing : System.ComponentModel.CancelEventArgs -&gt; unit&#xA;override this.OnClosing : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="window.OnClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d15ad-369">
            <see cref="T:System.ComponentModel.CancelEventArgs" />，其中包含事件資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-369">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-370">引發 <see cref="E:System.Windows.Window.Closing" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-370">Raises the <see cref="E:System.Windows.Window.Closing" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-371"><xref:System.Windows.Window.OnClosing%2A> 會引發 <xref:System.Windows.Window.Closing> 事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-371"><xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event.</span></span>  
  
 <span data-ttu-id="d15ad-372">衍生自類型<xref:System.Windows.Window>可能會覆寫<xref:System.Windows.Window.OnClosing%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-372">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>.</span></span> <span data-ttu-id="d15ad-373">覆寫的方法必須呼叫<xref:System.Windows.Window.OnClosing%2A>基底類別上如果<xref:System.Windows.Window.Closing>必須引發。</span><span class="sxs-lookup"><span data-stu-id="d15ad-373">The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="protected override void OnContentChanged (object oldContent, object newContent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContentChanged(object oldContent, object newContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnContentChanged (oldContent As Object, newContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnContentChanged(System::Object ^ oldContent, System::Object ^ newContent);" />
      <MemberSignature Language="F#" Value="override this.OnContentChanged : obj * obj -&gt; unit" Usage="window.OnContentChanged (oldContent, newContent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContent" Type="System.Object" />
        <Parameter Name="newContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldContent">
          <span data-ttu-id="d15ad-374">舊內容樹狀結構根項目的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-374">A reference to the root of the old content tree.</span>
          </span>
        </param>
        <param name="newContent">
          <span data-ttu-id="d15ad-375">新內容樹狀結構根項目的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-375">A reference to the root of the new content tree.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-376">在 <see cref="P:System.Windows.Controls.ContentControl.Content" /> 屬性變更時呼叫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-376">Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentRendered">
      <MemberSignature Language="C#" Value="protected virtual void OnContentRendered (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentRendered(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentRendered(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentRendered (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentRendered(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContentRendered : EventArgs -&gt; unit&#xA;override this.OnContentRendered : EventArgs -&gt; unit" Usage="window.OnContentRendered e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d15ad-377">包含事件資料的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-377">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-378">引發 <see cref="E:System.Windows.Window.ContentRendered" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-378">Raises the <see cref="E:System.Windows.Window.ContentRendered" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-379"><xref:System.Windows.Window.OnContentRendered%2A> 會引發 <xref:System.Windows.Window.ContentRendered> 事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-379"><xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event.</span></span>  
  
 <span data-ttu-id="d15ad-380">衍生自類型<xref:System.Windows.Window>可能會覆寫<xref:System.Windows.Window.OnContentRendered%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-380">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>.</span></span> <span data-ttu-id="d15ad-381">覆寫的方法必須呼叫<xref:System.Windows.Window.OnContentRendered%2A>基底類別上如果<xref:System.Windows.Window.ContentRendered>必須引發。</span><span class="sxs-lookup"><span data-stu-id="d15ad-381">The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="window.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-382">建立並傳回這個 <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> 的 <see cref="T:System.Windows.Window" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-382">Creates and returns a <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d15ad-383">這個 <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> 的 <see cref="T:System.Windows.Window" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-383">A <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-384">這個方法會覆寫 <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-384">This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeactivated">
      <MemberSignature Language="C#" Value="protected virtual void OnDeactivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeactivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeactivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeactivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDeactivated : EventArgs -&gt; unit&#xA;override this.OnDeactivated : EventArgs -&gt; unit" Usage="window.OnDeactivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d15ad-385">包含事件資料的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-385">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-386">引發 <see cref="E:System.Windows.Window.Deactivated" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-386">Raises the <see cref="E:System.Windows.Window.Deactivated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-387"><xref:System.Windows.Window.OnDeactivated%2A> 會引發 <xref:System.Windows.Window.Deactivated> 事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-387"><xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="d15ad-388">衍生自類型<xref:System.Windows.Window>可能會覆寫<xref:System.Windows.Window.OnDeactivated%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-388">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>.</span></span> <span data-ttu-id="d15ad-389">覆寫的方法必須呼叫<xref:System.Windows.Window.OnDeactivated%2A>基底類別上如果<xref:System.Windows.Window.Deactivated>必須引發。</span><span class="sxs-lookup"><span data-stu-id="d15ad-389">The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChanged">
      <MemberSignature Language="C#" Value="protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDpiChanged(valuetype System.Windows.DpiScale oldDpi, valuetype System.Windows.DpiScale newDpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDpiChanged (oldDpi As DpiScale, newDpi As DpiScale)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDpiChanged(System::Windows::DpiScale oldDpi, System::Windows::DpiScale newDpi);" />
      <MemberSignature Language="F#" Value="abstract member OnDpiChanged : System.Windows.DpiScale * System.Windows.DpiScale -&gt; unit&#xA;override this.OnDpiChanged : System.Windows.DpiScale * System.Windows.DpiScale -&gt; unit" Usage="window.OnDpiChanged (oldDpi, newDpi)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldDpi" Type="System.Windows.DpiScale" />
        <Parameter Name="newDpi" Type="System.Windows.DpiScale" />
      </Parameters>
      <Docs>
        <param name="oldDpi">
          <span data-ttu-id="d15ad-390">先前的 DPI 縮放比例設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-390">The previous DPI scale setting.</span>
          </span>
        </param>
        <param name="newDpi">
          <span data-ttu-id="d15ad-391">新的 DPI 縮放比例設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-391">The new DPI scale setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-392">當轉譯此視窗的 DPI 變更時呼叫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-392">Called when the DPI at which this window is rendered changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLocationChanged : EventArgs -&gt; unit&#xA;override this.OnLocationChanged : EventArgs -&gt; unit" Usage="window.OnLocationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d15ad-393">包含事件資料的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-393">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-394">引發 <see cref="E:System.Windows.Window.LocationChanged" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-394">Raises the <see cref="E:System.Windows.Window.LocationChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-395"><xref:System.Windows.Window.OnLocationChanged%2A> 會引發 <xref:System.Windows.Window.LocationChanged> 事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-395"><xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event.</span></span>  
  
 <span data-ttu-id="d15ad-396">衍生自類型<xref:System.Windows.Window>可能會覆寫<xref:System.Windows.Window.OnLocationChanged%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-396">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>.</span></span> <span data-ttu-id="d15ad-397">覆寫的方法必須呼叫<xref:System.Windows.Window.OnLocationChanged%2A>基底類別上如果<xref:System.Windows.Window.LocationChanged>必須引發。</span><span class="sxs-lookup"><span data-stu-id="d15ad-397">The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="window.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d15ad-398">事件的資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-398">The data for the event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-399">當 <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> 事件發生時呼叫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-399">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-400">此實作不會變更處理的狀態 (<xref:System.Windows.RoutedEventArgs.Handled%2A>屬性) 的<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>事件資料。</span><span class="sxs-lookup"><span data-stu-id="d15ad-400">This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d15ad-401">如果您覆寫<see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />，務必呼叫基底實作，您<see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="d15ad-401">If you override <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="d15ad-402">無法呼叫基底實作會防止處理事件，可能會變更執行階段行為的最後一個類別的基底類別。</span>
            <span class="sxs-lookup">
              <span data-stu-id="d15ad-402">Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="d15ad-403">您可以呼叫之前或之後，在特殊處理的基底實作，根據您的需求。</span>
            <span class="sxs-lookup">
              <span data-stu-id="d15ad-403">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSourceInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnSourceInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSourceInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSourceInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSourceInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSourceInitialized : EventArgs -&gt; unit&#xA;override this.OnSourceInitialized : EventArgs -&gt; unit" Usage="window.OnSourceInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d15ad-404">包含事件資料的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-404">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-405">引發 <see cref="E:System.Windows.Window.SourceInitialized" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-405">Raises the <see cref="E:System.Windows.Window.SourceInitialized" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-406"><xref:System.Windows.Window.OnSourceInitialized%2A> 會引發 <xref:System.Windows.Window.SourceInitialized> 事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-406"><xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event.</span></span>  
  
 <span data-ttu-id="d15ad-407">衍生自類型<xref:System.Windows.Window>可能會覆寫<xref:System.Windows.Window.OnSourceInitialized%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-407">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>.</span></span> <span data-ttu-id="d15ad-408">覆寫的方法必須呼叫<xref:System.Windows.Window.OnSourceInitialized%2A>基底類別上如果<xref:System.Windows.Window.SourceInitialized>必須引發。</span><span class="sxs-lookup"><span data-stu-id="d15ad-408">The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnStateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStateChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStateChanged : EventArgs -&gt; unit&#xA;override this.OnStateChanged : EventArgs -&gt; unit" Usage="window.OnStateChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d15ad-409">包含事件資料的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-409">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-410">引發 <see cref="E:System.Windows.Window.StateChanged" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-410">Raises the <see cref="E:System.Windows.Window.StateChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-411"><xref:System.Windows.Window.OnStateChanged%2A> 會引發 <xref:System.Windows.Window.StateChanged> 事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-411"><xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event.</span></span>  
  
 <span data-ttu-id="d15ad-412">衍生自類型<xref:System.Windows.Window>可能會覆寫<xref:System.Windows.Window.OnStateChanged%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-412">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>.</span></span> <span data-ttu-id="d15ad-413">覆寫的方法必須呼叫<xref:System.Windows.Window.OnStateChanged%2A>基底類別上如果<xref:System.Windows.Window.StateChanged>必須引發。</span><span class="sxs-lookup"><span data-stu-id="d15ad-413">The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualChildrenChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualChildrenChanged (System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualChildrenChanged(class System.Windows.DependencyObject visualAdded, class System.Windows.DependencyObject visualRemoved) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualChildrenChanged (visualAdded As DependencyObject, visualRemoved As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualChildrenChanged(System::Windows::DependencyObject ^ visualAdded, System::Windows::DependencyObject ^ visualRemoved);" />
      <MemberSignature Language="F#" Value="override this.OnVisualChildrenChanged : System.Windows.DependencyObject * System.Windows.DependencyObject -&gt; unit" Usage="window.OnVisualChildrenChanged (visualAdded, visualRemoved)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visualAdded" Type="System.Windows.DependencyObject" />
        <Parameter Name="visualRemoved" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="visualAdded">To be added.</param>
        <param name="visualRemoved">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides NotOverridable Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="window.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">
          <span data-ttu-id="d15ad-414">先前的父代。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-414">The previous parent.</span>
          </span>
          <span data-ttu-id="d15ad-415">如果 <see cref="T:System.Windows.DependencyObject" /> 先前沒有父代，則設為 null。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-415">Set to null if the <see cref="T:System.Windows.DependencyObject" /> did not have a previous parent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d15ad-416">當視窗的父代變更時呼叫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-416">Called when the parent of the window is changed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OwnedWindows">
      <MemberSignature Language="C#" Value="public System.Windows.WindowCollection OwnedWindows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.WindowCollection OwnedWindows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.OwnedWindows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnedWindows As WindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowCollection ^ OwnedWindows { System::Windows::WindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnedWindows : System.Windows.WindowCollection" Usage="System.Windows.Window.OwnedWindows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-417">取得這個視窗主控的視窗集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-417">Gets a collection of windows for which this window is the owner.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-418">
            <see cref="T:System.Windows.WindowCollection" />，包含對這個視窗所主控之視窗的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-418">A <see cref="T:System.Windows.WindowCollection" /> that contains references to the windows for which this window is the owner.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-419">擁有的視窗是其<xref:System.Windows.Window.Owner%2A>屬性設為另一個視窗中，也就是主控視窗的參考。</span><span class="sxs-lookup"><span data-stu-id="d15ad-419">An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window.</span></span> <span data-ttu-id="d15ad-420">若要尋找主控視窗擁有的所有視窗，您可以列舉<xref:System.Windows.WindowCollection>時所傳回<xref:System.Windows.Window.OwnedWindows%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-420">To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-421">下列範例示範如何列舉<xref:System.Windows.Window.OwnedWindows%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-421">The following example shows how to enumerate <xref:System.Windows.Window.OwnedWindows%2A>.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#getwindowownedwindowscode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.Window Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Window Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As Window" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Window ^ Owner { System::Windows::Window ^ get(); void set(System::Windows::Window ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.Windows.Window with get, set" Usage="System.Windows.Window.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-422">取得或設定主控這個 <see cref="T:System.Windows.Window" /> 的 <see cref="T:System.Windows.Window" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-422">Gets or sets the <see cref="T:System.Windows.Window" /> that owns this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-423">表示主控這個 <see cref="T:System.Windows.Window" /> 的 <see cref="T:System.Windows.Window" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-423">A <see cref="T:System.Windows.Window" /> object that represents the owner of this <see cref="T:System.Windows.Window" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-424">子視窗開啟時，父視窗呼叫<xref:System.Windows.Window.ShowDialog%2A>，父和子視窗之間建立隱含的關聯性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-424">When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window.</span></span> <span data-ttu-id="d15ad-425">此關聯性會強制執行特定行為，包括根據最小化、 最大化和還原。</span><span class="sxs-lookup"><span data-stu-id="d15ad-425">This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</span></span>  
  
 <span data-ttu-id="d15ad-426">當子視窗由父視窗呼叫<xref:System.Windows.Window.Show%2A>，不過，子視窗沒有以父視窗關聯性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-426">When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window.</span></span> <span data-ttu-id="d15ad-427">這表示：</span><span class="sxs-lookup"><span data-stu-id="d15ad-427">This means that:</span></span>  
  
-   <span data-ttu-id="d15ad-428">子視窗並沒有父視窗的參考。</span><span class="sxs-lookup"><span data-stu-id="d15ad-428">The child window does not have a reference to the parent window.</span></span>  
  
-   <span data-ttu-id="d15ad-429">子視窗的行為不依存於父視窗; 的行為其中一個視窗可以涵蓋另一個，或最小化、 最大化和還原個別。</span><span class="sxs-lookup"><span data-stu-id="d15ad-429">The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</span></span>  
  
 <span data-ttu-id="d15ad-430">若要讓您建立子視窗，以父視窗之間的關聯性<xref:System.Windows.Window>支援擁有權的概念。</span><span class="sxs-lookup"><span data-stu-id="d15ad-430">To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership.</span></span> <span data-ttu-id="d15ad-431">建立擁有權時<xref:System.Windows.Window.Owner%2A>屬性 （擁有的視窗） 視窗設定另一個視窗 （擁有者 視窗） 的參考。</span><span class="sxs-lookup"><span data-stu-id="d15ad-431">Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).</span></span>  
  
 <span data-ttu-id="d15ad-432">一旦建立此關聯性，即會顯示下列行為：</span><span class="sxs-lookup"><span data-stu-id="d15ad-432">Once this relationship is established, the following behaviors are exhibited:</span></span>  
  
-   <span data-ttu-id="d15ad-433">如果主控視窗最小化，其擁有的所有視窗會最小都化以及。</span><span class="sxs-lookup"><span data-stu-id="d15ad-433">If an owner window is minimized, all its owned windows are minimized as well.</span></span>  
  
-   <span data-ttu-id="d15ad-434">如果擁有的視窗最小化，其擁有者不降到最低。</span><span class="sxs-lookup"><span data-stu-id="d15ad-434">If an owned window is minimized, its owner is not minimized.</span></span>  
  
-   <span data-ttu-id="d15ad-435">如果主控視窗最大化時，會還原主控視窗和其所擁有的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-435">If an owner window is maximized, both the owner window and its owned windows are restored.</span></span>  
  
-   <span data-ttu-id="d15ad-436">主控視窗可以永遠不會涵蓋擁有的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-436">An owner window can never cover an owned window.</span></span>  
  
-   <span data-ttu-id="d15ad-437">擁有不使用開啟的 windows<xref:System.Windows.Window.ShowDialog%2A>不會強制回應。</span><span class="sxs-lookup"><span data-stu-id="d15ad-437">Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal.</span></span> <span data-ttu-id="d15ad-438">使用者仍然可以與擁有者視窗互動。</span><span class="sxs-lookup"><span data-stu-id="d15ad-438">The user can still interact with the owner window.</span></span>  
  
-   <span data-ttu-id="d15ad-439">如果您關閉主控視窗，也會關閉其擁有的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-439">If you close an owner window, its owned windows are also closed.</span></span>  
  
-   <span data-ttu-id="d15ad-440">如果擁有的視窗已開啟藉由其擁有者視窗<xref:System.Windows.Window.Show%2A>，以及擁有者視窗已關閉，擁有的視窗<xref:System.Windows.Window.Closing>不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-440">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span>  
  
 <span data-ttu-id="d15ad-441">當您開啟子視窗呼叫<xref:System.Windows.Window.ShowDialog%2A>，您也應該設定<xref:System.Windows.Window.Owner%2A>子視窗的屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-441">When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window.</span></span> <span data-ttu-id="d15ad-442">如果不這麼做，您的使用者無法再還原子視窗和父視窗，按下的工作列按鈕。</span><span class="sxs-lookup"><span data-stu-id="d15ad-442">If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</span></span> <span data-ttu-id="d15ad-443">相反地，按下的工作列按鈕，將會產生一份 windows，包括子系和父視窗中的，才能選取;還原選取的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-443">Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d15ad-444">您也應該設定<xref:System.Windows.Window.Owner%2A>屬性，藉由呼叫開啟的視窗<xref:System.Windows.Window.ShowDialog%2A>以確保有正確的行為。</span><span class="sxs-lookup"><span data-stu-id="d15ad-444">You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with .</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-445">您無法設定或取得這個屬性，當瀏覽器中裝載的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-445">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-446">下列範例示範如何建立擁有者/擁有關聯性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-446">The following example shows how to establish the owner/owned relationship.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#setwindowownercode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#setwindowownercode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d15ad-447">有個視窗嘗試主控它自己</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-447">A window tries to own itself</span>
          </span>
          <span data-ttu-id="d15ad-448">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-448">-or-</span>
          </span>
          <span data-ttu-id="d15ad-449">兩個視窗嘗試主控對方。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-449">Two windows try to own each other.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d15ad-450">
            <see cref="P:System.Windows.Window.Owner" /> 屬性是設定在使用 <see cref="M:System.Windows.Window.ShowDialog" /> 顯示的可見視窗上。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-450">The <see cref="P:System.Windows.Window.Owner" /> property is set on a visible window shown using <see cref="M:System.Windows.Window.ShowDialog" /></span>
          </span>
          <span data-ttu-id="d15ad-451">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-451">-or-</span>
          </span>
          <span data-ttu-id="d15ad-452">
            <see cref="P:System.Windows.Window.Owner" /> 屬性是設定為先前未顯示過的視窗。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-452">The <see cref="P:System.Windows.Window.Owner" /> property is set with a window that has not been previously shown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d15ad-453">若要使用的所有 windows 和不受限制的使用者輸入的事件的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-453">for permission to use all windows and user input events without restriction.</span>
          </span>
          <span data-ttu-id="d15ad-454">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-454">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="ResizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.ResizeMode ResizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.ResizeMode ResizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ResizeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ResizeMode As ResizeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResizeMode ResizeMode { System::Windows::ResizeMode get(); void set(System::Windows::ResizeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ResizeMode : System.Windows.ResizeMode with get, set" Usage="System.Windows.Window.ResizeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ResizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-455">取得或設定調整大小模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-455">Gets or sets the resize mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-456">指定調整大小模式的 <see cref="T:System.Windows.ResizeMode" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-456">A <see cref="T:System.Windows.ResizeMode" /> value specifying the resize mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-457">有四個選項：</span><span class="sxs-lookup"><span data-stu-id="d15ad-457">There are four options:</span></span>  
  
-   <span data-ttu-id="d15ad-458">**NoResize**。</span><span class="sxs-lookup"><span data-stu-id="d15ad-458">**NoResize**.</span></span> <span data-ttu-id="d15ad-459">使用者無法調整視窗大小。</span><span class="sxs-lookup"><span data-stu-id="d15ad-459">The user cannot resize the window.</span></span> <span data-ttu-id="d15ad-460">不會顯示最大化] 和 [最小化方塊。</span><span class="sxs-lookup"><span data-stu-id="d15ad-460">The Maximize and Minimize boxes are not shown.</span></span>  
  
-   <span data-ttu-id="d15ad-461">**CanMinimize**。</span><span class="sxs-lookup"><span data-stu-id="d15ad-461">**CanMinimize**.</span></span> <span data-ttu-id="d15ad-462">使用者只可以最小化視窗，並將它還原從工作列。</span><span class="sxs-lookup"><span data-stu-id="d15ad-462">The user can only minimize the window and restore it from the taskbar.</span></span> <span data-ttu-id="d15ad-463">同時會顯示最小化] 和 [最大化方塊，但僅最小化方塊會啟用。</span><span class="sxs-lookup"><span data-stu-id="d15ad-463">The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</span></span>  
  
-   <span data-ttu-id="d15ad-464">**CanResize**。</span><span class="sxs-lookup"><span data-stu-id="d15ad-464">**CanResize**.</span></span> <span data-ttu-id="d15ad-465">使用者會有完整的能力來調整大小視窗中，視窗周圍使用最小化] 和 [最大化方塊和可拖曳的外框。</span><span class="sxs-lookup"><span data-stu-id="d15ad-465">The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</span></span> <span data-ttu-id="d15ad-466">最小化] 和 [最大化方塊會顯示並啟用。</span><span class="sxs-lookup"><span data-stu-id="d15ad-466">The Minimize and Maximize boxes are shown and enabled.</span></span> <span data-ttu-id="d15ad-467">（預設值）。</span><span class="sxs-lookup"><span data-stu-id="d15ad-467">(Default).</span></span>  
  
-   <span data-ttu-id="d15ad-468">**CanResizeWithGrip**。</span><span class="sxs-lookup"><span data-stu-id="d15ad-468">**CanResizeWithGrip**.</span></span> <span data-ttu-id="d15ad-469">此選項會有相同的功能<xref:System.Windows.ResizeMode.CanResize>，但將 「 調整大小底框 」 新增至視窗的右下角。</span><span class="sxs-lookup"><span data-stu-id="d15ad-469">This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a "resize grip" to the lower right corner of the window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-470">您無法設定或取得這個屬性，當瀏覽器中裝載的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-470">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowResizeMode"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-471">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-471">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-472">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-472">Identifier field</span></span>|<xref:System.Windows.Window.ResizeModeProperty>|  
|<span data-ttu-id="d15ad-473">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-473">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Primitives.ResizeGrip" />
      </Docs>
    </Member>
    <Member MemberName="ResizeModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ResizeModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ResizeModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ResizeModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResizeModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ResizeModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ResizeModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ResizeModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-474">識別 <see cref="P:System.Windows.Window.ResizeMode" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-474">Identifies the <see cref="P:System.Windows.Window.ResizeMode" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreBounds">
      <MemberSignature Language="C#" Value="public System.Windows.Rect RestoreBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect RestoreBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.RestoreBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestoreBounds As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect RestoreBounds { System::Windows::Rect get(); };" />
      <MemberSignature Language="F#" Value="member this.RestoreBounds : System.Windows.Rect" Usage="System.Windows.Window.RestoreBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-475">取得視窗在最小化或最大化之前的大小和位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-475">Gets the size and location of a window before being either minimized or maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-476">
            <see cref="T:System.Windows.Rect" />，指定視窗在最小化或最大化之前的大小和位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-476">A <see cref="T:System.Windows.Rect" /> that specifies the size and location of a window before being either minimized or maximized.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-477">還原矩形是最小化或最大化之前的視窗所佔用的區域。</span><span class="sxs-lookup"><span data-stu-id="d15ad-477">The restore rectangle is the region occupied by the window before it was minimized or maximized.</span></span> <span data-ttu-id="d15ad-478">您可以使用<xref:System.Windows.Window.RestoreBounds%2A>儲存的最後一個大小和視窗的位置，然後關閉應用程式時，再到應用程式啟動使用者，維持不變的方式還原視窗的下一次擷取這些值。</span><span class="sxs-lookup"><span data-stu-id="d15ad-478">You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</span></span>  
  
 <span data-ttu-id="d15ad-479">如果您查詢<xref:System.Windows.Window.RestoreBounds%2A>在顯示的視窗之前或之後已關閉，<xref:System.Windows.Rect.Empty%2A>會傳回。</span><span class="sxs-lookup"><span data-stu-id="d15ad-479">If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-480">在瀏覽器裝載的視窗時，您無法取得此屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-480">You cannot get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-481">下列範例會使用<xref:System.Windows.Window.RestoreBounds%2A>和隔離儲存區，以確保的大小和視窗的位置在如同前一個視窗顯示的時間都相同。</span><span class="sxs-lookup"><span data-stu-id="d15ad-481">The following example uses <xref:System.Windows.Window.RestoreBounds%2A> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</span></span>  
  
 [!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml1)]  
[!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml2)]  
  
 [!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]
 [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]  
[!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]
[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d15ad-482">若要查詢的大小和視窗的位置的權限週框矩形。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-482">for permission to query for the size and location of a window's bounding rectangle.</span>
          </span>
          <span data-ttu-id="d15ad-483">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-483">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberSignature Language="F#" Value="member this.Show : unit -&gt; unit" Usage="window.Show " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-484">開啟視窗，並且不等新開啟的視窗關閉就返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-484">Opens a window and returns without waiting for the newly opened window to close.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-485">當<xref:System.Windows.Window>具現化類別，它不是預設為可見。</span><span class="sxs-lookup"><span data-stu-id="d15ad-485">When the <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="d15ad-486"><xref:System.Windows.Window.Show%2A> 會顯示一個視窗，並會立即傳回，而不需等待要關閉視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-486"><xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed.</span></span> <span data-ttu-id="d15ad-487">因此，開啟的視窗不會無法防止使用者與其他 windows 應用程式中互動。</span><span class="sxs-lookup"><span data-stu-id="d15ad-487">Consequently, the opened window does not prevent users from interacting with other windows in the application.</span></span> <span data-ttu-id="d15ad-488">這種視窗稱為*非強制回應*視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-488">This type of window is called a *modeless* window.</span></span> <span data-ttu-id="d15ad-489">非強制回應視窗的常見範例是屬性 視窗、 工具箱和調色盤。</span><span class="sxs-lookup"><span data-stu-id="d15ad-489">Common examples of modeless windows are properties windows, toolboxes, and palettes.</span></span> <span data-ttu-id="d15ad-490">若要限制使用者與特定的視窗互動，必須開啟的視窗藉由呼叫<xref:System.Windows.Window.ShowDialog%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-490">To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="d15ad-491">藉由呼叫開啟的視窗<xref:System.Windows.Window.Show%2A>並不會自動開啟它的視窗的關聯性; 具體來說，開啟的視窗不知道哪一個視窗中開啟它。</span><span class="sxs-lookup"><span data-stu-id="d15ad-491">A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="d15ad-492">可以使用建立此關聯性<xref:System.Windows.Window.Owner%2A>屬性和設定使用的 managed<xref:System.Windows.Window.OwnedWindows%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-492">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
 <span data-ttu-id="d15ad-493">呼叫<xref:System.Windows.Window.Show%2A>來達到相同的結果設定為<xref:System.Windows.UIElement.Visibility%2A>屬性<xref:System.Windows.Window>物件<xref:System.Windows.Visibility.Visible>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-493">Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>.</span></span> <span data-ttu-id="d15ad-494">不過，沒有從計時的觀點來看兩者之間的差異。</span><span class="sxs-lookup"><span data-stu-id="d15ad-494">However, there is a difference between the two from a timing perspective.</span></span>  
  
 <span data-ttu-id="d15ad-495">呼叫<xref:System.Windows.Window.Show%2A>是同步作業，之後才會傳回<xref:System.Windows.FrameworkElement.Loaded>已經引發事件的子視窗上：</span><span class="sxs-lookup"><span data-stu-id="d15ad-495">Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowSync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)]
 [!code-vb[WindowShowTimingSnippets#ShowSync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)]  
  
 <span data-ttu-id="d15ad-496">設定<xref:System.Windows.UIElement.Visibility%2A>，不過，會立即傳回的非同步作業：</span><span class="sxs-lookup"><span data-stu-id="d15ad-496">Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowASync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)]
 [!code-vb[WindowShowTimingSnippets#ShowASync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)]  
  
 <span data-ttu-id="d15ad-497">設定時<xref:System.Windows.UIElement.Visibility%2A>，您註冊，才能設定任何視窗事件<xref:System.Windows.UIElement.Visibility%2A>可能不會在您設定的方法之前引發<xref:System.Windows.UIElement.Visibility%2A>已完成執行。</span><span class="sxs-lookup"><span data-stu-id="d15ad-497">When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-498">下列範例示範如何開啟非強制回應視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-498">The following sample demonstrates how to open a modeless window.</span></span>  
  
 [!code-csharp[WindowShowSnippets#WindowShowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowSnippets/CSharp/MainWindow.xaml.cs#windowshowcode)]
 [!code-vb[WindowShowSnippets#WindowShowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowSnippets/visualbasic/mainwindow.xaml.vb#windowshowcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d15ad-499">
            <see cref="M:System.Windows.Window.Show" /> 的呼叫對象是正在關閉 (<see cref="E:System.Windows.Window.Closing" />) 或已經關閉 (<see cref="E:System.Windows.Window.Closed" />) 的視窗。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-499">
              <see cref="M:System.Windows.Window.Show" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="M:System.Windows.Window.Hide" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowActivated">
      <MemberSignature Language="C#" Value="public bool ShowActivated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowActivated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowActivated" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowActivated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowActivated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowActivated : bool with get, set" Usage="System.Windows.Window.ShowActivated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-500">取得或設定值，這個值指出視窗一開始顯示時是否已啟動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-500">Gets or sets a value that indicates whether a window is activated when first shown.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-501">如果視窗一開始顯示時為已啟動，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-501">
              <see langword="true" /> if a window is activated when first shown; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d15ad-502">預設值為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-502">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-503">當與視窗其<xref:System.Windows.Window.ShowActivated%2A>屬性設定為`false`會開啟，視窗不會啟動並將其<xref:System.Windows.Window.Activated>選取使用者以手動方式啟動的視窗之前，不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="d15ad-503">When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it.</span></span> <span data-ttu-id="d15ad-504">已選取視窗之後，它就會啟動，並通常會停用。</span><span class="sxs-lookup"><span data-stu-id="d15ad-504">After the window is selected, it activates and deactivates normally.</span></span>  
  
 <span data-ttu-id="d15ad-505">若要防止視窗時就會開啟，正在啟動<xref:System.Windows.Window.ShowActivated%2A>屬性必須設為`false`視窗顯示之前 (藉由呼叫<xref:System.Windows.Window.Show%2A>); 設定<xref:System.Windows.Window.ShowActivated%2A>來`false`之後視窗會顯示沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="d15ad-505">To prevent a window from being activated when it opens, the <xref:System.Windows.Window.ShowActivated%2A> property must be set to `false` before the window is shown (by calling <xref:System.Windows.Window.Show%2A>); setting <xref:System.Windows.Window.ShowActivated%2A> to `false` after a window is shown has no effect.</span></span>  
  
 <span data-ttu-id="d15ad-506">設定<xref:System.Windows.Window.ShowActivated%2A>要`false`藉由呼叫強制回應視窗，開啟的視窗<xref:System.Windows.Window.ShowDialog%2A>，沒有任何實際的影響。</span><span class="sxs-lookup"><span data-stu-id="d15ad-506">Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact.</span></span> <span data-ttu-id="d15ad-507">雖然將不會啟動強制回應視窗，強制回應視窗就會造成使用者無法啟動任何其他開啟的應用程式視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-507">Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowActivated"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-508">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-508">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-509">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-509">Identifier field</span></span>|<xref:System.Windows.Window.ShowActivatedProperty>|  
|<span data-ttu-id="d15ad-510">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-510">Metadata properties set to `true`</span></span>|<span data-ttu-id="d15ad-511">無</span><span class="sxs-lookup"><span data-stu-id="d15ad-511">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-512">下列範例示範如何使用標記來設定但不會啟用要開啟的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-512">The following example shows how to use markup to configure a window to be opened without being activated.</span></span>  
  
 [!code-xaml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml#showunactivatedmarkup1)]  
  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml.cs#showunactivatedcodebehind)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/awindow.xaml.vb#showunactivatedcodebehind)]  
  
 <span data-ttu-id="d15ad-513">下列範例示範如何使用程式碼來設定但不啟動開啟的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-513">The following example shows how to use code to configure a window to be opened without it being activated.</span></span>  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/Window1.xaml.cs#showunactivatedwindowcode)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/window1.xaml.vb#showunactivatedwindowcode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowActivatedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowActivatedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowActivatedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowActivatedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowActivatedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowActivatedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ShowActivatedProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ShowActivatedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-514">識別 <see cref="P:System.Windows.Window.ShowActivated" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-514">Identifies the <see cref="P:System.Windows.Window.ShowActivated" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; ShowDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;bool&gt; ShowDialog() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ShowDialog" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog () As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;bool&gt; ShowDialog();" />
      <MemberSignature Language="F#" Value="member this.ShowDialog : unit -&gt; Nullable&lt;bool&gt;" Usage="window.ShowDialog " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-515">開啟視窗，並且只在新開啟的視窗已經關閉時才返回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-515">Opens a window and returns only when the newly opened window is closed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d15ad-516">
            <see cref="T:System.Nullable`1" /> 型別的 <see cref="T:System.Boolean" /> 值，會指定已接受 (<see langword="true" />) 或取消 (<see langword="false" />) 活動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-516">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" /> that specifies whether the activity was accepted (<see langword="true" />) or canceled (<see langword="false" />).</span>
          </span>
          <span data-ttu-id="d15ad-517">傳回值就是在視窗關閉前的 <see cref="P:System.Windows.Window.DialogResult" /> 屬性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-517">The return value is the value of the <see cref="P:System.Windows.Window.DialogResult" /> property before a window closes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-518">當<xref:System.Windows.Window>具現化類別，它不是預設為可見。</span><span class="sxs-lookup"><span data-stu-id="d15ad-518">When a <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="d15ad-519"><xref:System.Windows.Window.ShowDialog%2A> 顯示的視窗、 停用應用程式中的所有其他視窗和視窗已關閉時，才會傳回。</span><span class="sxs-lookup"><span data-stu-id="d15ad-519"><xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed.</span></span> <span data-ttu-id="d15ad-520">這種視窗稱為*強制回應*視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-520">This type of window is known as a *modal* window.</span></span>  
  
 <span data-ttu-id="d15ad-521">強制回應視窗主要是當做對話方塊使用。</span><span class="sxs-lookup"><span data-stu-id="d15ad-521">Modal windows are primarily used as dialog boxes.</span></span> <span data-ttu-id="d15ad-522">對話方塊是一種特殊的應用程式用來與使用者互動以完成工作，例如開啟檔案或列印文件視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-522">A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</span></span> <span data-ttu-id="d15ad-523">對話方塊通常可讓使用者接受或取消的工作，它們已顯示之前在關閉對話方塊。</span><span class="sxs-lookup"><span data-stu-id="d15ad-523">Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</span></span> <span data-ttu-id="d15ad-524"><xref:System.Windows.Window.ShowDialog%2A> 會傳回<xref:System.Nullable%601><xref:System.Boolean>值，指定是否接受或取消的活動。</span><span class="sxs-lookup"><span data-stu-id="d15ad-524"><xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled.</span></span> <span data-ttu-id="d15ad-525">傳回值就是在視窗關閉前的 <xref:System.Windows.Window.DialogResult%2A> 屬性值。</span><span class="sxs-lookup"><span data-stu-id="d15ad-525">The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes.</span></span> <span data-ttu-id="d15ad-526">如需詳細資訊，請參閱<xref:System.Windows.Window.DialogResult%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-526">For more information, see <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 <span data-ttu-id="d15ad-527">藉由呼叫開啟的視窗<xref:System.Windows.Window.ShowDialog%2A>方法不會自動具備視窗中開啟它的關聯性; 具體來說，開啟的視窗不知道哪一個視窗中開啟它。</span><span class="sxs-lookup"><span data-stu-id="d15ad-527">A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="d15ad-528">可以使用建立此關聯性<xref:System.Windows.Window.Owner%2A>屬性和設定使用的 managed<xref:System.Windows.Window.OwnedWindows%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-528">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span> <span data-ttu-id="d15ad-529">若要支援[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]自動化 (請參閱 < [UI 自動化概觀](~/docs/framework/ui-automation/ui-automation-overview.md))，<xref:System.Windows.Window.Owner%2A>藉由呼叫開啟的視窗必須設定<xref:System.Windows.Window.ShowDialog%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-529">To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="d15ad-530">當強制回應[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]視窗 (藉由呼叫開啟的視窗<xref:System.Windows.Window.ShowDialog%2A>) 關閉，先前已啟動 視窗就會重新啟動。</span><span class="sxs-lookup"><span data-stu-id="d15ad-530">When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated.</span></span> <span data-ttu-id="d15ad-531">如果強制回應[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]視窗會有主控視窗 (請參閱<xref:System.Windows.Window.Owner%2A>)，擁有者視窗未重新啟動時強制回應[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]視窗已關閉，除非它先前已啟動的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-531">If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-532">在瀏覽器裝載的視窗時，無法呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="d15ad-532">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-533">下列範例示範如何開啟強制回應視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-533">The following sample demonstrates how to open a modal window.</span></span>  
  
 [!code-csharp[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowDialogSnippets/CSharp/MainWindow.xaml.cs#windowshowdialogcode)]
 [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowDialogSnippets/visualbasic/mainwindow.xaml.vb#windowshowdialogcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d15ad-534">
            <see cref="M:System.Windows.Window.ShowDialog" /> 的呼叫對象是正在關閉 (<see cref="E:System.Windows.Window.Closing" />) 或已經關閉 (<see cref="E:System.Windows.Window.Closed" />) 的視窗。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-534">
              <see cref="M:System.Windows.Window.ShowDialog" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="d15ad-535">若要啟用視窗的權限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-535">for permission to activate a window.</span>
          </span>
          <span data-ttu-id="d15ad-536">相關聯的列舉型別： <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-536">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbar">
      <MemberSignature Language="C#" Value="public bool ShowInTaskbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowInTaskbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowInTaskbar" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowInTaskbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowInTaskbar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowInTaskbar : bool with get, set" Usage="System.Windows.Window.ShowInTaskbar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-537">取得或設定值，這個值表示視窗是否具有工作列按鈕。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-537">Gets or sets a value that indicates whether the window has a task bar button.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-538">如果視窗具有工作列按鈕則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-538">
              <see langword="true" /> if the window has a task bar button; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d15ad-539">不適用於視窗裝載於瀏覽器中時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-539">Does not apply when the window is hosted in a browser.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-540">如果<xref:System.Windows.Window.ShowInTaskbar%2A>設為`true`，視窗也會出現在 ALT + TAB 應用程式選取項目清單。</span><span class="sxs-lookup"><span data-stu-id="d15ad-540">If <xref:System.Windows.Window.ShowInTaskbar%2A> is set to `true`, the window will also appear in the ALT+TAB application selection list.</span></span>  
  
 <span data-ttu-id="d15ad-541">使用工作列按鈕和 ALT + TAB 應用程式選取項目清單中的圖示是值<xref:System.Windows.Window.Icon%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-541">The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-542">您無法設定或取得這個屬性，當瀏覽器中裝載的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-542">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowInTaskbar"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-543">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-543">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-544">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-544">Identifier field</span></span>|<xref:System.Windows.Window.ShowInTaskbarProperty>|  
|<span data-ttu-id="d15ad-545">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-545">Metadata properties set to `true`</span></span>|<span data-ttu-id="d15ad-546">無</span><span class="sxs-lookup"><span data-stu-id="d15ad-546">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbarProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowInTaskbarProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowInTaskbarProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowInTaskbarProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowInTaskbarProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ShowInTaskbarProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ShowInTaskbarProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-547">識別 <see cref="P:System.Windows.Window.ShowInTaskbar" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-547">Identifies the <see cref="P:System.Windows.Window.ShowInTaskbar" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeToContent">
      <MemberSignature Language="C#" Value="public System.Windows.SizeToContent SizeToContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.SizeToContent SizeToContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.SizeToContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SizeToContent As SizeToContent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SizeToContent SizeToContent { System::Windows::SizeToContent get(); void set(System::Windows::SizeToContent value); };" />
      <MemberSignature Language="F#" Value="member this.SizeToContent : System.Windows.SizeToContent with get, set" Usage="System.Windows.Window.SizeToContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeToContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-548">取得或設定值，這個值表示視窗是否會自動隨內容調整本身大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-548">Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-549">
            <see cref="T:System.Windows.SizeToContent" /> 值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-549">A <see cref="T:System.Windows.SizeToContent" /> value.</span>
          </span>
          <span data-ttu-id="d15ad-550">預設值為 <see cref="F:System.Windows.SizeToContent.Manual" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-550">The default is <see cref="F:System.Windows.SizeToContent.Manual" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-551">當<xref:System.Windows.Window.SizeToContent%2A>設定為<xref:System.Windows.SizeToContent.WidthAndHeight>，設定<xref:System.Windows.FrameworkElement.Height%2A>或<xref:System.Windows.FrameworkElement.Width%2A>沒有任何作用; 可以設定這兩個屬性，但它們會以設定的值不會套用至視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-551">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window.</span></span>  
  
 <span data-ttu-id="d15ad-552">當<xref:System.Windows.Window.SizeToContent%2A>設定為<xref:System.Windows.SizeToContent.Height>，將<xref:System.Windows.FrameworkElement.Height%2A>不會變更視窗的高度。</span><span class="sxs-lookup"><span data-stu-id="d15ad-552">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window.</span></span>  
  
 <span data-ttu-id="d15ad-553">當<xref:System.Windows.Window.SizeToContent%2A>設定為<xref:System.Windows.SizeToContent.Width>，將<xref:System.Windows.FrameworkElement.Width%2A>不會變更視窗的寬度。</span><span class="sxs-lookup"><span data-stu-id="d15ad-553">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window.</span></span>  
  
 <span data-ttu-id="d15ad-554">如果<xref:System.Windows.Window.SizeToContent%2A>以外的值<xref:System.Windows.SizeToContent.Manual>:</span><span class="sxs-lookup"><span data-stu-id="d15ad-554">If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:</span></span>  
  
-   <span data-ttu-id="d15ad-555"><xref:System.Windows.Window.SizeToContent%2A> 會自動設為<xref:System.Windows.SizeToContent.Manual>如果使用者調整視窗大小時使用調整大小底框或拖曳框線。</span><span class="sxs-lookup"><span data-stu-id="d15ad-555"><xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border.</span></span>  
  
-   <span data-ttu-id="d15ad-556">如果會使視窗調整本身大小的方式變更內容的大小<xref:System.Windows.FrameworkElement.SizeChanged>，就會引發。</span><span class="sxs-lookup"><span data-stu-id="d15ad-556">If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised.</span></span>  
  
 <span data-ttu-id="d15ad-557">如果視窗是透明 (請參閱<xref:System.Windows.Window.AllowsTransparency%2A>)，您應該考慮<xref:System.Windows.Window.SizeToContent%2A>到<xref:System.Windows.SizeToContent.WidthAndHeight>來確定視窗是不能大於其可見的內容。</span><span class="sxs-lookup"><span data-stu-id="d15ad-557">If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-558">您無法設定或取得這個屬性，當瀏覽器中裝載的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-558">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowSizeToContent"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-559">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-559">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-560">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-560">Identifier field</span></span>|<xref:System.Windows.Window.SizeToContentProperty>|  
|<span data-ttu-id="d15ad-561">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-561">Metadata properties set to `true`</span></span>|<span data-ttu-id="d15ad-562">無</span><span class="sxs-lookup"><span data-stu-id="d15ad-562">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="d15ad-563">下列範例示範如何設定<xref:System.Windows.Window.SizeToContent%2A>指定視窗如何調整大小以符合其內容的程式碼中的屬性。</span><span class="sxs-lookup"><span data-stu-id="d15ad-563">The following example shows how to set the <xref:System.Windows.Window.SizeToContent%2A> property in code to specify how a window resizes to fit its content.</span></span>  
  
 [!code-csharp[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/CSharp/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]
 [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/visualbasic/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="P:System.Windows.Window.ResizeMode" />
      </Docs>
    </Member>
    <Member MemberName="SizeToContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeToContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeToContentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.SizeToContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeToContentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeToContentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeToContentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.SizeToContentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-564">識別 <see cref="P:System.Windows.Window.SizeToContent" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-564">Identifies the <see cref="P:System.Windows.Window.SizeToContent" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceInitialized">
      <MemberSignature Language="C#" Value="public event EventHandler SourceInitialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SourceInitialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.SourceInitialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceInitialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SourceInitialized;" />
      <MemberSignature Language="F#" Value="member this.SourceInitialized : EventHandler " Usage="member this.SourceInitialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-565">這個事件是為了支援與 [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] 的互通性而引發。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-565">This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)].</span>
          </span>
          <span data-ttu-id="d15ad-566">請參閱 <see cref="T:System.Windows.Interop.HwndSource" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-566">See <see cref="T:System.Windows.Interop.HwndSource" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler " Usage="member this.StateChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-567">發生於視窗的 <see cref="P:System.Windows.Window.WindowState" /> 屬性變更時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-567">Occurs when the window's <see cref="P:System.Windows.Window.WindowState" /> property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.TaskbarItemInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TaskbarItemInfo As TaskbarItemInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Shell::TaskbarItemInfo ^ TaskbarItemInfo { System::Windows::Shell::TaskbarItemInfo ^ get(); void set(System::Windows::Shell::TaskbarItemInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TaskbarItemInfo : System.Windows.Shell.TaskbarItemInfo with get, set" Usage="System.Windows.Window.TaskbarItemInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Shell.TaskbarItemInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-568">取得或設定 <see cref="T:System.Windows.Window" /> 的 [!INCLUDE[win7](~/includes/win7-md.md)] 工作列縮圖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-568">Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-569">
            <see cref="T:System.Windows.Window" /> 的 [!INCLUDE[win7](~/includes/win7-md.md)] 工作列縮圖。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-569">The [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-570">如需有關如何使用[!INCLUDE[win7](~/includes/win7-md.md)]工作列縮圖，請參閱<xref:System.Windows.Shell.TaskbarItemInfo>類別。</span><span class="sxs-lookup"><span data-stu-id="d15ad-570">For more information about how to use the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail, see the <xref:System.Windows.Shell.TaskbarItemInfo> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Windows.Shell" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfoProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TaskbarItemInfoProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TaskbarItemInfoProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TaskbarItemInfoProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TaskbarItemInfoProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-571">識別 <see cref="P:System.Windows.Window.TaskbarItemInfo" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-571">Identifies the <see cref="P:System.Windows.Window.TaskbarItemInfo" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Window.Title" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IWindowService.Title</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Title)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-572">取得或設定視窗的標題。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-572">Gets or sets a window's title.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-573">包含視窗標題的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-573">A <see cref="T:System.String" /> that contains the window's title.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-574">標題<xref:System.Windows.Window>， <xref:System.Windows.Navigation.NavigationWindow>，或[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]，也可以透過設定<xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-574">The title of a <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, or [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], can also be set by using <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTitle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-575">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-575">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-576">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-576">Identifier field</span></span>|<xref:System.Windows.Window.TitleProperty>|  
|<span data-ttu-id="d15ad-577">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-577">Metadata properties set to `true`</span></span>|<span data-ttu-id="d15ad-578">無</span><span class="sxs-lookup"><span data-stu-id="d15ad-578">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TitleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TitleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TitleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TitleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TitleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TitleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TitleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-579">識別 <see cref="P:System.Windows.Window.Title" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-579">Identifies the <see cref="P:System.Windows.Window.Title" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Top { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Top : double with get, set" Usage="System.Windows.Window.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-580">取得或設定視窗上邊緣相對於桌面的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-580">Gets or sets the position of the window's top edge, in relation to the desktop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-581">視窗上邊緣的位置，以邏輯單位 (1/96 英吋) 計。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-581">The position of the window's top, in logical units (1/96").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-582">當<xref:System.Windows.Window>是最大化或最小化，邊緣的還原點，以取得此值代表<xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-582">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="d15ad-583">這個屬性不能透過樣式設定。</span><span class="sxs-lookup"><span data-stu-id="d15ad-583">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="d15ad-584">如果您未指定值，<xref:System.Windows.Window.Top%2A>設為系統預設值。</span><span class="sxs-lookup"><span data-stu-id="d15ad-584">If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value.</span></span> <span data-ttu-id="d15ad-585">您也可以藉由設定指定系統的預設值<xref:System.Windows.Window.Top%2A>至<xref:System.Double.NaN>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-585">You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="d15ad-586">既不<xref:System.Double.NegativeInfinity>也<xref:System.Double.PositiveInfinity>是有效的值，如<xref:System.Windows.Window.Top%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-586">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-587">您無法設定或取得這個屬性，當瀏覽器中裝載的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-587">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-588">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-588">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-589">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-589">Identifier field</span></span>|<xref:System.Windows.Window.TopProperty>|  
|<span data-ttu-id="d15ad-590">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-590">Metadata properties set to `true`</span></span>|<span data-ttu-id="d15ad-591">無</span><span class="sxs-lookup"><span data-stu-id="d15ad-591">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
      </Docs>
    </Member>
    <Member MemberName="Topmost">
      <MemberSignature Language="C#" Value="public bool Topmost { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Topmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Topmost" />
      <MemberSignature Language="VB.NET" Value="Public Property Topmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Topmost { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Topmost : bool with get, set" Usage="System.Windows.Window.Topmost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-592">取得或設定值，這個值表示視窗是否要依疊置順序 (Z-order) 出現在最上層。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-592">Gets or sets a value that indicates whether a window appears in the topmost z-order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-593">如果視窗是最上層視窗則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-593">
              <see langword="true" /> if the window is topmost; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-594">視窗的<xref:System.Windows.Window.Topmost%2A>屬性設定為`true`其上方的所有視窗<xref:System.Windows.Window.Topmost%2A>屬性會設為`false`。</span><span class="sxs-lookup"><span data-stu-id="d15ad-594">A window whose <xref:System.Windows.Window.Topmost%2A> property is set to `true` appears above all windows whose <xref:System.Windows.Window.Topmost%2A> properties are set to `false`.</span></span>  
  
 <span data-ttu-id="d15ad-595">群組中的所有視窗<xref:System.Windows.Window.Topmost%2A>屬性設定為`true`，目前啟動的視窗是最上層的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-595">In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window.</span></span> <span data-ttu-id="d15ad-596">同樣地針對具有 windows 的群組<xref:System.Windows.Window.Topmost%2A>屬性設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="d15ad-596">Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-597">您無法設定或取得這個屬性，當瀏覽器中裝載的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-597">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTopmost"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-598">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-598">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-599">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-599">Identifier field</span></span>|<xref:System.Windows.Window.TopmostProperty>|  
|<span data-ttu-id="d15ad-600">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-600">Metadata properties set to `true`</span></span>|<span data-ttu-id="d15ad-601">無</span><span class="sxs-lookup"><span data-stu-id="d15ad-601">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="TopmostProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopmostProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopmostProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopmostProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopmostProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopmostProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TopmostProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TopmostProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-602">識別 <see cref="P:System.Windows.Window.Topmost" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-602">Identifies the <see cref="P:System.Windows.Window.Topmost" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TopProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TopProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-603">識別 <see cref="P:System.Windows.Window.Top" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-603">Identifies the <see cref="P:System.Windows.Window.Top" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStartupLocation">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStartupLocation WindowStartupLocation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStartupLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStartupLocation As WindowStartupLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStartupLocation WindowStartupLocation { System::Windows::WindowStartupLocation get(); void set(System::Windows::WindowStartupLocation value); };" />
      <MemberSignature Language="F#" Value="member this.WindowStartupLocation : System.Windows.WindowStartupLocation with get, set" Usage="System.Windows.Window.WindowStartupLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStartupLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-604">取得或設定視窗第一次顯示時的位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-604">Gets or sets the position of the window when first shown.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-605">
            <see cref="T:System.Windows.WindowStartupLocation" /> 值，指定視窗第一次顯示的上方/左側位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-605">A <see cref="T:System.Windows.WindowStartupLocation" /> value that specifies the top/left position of a window when first shown.</span>
          </span>
          <span data-ttu-id="d15ad-606">預設值為 <see cref="F:System.Windows.WindowStartupLocation.Manual" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-606">The default is <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-607">設定`WindowStartupLocation`屬性，以<xref:System.Windows.WindowStartupLocation.Manual>使視窗定位根據其<xref:System.Windows.Window.Left%2A>和<xref:System.Windows.Window.Top%2A>屬性值。</span><span class="sxs-lookup"><span data-stu-id="d15ad-607">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values.</span></span> <span data-ttu-id="d15ad-608">如果有任一<xref:System.Windows.Window.Left%2A>或<xref:System.Windows.Window.Top%2A>屬性未指定，其值取決於 Windows。</span><span class="sxs-lookup"><span data-stu-id="d15ad-608">If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by Windows.</span></span>  
  
 <span data-ttu-id="d15ad-609">設定`WindowStartupLocation`屬性設<xref:System.Windows.WindowStartupLocation.CenterScreen>使視窗位於畫面中央的其中包含滑鼠游標。</span><span class="sxs-lookup"><span data-stu-id="d15ad-609">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor.</span></span>  
  
 <span data-ttu-id="d15ad-610">設定`WindowStartupLocation`屬性，以<xref:System.Windows.WindowStartupLocation.CenterOwner>使要放置在其擁有者視窗中央的視窗 (請參閱<xref:System.Windows.Window.Owner%2A?displayProperty=nameWithType>)，如果指定了。</span><span class="sxs-lookup"><span data-stu-id="d15ad-610">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A?displayProperty=nameWithType>), if specified.</span></span> <span data-ttu-id="d15ad-611">主控視窗可以是另一個 WPF 視窗中或非 WPF 視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-611">The owner window can be either another WPF window or a non-WPF window.</span></span>

> [!NOTE]   
>  <span data-ttu-id="d15ad-612">如需有關具有非 WPF 視窗的 WPF 視窗的詳細資訊，請參閱[WPF 和 Win32 交互操作](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)和<xref:System.Windows.Interop.WindowInteropHelper>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-612">For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>.</span></span> 

 <span data-ttu-id="d15ad-613">如果未指定主控視窗，視窗的位置決定相同的方式如同`WindowStartupLocation`屬性設定為<xref:System.Windows.WindowStartupLocation.Manual>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-613">If an owner window is not specified, the position of the window is determined in the same way as if the `WindowStartupLocation` property is set to <xref:System.Windows.WindowStartupLocation.Manual>.</span></span>

> [!NOTE]
>  <span data-ttu-id="d15ad-614">您無法設定，或在瀏覽器裝載的視窗時，取得這個屬性的值。</span><span class="sxs-lookup"><span data-stu-id="d15ad-614">You cannot set or get the value of this property when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowState">
      <MemberSignature Language="C#" Value="public System.Windows.WindowState WindowState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowState WindowState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowState" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowState As WindowState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowState WindowState { System::Windows::WindowState get(); void set(System::Windows::WindowState value); };" />
      <MemberSignature Language="F#" Value="member this.WindowState : System.Windows.WindowState with get, set" Usage="System.Windows.Window.WindowState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-615">取得或設定值，這個值表示視窗為已還原、最小化還是最大化狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-615">Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-616">
            <see cref="T:System.Windows.WindowState" />，決定視窗為已還原、最小化還是最大化狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-616">A <see cref="T:System.Windows.WindowState" /> that determines whether a window is restored, minimized, or maximized.</span>
          </span>
          <span data-ttu-id="d15ad-617">預設值為 <see cref="F:System.Windows.WindowState.Normal" /> (已還原)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-617">The default is <see cref="F:System.Windows.WindowState.Normal" /> (restored).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-618">最小化或最大化的視窗之前，會將其大小和位置儲存在<xref:System.Windows.Window.RestoreBounds%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-618">Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>.</span></span> <span data-ttu-id="d15ad-619">後續還原視窗時，其大小和位置的值會還原使用中的值<xref:System.Windows.Window.RestoreBounds%2A>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-619">When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.</span></span>  
  
 <span data-ttu-id="d15ad-620">當<xref:System.Windows.Window.WindowState%2A>屬性變更時， <xref:System.Windows.Window.StateChanged> ，就會引發。</span><span class="sxs-lookup"><span data-stu-id="d15ad-620">When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-621">您無法設定或取得這個屬性，當瀏覽器中裝載的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-621">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowState"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-622">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-622">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-623">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-623">Identifier field</span></span>|<xref:System.Windows.Window.WindowStateProperty>|  
|<span data-ttu-id="d15ad-624">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-624">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="WindowStateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStateProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WindowStateProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.WindowStateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-625">識別 <see cref="P:System.Windows.Window.WindowState" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-625">Identifies the <see cref="P:System.Windows.Window.WindowState" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyle">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStyle WindowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStyle WindowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStyle As WindowStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStyle WindowStyle { System::Windows::WindowStyle get(); void set(System::Windows::WindowStyle value); };" />
      <MemberSignature Language="F#" Value="member this.WindowStyle : System.Windows.WindowStyle with get, set" Usage="System.Windows.Window.WindowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-626">取得或設定視窗的框線樣式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-626">Gets or sets a window's border style.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d15ad-627">
            <see cref="T:System.Windows.WindowStyle" />，指定視窗的框線樣式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-627">A <see cref="T:System.Windows.WindowStyle" /> that specifies a window's border style.</span>
          </span>
          <span data-ttu-id="d15ad-628">預設值為 <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-628">The default is <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d15ad-629"><xref:System.Windows.Window.WindowStyle%2A> 可以是其中一個<xref:System.Windows.WindowStyle>列舉值，包括<xref:System.Windows.WindowStyle.None>， <xref:System.Windows.WindowStyle.ToolWindow>， <xref:System.Windows.WindowStyle.SingleBorderWindow> （預設值），和<xref:System.Windows.WindowStyle.ThreeDBorderWindow>。</span><span class="sxs-lookup"><span data-stu-id="d15ad-629"><xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.</span></span>  
  
 <span data-ttu-id="d15ad-630">下圖上顯示的視窗樣式[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]（Windows Vista Aero 佈景主題，以啟用半透明效果）：</span><span class="sxs-lookup"><span data-stu-id="d15ad-630">The following figure shows the window styles on [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero theme, with transparent glass enabled):</span></span>  
  
 <span data-ttu-id="d15ad-631">![視窗樣式](~/add/media/windowoverviewfigure6.PNG "視窗樣式")</span><span class="sxs-lookup"><span data-stu-id="d15ad-631">![Window styles](~/add/media/windowoverviewfigure6.PNG "Window styles")</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d15ad-632">您無法設定或取得這個屬性，當瀏覽器中裝載的視窗。</span><span class="sxs-lookup"><span data-stu-id="d15ad-632">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="d15ad-633">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="d15ad-633">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="d15ad-634">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="d15ad-634">Identifier field</span></span>|<xref:System.Windows.Window.WindowStyleProperty>|  
|<span data-ttu-id="d15ad-635">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="d15ad-635">Metadata properties set to `true`</span></span>|<span data-ttu-id="d15ad-636">無</span><span class="sxs-lookup"><span data-stu-id="d15ad-636">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WindowStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.WindowStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d15ad-637">識別 <see cref="P:System.Windows.Window.WindowStyle" /> 相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d15ad-637">Identifies the <see cref="P:System.Windows.Window.WindowStyle" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>