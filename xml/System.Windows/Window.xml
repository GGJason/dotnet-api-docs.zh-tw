<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Window.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72f805a8dedd189924a31c53379179c725286ba810.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f805a8dedd189924a31c53379179c725286ba810</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Window">
          <source>Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</source>
          <target state="translated">提供建立、設定、顯示和管理視窗與對話方塊存留期的能力。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The point of interaction between a user and a standalone application is a window.</source>
          <target state="translated">使用者與獨立應用程式之間點是互動的一個視窗。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window consists of two distinct areas:</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>視窗包含兩個不同區域：</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</source>
          <target state="translated">非工作區，於裝載 windows 裝飾，包括圖示、 標題、 系統功能表上，最小化按鈕、 最大化按鈕、 [還原] 按鈕、 [關閉] 按鈕和框線。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A client area, which hosts application-specific content.</source>
          <target state="translated">用戶端區域，裝載應用程式特定內容。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A standard window is shown in the following figure:</source>
          <target state="translated">下圖顯示標準的視窗：</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">![</bpt>Window elements<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>Window elements<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>視窗項目<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure1.PNG "</bpt>視窗項目<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 封裝建立、 設定、 顯示，以及管理視窗和對話方塊中的存留期的能力，並提供下列服務：</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Lifetime Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Closed&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Closing&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>存留期管理<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Windows.Window.Closed&gt;</ph>， <ph id="ph5">&lt;xref:System.Windows.Window.Closing&gt;</ph>， <ph id="ph6">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>， <ph id="ph7">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>， <ph id="ph8">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>， <ph id="ph9">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>， <ph id="ph10">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Window Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.GetWindow%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>視窗管理<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.GetWindow%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Appearance and Behavior<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Window.ResizeMode%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>, <ph id="ph13">&lt;xref:System.Windows.Window.Title%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;</ph>, <ph id="ph17">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>, <ph id="ph18">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph></source>
          <target state="translated"><bpt id="p1">**</bpt>外觀和行為<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>， <ph id="ph7">&lt;xref:System.Windows.Window.ResizeMode%2A&gt;</ph>， <ph id="ph8">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>， <ph id="ph9">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>， <ph id="ph10">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>， <ph id="ph11">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>，<ph id="ph12">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>, <ph id="ph13">&lt;xref:System.Windows.Window.Title%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;</ph>, <ph id="ph17">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>, <ph id="ph18">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><bpt id="p1">**</bpt>Dialog Boxes<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>對話方塊<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Additionally, <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> exposes special support for managing all of the windows in an application:</source>
          <target state="translated">此外，<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>會公開用於管理所有的 windows 應用程式中的特殊支援：</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Application maintains a list of all the windows that are currently instantiated in the application.</source>
          <target state="translated">應用程式會維護一份目前具現化應用程式中的所有視窗。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This list is exposed by the <ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property.</source>
          <target state="translated">這份清單由<ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>By default, <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> is automatically set with a reference to the first <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> that is instantiated in an application.</source>
          <target state="translated">根據預設，<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>會自動設定的第一個參考<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>，具現化應用程式中。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This thereby making the window the main application window.</source>
          <target state="translated">這藉此讓主應用程式視窗的視窗。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can be implemented using markup, markup and code-behind, or code.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可以使用標記、 標記和程式碼後置或程式碼來實作。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is primarily used to display windows and dialog boxes for standalone applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 主要用來顯示視窗和對話方塊的獨立應用程式。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>However, for applications that require navigation at the window level, such as wizards, you can use <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> instead; <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> derives from <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> and extends it with browser-style navigation support.</source>
          <target state="translated">不過，應用程式需要瀏覽視窗層級，例如精靈中，您可以使用<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>在內。<ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>衍生自<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>，並使用瀏覽器樣式瀏覽支援進行擴充。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Islands of navigable content can be incorporated into other content and content containers using <ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
          <target state="translated">島的可瀏覽內容可以納入使用其他內容與內容容器<ph id="ph1">&lt;xref:System.Windows.Controls.Frame&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> needs <ph id="ph2">`UnmanagedCode`</ph> security permission to be instantiated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 需要<ph id="ph2">`UnmanagedCode`</ph>具現化的安全性權限。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>This has the following consequences:</source>
          <target state="translated">這會有下列結果：</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph>-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph>-已部署的獨立應用程式會要求從網際網路或近端內部網路區域啟動時的權限提高權限。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> 所要求的任何項目小於完整權限將無法具現化的視窗和對話方塊。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For information about standalone application deployment and security considerations, see <bpt id="p1">[</bpt>WPF Security Strategy - Platform Security<ept id="p1">](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)</ept>.</source>
          <target state="translated">獨立應用程式部署和安全性考量的相關資訊，請參閱<bpt id="p1">[</bpt>WPF 安全性策略-平台安全性<ept id="p1">](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)</ept>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is a <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>是<ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>，這表示它可以包含單一物件的任何類型 （例如字串、 影像或工作面板）。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> class.</source>
          <target state="translated">如需詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> 類別。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Also, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is a root element and, therefore, cannot be part of another element's content.</source>
          <target state="translated">此外，<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>是根元素，因此，不能是另一個項目內容的一部分。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties set on a <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> through a style will not be applied at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>屬性上設定<ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph>透過樣式不會在執行階段套用。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Customizing the Window Control</source>
          <target state="translated">自訂視窗控制項</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>To apply the same property settings to multiple <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> controls, use the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property.</source>
          <target state="translated">若要套用至多個相同的屬性設定<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>控制項，可使用<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>You can modify the default <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to give the control a unique appearance.</source>
          <target state="translated">您可以修改預設<ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>來提供獨特的外觀的控制項。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information about creating a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, see <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.</source>
          <target state="translated">如需有關建立<ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>，請參閱<bpt id="p1">[</bpt>自訂現有控制項的外觀，藉由建立 ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>To see the parts and states that are specific to the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, see <bpt id="p1">[</bpt>Window Styles and Templates<ept id="p1">](~/docs/framework/wpf/controls/window-styles-and-templates.md)</ept>.</source>
          <target state="translated">若要查看的組件和所特有狀態<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>，請參閱<bpt id="p1">[</bpt>視窗樣式和範本<ept id="p1">](~/docs/framework/wpf/controls/window-styles-and-templates.md)</ept>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Dependency properties for this control might be set by the control’s default style.</source>
          <target state="translated">對這個控制項的相依性屬性可能會設定控制項的預設樣式。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>If a property is set by a default style, the property might change from its default value when the control appears in the application.</source>
          <target state="translated">如果屬性設定為預設樣式，屬性可能會變更其預設值時該控制項會出現在應用程式中。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The default style is determined by which desktop theme is used when the application is running.</source>
          <target state="translated">預設樣式是由決定由哪個桌面主題時，會使用應用程式正在執行。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>For more information, see <bpt id="p1">[</bpt>Default WPF Themes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>預設 WPF 佈景主題<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>Setting a visual property will only have an effect if that property is both present in <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> control's default template and is set by using a .</source>
          <target state="translated">設定視覺化屬性只會影響該屬性是否存在於這兩<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>控制項的預設範本，並且使用設定的。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>You can find a list of visual properties in the "Changing the Visual Structure of a Control" section in <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.</source>
          <target state="translated">您可以找到的視覺屬性清單中的 「 變更 Visual 結構的控制項 」 一節中<bpt id="p1">[</bpt>自訂現有控制項的外觀，藉由建立 ControlTemplate<ept id="p1">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using only markup:</source>
          <target state="translated">下列範例會示範如何以標準視窗定義只使用標記：</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using only code:</source>
          <target state="translated">下列範例會示範如何使用定義標準的視窗僅程式碼：</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Window">
          <source>The following example shows how a standard window is defined using a combination of markup and code-behind.</source>
          <target state="translated">下列範例會示範如何以標準視窗使用標記和程式碼後置的組合定義。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>The constructor initializes the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties to their default <ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph> values.</source>
          <target state="translated">建構函式初始化<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>，和<ph id="ph4">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>屬性設為預設<ph id="ph5">&lt;xref:System.Windows.Window&gt;</ph>值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>If a window is created within an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> that has an <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object, the constructor adds the <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object to the set of <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>-managed windows via the <ph id="ph5">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property of the <ph id="ph6">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated">如果在建立視窗<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>具有<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>物件建構函式加入<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>物件的集合<ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>-管理透過 windows<ph id="ph5">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>屬性<ph id="ph6">&lt;xref:System.Windows.Application&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>for permission for this object to call unsafe native methods.</source>
          <target state="translated">權限，此物件來呼叫不安全的原生方法。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Activate">
          <source>Attempts to bring the window to the foreground and activates it.</source>
          <target state="translated">嘗試將視窗帶到前景並加以啟動。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Activate">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> was successfully activated; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已成功啟動 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>The rules that determine whether the window is activated are the same as those used by the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph2">`SetForegroundWindow`</ph> function (User32.dll).</source>
          <target state="translated">規則，判斷是否已啟動 視窗會與所使用的相同<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph><ph id="ph2">`SetForegroundWindow`</ph>函式 (User32.dll)。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>If the window is activated in a Windows Presentation Foundation application that is not the user's foreground application, <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> event is raised.</source>
          <target state="translated">如果不是使用者的前景應用程式，在 Windows Presentation Foundation 應用程式中啟動視窗則<ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>就會引發事件。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">裝載在瀏覽器視窗時，無法呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>for permission to activate a window.</source>
          <target state="translated">若要啟用視窗的使用權限。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Activate">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Activated">
          <source>Occurs when a window becomes the foreground window.</source>
          <target state="translated">視窗變成前景視窗時發生。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A window is activated (becomes the foreground window) when:</source>
          <target state="translated">在啟動視窗 （變成前景視窗） 時：</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>The window is first opened.</source>
          <target state="translated">第一次開啟的視窗。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</source>
          <target state="translated">藉由選取它，使用滑鼠按 ALT + TAB，或從 工作管理員來切換視窗的使用者。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>A user clicks the window's taskbar button.</source>
          <target state="translated">使用者按一下視窗的工作列按鈕。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>Windows that need to detect when they become activate can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.</source>
          <target state="translated">可以處理需要偵測當它們變成啟動的 Windows<ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
          <target state="translated">視窗第一次啟動之後，它可能會停用並重新啟動幾次在其存留期間。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>If an application's behavior or state depends on its activation state, it can inspect <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.</source>
          <target state="translated">如果應用程式的狀態或行為取決於其啟動狀態，它可以檢查<ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>來判斷哪一個啟用的狀態。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Activated">
          <source>An application can also be <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>.</source>
          <target state="translated">應用程式也可以是<ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Gets or sets a value that indicates whether a window's client area supports transparency.</source>
          <target state="translated">取得或設定值，這個值表示視窗的工作區是否支援透明度。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window supports transparency; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果視窗支援透明度則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property of a window is set to a transparent color, using <ph id="ph2">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph> for example, the window remains opaque.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph>視窗的屬性設定為透明色彩時，使用<ph id="ph2">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph>比方說，視窗會保留不透明。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>This means that the desktop and any running applications "beneath" the window cannot be seen.</source>
          <target state="translated">這表示無法看到桌面及任何執行中的應用程式"beneath"視窗。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>To enable this type of transparency, <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> must be set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">若要啟用這種類型的透明度，<ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>必須設為<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> exists to facilitate the creation of non-rectangular windows, and, consequently, when <ph id="ph2">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> is set to <ph id="ph3">`true`</ph>, a window's <ph id="ph4">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> property must be set to <ph id="ph5">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> 可協助建立非矩形視窗，並進而時<ph id="ph2">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>設<ph id="ph3">`true`</ph>，視窗的<ph id="ph4">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph>屬性必須設定為<ph id="ph5">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.AllowsTransparency">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.AllowsTransparency">
          <source>A window that has a <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> value of anything other than <ph id="ph2">&lt;see cref="F:System.Windows.WindowStyle.None" /&gt;</ph>.</source>
          <target state="translated">視窗的 <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> 值不是 <ph id="ph2">&lt;see cref="F:System.Windows.WindowStyle.None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.AllowsTransparencyProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.AllowsTransparency" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.AllowsTransparency" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the final size that the window should use to arrange itself and its children.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>，反映視窗排列本身和其子系後應該呈現的最終大小。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>Override this method to arrange and size a window and its child elements.</source>
          <target state="translated">覆寫這個方法可以調整視窗和其子項目的位置和大小。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the actual size that was used.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>，反映實際呈現的大小。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is not called when the <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> 不會呼叫時<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>屬性的值為<ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is called.</source>
          <target state="translated">如果值<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>屬性<ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>，<ph id="ph4">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)">
          <source>When either <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">當 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>呼叫時，<ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>屬性<ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph>設為<ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Close">
          <source>Manually closes a <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">手動關閉 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可以使用其中一種幾個，請關閉已知和系統提供的機制位於標題列，包括：</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>ALT+F4.</source>
          <target state="translated">ALT + F4。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>System menu &amp;#124; <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</source>
          <target state="translated">系統功能表&amp;#124;<bpt id="p1">**</bpt>關閉<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated"><bpt id="p1">**</bpt>關閉<ept id="p1">**</ept> 按鈕。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>也可以關閉使用其中一種數種知名機制，用戶端區域內所提供的開發人員，包括：</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> on a main window.</source>
          <target state="translated"><bpt id="p1">**</bpt>檔案<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>結束<ept id="p2">**</ept>主視窗上。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> or a <bpt id="p3">**</bpt>Close<ept id="p3">**</ept> button on a child window.</source>
          <target state="translated"><bpt id="p1">**</bpt>檔案<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>關閉<ept id="p2">**</ept>或<bpt id="p3">**</bpt>關閉<ept id="p3">**</ept>子視窗上的按鈕。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source><bpt id="p1">**</bpt>OK<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> buttons on a dialog box are also developer-provided, although will likely set <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, which automatically closes a window that was opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>確定<ept id="p1">**</ept>和<bpt id="p2">**</bpt>取消<ept id="p2">**</ept> 對話方塊上的按鈕也是開發人員提供，雖然會可能集<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>，這會自動關閉呼叫已開啟的視窗<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>These mechanisms require you to explicitly call <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> to close a window.</source>
          <target state="translated">這些機制都會要求您明確地呼叫<ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>關閉視窗。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If a window, opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, and with a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> with its <ph id="ph3">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</source>
          <target state="translated">藉由呼叫開啟的視窗中，如果<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>，與<ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>具有其<ph id="ph3">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph>屬性設為 true，會自動關閉，請按一下按鈕，或按下 esc 鍵時。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If the window was opened using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> must be explicitly called, such as from <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">如果視窗已開啟使用<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>，不過<ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>必須明確呼叫，例如在<ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>事件處理常式<ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Closing a window causes the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event to be raised.</source>
          <target state="translated">關閉視窗會導致<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>會引發事件。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event isn't canceled, the following occurs:</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>事件未取消，則發生下列情況：</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is removed from <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType&gt;</ph> (if an <ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph> object exists).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>被移除了<ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType&gt;</ph>(如果<ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph>物件存在)。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is removed from the owner <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> if the owner/owned relationship was established before the owned <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> was shown and after the owner <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> was opened.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>移除擁有者<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>如果已建立擁有者/擁有關聯性之前擁有<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>顯示和擁有者之後<ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph>已開啟。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
          <target state="translated">便會引發 <ph id="ph1">&lt;xref:System.Windows.Window.Closed&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Unmanaged resources created by the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> are disposed.</source>
          <target state="translated">Unmanaged 資源所建立<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>仍會獲得處置。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> was called to show the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>已呼叫以顯示<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>，<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>傳回。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Closing a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> causes any windows that it owns to be closed.</source>
          <target state="translated">關閉<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>會使任何其擁有要關閉的視窗。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Furthermore, closing a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may cause an application to stop running depending on how the <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType&gt;</ph> property is set.</source>
          <target state="translated">此外，關閉<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能會導致應用程式停止執行依據<ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType&gt;</ph>屬性設定。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">裝載在瀏覽器視窗時，無法呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>The following example shows a <bpt id="p1">**</bpt>File<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> menu being handled to explicitly call <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>.</source>
          <target state="translated">下列範例所示<bpt id="p1">**</bpt>檔案<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>結束<ept id="p2">**</ept>功能表來明確呼叫處理<ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>for permission to use all windows and user input events without restriction.</source>
          <target state="translated">若要使用的所有 windows 和不受限制的使用者輸入的事件的權限。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Close">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closed">
          <source>Occurs when the window is about to close.</source>
          <target state="translated">視窗即將關閉時發生。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closed">
          <source>Once this event is raised, a window cannot be prevented from closing.</source>
          <target state="translated">之後會引發這個事件，無法防止視窗關閉。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closed">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> is set, or <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>, or <ph id="ph4">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph> is called while a window is closing.</source>
          <target state="translated">視窗要關閉時，設定了 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> 或是呼叫了 <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>、<ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 或 <ph id="ph4">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closing">
          <source>Occurs directly after <ph id="ph1">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> is called, and can be handled to cancel window closure.</source>
          <target state="translated">在呼叫 <ph id="ph1">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> 後立即發生，可以用來取消視窗關閉動作。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be handled to detect when a window is being closed (for example, when <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> 可以處理，以偵測視窗關閉時 (例如，當<ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>稱為)。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>Furthermore, <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be used to prevent a window from closing.</source>
          <target state="translated">此外，<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>可用來防止無法關閉視窗。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>To prevent a window from closing, you can set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> argument to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">若要避免關閉視窗，您可以設定<ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph>屬性<ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph>引數<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is raised when <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>就會引發事件時<ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>呼叫時，如果按一下視窗的 [關閉] 按鈕，或如果使用者按下 ALT + F4。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If an owned window was opened by its owner window using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.</source>
          <target state="translated">如果擁有的視窗已開啟由其擁有者視窗使用<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>，且擁有者視窗已關閉，擁有的視窗的<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>不會引發事件。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If the owner of a window is closed (see <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised on the owned window.</source>
          <target state="translated">如果已關閉之視窗的擁有者 (請參閱<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>)，<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>上擁有的視窗不會引發。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event for each window is raised.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>呼叫時，<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>就會引發事件，每個視窗。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>However, if <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is canceled, cancellation is ignored.</source>
          <target state="translated">不過，如果<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>已取消，會忽略取消。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If a session ends because a user logs off or shuts down, <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised; handle <ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> to implement code that cancels application closure.</source>
          <target state="translated">如果工作階段結束，因為使用者登出或關機、<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>就不會引發，處理<ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>實作取消應用程式終止的程式碼。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.</source>
          <target state="translated">如果您想要顯示和隱藏視窗的應用程式的存留期間多次，而且您不希望個體化視窗每次您將其顯示，您可以處理<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>事件取消，並呼叫<ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>Then, you can call <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to reopen it.</source>
          <target state="translated">然後，您可以呼叫<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>相同的執行個體，將它重新開啟。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Closing">
          <source>The following example demonstrates a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> that determines whether it needs user intervention to close.</source>
          <target state="translated">下列範例會示範<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>，決定是否需要使用者介入以關閉。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Closing">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> is set, or <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>, or <ph id="ph4">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph> is called while a window is closing.</source>
          <target state="translated">視窗要關閉時，設定了 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> 或是呼叫了 <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>、<ph id="ph3">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 或 <ph id="ph4">&lt;see cref="M:System.Windows.Window.Close" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.ContentRendered">
          <source>Occurs after a window's content has been rendered.</source>
          <target state="translated">視窗內容呈現後發生。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.ContentRendered">
          <source>If the window has no content, this event is not raised.</source>
          <target state="translated">視窗沒有任何內容，不會引發這個事件。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.Deactivated">
          <source>Occurs when a window becomes a background window.</source>
          <target state="translated">視窗變成背景視窗時發生。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A window is deactivated (becomes a background window) when:</source>
          <target state="translated">視窗已停用 （變成背景視窗） 時：</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user switches to another window in the current application.</source>
          <target state="translated">使用者切換至另一個視窗中目前的應用程式。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user switches to the window in another application by using ALT+TAB or by using Task Manager.</source>
          <target state="translated">使用 ALT + TAB，或使用 工作管理員，使用者會切換成另一個應用程式中的視窗。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>A user clicks the taskbar button for a window in another application.</source>
          <target state="translated">使用者按一下另一個應用程式視窗的工作列按鈕。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>Windows that need to detect when they become deactivated by handling the <ph id="ph1">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.</source>
          <target state="translated">需要偵測當它們變成停用處理的 Windows<ph id="ph1">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</source>
          <target state="translated">視窗先停用之後，它可能會重新啟動並在其存留期間多次停用。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>If an application's behavior or state depends on its activation state, it can inspect <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.</source>
          <target state="translated">如果應用程式的狀態或行為取決於其啟動狀態，它可以檢查<ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>來判斷哪一個啟用的狀態。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.Deactivated">
          <source>An application can also be <ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>.</source>
          <target state="translated">應用程式也可以是<ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source>Gets or sets the dialog result value, which is the value that is returned from the <ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> method.</source>
          <target state="translated">取得或設定對話方塊結果值，這個值就是 <ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 方法傳回的值。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> value of type <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> 型別的 <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can be used from the code that showed a dialog box to determine whether a user accepted (<ph id="ph2">`true`</ph>) or canceled (<ph id="ph3">`false`</ph>) the dialog box.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 可從已顯示對話方塊，以判斷使用者是否已接受的程式碼 (<ph id="ph2">`true`</ph>) 或已取消 (<ph id="ph3">`false`</ph>) 對話方塊。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</source>
          <target state="translated">如果已接受對話方塊中，這表示開啟對話方塊，來擷取使用者所收集的資料，並處理它的程式碼。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</source>
          <target state="translated">如果已取消對話方塊中，不過，這種情況表示呼叫的程式碼應該停止任何進一步處理。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>By default, a dialog box is canceled when a user does one of the following:</source>
          <target state="translated">根據預設，當使用者執行下列其中一種取消對話方塊：</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>PressesALT+F4.</source>
          <target state="translated">PressesALT + F4。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>Clicks the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
          <target state="translated">按一下<bpt id="p1">**</bpt>關閉<ept id="p1">**</ept> 按鈕。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>Selects <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> from the System menu.</source>
          <target state="translated">選取<bpt id="p1">**</bpt>關閉<ept id="p1">**</ept>從系統功能表。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>In all of these cases, <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id="ph2">`false`</ph> by default.</source>
          <target state="translated">在所有這些情況下，<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>是<ph id="ph2">`false`</ph>預設。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A dialog box typically provides a special button to cancel a dialog, which is the button whose <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">對話方塊通常提供特殊的按鈕，即可取消對話方塊中，這是按鈕其<ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph>屬性設定為<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</source>
          <target state="translated">如果如此設定的按鈕時請按下，或按下 ESC 鍵時，會自動關閉視窗。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>In either of these cases, <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> remains <ph id="ph2">`false`</ph>.</source>
          <target state="translated">在任一情況下，<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>維持<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A dialog box also typically provides an accept button, which is the button whose <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">對話方塊通常也會提供 [接受] 按鈕，為按鈕的<ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;</ph>屬性設定為<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>A button configured this way will raise its <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event when either it or the ENTER key is pressed.</source>
          <target state="translated">如果如此設定的按鈕將會引發其<ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>事件時按下它或 ENTER 鍵。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>However, it won't automatically close the dialog box, nor will it set <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">不過，它將不會自動關閉對話方塊中，也不將它設定<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>至<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>You need to manually write this code, usually from the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the default button.</source>
          <target state="translated">您需要以手動方式撰寫此程式碼，通常從<ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>預設按鈕的事件處理常式。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id="ph2">`null`</ph> when the dialog box is shown but neither accepted nor canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 是<ph id="ph2">`null`</ph>對話方塊會顯示當但未接受或已取消。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>After a dialog box closes, you can get the dialog result from the value returned by <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method, or by inspecting the <ph id="ph2">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property.</source>
          <target state="translated">對話框會關閉之後，您可以從所傳回的值取得的對話方塊結果<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>方法，或藉由檢查<ph id="ph2">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can only be set when a <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> is opened by calling its <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 只有時可以設定<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>開啟藉由呼叫其<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.DialogResult">
          <source>The following example shows how to configure an OK button and a Cancel button to return the appropriate <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>.</source>
          <target state="translated">下列範例示範如何設定 [確定] 按鈕和 [取消] 按鈕返回適當<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> is set before a window is opened by calling <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>.</source>
          <target state="translated">藉由呼叫 <ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> 開啟視窗之前設定 <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.DialogResult">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> is set on a window that is opened by calling <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>.</source>
          <target state="translated">在藉由呼叫 <ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> 開啟的視窗上設定 <ph id="ph2">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.DpiChanged">
          <source>Occurs after the DPI of the screen on which the Window is displayed changes.</source>
          <target state="translated">發生於顯示視窗的螢幕 DPI 變更之後。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.DpiChangedEvent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> for when the DPI of the screen the Window is on changes.</source>
          <target state="translated">在視窗變更時用於螢幕 DPI 的 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.DragMove">
          <source>Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</source>
          <target state="translated">允許透過在視窗工作區的公開區域按下滑鼠左鍵來拖曳視窗。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>The left mouse button must be down when <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.</source>
          <target state="translated">滑鼠左的按鈕必須關閉時<ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>One way to detect when the left mouse button is pressed is to handle the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event.</source>
          <target state="translated">當按下滑鼠左鍵時偵測到的一種方式為處理<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called, the left mouse button must be depressed over an exposed area of the window's client area.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>呼叫時，左側視窗的工作區的公開區域上方必須按下滑鼠按鈕。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">裝載在瀏覽器視窗時，無法呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>The following example shows how to override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> to call <ph id="ph2">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>.</source>
          <target state="translated">下列範例示範如何覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>呼叫<ph id="ph2">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.DragMove">
          <source>The left mouse button is not down.</source>
          <target state="translated">未按下滑鼠左鍵。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>for permission to drag a window.</source>
          <target state="translated">將視窗拖曳的權限。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.DragMove">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>The dependency object.</source>
          <target state="translated">相依性物件。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>Returns a reference to the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> object that hosts the content tree within which the dependency object is located.</source>
          <target state="translated">傳回 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 物件的參考，這個物件含有相依性物件所在的內容樹狀結構。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> reference to the host window.</source>
          <target state="translated">對主視窗的 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 參考。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)">
          <source><ph id="ph1">&lt;paramref name="dependencyObject" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dependencyObject" /&gt;</ph> 為 null。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Hide">
          <source>Makes a window invisible.</source>
          <target state="translated">讓視窗看不見。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>A window is not closed when it is hidden, and neither the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> nor <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
          <target state="translated">隱藏時，無法關閉視窗並沒有<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>也<ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph>就會引發事件。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Instead, the window's <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">相反地，視窗的<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>屬性設定為<ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>If a window is the application's <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> and the application's <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is <ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>, the application does not shut down.</source>
          <target state="translated">如果視窗是應用程式的<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>和應用程式的<ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>是<ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>，應用程式不會關機。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <ph id="ph1">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>.</source>
          <target state="translated">同樣地，應用程式不會關機如果視窗是唯一的視窗，而且應用程式的關機模式<ph id="ph1">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.</source>
          <target state="translated">如果您想要顯示和隱藏視窗的應用程式的存留期間多次，而且您不想要重新具現化的視窗每次您將其顯示，您可以處理<ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>事件取消，並呼叫<ph id="ph2">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Hide">
          <source>Then, you can call <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to re-open it.</source>
          <target state="translated">然後，您可以呼叫<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>即可重新開啟相同的執行個體上。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Hide">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Window.Hide" /&gt;</ph> 的呼叫對象是正在關閉 (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) 或已經關閉 (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>) 的視窗。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Icon">
          <source>Gets or sets a window's icon.</source>
          <target state="translated">取得或設定視窗的圖示。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Media.ImageSource" /&gt;</ph> object that represents the icon.</source>
          <target state="translated">表示圖示的 <ph id="ph1">&lt;see cref="T:System.Windows.Media.ImageSource" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Windows Presentation Foundation (WPF) standalone applications have two types of icons:</source>
          <target state="translated">Windows Presentation Foundation (WPF) 獨立應用程式有兩種類型的圖示：</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>One assembly icon, which is specified by using the <ph id="ph1">`&lt;ApplicationIcon&gt;`</ph> property in the application's project build file.</source>
          <target state="translated">使用指定的一個組件圖示<ph id="ph1">`&lt;ApplicationIcon&gt;`</ph>檔案建置應用程式的專案中的屬性。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>This icon is used as the desktop icon for an assembly.</source>
          <target state="translated">組件做為桌面圖示使用這個圖示。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>When debugging in Visual Studio, your icon may not appear due to the hosting process.</source>
          <target state="translated">偵錯時 Visual Studio 中，由於裝載處理序可能不會出現您的圖示。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If you run the executable, the icon will appear.</source>
          <target state="translated">如果您執行可執行檔，則會出現圖示。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For more information, see <bpt id="p1">[</bpt>Hosting Process (vshost.exe)<ept id="p1">](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>裝載處理序 (vshost.exe)<ept id="p1">](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)</ept>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>One icon per window that is specified by setting <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>.</source>
          <target state="translated">每個視窗所設定指定一個圖示<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</source>
          <target state="translated">針對每個視窗中，在其標題列，其工作列按鈕，和其 ALT TAB 應用程式選取項目清單項目中使用這個圖示。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>A WPF window always displays an icon.</source>
          <target state="translated">WPF 視窗一律顯示圖示。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>When one is not provided by setting <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, WPF chooses an icon to display based on the following rules:</source>
          <target state="translated">當其中一個未提供藉由設定<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>，WPF 選擇圖示以顯示根據下列規則：</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Use the assembly icon, if specified.</source>
          <target state="translated">如果指定，請使用組件圖示。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If the assembly icon is not specified, use the default Microsoft Windows icon.</source>
          <target state="translated">如果未指定組件圖示，請使用預設的 Microsoft Windows 圖示。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If you use <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to specify a custom window icon, you can restore the default application icon by setting <ph id="ph2">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to <ph id="ph3">`null`</ph>.</source>
          <target state="translated">如果您使用<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>若要指定自訂視窗圖示，您可以還原預設應用程式圖示，藉由設定<ph id="ph2">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>至<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>A single icon can be used in a variety of ways in Windows, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</source>
          <target state="translated">單一圖示可用於各種不同的方式，在 Windows 中，包括標題列的視窗中，視窗中，ALT + TAB 檔案選取清單的工作列中顯示。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</source>
          <target state="translated">每一種顯示使用不同的大小; 圖示ALT + TAB 檔案選取清單中顯示 32 x 32 像素圖示時，視窗標題列中，在工作列上，會顯示 16 x 16 像素圖示。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Some applications, like <ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]</ph>, provide a <bpt id="p1">**</bpt>View<ept id="p1">**</ept> menu that allows you to choose the size of the icon you'd like to view.</source>
          <target state="translated">某些應用程式，例如<ph id="ph1">[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]</ph>，提供<bpt id="p1">**</bpt>檢視<ept id="p1">**</ept>功能表，讓您選擇您想要檢視的圖示的大小。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</source>
          <target state="translated">若要符合不同的顯示大小，其中每一個都代表特定的大小與色彩深度為目標的圖示版本的一或多個實際的圖示被由圖示檔。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</source>
          <target state="translated">例如，一個圖示可能只有單一 16 x 16 像素圖示使用 16 個色彩，而另一個可能包含 16 x 16 像素和 32 x 32 像素 16 個色彩和 256 色圖示。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If icons for all possible sizes and color depths exist within an icon file, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> will use the appropriate icon.</source>
          <target state="translated">如果所有可能的大小和色彩深度圖示存在於內的圖示檔<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>將使用合適的圖示。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>If an icon file contains only a subset of all the possible icons, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> uses the next most appropriate icon in order of decreasing sizes and color depth.</source>
          <target state="translated">如果圖示檔只包含一部分的所有可能的圖示，<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>的順序排列，大小與色彩深度會使用下一個最合適的圖示。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>The result is that an icon will always be used by <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, although the icon used may not target the required size and color depth.</source>
          <target state="translated">結果是圖示將一律使用由<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>，但使用的圖示可能不會以目標所需的大小與色彩深度。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</source>
          <target state="translated">例如，使用 16 個色彩 16 x 16 像素圖示都可能會用於顯示為 32 x 32 像素圖示以 256 色彩。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</source>
          <target state="translated">這可能會導致非預期的視覺效果，例如化，但可能會建立對所有目標的大小和色彩深度的圖示來避免。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>The following example shows how to set a window icon.</source>
          <target state="translated">下列範例會示範如何設定視窗圖示。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>for permission to set the icon.</source>
          <target state="translated">若要設定圖示的權限。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Icon">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.IconProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Icon" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Icon" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.IsActive">
          <source>Gets a value that indicates whether the window is active.</source>
          <target state="translated">取得值，這個值表示視窗是否在使用中。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window is active; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果視窗為使用中則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</source>
          <target state="translated">使用中視窗是使用者目前的前景視窗，並具有焦點，以作用中的標題列的外觀。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>An active window will also be the top-most of all top-level windows that don't explicitly set the <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property.</source>
          <target state="translated">使用中視窗也會是最上層不明確設定的所有最上層視窗<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.IsActive">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.IsActiveProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.IsActive" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.IsActive" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Left">
          <source>Gets or sets the position of the window's left edge, in relation to the desktop.</source>
          <target state="translated">取得或設定視窗左邊緣相對於桌面的位置。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>The position of the window's left edge, in logical units (1/96th of an inch).</source>
          <target state="translated">視窗左邊緣的位置，以邏輯單位 (1/96 英吋) 計。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the left edge of the restore point for the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>最大化或最小化，左邊的還原點的這個值代表<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>This property cannot be set through a style.</source>
          <target state="translated">這個屬性不能透過樣式設定。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>If you do not specify a value, <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> is set to the system default value.</source>
          <target state="translated">如果您未指定值，<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>設為系統預設值。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>You can also specify the system default value by setting <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>.</source>
          <target state="translated">您也可以指定系統的預設值，藉由設定<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>至<ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Neither <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>.</source>
          <target state="translated">既不<ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph>也<ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>是有效的值，如<ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Left">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.LeftProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Left" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Left" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.LocationChanged">
          <source>Occurs when the window's location changes.</source>
          <target state="translated">視窗的位置變更時發生。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A window's location changes when:</source>
          <target state="translated">視窗的位置變更時：</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A user moves a window by dragging it with the window's title bar.</source>
          <target state="translated">使用者將視窗拖曳視窗的標題列。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>A window is moved after <ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.</source>
          <target state="translated">視窗移之後<ph id="ph1">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>Either the <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property is set programmatically.</source>
          <target state="translated">可能是<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>屬性以程式設計方式設定。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>The <bpt id="p1">**</bpt>Move<ept id="p1">**</ept> menu item of a window's System menu is chosen.</source>
          <target state="translated"><bpt id="p1">**</bpt>移動<ept id="p1">**</ept>選擇視窗的 [系統] 功能表的功能表項目。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Window.LocationChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>屬性變更。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.LogicalChildren">
          <source>Gets an enumerator for a window's logical child elements.</source>
          <target state="translated">取得列舉值，這個列舉值列出視窗的邏輯子項目。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.LogicalChildren">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> a window's logical child elements.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>，列出視窗的邏輯子項目。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the available size that this window can give to the child.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>，反映這個視窗可以提供給子系使用的大小。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>Infinity can be given as a value to indicate that the window will size to whatever content is available.</source>
          <target state="translated">您可以指定 Infinity，這個值表示視窗可以隨任何內容大小調整。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>Override this method to measure the size of a window.</source>
          <target state="translated">覆寫這個方法可以測量視窗大小。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Size" /&gt;</ph>，反映這個視窗在配置期間依據子系大小計算得來的大小。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is not called when the <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> 不會呼叫時<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>屬性的值為<ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is called.</source>
          <target state="translated">如果值<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>屬性<ph id="ph2">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>，<ph id="ph4">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.MeasureOverride(System.Windows.Size)">
          <source>When either <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">當 <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>呼叫時，<ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>屬性<ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph>設為<ph id="ph5">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Activated" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.Windows.Window.Activated" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> 會引發 <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>.</source>
          <target state="translated">從衍生的型別<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能會覆寫<ph id="ph2">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnActivated(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫<ph id="ph1">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>基底類別上如果<ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph>需要引發。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> 會引發 <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>.</source>
          <target state="translated">從衍生的型別<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能會覆寫<ph id="ph2">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosed(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph> needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫<ph id="ph1">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>基底類別上如果<ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph>需要引發。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.CancelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.ComponentModel.CancelEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> 會引發 <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>.</source>
          <target state="translated">從衍生的型別<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能會覆寫<ph id="ph2">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫<ph id="ph1">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>基底類別上如果<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>需要引發。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>A reference to the root of the old content tree.</source>
          <target state="translated">舊內容樹狀結構根項目的參考。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>A reference to the root of the new content tree.</source>
          <target state="translated">新內容樹狀結構根項目的參考。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)">
          <source>Called when the <ph id="ph1">&lt;see cref="P:System.Windows.Controls.ContentControl.Content" /&gt;</ph> property changes.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="P:System.Windows.Controls.ContentControl.Content" /&gt;</ph> 屬性變更時呼叫。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.ContentRendered" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.Windows.Window.ContentRendered" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> 會引發 <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>.</source>
          <target state="translated">從衍生的型別<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能會覆寫<ph id="ph2">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnContentRendered(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫<ph id="ph1">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>基底類別上如果<ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>需要引發。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>Creates and returns a <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> object for this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">建立並傳回這個 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> object for this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">這個 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnCreateAutomationPeer">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</ph>.</source>
          <target state="translated">這個方法覆寫 <ph id="ph1">&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.Deactivated" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.Windows.Window.Deactivated" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> 會引發 <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>.</source>
          <target state="translated">從衍生的型別<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能會覆寫<ph id="ph2">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnDeactivated(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫<ph id="ph1">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>基底類別上如果<ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>需要引發。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>The previous DPI scale setting.</source>
          <target state="translated">先前的 DPI 縮放比例設定。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>The new DPI scale setting.</source>
          <target state="translated">新的 DPI 縮放比例設定。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)">
          <source>Called when the DPI at which this window is rendered changes.</source>
          <target state="translated">當轉譯此視窗的 DPI 變更時呼叫。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.LocationChanged" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.Windows.Window.LocationChanged" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> 會引發 <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>.</source>
          <target state="translated">從衍生的型別<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能會覆寫<ph id="ph2">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnLocationChanged(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫<ph id="ph1">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>基底類別上如果<ph id="ph2">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>需要引發。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">事件的資料。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> event occurs.</source>
          <target state="translated">當 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> 事件發生時呼叫。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>This implementation does not change the handled state (the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property) of the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event data.</source>
          <target state="translated">此實作不會變更處理的狀態 (<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph>屬性) 的<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph>事件資料。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>If you override <ph id="ph1">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph>, always call the base implementation in your <ph id="ph2">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph> implementation.</source>
          <target state="translated">如果您覆寫<ph id="ph1">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph>，務必呼叫基底實作您<ph id="ph2">&lt;see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class.</source>
          <target state="translated">無法呼叫基底實作可防止基底類別處理事件，可能會變更的最終類別的執行階段行為。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>You can call the base implementation either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可以呼叫之前或之後，在特殊處理的基底實作，根據您的需求。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.SourceInitialized" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.Windows.Window.SourceInitialized" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> 會引發 <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>.</source>
          <target state="translated">從衍生的型別<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能會覆寫<ph id="ph2">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫<ph id="ph1">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>基底類別上如果<ph id="ph2">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>需要引發。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Window.StateChanged" /&gt;</ph> event.</source>
          <target state="translated">引發 <ph id="ph1">&lt;see cref="E:System.Windows.Window.StateChanged" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> 會引發 <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>.</source>
          <target state="translated">從衍生的型別<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>可能會覆寫<ph id="ph2">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.OnStateChanged(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> on the base class if <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> needs to be raised.</source>
          <target state="translated">覆寫的方法必須呼叫<ph id="ph1">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>基底類別上如果<ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>需要引發。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The previous parent.</source>
          <target state="translated">先前的父代。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Set to null if the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> did not have a previous parent.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> 先前沒有父代，則設為 null。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Called when the parent of the window is changed.</source>
          <target state="translated">當視窗的父代變更時呼叫。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.OwnedWindows">
          <source>Gets a collection of windows for which this window is the owner.</source>
          <target state="translated">取得這個視窗主控的視窗集合。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowCollection" /&gt;</ph> that contains references to the windows for which this window is the owner.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WindowCollection" /&gt;</ph>，包含對這個視窗所主控之視窗的參考。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>An owned window is one whose <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property is set with a reference to another window, which is known as the owner window.</source>
          <target state="translated">擁有的視窗是一個其<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>屬性設為另一個視窗中，也就是主控視窗的參考。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>To find all the windows that an owner window owns, you can enumerate <ph id="ph1">&lt;xref:System.Windows.WindowCollection&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">若要尋找擁有者視窗擁有的所有視窗，您可以列舉<ph id="ph1">&lt;xref:System.Windows.WindowCollection&gt;</ph>所傳回<ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.OwnedWindows">
          <source>The following example shows how to enumerate <ph id="ph1">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>.</source>
          <target state="translated">下列範例示範如何列舉<ph id="ph1">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> that owns this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">取得或設定主控這個 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> object that represents the owner of this <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">表示主控這個 <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 物件。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When a child window is opened by a parent window by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, an implicit relationship is established between both parent and child window.</source>
          <target state="translated">子視窗開啟時，父視窗呼叫<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>，父和子視窗之間建立隱含關聯性。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</source>
          <target state="translated">此關聯性會強制執行特定行為，包括相對於最小化、 最大化，以及還原。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When a child window is created by a parent window by calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, the child window does not have a relationship with the parent window.</source>
          <target state="translated">當子視窗由父視窗呼叫<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>，不過，子視窗並沒有與父視窗的關聯性。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>This means that:</source>
          <target state="translated">這表示：</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The child window does not have a reference to the parent window.</source>
          <target state="translated">子視窗並沒有父視窗的參考。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</source>
          <target state="translated">子視窗的行為不會隨著父視窗; 的行為其中一個視窗可以涵蓋，或最小化，以最大化，並還原個別地。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>To allow you to create a relationship between a child window and a parent window, <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> supports the notion of ownership.</source>
          <target state="translated">若要可讓您建立的父視窗，子視窗之間的關聯性<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>支援擁有權的概念。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Ownership is established when the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of a window (the owned window) is set with a reference to another window (the owner window).</source>
          <target state="translated">建立擁有權時<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>視窗 （擁有視窗） 的屬性設為另一個視窗 （擁有者視窗） 的參考。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Once this relationship is established, the following behaviors are exhibited:</source>
          <target state="translated">一旦建立此關聯性，則會顯示下列行為：</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owner window is minimized, all its owned windows are minimized as well.</source>
          <target state="translated">如果主控視窗會最小化，其擁有的所有視窗最小都化以及。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owned window is minimized, its owner is not minimized.</source>
          <target state="translated">如果擁有的視窗最小化，其擁有者沒有最小化。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owner window is maximized, both the owner window and its owned windows are restored.</source>
          <target state="translated">如果擁有者視窗最大化，擁有者視窗和其擁有的 windows 會還原。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>An owner window can never cover an owned window.</source>
          <target state="translated">主控視窗可以永遠不會涵蓋擁有的視窗。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Owned windows that were not opened using <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are not modal.</source>
          <target state="translated">擁有不使用開啟的 windows<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>不會強制回應。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The user can still interact with the owner window.</source>
          <target state="translated">使用者仍然可以互動主控視窗。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If you close an owner window, its owned windows are also closed.</source>
          <target state="translated">如果您關閉主控視窗，也會關閉其擁有的 windows。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If an owned window was opened by its owner window using <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.</source>
          <target state="translated">如果擁有的視窗已開啟由其擁有者視窗使用<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>，且擁有者視窗已關閉，擁有的視窗的<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>不會引發事件。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>When you open a child window by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, you should also set the <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of the child window.</source>
          <target state="translated">當您開啟子視窗呼叫<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>，您也應該設定<ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>子視窗的屬性。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</source>
          <target state="translated">如果沒有，您的使用者無法再還原按工作列按鈕的子視窗與父視窗。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</source>
          <target state="translated">相反地，按工作列按鈕，將會產生一份 windows，包括子系和父視窗中的，為其選取。還原選取的視窗。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>You should also set the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property on a window that that is opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> to ensure correct behavior with .</source>
          <target state="translated">您也應該設定<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>屬性，藉由呼叫開啟的視窗<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>以確定有正確的行為。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>The following example shows how to establish the owner/owned relationship.</source>
          <target state="translated">下列範例會示範如何建立擁有者/擁有關聯性。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>A window tries to own itself</source>
          <target state="translated">有個視窗嘗試主控它自己</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>Two windows try to own each other.</source>
          <target state="translated">兩個視窗嘗試主控對方。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>The <ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> property is set on a visible window shown using <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> 屬性是設定在使用 <ph id="ph2">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 顯示的可見視窗上。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Owner">
          <source>The <ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> property is set with a window that has not been previously shown.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Window.Owner" /&gt;</ph> 屬性是設定為先前未顯示過的視窗。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>for permission to use all windows and user input events without restriction.</source>
          <target state="translated">若要使用的所有 windows 和不受限制的使用者輸入的事件的權限。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Owner">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ResizeMode">
          <source>Gets or sets the resize mode.</source>
          <target state="translated">取得或設定調整大小模式。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.ResizeMode" /&gt;</ph> value specifying the resize mode.</source>
          <target state="translated">指定調整大小模式的 <ph id="ph1">&lt;see cref="T:System.Windows.ResizeMode" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>There are four options:</source>
          <target state="translated">有四個選項：</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>NoResize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user cannot resize the window.</source>
          <target state="translated">使用者無法調整視窗大小。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Maximize and Minimize boxes are not shown.</source>
          <target state="translated">不會顯示最大化] 和 [最小化方塊。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanMinimize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user can only minimize the window and restore it from the taskbar.</source>
          <target state="translated">使用者只能視窗最小化和還原從工作列。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</source>
          <target state="translated">同時會顯示最小化和最大化方塊，但已啟用最小化方塊。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanResize<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</source>
          <target state="translated">使用者能夠完整調整視窗大小的視窗周圍使用的最小化和最大化的方塊，並可拖曳的外框。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>The Minimize and Maximize boxes are shown and enabled.</source>
          <target state="translated">最小化和最大化方塊會顯示和啟用狀態。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>(Default).</source>
          <target state="translated">（預設值）。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source><bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>CanResizeWithGrip<ept id="p1">**</ept>。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>This option has the same functionality as <ph id="ph1">&lt;xref:System.Windows.ResizeMode.CanResize&gt;</ph>, but adds a "resize grip" to the lower right corner of the window.</source>
          <target state="translated">這個選項擁有相同的功能<ph id="ph1">&lt;xref:System.Windows.ResizeMode.CanResize&gt;</ph>，但將 「 調整大小底框 」 加入至視窗的右下角。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ResizeMode">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ResizeModeProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ResizeMode" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.ResizeMode" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.RestoreBounds">
          <source>Gets the size and location of a window before being either minimized or maximized.</source>
          <target state="translated">取得視窗在最小化或最大化之前的大小和位置。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph> that specifies the size and location of a window before being either minimized or maximized.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph>，指定視窗在最小化或最大化之前的大小和位置。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>The restore rectangle is the region occupied by the window before it was minimized or maximized.</source>
          <target state="translated">還原矩形是最小化或最大化之前視窗所佔據的區域。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</source>
          <target state="translated">您可以使用<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>之前關閉應用程式時，儲存的最後一個大小和視窗位置和下一次應用程式啟動視窗還原成使用者所保留的方式來擷取這些值。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>If you query <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> before the window has been shown or after it has been closed, <ph id="ph2">&lt;xref:System.Windows.Rect.Empty%2A&gt;</ph> is returned.</source>
          <target state="translated">如果您查詢<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>在顯示的視窗之前或之後已關閉，<ph id="ph2">&lt;xref:System.Windows.Rect.Empty%2A&gt;</ph>傳回。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>You cannot get this property when a window is hosted in a browser.</source>
          <target state="translated">裝載在瀏覽器視窗時，無法取得這個屬性。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</source>
          <target state="translated">下列範例會使用<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>和隔離儲存區，以確保的大小和視窗的位置是否與相同的視窗顯示先前的時間。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>for permission to query for the size and location of a window's bounding rectangle.</source>
          <target state="translated">若要查詢的大小和視窗的位置的權限的週框矩形。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.RestoreBounds">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Show">
          <source>Opens a window and returns without waiting for the newly opened window to close.</source>
          <target state="translated">開啟視窗，並且不等新開啟的視窗關閉就返回。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>類別具現化，則不是預設為可見。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> shows a window and returns immediately, without waiting for the window to be closed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> 會顯示一個視窗，並立即傳回，而不需等待要關閉視窗。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Consequently, the opened window does not prevent users from interacting with other windows in the application.</source>
          <target state="translated">因此，開啟的視窗不會避免使用者互動與其他 windows 應用程式中。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>This type of window is called a <bpt id="p1">*</bpt>modeless<ept id="p1">*</ept> window.</source>
          <target state="translated">這類視窗稱為<bpt id="p1">*</bpt>非強制回應<ept id="p1">*</ept>視窗。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Common examples of modeless windows are properties windows, toolboxes, and palettes.</source>
          <target state="translated">非強制回應視窗的常見範例為 [屬性] 視窗、 工具箱和調色盤。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>To restrict a user to interacting with a specific window, the window must be opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated">若要限制使用者與特定的視窗進行互動，必須開啟視窗呼叫<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>A window that is opened by calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">開啟的視窗，藉由呼叫<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>並不會自動開啟它的視窗具有的關聯性; 特別是，開啟的視窗不知道哪一個視窗開啟它。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>This relationship can be established using the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">此關聯性可以使用建立<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>屬性和 managed 使用<ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> achieves the same end result as setting <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> object to <ph id="ph4">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>可達到相同的結果做為設定<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>屬性<ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>物件<ph id="ph4">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>However, there is a difference between the two from a timing perspective.</source>
          <target state="translated">不過，沒有從計時的觀點來看兩者的差異。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> is a synchronous operation that returns only after the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event on the child window has been raised:</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>是同步作業之後才傳回<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>已經引發子視窗上的事件：</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, however, is an asynchronous operation that returns immediately:</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>，不過，會立即傳回的非同步作業：</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>When setting <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, any window events you register before you set <ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> may not be raised until after the method in which you set <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> has completed execution.</source>
          <target state="translated">設定時<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>，您先在您設定註冊任何視窗事件<ph id="ph2">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>可能不會在您設定的方法之前引發<ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>才完成執行。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.Show">
          <source>The following sample demonstrates how to open a modeless window.</source>
          <target state="translated">下列範例會示範如何開啟強制回應視窗。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.Show">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Window.Show" /&gt;</ph> 的呼叫對象是正在關閉 (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) 或已經關閉 (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>) 的視窗。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ShowActivated">
          <source>Gets or sets a value that indicates whether a window is activated when first shown.</source>
          <target state="translated">取得或設定值，這個值指出視窗一開始顯示時是否已啟動。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a window is activated when first shown; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果視窗一開始顯示時為已啟動，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>When a window with its <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property set to <ph id="ph2">`false`</ph> is opened, the window is not activated and its <ph id="ph3">&lt;xref:System.Windows.Window.Activated&gt;</ph> event is not raised until a user manually activates the window by selecting it.</source>
          <target state="translated">當與視窗其<ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>屬性設定為<ph id="ph2">`false`</ph>會開啟，視窗不會啟動和其<ph id="ph3">&lt;xref:System.Windows.Window.Activated&gt;</ph>直到使用者手動啟動視窗加以選取，不會引發事件。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>After the window is selected, it activates and deactivates normally.</source>
          <target state="translated">已選取視窗之後，它會啟用，並通常會停用。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>To prevent a window from being activated when it opens, the <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property must be set to <ph id="ph2">`false`</ph> before the window is shown (by calling <ph id="ph3">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>); setting <ph id="ph4">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id="ph5">`false`</ph> after a window is shown has no effect.</source>
          <target state="translated">若要防止視窗會開啟，當啟動<ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>屬性必須設定為<ph id="ph2">`false`</ph>顯示視窗之前 (藉由呼叫<ph id="ph3">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>); 將<ph id="ph4">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>至<ph id="ph5">`false`</ph>視窗會顯示沒有任何作用之後。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id="ph2">`false`</ph> on a window that is opened modally, by calling <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, has no real impact.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>至<ph id="ph2">`false`</ph>上開啟的視窗，以強制回應方式，藉由呼叫<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>，沒有任何實際的影響。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</source>
          <target state="translated">雖然將不會啟動強制回應視窗，強制回應視窗會防止使用者啟動任何其他開啟的應用程式視窗。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The following example shows how to use markup to configure a window to be opened without being activated.</source>
          <target state="translated">下列範例會示範如何使用標記來設定要開啟但不啟動的視窗。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowActivated">
          <source>The following example shows how to use code to configure a window to be opened without it being activated.</source>
          <target state="translated">下列範例會示範如何使用程式碼來設定但不啟動開啟的視窗。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ShowActivatedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowActivated" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowActivated" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>Opens a window and returns only when the newly opened window is closed.</source>
          <target state="translated">開啟視窗，並且只在新開啟的視窗已經關閉時才返回。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> value of type <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> that specifies whether the activity was accepted (<ph id="ph3">&lt;see langword="true" /&gt;</ph>) or canceled (<ph id="ph4">&lt;see langword="false" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> 型別的 <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> 值，會指定已接受 (<ph id="ph3">&lt;see langword="true" /&gt;</ph>) 或取消 (<ph id="ph4">&lt;see langword="false" /&gt;</ph>) 活動。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source>The return value is the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> property before a window closes.</source>
          <target state="translated">傳回值就是在視窗關閉前的 <ph id="ph1">&lt;see cref="P:System.Windows.Window.DialogResult" /&gt;</ph> 屬性值。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>When a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>類別具現化，則不是預設為可見。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> shows the window, disables all other windows in the application, and returns only when the window is closed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 顯示的視窗會停用應用程式中的所有其他視窗和視窗已關閉時，才會傳回。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This type of window is known as a <bpt id="p1">*</bpt>modal<ept id="p1">*</ept> window.</source>
          <target state="translated">這類視窗稱為<bpt id="p1">*</bpt>強制回應<ept id="p1">*</ept>視窗。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Modal windows are primarily used as dialog boxes.</source>
          <target state="translated">強制回應視窗，主要用對話方塊。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</source>
          <target state="translated">對話方塊是一種特殊類型的應用程式用來與使用者互動以完成工作，例如開啟檔案或列印文件視窗。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</source>
          <target state="translated">對話方塊通常可讓使用者接受或取消其所顯示的對話方塊關閉之前的工作。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns a <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph><ph id="ph3">&lt;xref:System.Boolean&gt;</ph> value that specifies whether the activity was accepted or canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> 傳回<ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph><ph id="ph3">&lt;xref:System.Boolean&gt;</ph>值，指定是否接受或取消的活動。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>The return value is the value of the <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property before a window closes.</source>
          <target state="translated">傳回值就是在視窗關閉前的 <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> 屬性值。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱<ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>A window that is opened by calling the <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</source>
          <target state="translated">開啟的視窗，藉由呼叫<ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>方法自動沒有與它開啟的視窗之間的關係，特別是，開啟的視窗不知道哪一個視窗開啟它。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This relationship can be established using the <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
          <target state="translated">此關聯性可以使用建立<ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>屬性和 managed 使用<ph id="ph2">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>To support <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> automation (see <bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](~/docs/framework/ui-automation/ui-automation-overview.md)</ept>), <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> must be set for a window opened by calling <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.</source>
          <target state="translated">若要支援<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>自動化 (請參閱<bpt id="p1">[</bpt>UI 自動化概觀<ept id="p1">](~/docs/framework/ui-automation/ui-automation-overview.md)</ept>)，<ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>藉由呼叫開啟的視窗必須設定<ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>When a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window (a window opened by calling <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>) is closed, the previously activated window is reactivated.</source>
          <target state="translated">當強制回應<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>視窗 (藉由呼叫開啟的視窗<ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>) 已關閉，先前已啟動 視窗就會重新啟動。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>If a modal <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window has an owner window (see <ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), the owner window is not reactivated when the modal <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window is closed unless it was the previously activated window.</source>
          <target state="translated">如果強制回應<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>視窗有主控視窗 (請參閱<ph id="ph2">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>)，不是主控視窗會重新啟動時強制回應<ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>視窗已關閉，除非它是先前已啟動的視窗。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>This method cannot be called when a window is hosted in a browser.</source>
          <target state="translated">裝載在瀏覽器視窗時，無法呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>The following sample demonstrates how to open a modal window.</source>
          <target state="translated">下列範例會示範如何開啟強制回應視窗。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Windows.Window.ShowDialog">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> is called on a window that is closing (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) or has been closed (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Window.ShowDialog" /&gt;</ph> 的呼叫對象是正在關閉 (<ph id="ph2">&lt;see cref="E:System.Windows.Window.Closing" /&gt;</ph>) 或已經關閉 (<ph id="ph3">&lt;see cref="E:System.Windows.Window.Closed" /&gt;</ph>) 的視窗。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>for permission to activate a window.</source>
          <target state="translated">若要啟用視窗的使用權限。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Window.ShowDialog">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">相關聯的列舉型別： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Gets or sets a value that indicates whether the window has a task bar button.</source>
          <target state="translated">取得或設定值，這個值表示視窗是否具有工作列按鈕。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window has a task bar button; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果視窗具有工作列按鈕則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Does not apply when the window is hosted in a browser.</source>
          <target state="translated">不適用於視窗裝載於瀏覽器中時。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, the window will also appear in the ALT+TAB application selection list.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>設<ph id="ph2">`true`</ph>，視窗也會出現在 ALT + TAB 應用程式選取項目清單。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> property.</source>
          <target state="translated">使用 ALT + TAB 應用程式選取項目清單和工作列按鈕的圖示是值<ph id="ph1">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.ShowInTaskbar">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.ShowInTaskbarProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowInTaskbar" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.ShowInTaskbar" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.SizeToContent">
          <source>Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</source>
          <target state="translated">取得或設定值，這個值表示視窗是否會自動隨內容調整本身大小。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.SizeToContent" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.SizeToContent" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.SizeToContent.Manual" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see cref="F:System.Windows.SizeToContent.Manual" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>, setting either <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> has no effect; both properties can be set, but the values they are set with are not applied to the window.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>設<ph id="ph2">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>，設定<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>或<ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>沒有任何作用，則可以設定這兩個屬性，但它們會以設定的值不會套用至視窗。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Height&gt;</ph>, setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> does not change the height of the window.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>設<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Height&gt;</ph>，設定<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>不會變更視窗的高度。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Width&gt;</ph>, setting <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> does not change the width of the window.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>設<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Width&gt;</ph>，設定<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>不會變更視窗的寬度。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> has a value other than <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>:</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>以外的值<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is automatically set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph> if a user resizes the window by using the resize grip or dragging the border.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> 會自動設為<ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>如果使用者將視窗調整使用調整大小底框或拖曳框線。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If the size of the content changes in a way that causes the window to resize itself, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph> is raised.</source>
          <target state="translated">如果會造成視窗本身，調整大小的方式變更內容的大小<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph>，就會引發。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>If a window is transparent (see <ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>), you should consider setting <ph id="ph2">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph> to ensure the window is no larger than its visible content.</source>
          <target state="translated">如果視窗是透明 (請參閱<ph id="ph1">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>)，您應考慮設定<ph id="ph2">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>至<ph id="ph3">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>來確定視窗是不能大於其可見的內容。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.SizeToContent">
          <source>The following example shows how to set the <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> property in code to specify how a window resizes to fit its content.</source>
          <target state="translated">下列範例示範如何設定<ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>指定視窗會調整大小以符合其內容的程式碼中的屬性。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.SizeToContentProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.SizeToContent" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.SizeToContent" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.SourceInitialized">
          <source>This event is raised to support interoperation with <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph>.</source>
          <target state="translated">這個事件是為了支援與 <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> 的互通性而引發。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.SourceInitialized">
          <source>See <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>.</source>
          <target state="translated">請參閱<ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="E:System.Windows.Window.StateChanged">
          <source>Occurs when the window's <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> property changes.</source>
          <target state="translated">發生於視窗的 <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> 屬性變更時。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>Gets or sets the <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated">取得或設定 <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 的 <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> 工作列縮圖。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>The <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> 的 <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> 工作列縮圖。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.TaskbarItemInfo">
          <source>For more information about how to use the <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail, see the <ph id="ph2">&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;</ph> class.</source>
          <target state="translated">如需有關如何使用<ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph>工作列縮圖，請參閱<ph id="ph2">&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TaskbarItemInfoProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.TaskbarItemInfo" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.TaskbarItemInfo" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Title">
          <source>Gets or sets a window's title.</source>
          <target state="translated">取得或設定視窗的標題。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the window's title.</source>
          <target state="translated">包含視窗標題的 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>The title of a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, or <ph id="ph3">[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]</ph>, can also be set by using <ph id="ph4">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">標題<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>，或<ph id="ph3">[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]</ph>，也可以透過設定<ph id="ph4">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Title">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TitleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Title" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Title" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Top">
          <source>Gets or sets the position of the window's top edge, in relation to the desktop.</source>
          <target state="translated">取得或設定視窗上邊緣相對於桌面的位置。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>The position of the window's top, in logical units (1/96").</source>
          <target state="translated">視窗上邊緣的位置，以邏輯單位 (1/96 英吋) 計。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the top edge of the restore point for the <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>最大化或最小化上邊緣的還原點的這個值代表<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>This property cannot be set through a style.</source>
          <target state="translated">這個屬性不能透過樣式設定。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>If you do not specify a value, <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> is set to the system default value.</source>
          <target state="translated">如果您未指定值，<ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>設為系統預設值。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>You can also specify the system default value by setting <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>.</source>
          <target state="translated">您也可以指定系統的預設值，藉由設定<ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>至<ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Neither <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>.</source>
          <target state="translated">既不<ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph>也<ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>是有效的值，如<ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Top">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.Topmost">
          <source>Gets or sets a value that indicates whether a window appears in the topmost z-order.</source>
          <target state="translated">取得或設定值，這個值表示視窗是否要依疊置順序 (Z-order) 出現在最上層。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the window is topmost; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果視窗是最上層視窗則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>A window whose <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> appears above all windows whose <ph id="ph3">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> properties are set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated">視窗的<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>屬性設定為<ph id="ph2">`true`</ph>其上方的所有視窗<ph id="ph3">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>屬性會設為<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>In the group of windows that have <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the window that is currently activated is the topmost window.</source>
          <target state="translated">具有 windows 群組中<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>屬性設定為<ph id="ph2">`true`</ph>，目前啟動的視窗是最上層視窗。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Likewise for the group of windows that have <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">對於具有 windows 群組<ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>屬性設定為<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.Topmost">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TopmostProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Topmost" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Topmost" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.TopProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.Top" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.Top" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Gets or sets the position of the window when first shown.</source>
          <target state="translated">取得或設定視窗第一次顯示時的位置。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowStartupLocation" /&gt;</ph> value that specifies the top/left position of a window when first shown.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WindowStartupLocation" /&gt;</ph> 值，指定視窗第一次顯示的上方/左側位置。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowStartupLocation.Manual" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see cref="F:System.Windows.WindowStartupLocation.Manual" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph> causes a window to be positioned according to its <ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property values.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph>至<ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>致使視窗放置根據其<ph id="ph3">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>屬性值。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>If either the <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> properties aren't specified, their values are determined by Windows.</source>
          <target state="translated">如果有任一個<ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>未指定屬性，其值取決於 Windows。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation.CenterScreen&gt;</ph> causes a window to be positioned in the center of the screen that contains the mouse cursor.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation.CenterScreen&gt;</ph>致使視窗位於包含滑鼠游標在螢幕的中央。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.CenterOwner&gt;</ph> causes a window to be positioned in the center of its owner window (see <ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), if specified.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph>至<ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.CenterOwner&gt;</ph>致使視窗在其擁有者視窗的中央位於 (請參閱<ph id="ph3">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>)，如果指定。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>The owner window can be either another WPF window or a non-WPF window.</source>
          <target state="translated">另一個 WPF 視窗中或非 WPF 視窗，可以是主控視窗。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>For more information about WPF windows with non-WPF windows, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept> and <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>.</source>
          <target state="translated">如需與非 WPF 視窗的 WPF 視窗的詳細資訊，請參閱<bpt id="p1">[</bpt>WPF 和 Win32 互通<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept>和<ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>If an owner window is not specified, the position of the window is determined in the same way as if <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>.</source>
          <target state="translated">如果未指定擁有者視窗，視窗的位置相同的方式決定如同<ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph>設<ph id="ph2">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStartupLocation">
          <source>You cannot set or get the value of this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定，或裝載在瀏覽器視窗時，取得這個屬性的值。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowState">
          <source>Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</source>
          <target state="translated">取得或設定值，這個值表示視窗為已還原、最小化還是最大化狀態。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowState" /&gt;</ph> that determines whether a window is restored, minimized, or maximized.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WindowState" /&gt;</ph>，決定視窗為已還原、最小化還是最大化狀態。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowState.Normal" /&gt;</ph> (restored).</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see cref="F:System.Windows.WindowState.Normal" /&gt;</ph> (已還原)。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Before a window is minimized or maximized, its size and location are stored in <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.</source>
          <target state="translated">最小化或最大化視窗之前，會將其大小和位置儲存在<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>When a window is subsequently restored, its size and location values are restored with the values from <ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.</source>
          <target state="translated">後續還原視窗時，其大小和位置的值從值以還原<ph id="ph1">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed, <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> is raised.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>屬性變更， <ph id="ph2">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> ，就會引發。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowState">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.WindowStateProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowState" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="P:System.Windows.Window.WindowStyle">
          <source>Gets or sets a window's border style.</source>
          <target state="translated">取得或設定視窗的框線樣式。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowStyle" /&gt;</ph> that specifies a window's border style.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.WindowStyle" /&gt;</ph>，指定視窗的框線樣式。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.WindowStyle.SingleBorderWindow" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see cref="F:System.Windows.WindowStyle.SingleBorderWindow" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> can be one of the <ph id="ph2">&lt;xref:System.Windows.WindowStyle&gt;</ph> enumeration values, including <ph id="ph3">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.WindowStyle.ToolWindow&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.WindowStyle.SingleBorderWindow&gt;</ph> (default), and <ph id="ph6">&lt;xref:System.Windows.WindowStyle.ThreeDBorderWindow&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> 可以是其中一個<ph id="ph2">&lt;xref:System.Windows.WindowStyle&gt;</ph>列舉值，包括<ph id="ph3">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>， <ph id="ph4">&lt;xref:System.Windows.WindowStyle.ToolWindow&gt;</ph>， <ph id="ph5">&lt;xref:System.Windows.WindowStyle.SingleBorderWindow&gt;</ph> （預設值） 和<ph id="ph6">&lt;xref:System.Windows.WindowStyle.ThreeDBorderWindow&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>The following figure shows the window styles on <ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]</ph> (Windows Vista Aero theme, with transparent glass enabled):</source>
          <target state="translated">下圖顯示在視窗樣式<ph id="ph1">[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]</ph>（Windows Vista Aero 佈景主題，以啟用透明玻璃）：</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source><bpt id="p1">![</bpt>Window styles<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>Window styles<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>視窗樣式<ept id="p1">]</ept><bpt id="p2">(~/add/media/windowoverviewfigure6.PNG "</bpt>視窗樣式<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>You cannot set or get this property when a window is hosted in a browser.</source>
          <target state="translated">您無法設定或瀏覽器中裝載在視窗時，取得這個屬性。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Window.WindowStyle">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="F:System.Windows.Window.WindowStyleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.Window.WindowStyle" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>