<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ComponentResourceKey.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54ab025443f3717a6f64e96df27f296ecc9101058.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ab025443f3717a6f64e96df27f296ecc9101058</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.ComponentResourceKey">
          <source>Defines or references resource keys based on class names in external assemblies, as well as an additional identifier.</source>
          <target state="translated">基於外部組件 (Assembly) 中的類別 (Class) 名稱與其他識別項定義或參照資源索引鍵。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">如<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>的詳細資訊，請參閱<bpt id="p1">[</bpt>ComponentResourceKey 標記延伸<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This class implements an object type that is useful for creating keys that are based on types in assemblies plus an identifier.</source>
          <target state="translated">這個類別會實作可用於建立組件加上識別項類型為基礎的索引鍵的物件類型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>Because you define or reference the type, you do not need to request a specific <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, and more than one set of resources can exist in the assembly, each differentiated by the type of their <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">因為您定義或參考類型，您不需要要求特定<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>，而且多個資源集可以存在於組件，每個不同的類型及其<ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>There are two ways to define a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">有兩種方式來定義<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>If you want an easily accessible key, you can define a static property on your control class code that returns a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>, constructed with a <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> that exists in the external resource assembly, and a <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>.</source>
          <target state="translated">如果您想要更容易存取的索引鍵，您可以在控制項類別程式碼會傳回定義靜態屬性<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>、 建構與<ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>外部資源的組件，存在於和<ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>The key can be used for defining alternate default styles for controls in an assembly, by swapping the original external resource assembly for a custom one.</source>
          <target state="translated">索引鍵用於組件中定義控制項的替代預設樣式，藉由交換自訂原始的外部資源組件。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>You can also define a named resource part within a larger control style or template to expose a customization entry point.</source>
          <target state="translated">您也可以定義具名的資源部分在較大的控制項樣式或範本來公開自訂進入點。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This is particularly useful if you are defining a theme resource dictionary for your control.</source>
          <target state="translated">這是特別有用，如果您要為控制項定義的主題資源字典。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>You can also use the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> in verbose syntax directly to create a loose instance of the key.</source>
          <target state="translated">您也可以使用<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey 標記延伸<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>詳細語法來建立機碼的鬆散執行個體中。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.ComponentResourceKey">
          <source>This is useful if you want to declare private resources from other assemblies that are less discoverable to customize.</source>
          <target state="translated">這非常有用，如果您想要宣告私用的資源，以及自訂不易搜尋的其他組件。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Windows.ComponentResourceKey">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>The default constructor is not generally used, because a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> value and <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> value are required for proper initialization.</source>
          <target state="translated">預設建構函式使用，因為<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>值和<ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>值所需的正確初始化。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor">
          <source>The default constructor exists primarily to support <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> XAML usage in named parameter form.</source>
          <target state="translated">預設建構函式存在主要是為了支援<bpt id="p1">[</bpt>ComponentResourceKey 標記延伸<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>具名的參數形式的 XAML 用法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>The type that defines the resource key.</source>
          <target state="translated">可定義資源索引鍵的型別。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>A unique identifier to differentiate this <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> from others associated with the <bpt id="p1">&lt;c&gt;</bpt>typeInTargetAssembly<ept id="p1">&lt;/c&gt;</ept> type.</source>
          <target state="translated">唯一識別項，用來將這個 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> 和與 <bpt id="p1">&lt;c&gt;</bpt>typeInTargetAssembly<ept id="p1">&lt;/c&gt;</ept> 類型建立關聯的其他索引鍵相區別。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Initializes a new instance of a <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> , specifying the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> that defines the key, and an object to use as an additional resource identifier.</source>
          <target state="translated">指定用來定義索引鍵的 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> 和做為額外資源識別項的物件，初始化 <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> 的新執行個體。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>This constructor exist for two scenarios, with the first scenario being the most important:</source>
          <target state="translated">這個建構函式存在兩個案例中，最重要的第一個案例：</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Supports creating a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> that is then exposed as a public static field on a custom control class.</source>
          <target state="translated">支援建立<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>然後公開為自訂控制項類別上的公用靜態欄位。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>This simplifies a control's access to its own defined resources in the template through <ph id="ph1">`{x:Static}`</ph> usages for template property values.</source>
          <target state="translated">這樣可簡化自己定義的資源，透過範本中的控制存取<ph id="ph1">`{x:Static}`</ph>範本的屬性值的使用方式。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>Supports <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> XAML usage in positional parameter form, which is one technique available for third parties that reference a component resource.</source>
          <target state="translated">支援<bpt id="p1">[</bpt>ComponentResourceKey 標記延伸<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>形式位置參數，也就是其中一種技術可供參考元件資源的協力廠商的 XAML 用法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> that is then exposed as a static key of a control class to provide a style customization entry point.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>然後公開為靜態控制項類別提供樣式的自訂項目點的索引鍵。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.Assembly">
          <source>Gets the assembly object that indicates which assembly's dictionary to look in for the value associated with this key.</source>
          <target state="translated">取得組件物件，這個物件表示在哪個組件字典中尋找與這個索引鍵相關聯的值。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.Assembly">
          <source>The retrieved assembly, as a reflection class.</source>
          <target state="translated">擷取的組件，做為反映 (Reflection) 類別。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Object to compare with the current <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">要與目前 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> 比較的物件。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Determines whether the provided object is equal to the current <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">判斷提供的物件和目前的 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> 是否相等。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the objects are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果物件相等則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.ComponentResourceKey.Equals(System.Object)">
          <source>Two keys are equal if they both have the same values for all their immediate settable properties (<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>).</source>
          <target state="translated">兩個索引鍵是否相等，如果兩者有相同的所有其立即可設定屬性值 (<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.GetHashCode">
          <source>Returns a hash code for this <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">傳回這個 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> 的雜湊程式碼。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.GetHashCode">
          <source>A signed 32-bit integer value.</source>
          <target state="translated">帶正負號的 32 位元整數值。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Gets or sets a unique identifier to differentiate this key from others associated with this type.</source>
          <target state="translated">取得或設定唯一識別項，以將這個索引鍵與這個型別的其他相關聯索引鍵相區別。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>A unique identifier.</source>
          <target state="translated">唯一識別碼。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Typically this is a string.</source>
          <target state="translated">通常，這會是字串。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">如<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>的詳細資訊，請參閱<bpt id="p1">[</bpt>ComponentResourceKey 標記延伸<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>Typically, the string used for a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> value conforms to the <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>.</source>
          <target state="translated">一般而言，用於字串<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>值符合<bpt id="p1">[</bpt>XamlName 文法<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.ResourceId">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> to differentiate this key from others associated with this type.</source>
          <target state="translated">下列範例示範如何使用<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>來區分這個類型相關聯的其他人提供的這個索引鍵。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.ToString">
          <source>Gets the string representation of a <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph>.</source>
          <target state="translated">取得 <ph id="ph1">&lt;see cref="T:System.Windows.ComponentResourceKey" /&gt;</ph> 的字串表示。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.ComponentResourceKey.ToString">
          <source>The string representation.</source>
          <target state="translated">字串表示。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that defines the resource key.</source>
          <target state="translated">取得或設定可定義資源索引鍵的 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The type that defines the resource key.</source>
          <target state="translated">可定義資源索引鍵的型別。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">如<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>的詳細資訊，請參閱<bpt id="p1">[</bpt>ComponentResourceKey 標記延伸<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> element is used by custom components to define keys for resources that are accessed from external assemblies, based on targeting an assembly that contains the type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>項目可由自訂元件來定義從目標組件包含的型別為基礎的外部組件來存取資源的索引鍵。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Custom components often define new types which must be in the assembly where the resource is located.</source>
          <target state="translated">自訂元件通常會定義新的類型必須是資源所在的組件中。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>Generally these types have no other implementation, the types only exist in order to satisfy the lookup requirements of a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
          <target state="translated">通常這些型別沒有其他實作，類型只存在於以滿足的查閱需求<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>The following example shows how to define a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> including <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> using the <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
          <target state="translated">下列範例示範如何定義<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>包括<ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>使用<bpt id="p1">[</bpt>ComponentResourceKey 標記延伸<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly">
          <source>This resource can then be placed in an external assembly and accessed by a key usage that requests the resource using an analogous <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> in the request.</source>
          <target state="translated">這項資源可再放在外部組件和存取所要求資源使用類似的金鑰使用方式<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>要求中。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>