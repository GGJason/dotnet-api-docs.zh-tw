<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3cd6fbb925314b32cf6f09ce204f5374db64928c" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39765176" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0a88a-101">為唯讀相依性屬性的有限寫入權限提供相依性屬性識別項。</span><span class="sxs-lookup"><span data-stu-id="0a88a-101">Provides a dependency property identifier for limited write access to a read-only dependency property.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a88a-102"><xref:System.Windows.DependencyPropertyKey> 執行個體取得相依性屬性註冊呼叫使用方法的傳回值作為<xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>或<xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>。</span><span class="sxs-lookup"><span data-stu-id="0a88a-102"><xref:System.Windows.DependencyPropertyKey> instances are obtained as the return value of a dependency property registration call using the methods <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> or <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="0a88a-103">註冊相依性屬性的型別可以使用<xref:System.Windows.DependencyPropertyKey>呼叫中<xref:System.Windows.DependencyObject.SetValue%2A>和<xref:System.Windows.DependencyObject.ClearValue%2A>，調整屬性的值做為類別邏輯的一部分。</span><span class="sxs-lookup"><span data-stu-id="0a88a-103">The types that register a dependency property can use the <xref:System.Windows.DependencyPropertyKey> in calls to <xref:System.Windows.DependencyObject.SetValue%2A> and <xref:System.Windows.DependencyObject.ClearValue%2A> that adjust the property's value as part of class logic.</span></span> <span data-ttu-id="0a88a-104">如果索引鍵的存取層級的允許，相關的類別也可以使用索引鍵和相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="0a88a-104">If permitted by the access level of the key, related classes can use the key and the dependency property also.</span></span> <span data-ttu-id="0a88a-105">比方說，您可以宣告為內部，索引鍵，和相同的組件內的其他類型也可以設定該相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="0a88a-105">For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.</span></span>  
  
 <span data-ttu-id="0a88a-106"><xref:System.Windows.DependencyPropertyKey>傳回的唯讀相依性屬性註冊不能為 public，因為公開金鑰讓屬性成為可設定的失去了登錄唯讀相依性屬性的點。</span><span class="sxs-lookup"><span data-stu-id="0a88a-106">The <xref:System.Windows.DependencyPropertyKey> returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property.</span></span> <span data-ttu-id="0a88a-107">此外，公開索引鍵會讓不相符的可用的相依性屬性的行為及其[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]屬性包裝函式實作，也就是不正確的類別設計。</span><span class="sxs-lookup"><span data-stu-id="0a88a-107">Also, exposing the key causes a mismatch between the available dependency property behaviors and its [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property wrapper implementations, which is bad class design.</span></span>  
  
 <span data-ttu-id="0a88a-108">而不是公開本身的索引鍵，您應該改為公開<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>的值<xref:System.Windows.DependencyPropertyKey>作為`public static readonly`<xref:System.Windows.DependencyProperty>類別上。</span><span class="sxs-lookup"><span data-stu-id="0a88a-108">Instead of exposing the key itself, you should instead expose the <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value of the <xref:System.Windows.DependencyPropertyKey> as a `public static readonly`<xref:System.Windows.DependencyProperty> on your class.</span></span> <span data-ttu-id="0a88a-109">這可讓要傳回針對特定屬性系統作業，例如列舉本機設定值有效的相依性屬性識別項的屬性。</span><span class="sxs-lookup"><span data-stu-id="0a88a-109">This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values.</span></span> <span data-ttu-id="0a88a-110">不過，因此取得的識別碼沒有的完整功能<xref:System.Windows.DependencyProperty>許多屬性系統作業。</span><span class="sxs-lookup"><span data-stu-id="0a88a-110">However, the identifier thus obtained does not have the full capabilities of a <xref:System.Windows.DependencyProperty> for many property system operations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a88a-111">下列範例會登錄唯讀相依性屬性，並也會使用金鑰，其他類別成員中的兩個目的： 實作 get 「 包裝函式 」，以及在計算根據設定的值判斷受保護的作業的識別碼其他屬性的值。</span><span class="sxs-lookup"><span data-stu-id="0a88a-111">The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get "wrapper", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0a88a-112">取得與這個特定的相依性屬性識別項關聯的相依性屬性識別項。</span><span class="sxs-lookup"><span data-stu-id="0a88a-112">Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</span></span></summary>
        <value><span data-ttu-id="0a88a-113">相關的相依性屬性識別項。</span><span class="sxs-lookup"><span data-stu-id="0a88a-113">The relevant dependency property identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a88a-114"><xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>值可讓唯讀屬性的識別項，共同參與使用某些相同的介面所使用的讀寫相依性屬性的屬性系統作業。</span><span class="sxs-lookup"><span data-stu-id="0a88a-114">The <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value enables a read-only property's identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.</span></span>  
  
 <span data-ttu-id="0a88a-115">若要實作的唯讀相依性屬性的 get 屬性存取子，您應該建立，並公開 （expose）<xref:System.Windows.DependencyProperty>類別上的識別項。</span><span class="sxs-lookup"><span data-stu-id="0a88a-115">In order to implement the get property accessor for a read-only dependency property, you should create and expose a <xref:System.Windows.DependencyProperty> identifier on your class.</span></span> <span data-ttu-id="0a88a-116">這有兩種用途：</span><span class="sxs-lookup"><span data-stu-id="0a88a-116">This serves two purposes:</span></span>  
  
-   <span data-ttu-id="0a88a-117">您自己的類別需要<xref:System.Windows.DependencyProperty>以便實作屬性的包裝函式的 get 存取子的識別項。</span><span class="sxs-lookup"><span data-stu-id="0a88a-117">Your own class needs the <xref:System.Windows.DependencyProperty> identifier in order to implement the get accessor for the property wrapper.</span></span> <span data-ttu-id="0a88a-118">您使用<xref:System.Windows.DependencyProperty>做為參數的<xref:System.Windows.DependencyObject.GetValue%2A>實作 get 存取子的呼叫。</span><span class="sxs-lookup"><span data-stu-id="0a88a-118">You use the <xref:System.Windows.DependencyProperty> as a parameter for the <xref:System.Windows.DependencyObject.GetValue%2A> call that implements the get accessor.</span></span>  
  
-   <span data-ttu-id="0a88a-119"><xref:System.Windows.DependencyProperty> 識別項會公開屬性系統相依性屬性，使依賴中繼資料的其他方法可以存取它之標準格式。</span><span class="sxs-lookup"><span data-stu-id="0a88a-119"><xref:System.Windows.DependencyProperty> identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form.</span></span> <span data-ttu-id="0a88a-120">比方說，如果您呼叫<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>一些<xref:System.Windows.DependencyObject>並取得本機設定屬性 （「 值 」 和 「 識別碼 」） 的列舉型別識別項的唯讀相依性屬性會傳回您<xref:System.Windows.DependencyProperty>值而不是索引鍵。</span><span class="sxs-lookup"><span data-stu-id="0a88a-120">For instance, if you called <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> on some <xref:System.Windows.DependencyObject> and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your <xref:System.Windows.DependencyProperty> value rather than the key.</span></span> <span data-ttu-id="0a88a-121">不會公開<xref:System.Windows.DependencyProperty>識別碼不會增加您的唯讀相依性屬性，以任何方式的安全性、 它只會包含您的屬性同時用於後續的衍生的類別以及類別執行個體更棘手的作業。</span><span class="sxs-lookup"><span data-stu-id="0a88a-121">Not exposing a <xref:System.Windows.DependencyProperty> identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.</span></span>  
  
 <span data-ttu-id="0a88a-122">若要公開 （expose）<xref:System.Windows.DependencyProperty>類別上的識別項，呼叫<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>直接在您的金鑰。</span><span class="sxs-lookup"><span data-stu-id="0a88a-122">To expose the  <xref:System.Windows.DependencyProperty> identifier on your class, you call <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directly on your key.</span></span> <span data-ttu-id="0a88a-123">使用此值來建立`public static readonly`<xref:System.Windows.DependencyProperty>識別項，此類別中的平行<xref:System.Windows.DependencyPropertyKey>。</span><span class="sxs-lookup"><span data-stu-id="0a88a-123">Use this value to create a `public static readonly`<xref:System.Windows.DependencyProperty> identifier on the class, which parallels the <xref:System.Windows.DependencyPropertyKey>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a88a-124">下列範例會呼叫<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>公開<xref:System.Windows.DependencyProperty>識別項 (`AquariumGraphicProperty`) 的`AquariumGraphic`類別上的唯讀相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="0a88a-124">The following example calls <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class.</span></span> <span data-ttu-id="0a88a-125">此範例也示範<xref:System.Windows.DependencyPropertyKey>（做為內部的成員） 的建立和 get 存取子`AquariumGraphic`。</span><span class="sxs-lookup"><span data-stu-id="0a88a-125">The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="0a88a-126">這個相依性屬性所存在以及中繼資料應該覆寫的型別。</span><span class="sxs-lookup"><span data-stu-id="0a88a-126">The type on which this dependency property exists and metadata should be overridden.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="0a88a-127">為這個型別提供的中繼資料。</span><span class="sxs-lookup"><span data-stu-id="0a88a-127">Metadata supplied for this type.</span></span></param>
        <summary><span data-ttu-id="0a88a-128">覆寫由相依性屬性識別項表示之唯讀相依性屬性的中繼資料。</span><span class="sxs-lookup"><span data-stu-id="0a88a-128">Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a88a-129">覆寫唯讀相依性屬性的中繼資料為了與覆寫讀寫相依性之屬性的中繼資料的類似起見而和是限制為層級的存取金鑰，因為指定的中繼資料中的行為可能會變更設定的行為 (預設值，例如）。</span><span class="sxs-lookup"><span data-stu-id="0a88a-129">Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).</span></span>  
  
 <span data-ttu-id="0a88a-130">當使用讀寫相依性屬性，覆寫唯讀相依性屬性的中繼資料，才應該執行屬性系統放在使用該屬性之前 (這相當於時註冊的物件的該特定執行個體屬性會具現化）。</span><span class="sxs-lookup"><span data-stu-id="0a88a-130">As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated).</span></span> <span data-ttu-id="0a88a-131">呼叫<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>本身提供為類型的靜態建構函式內，才可以執行`forType`此方法或該類別的對等初始化參數。</span><span class="sxs-lookup"><span data-stu-id="0a88a-131">Calls to <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or equivalent initialization for that class.</span></span>  
  
 <span data-ttu-id="0a88a-132">這個方法有效地轉送給<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>方法，傳遞<xref:System.Windows.DependencyPropertyKey>做為索引鍵參數的執行個體。</span><span class="sxs-lookup"><span data-stu-id="0a88a-132">This method effectively forwards to the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method, passing the <xref:System.Windows.DependencyPropertyKey> instance as the key parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a88a-133">下列範例會覆寫現有唯讀相依性屬性的類別繼承的中繼資料。</span><span class="sxs-lookup"><span data-stu-id="0a88a-133">The following example overrides metadata for an existing read-only dependency property that a class inherits.</span></span> <span data-ttu-id="0a88a-134">在此情況下，案例目標是要新增的基底屬性中繼資料沒有強制轉型值回撥。</span><span class="sxs-lookup"><span data-stu-id="0a88a-134">In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have.</span></span> <span data-ttu-id="0a88a-135">無法針對任何其他原因會覆寫中繼資料通常是適當也覆寫中繼資料 (變更預設值，新增<xref:System.Windows.FrameworkPropertyMetadataOptions>值等。)</span><span class="sxs-lookup"><span data-stu-id="0a88a-135">You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0a88a-136">嘗試覆寫唯讀相依性屬性的中繼資料 (無法使用這個簽章執行)。</span><span class="sxs-lookup"><span data-stu-id="0a88a-136">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0a88a-137">已為存在於所提供之型別的屬性建立中繼資料。</span><span class="sxs-lookup"><span data-stu-id="0a88a-137">Metadata was already established for the property as it exists on the provided type.</span></span></exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>