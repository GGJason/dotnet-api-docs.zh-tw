<Type Name="FrameworkPropertyMetadata" FullName="System.Windows.FrameworkPropertyMetadata">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c70304d7b52b8f4e76c37fd1e35de0928f9619c7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkPropertyMetadata extends System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkPropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkPropertyMetadata&#xA;Inherits UIPropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkPropertyMetadata : System::Windows::UIPropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIPropertyMetadata</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f3b1b-101">為相依性屬性回報或套用中繼資料，特別加入架構專屬的屬性系統特性。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f3b1b-101">Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-102">此類別衍生自<xref:System.Windows.PropertyMetadata>(透過<xref:System.Windows.UIPropertyMetadata>)。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-102">This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) .</span></span> <span data-ttu-id="f3b1b-103">大部分的 WPF 架構層級應用程式開發用途而言，<xref:System.Windows.FrameworkPropertyMetadata>是用於相依性屬性中繼資料的類型，而不是基底中繼資料型別<xref:System.Windows.PropertyMetadata>或<xref:System.Windows.UIPropertyMetadata>。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-103">For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>.</span></span> <span data-ttu-id="f3b1b-104">這適用於現有的相依性屬性和大部分自訂相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-104">This is true both for existing dependency properties and for most custom dependency property scenarios.</span></span>  
  
 <span data-ttu-id="f3b1b-105">這個宣告的成員類別該補充<xref:System.Windows.PropertyMetadata>基底類別包含各種布林屬性，可指定或報表 WPF 架構層級屬性的系統行為，例如屬性繼承、 資料繫結和版面配置。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-105">The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</span></span>  
  
 <span data-ttu-id="f3b1b-106">建立數個建構函式簽章<xref:System.Windows.FrameworkPropertyMetadata>執行個體採用<xref:System.Windows.FrameworkPropertyMetadataOptions>參數。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-106">Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter.</span></span> <span data-ttu-id="f3b1b-107"><xref:System.Windows.FrameworkPropertyMetadataOptions>列舉型別只用於指定初始的行為在建構函式，而且否則不會公開之後<xref:System.Windows.FrameworkPropertyMetadata>建構。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-107">The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed.</span></span> <span data-ttu-id="f3b1b-108">建構的執行個體中，您可以取得或設定共用的建構函式呼叫中使用的列舉值名稱的各種屬性對應的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-108">From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</span></span>  
  
<a name="xamlTextUsage_FrameworkPropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-109">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-109">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-110">這個類別通常不會使用在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-110">This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-111">下列範例會取得相依性屬性的中繼資料上的特定擁有者為初始的基底<xref:System.Windows.PropertyMetadata>型別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-111">The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type.</span></span> <span data-ttu-id="f3b1b-112">中繼資料會轉型為<xref:System.Windows.FrameworkPropertyMetadata>。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-112">That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="f3b1b-113">如果轉型傳回有效<xref:System.Windows.FrameworkPropertyMetadata>，則各種<xref:System.Windows.FrameworkPropertyMetadata>屬性值會報告透過 （未顯示） 的簡單 UI。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-113">If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.PropertyMetadata" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-114">初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-114">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-115">初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-115">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-116">此簽章初始化的所有值<xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A>為其屬性的預設值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-116">This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults.</span></span> <span data-ttu-id="f3b1b-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> 將`null`，各種<xref:System.Windows.FrameworkPropertyMetadata>將布林值屬性`false`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="f3b1b-118">相依性屬性的預設值，通常為特定型別的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-118">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-119">使用指定的預設值初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-119">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified default value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-120">提供值的型別`defaultValue`必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-120">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="f3b1b-121">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-121">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="f3b1b-122">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-122">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="f3b1b-123">值<xref:System.Windows.DependencyProperty.UnsetValue>屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-123">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-124">下列範例會呼叫這個建構函式簽章：</span><span class="sxs-lookup"><span data-stu-id="f3b1b-124">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f3b1b-125">
            <paramref name="defaultValue" /> 設定為 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-125">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="f3b1b-126">當屬性的有效值變更時，便會呼叫屬性系統之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-126">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-127">使用指定的 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 回呼初始化 <see cref="T:System.Windows.PropertyChangedCallback" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-127">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f3b1b-128">下列範例會呼叫這個建構函式簽章：</span><span class="sxs-lookup"><span data-stu-id="f3b1b-128">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="f3b1b-129">相依性屬性的預設值，通常為特定型別的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-129">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="f3b1b-130">中繼資料選項旗標 (<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 值的組合)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-130">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="f3b1b-131">這些選項會指定相依性屬性與系統互動的特性，例如版面配置或資料繫結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-131">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-132">使用提供的預設值和架構中繼資料選項，初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-132">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework-level metadata options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-133">提供值的型別`defaultValue`必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-133">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="f3b1b-134">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-134">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="f3b1b-135">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-135">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="f3b1b-136">值<xref:System.Windows.DependencyProperty.UnsetValue>屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-136">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="f3b1b-137">值標記中設定旗標為`flags`參數會設定的布林值<xref:System.Windows.FrameworkPropertyMetadata>屬性，使其符合<xref:System.Windows.FrameworkPropertyMetadataOptions>旗標的名稱，以`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-137">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="f3b1b-138">接下來，只要中繼資料尚未套用至特定的屬性系統作業，您可以變更在中繼資料，屬性的值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-138">You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-139">下列範例會呼叫這個建構函式簽章：</span><span class="sxs-lookup"><span data-stu-id="f3b1b-139">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f3b1b-140">
            <paramref name="defaultValue" /> 設定為 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-140">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="f3b1b-141">相依性屬性的預設值，通常為特定型別的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-141">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="f3b1b-142">當屬性的有效值變更時，便會呼叫屬性系統之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-142">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-143">使用提供的預設值和指定的 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 回呼，初始化 <see cref="T:System.Windows.PropertyChangedCallback" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-143">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-144">提供值的型別`defaultValue`必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-144">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="f3b1b-145">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-145">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="f3b1b-146">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-146">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="f3b1b-147">值<xref:System.Windows.DependencyProperty.UnsetValue>屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-147">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-148">下列範例會呼叫這個建構函式簽章：</span><span class="sxs-lookup"><span data-stu-id="f3b1b-148">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f3b1b-149">
            <paramref name="defaultValue" /> 設定為 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-149">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="f3b1b-150">當屬性的有效值變更時，便會呼叫屬性系統之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-150">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="f3b1b-151">當屬性系統針對這個相依性屬性呼叫 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 時，便會呼叫處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-151">A reference to a handler implementation will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-152">使用指定的回呼初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-152">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-153">此實作會呼叫基底的初始設定式，然後新增`coerceValueCallback`基底的執行個體上設定的屬性。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-153">This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-154">下列範例會呼叫這個建構函式簽章：</span><span class="sxs-lookup"><span data-stu-id="f3b1b-154">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="f3b1b-155">相依性屬性的預設值，通常為特定型別的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-155">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="f3b1b-156">中繼資料選項旗標 (<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 值的組合)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-156">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="f3b1b-157">這些選項會指定相依性屬性與系統互動的特性，例如版面配置或資料繫結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-157">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="f3b1b-158">當屬性的有效值變更時，便會呼叫屬性系統之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-158">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-159">使用提供的預設值和架構中繼資料選項，以及指定的 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 回呼，初始化 <see cref="T:System.Windows.PropertyChangedCallback" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-159">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-160">提供值的型別`defaultValue`必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-160">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="f3b1b-161">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-161">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="f3b1b-162">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-162">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="f3b1b-163">值<xref:System.Windows.DependencyProperty.UnsetValue>屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-163">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="f3b1b-164">值標記中設定旗標為`flags`參數會設定的布林值<xref:System.Windows.FrameworkPropertyMetadata>屬性，使其符合<xref:System.Windows.FrameworkPropertyMetadataOptions>旗標的名稱，以`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-164">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="f3b1b-165">中繼資料尚未套用至特定的屬性系統作業時，您仍可以變更在中繼資料，屬性的值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-165">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-166">下列範例會呼叫這個建構函式簽章：</span><span class="sxs-lookup"><span data-stu-id="f3b1b-166">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f3b1b-167">
            <paramref name="defaultValue" /> 設定為 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-167">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="f3b1b-168">相依性屬性的預設值，通常為特定型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-168">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="f3b1b-169">當屬性的有效值變更時，便會呼叫屬性系統之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-169">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="f3b1b-170">當屬性系統針對這個相依性屬性呼叫 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 時，便會呼叫之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-170">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-171">使用提供的預設值和指定的回呼，初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-171">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-172">提供值的型別`defaultValue`必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-172">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="f3b1b-173">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-173">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="f3b1b-174">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-174">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="f3b1b-175">值<xref:System.Windows.DependencyProperty.UnsetValue>屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-175">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-176">下列範例會呼叫這個建構函式簽章：</span><span class="sxs-lookup"><span data-stu-id="f3b1b-176">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f3b1b-177">
            <paramref name="defaultValue" /> 設定為 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-177">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="f3b1b-178">相依性屬性的預設值，通常為特定型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-178">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="f3b1b-179">中繼資料選項旗標 (<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 值的組合)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-179">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="f3b1b-180">這些選項會指定相依性屬性與系統互動的特性，例如版面配置或資料繫結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-180">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="f3b1b-181">當屬性的有效值變更時，便會呼叫屬性系統之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-181">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="f3b1b-182">當屬性系統針對這個屬性呼叫 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 時，便會呼叫之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-182">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-183">使用提供的預設值和架構中繼資料選項，以及指定的回呼，初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-183">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-184">提供值的型別`defaultValue`必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-184">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="f3b1b-185">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-185">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="f3b1b-186">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-186">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="f3b1b-187">值<xref:System.Windows.DependencyProperty.UnsetValue>屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-187">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="f3b1b-188">值標記中設定旗標為`flags`參數會設定的布林值<xref:System.Windows.FrameworkPropertyMetadata>屬性，使其符合<xref:System.Windows.FrameworkPropertyMetadataOptions>旗標的名稱，以`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-188">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="f3b1b-189">中繼資料尚未套用至特定的屬性系統作業時，您仍可以變更在中繼資料，屬性的值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-189">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-190">下列範例會呼叫這個建構函式簽章：</span><span class="sxs-lookup"><span data-stu-id="f3b1b-190">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f3b1b-191">
            <paramref name="defaultValue" /> 設定為 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-191">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="f3b1b-192">相依性屬性的預設值，通常為特定型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-192">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="f3b1b-193">中繼資料選項旗標 (<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 值的組合)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-193">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="f3b1b-194">這些選項會指定相依性屬性與系統互動的特性，例如版面配置或資料繫結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-194">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="f3b1b-195">當屬性的有效值變更時，便會呼叫屬性系統之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-195">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="f3b1b-196">當屬性系統針對這個相依性屬性呼叫 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 時，便會呼叫之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-196">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> on this dependency property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="f3b1b-197">
            <see langword="true" /> 表示防止屬性系統為套用這個中繼資料的屬性顯示動畫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-197">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="f3b1b-198">如果嘗試顯示這類屬性的動畫，則屬性系統會發出執行階段例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-198">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="f3b1b-199">
            <see langword="false" /> 表示允許建立屬性的動畫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-199">
              <see langword="false" /> to permit animating the property.</span>
          </span>
          <span data-ttu-id="f3b1b-200">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-200">The default is <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-201">使用提供的預設值和架構中繼資料選項、指定的回呼，以及可用以防止屬性動畫的布林值，初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-201">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-202">提供值的型別`defaultValue`必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-202">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="f3b1b-203">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-203">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="f3b1b-204">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-204">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="f3b1b-205">值<xref:System.Windows.DependencyProperty.UnsetValue>屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-205">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="f3b1b-206">`isAnimationProhibited`參數設定的初始值<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>屬性宣告直接基底<xref:System.Windows.UIPropertyMetadata>類別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-206">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="f3b1b-207">值標記中設定旗標為`flags`參數會設定的布林值<xref:System.Windows.FrameworkPropertyMetadata>屬性，使其符合<xref:System.Windows.FrameworkPropertyMetadataOptions>旗標的名稱，以`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-207">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="f3b1b-208">中繼資料尚未套用至特定的屬性系統作業時，您仍可以變更在中繼資料，屬性的值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-208">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-209">下列範例會呼叫這個建構函式簽章：</span><span class="sxs-lookup"><span data-stu-id="f3b1b-209">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f3b1b-210">
            <paramref name="defaultValue" /> 設定為 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-210">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, valuetype System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited, System::Windows::Data::UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
        <Parameter Name="defaultUpdateSourceTrigger" Type="System.Windows.Data.UpdateSourceTrigger" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="f3b1b-211">相依性屬性的預設值，通常為特定型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-211">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="f3b1b-212">中繼資料選項旗標 (<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 值的組合)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-212">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="f3b1b-213">這些選項會指定相依性屬性與系統互動的特性，例如版面配置或資料繫結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-213">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="f3b1b-214">當屬性的有效值變更時，便會呼叫屬性系統之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-214">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="f3b1b-215">當屬性系統針對這個屬性呼叫 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 時，便會呼叫之處理常式實作的參考。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-215">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="f3b1b-216">
            <see langword="true" /> 表示防止屬性系統為套用這個中繼資料的屬性顯示動畫。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-216">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="f3b1b-217">如果嘗試顯示這類屬性的動畫，則屬性系統會發出執行階段例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-217">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="f3b1b-218">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-218">The default is <see langword="false" />.</span>
          </span>
        </param>
        <param name="defaultUpdateSourceTrigger">
          <span data-ttu-id="f3b1b-219">在套用這個屬性的繫結、且這些繫結的 <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 是設為 <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 時所使用的 <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-219">The <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for this property are applied that have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-220">使用提供的預設值和架構中繼資料選項、指定的回呼、可用以防止屬性動畫的布林值，以及資料繫結更新觸發程序的預設值，初始化 <see cref="T:System.Windows.FrameworkPropertyMetadata" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-220">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-221">提供值的型別`defaultValue`必須符合或與原始的相依性屬性會套用這個中繼資料登錄中指定的型別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-221">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="f3b1b-222">因為在編譯期間無法偵測不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-222">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="f3b1b-223">對屬性系統之前不會評估屬性的有效值執行階段，因此預設值類型/屬性型別不相符的結果是執行階段錯誤。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-223">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="f3b1b-224">值<xref:System.Windows.DependencyProperty.UnsetValue>屬性系統中, 具有特殊意義，也不能做為相依性屬性的預設值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-224">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="f3b1b-225">`isAnimationProhibited`參數設定的初始值<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>屬性宣告直接基底<xref:System.Windows.UIPropertyMetadata>類別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-225">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="f3b1b-226">如需繫結的更新來源行為的詳細資訊，請參閱[資料繫結概觀](~/docs/framework/wpf/data/data-binding-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-226">For more information about the update source behavior for bindings, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="f3b1b-227">值標記中設定旗標為`flags`參數會設定的布林值<xref:System.Windows.FrameworkPropertyMetadata>屬性，使其符合<xref:System.Windows.FrameworkPropertyMetadataOptions>旗標的名稱，以`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-227">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="f3b1b-228">中繼資料尚未套用至特定的屬性系統作業時，您仍可以變更在中繼資料，屬性的值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-228">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f3b1b-229">
            <paramref name="defaultValue" /> 設定為 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-229">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName="AffectsArrange">
      <MemberSignature Language="C#" Value="public bool AffectsArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsArrange { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-230">取得或設定值，指出相依性屬性在配置引擎作業期間，是否可能會影響排列傳遞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-230">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-231">如果這個中繼資料所在的相依性屬性可能會影響排列傳遞則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-231">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f3b1b-232">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-232">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-233"><xref:System.Windows.FrameworkElement> 和<xref:System.Windows.FrameworkContentElement>包含實作<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>，監視存在的項目的所有相依性屬性的有效值變更。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-233"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="f3b1b-234">此邏輯的一部分，變更生效的相依性屬性值，並有中繼資料與<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>設`true`會初始化延後的要求，使該元素的視覺效果 (呼叫<xref:System.Windows.UIElement.InvalidateArrange%2A>)。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-234">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span></span> <span data-ttu-id="f3b1b-235">因為此 WPF 架構層級實作已備妥，您通常不需要相依性屬性，以尋找<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>，除非您大幅遭到取代，或修改的 WPF 架構層級配置行為。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-235">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="f3b1b-236">自訂<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>實作可能會選擇將類似的行為相依性屬性變更為其中<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="f3b1b-237">在衍生類別的屬性<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-237">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-238">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-238">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-239">不過，呼叫的一部分，會使用中繼資料之後<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-239">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-240">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-240">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-241">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-241">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-242">這個類別的成員不常使用中[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-242">Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-243">下列範例會取得從各種不同的相依性屬性欄位的預設中繼資料、 查詢的各種值<xref:System.Windows.FrameworkPropertyMetadata>屬性，並填入資料表，以實作 「 中繼資料瀏覽器 」 使用的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-243">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-244">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-244">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsMeasure { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-245">取得或設定值，指出相依性屬性在配置引擎作業期間，是否可能會影響測量行程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-245">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-246">如果這個中繼資料所在的相依性屬性可能會影響測量行程，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-246">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f3b1b-247">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-247">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-248"><xref:System.Windows.FrameworkElement> 和<xref:System.Windows.FrameworkContentElement>包含實作<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>，監視存在的項目的所有相依性屬性的有效值變更。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-248"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="f3b1b-249">此邏輯的一部分，變更生效的相依性屬性值，並有中繼資料與<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>設`true`會初始化延後的要求，使該元素的視覺效果。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-249">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="f3b1b-250">因為此 WPF 架構層級實作已備妥，您通常不需要相依性屬性，以尋找<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>，除非您大幅遭到取代，或修改的 WPF 架構層級配置行為。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-250">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="f3b1b-251">自訂<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>實作可能會選擇將類似的行為相依性屬性變更為其中<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="f3b1b-252">在衍生類別的屬性<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-252">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-253">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-253">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-254">不過，呼叫的一部分，會使用中繼資料之後<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-254">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-255">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-255">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-256">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-256">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-257">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-257">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-258">下列範例會取得從各種不同的相依性屬性欄位的預設中繼資料、 查詢的各種值<xref:System.Windows.FrameworkPropertyMetadata>屬性，並填入資料表，以實作 「 中繼資料瀏覽器 」 使用的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-258">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-259">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-259">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentArrange">
      <MemberSignature Language="C#" Value="public bool AffectsParentArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentArrange { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-260">取得或設定值，指出相依性屬性在配置引擎作業期間，是否可能會影響其父項目配置的排列傳遞。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-260">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-261">如果這個中繼資料所在的相依性屬性可能會特別影響其父項目的排列傳遞，則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-261">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f3b1b-262">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-262">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-263"><xref:System.Windows.FrameworkElement> 和<xref:System.Windows.FrameworkContentElement>包含實作<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>，監視存在的項目的所有相依性屬性的有效值變更。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-263"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="f3b1b-264">此邏輯的一部分，變更生效的相依性屬性值，並有中繼資料與<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>設`true`會初始化延後的要求，使視覺效果的父項目。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-264">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span>  
  
 <span data-ttu-id="f3b1b-265">一般而言，您不需要來報告變更的<xref:System.Windows.FrameworkElement>父項目使用屬性<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>因為項目本身會已經有它自己<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>為`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-265">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`.</span></span> <span data-ttu-id="f3b1b-266">通常已足夠，因為子元素中的變更通常起始父代排列在適當時。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-266">That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</span></span> <span data-ttu-id="f3b1b-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> 有時會用<xref:System.Windows.FrameworkContentElement>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="f3b1b-268">在此情況下，子系項目集合的屬性，但有<xref:System.Windows.FrameworkContentElement>衍生的類別不會控制自己的轉譯。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-268">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="f3b1b-269">轉譯由<xref:System.Windows.FrameworkElement>做為內容主機的父項目。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-269">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="f3b1b-270">比方說的值變更<xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType>失效附加的屬性的子元素所排列的父代，因為必須變更子系的父系中的位置。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-270">For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</span></span> <span data-ttu-id="f3b1b-271">因此，<xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType>附加的屬性的中繼資料位置<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-271">Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span> <span data-ttu-id="f3b1b-272">另一個例子是<xref:System.Windows.Controls.Control.Padding%2A>; 當此屬性的變更，父代可能會變更位置的子系，視可用空間而定。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-272">Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.</span></span>  
  
 <span data-ttu-id="f3b1b-273">因為此 WPF 架構層級實作已備妥，您通常不需要相依性屬性，以尋找<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>，除非您大幅遭到取代，或修改的 WPF 架構層級配置行為。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-273">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="f3b1b-274">自訂<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>實作可能會選擇將類似的行為相依性屬性變更為其中<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="f3b1b-275">任何屬性衍生的類別<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-275">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-276">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-276">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-277">不過，呼叫的一部分，會使用中繼資料之後<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-277">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-278">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-278">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-279">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-279">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-280">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-280">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-281">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-281">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsParentMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentMeasure { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-282">取得或設定值，指出相依性屬性在配置引擎作業期間，是否可能會影響其父項目配置的測量行程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-282">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-283">如果這個中繼資料所在的相依性屬性可能會明顯影響父項目的測量行程則為 <see langword="true" />，否則為 <see langword="false" />。預設為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-283">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <see langword="false" />.The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-284"><xref:System.Windows.FrameworkElement> 和<xref:System.Windows.FrameworkContentElement>包含實作<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>，監視存在的項目的所有相依性屬性的有效值變更。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-284"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="f3b1b-285">此邏輯的一部分，變更生效的相依性屬性值，並有中繼資料與<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>設`true`會初始化延後的要求，使視覺效果的父項目。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-285">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span> <span data-ttu-id="f3b1b-286">因為此 WPF 架構層級實作已備妥，您通常不需要相依性屬性，以尋找<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>，除非您大幅遭到取代，或修改的 WPF 架構層級配置行為。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-286">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="f3b1b-287">一般而言，您不需要來報告變更的<xref:System.Windows.FrameworkElement>父項目使用屬性<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>因為項目本身會已經有它自己<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>為`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-287">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`.</span></span> <span data-ttu-id="f3b1b-288">通常已足夠，因為子元素中的變更通常會起始時適當的父量值傳遞。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-288">That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</span></span> <span data-ttu-id="f3b1b-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> 有時會用<xref:System.Windows.FrameworkContentElement>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="f3b1b-290">在此情況下，子系項目集合的屬性，但有<xref:System.Windows.FrameworkContentElement>衍生的類別不會控制自己的轉譯。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-290">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="f3b1b-291">轉譯由<xref:System.Windows.FrameworkElement>做為內容主機的父項目。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-291">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="f3b1b-292">比方說的值變更<xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType>是被子元素的屬性會使量值的父代，因為段落的相對間距可能變更，可能會增加或減少內容主機大小。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-292">For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</span></span> <span data-ttu-id="f3b1b-293">因此，<xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType>屬性的中繼資料位置<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-293">Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="f3b1b-294">相依性屬性的變更也經常尋找內容主機項目位置<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>是`true`，內容主機轉譯邏輯的一部分。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-294">Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic.</span></span> <span data-ttu-id="f3b1b-295">比方說，<xref:System.Windows.Controls.TextBox>項目必須回應某些變更可能會要求的文字中的週框方塊<xref:System.Windows.Controls.TextBox>本身變更。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-295">For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.</span></span>  
  
 <span data-ttu-id="f3b1b-296">自訂<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>實作可能會選擇將類似的行為相依性屬性變更為其中<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="f3b1b-297">任何屬性衍生的類別<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-297">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-298">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-298">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-299">不過，呼叫的一部分，會使用中繼資料之後<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-299">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-300">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-300">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-301">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-301">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-302">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-302">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-303">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-303">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsRender">
      <MemberSignature Language="C#" Value="public bool AffectsRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsRender { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-304">取得或設定值，指出相依性屬性是否可能影響一般的版面配置，而不會特別影響排列或測量，但可能需要重新繪製。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-304">Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-305">如果這個中繼資料所在的相依性屬性會影響呈現，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-305">
              <see langword="true" /> if the dependency property on which this metadata exists affects rendering; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f3b1b-306">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-306">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-307"><xref:System.Windows.FrameworkElement> 和<xref:System.Windows.FrameworkContentElement>包含實作<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>，監視存在的項目的所有相依性屬性的有效值變更。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-307"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="f3b1b-308">此邏輯的一部分，變更生效的相依性屬性值，並有中繼資料與<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>設`true`會初始化延後的要求，使該元素的視覺效果。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-308">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="f3b1b-309">因為此 WPF 架構層級實作已備妥，您通常不需要相依性屬性，以尋找<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>，除非您大幅遭到取代，或修改的 WPF 架構層級配置行為。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-309">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="f3b1b-310">自訂<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>實作可能會選擇將類似的行為相依性屬性變更為其中<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.</span></span>  
  
 <span data-ttu-id="f3b1b-311">任何屬性衍生的類別<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-311">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-312">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-312">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-313">不過，呼叫的一部分，會使用中繼資料之後<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-313">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-314">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-314">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-315">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-315">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-316">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-316">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-317">下列範例會取得從各種不同的相依性屬性欄位的預設中繼資料、 查詢的各種值<xref:System.Windows.FrameworkPropertyMetadata>屬性，並填入資料表，以實作 「 中繼資料瀏覽器 」 使用的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-317">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-318">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-318">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="BindsTwoWayByDefault">
      <MemberSignature Language="C#" Value="public bool BindsTwoWayByDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsTwoWayByDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsTwoWayByDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsTwoWayByDefault { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-319">取得或設定值，指出屬性是否預設雙向繫結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-319">Gets or sets a value that indicates whether the property binds two-way by default.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-320">
            <see langword="true" /> 如果這個中繼資料所在的相依性屬性預設雙向繫結。否則， <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-320">
              <see langword="true" /> if the dependency property on which this metadata exists binds two-way by default; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f3b1b-321">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-321">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-322">沒有這個屬性被`true`，更新繫結預設為單向，根據的預設行為<xref:System.Windows.Data.Binding>建構函式或對等項目[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]語法。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-322">In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="f3b1b-323">在現有的項目，您通常會發現這個屬性設定為`true`同時報告的狀態，並是可修改的使用者動作，例如相依性屬性的中繼資料中<xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-323">In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="f3b1b-324">這個屬性只在一般情況下報告的相依性屬性的預設繫結更新特性。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-324">This property only reports the default binding update characteristics of the dependency property in general.</span></span> <span data-ttu-id="f3b1b-325">任何繫結設定為執行個體上的這個屬性可以在本機設定<xref:System.Windows.Data.Binding.Mode%2A>繫結屬性和變更這個預設值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-325">Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.</span></span>  
  
 <span data-ttu-id="f3b1b-326">任何屬性衍生的類別<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-326">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-327">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-327">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-328">不過，呼叫的一部分，會使用中繼資料之後<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-328">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-329">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-329">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_BindsTwoWayByDefault"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-330">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-330">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-331">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-331">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-332">下列範例會取得從各種不同的相依性屬性欄位的預設中繼資料、 查詢的各種值<xref:System.Windows.FrameworkPropertyMetadata>屬性，並填入資料表，以實作 「 中繼資料瀏覽器 」 使用的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-332">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-333">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-333">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="DefaultUpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultUpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger DefaultUpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-334">取得或設定當套用具有這個中繼資料 (且 <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 設為 <see cref="T:System.Windows.Data.UpdateSourceTrigger" />) 之屬性的繫結時，所要使用的預設 <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-334">Gets or sets the default for <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for the property with this metadata are applied, which have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-335">列舉型別的值，而非 <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-335">A value of the enumeration, other than <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-336">在衍生類別的屬性<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-336">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-337">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-337">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-338">不過，呼叫的一部分，會使用中繼資料之後<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-338">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-339">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-339">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_DefaultUpdateSourceTrigger"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-340">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-340">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-341">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-341">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f3b1b-342">這個屬性已設為 <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />。當繫結要求時，您所設定的值應該要成為預設值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-342">This property is set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; the value you set is supposed to become the default when requested by bindings.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-343">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-343">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public bool Inherits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherits" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherits As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherits { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-344">取得或設定值，指出相依性屬性的值是否為可繼承。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-344">Gets or sets a value that indicates whether the value of the dependency property is inheritable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-345">如果可以繼承這個屬性的值則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-345">
              <see langword="true" /> if the property value is inheritable; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f3b1b-346">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-346">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-347">屬性值繼承是一項功能[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]屬性系統，在 WPF 架構層級，讓特定相依性屬性可以在本機設定的項目或附近的根目錄[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]項目樹狀結構，然後將其繼承的值也會包含該屬性的子項目之邏輯樹狀結構內的所有項目。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-347">Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</span></span> <span data-ttu-id="f3b1b-348">根據預設，未啟用屬性值繼承，且啟用一些效能隱含作用。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-348">Property value inheritance is not enabled by default, and enabling it does have some performance implications.</span></span> <span data-ttu-id="f3b1b-349">如需詳細資訊，請參閱[屬性值繼承](~/docs/framework/wpf/advanced/property-value-inheritance.md)。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-349">For details, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f3b1b-350">雖然繼承屬性值可能會顯示適用於非附加相依性屬性，請透過在執行階段樹狀目錄中的某些物件部門附加屬性的繼承行為是未定義。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-350">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</span></span> <span data-ttu-id="f3b1b-351">一律使用<xref:System.Windows.DependencyProperty.RegisterAttached%2A>註冊屬性，指定<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>中繼資料中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-351">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span>  
  
 <span data-ttu-id="f3b1b-352">在衍生類別的屬性<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-352">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-353">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-353">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-354">不過，呼叫的一部分，會使用中繼資料之後<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-354">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-355">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-355">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Inherits"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-356">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-356">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-357">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-357">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-358">下列範例會取得從各種不同的相依性屬性欄位的預設中繼資料、 查詢的各種值<xref:System.Windows.FrameworkPropertyMetadata>屬性，並填入資料表，以實作 「 中繼資料瀏覽器 」 使用的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-358">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-359">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-359">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsDataBindingAllowed">
      <MemberSignature Language="C#" Value="public bool IsDataBindingAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataBindingAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDataBindingAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataBindingAllowed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-360">取得值，指出相依性屬性是否支援資料繫結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-360">Gets a value that indicates whether data binding is supported for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-361">如果套用這個中繼資料的相依性屬性支援資料繫結則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-361">
              <see langword="true" /> if data binding is supported on the dependency property to which this metadata applies; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f3b1b-362">預設值為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-362">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-363">這個屬性會報告`false`其中兩個可能的狀況： 相依性屬性是唯讀的 （如報告相依性屬性的識別項，不是中繼資料中），因為其中一個相依性屬性的資料繫結不允許的值另一個中繼資料屬性<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>，設為`true`此中繼資料中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-363">This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata.</span></span> <span data-ttu-id="f3b1b-364">這個屬性公開為方便起見，讓呼叫端不需要同時檢查<xref:System.Windows.DependencyProperty.ReadOnly%2A>和<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-364">This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span>  
  
 <span data-ttu-id="f3b1b-365">如果您嘗試建立其他的讀/寫屬性應該不支援資料繫結所指定的中繼資料，請指定此旗標<xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable>(請注意有些微的命名慣例差異與<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>)。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-365">If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span></span>  
  
<a name="xamlTextUsage_IsDataBindingAllowed"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-366">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-366">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-367">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-367">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f3b1b-368">下列範例會取得從各種不同的相依性屬性欄位的預設中繼資料、 查詢的各種值<xref:System.Windows.FrameworkPropertyMetadata>屬性，並填入資料表，以實作 「 中繼資料瀏覽器 」 使用的資訊。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-368">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsNotDataBindable">
      <MemberSignature Language="C#" Value="public bool IsNotDataBindable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotDataBindable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNotDataBindable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotDataBindable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-369">取得或設定值，指出相依性屬性是否支援資料繫結。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-369">Gets or sets a value that indicates whether the dependency property supports data binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-370">如果屬性不支援資料繫結則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-370">
              <see langword="true" /> if the property does not support data binding; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f3b1b-371">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-371">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-372">請注意，此中繼資料屬性設定為`true`特別針對不支援資料繫結，儘管讀寫屬性的屬性。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-372">Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties.</span></span> <span data-ttu-id="f3b1b-373">預期是，在其中宣告相依性屬性的大部分情況下，資料繫結想要使用，因為資料繫結是其中一個重要的案例，其中的相依性屬性是很有用。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-373">The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</span></span> <span data-ttu-id="f3b1b-374">不同於<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>，這並不只是變更稍後可變更特定的繫結的預設值。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-374">Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding.</span></span> <span data-ttu-id="f3b1b-375">設定這個屬性`true`相依性屬性的中繼資料中的中繼資料將會停用透過運算式將值套用至該相依性屬性的所有繫結。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-375">Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</span></span>  
  
 <span data-ttu-id="f3b1b-376">唯讀相依性屬性不支援資料繫結 （因為它們沒有 setter 可套用變更的值），但仍會報告`false`如<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-376">Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span> <span data-ttu-id="f3b1b-377">這是因為屬性對應到<xref:System.Windows.FrameworkPropertyMetadataOptions>值將會報告使用方式中繼資料已實際建立，而不是一律報告結束結果行為的屬性命名可能會隱含的權限的同位檢查。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-377">This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</span></span> <span data-ttu-id="f3b1b-378">若要判斷給定的相依性屬性是否允許資料繫結，您應該通常檢查<xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>改為。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-378">To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead.</span></span> <span data-ttu-id="f3b1b-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> 同時檢查方便<xref:System.Windows.DependencyProperty.ReadOnly%2A>和<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>成單一作業，而產生預期的結果。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.</span></span>  
  
 <span data-ttu-id="f3b1b-380">在衍生類別的屬性<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-380">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-381">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-381">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-382">不過，呼叫的一部分，會使用中繼資料之後<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-382">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-383">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-383">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_IsNotDataBindable"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-384">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-384">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-385">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-385">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-386">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-386">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="Journal">
      <MemberSignature Language="C#" Value="public bool Journal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Journal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberSignature Language="VB.NET" Value="Public Property Journal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Journal { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-387">取得或設定值，指出此屬性是否包含日誌記錄資訊，其為應用程式可以或應該儲存為日誌記錄實作的一部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-387">Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-388">如果日誌記錄應該在這個中繼資料所套用的目標相依性屬性上執行，則為 <see langword="true" />；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-388">
              <see langword="true" /> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f3b1b-389">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-389">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-390">在衍生類別的屬性<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-390">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-391">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-391">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-392">不過，呼叫的一部分，會使用中繼資料之後<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-392">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-393">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-393">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Journal"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-394">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-394">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-395">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-395">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-396">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-396">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="T:System.Windows.Navigation.JournalEntry" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata">
          <span data-ttu-id="f3b1b-397">要合併的基底中繼資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-397">The base metadata to merge.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="f3b1b-398">要套用這個中繼資料的相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-398">The dependency property this metadata is being applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-399">啟用來源中繼資料與基底中繼資料的合併。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-399">Enables a merge of the source metadata with base metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-400">中繼資料覆寫時，為內部使用這個方法。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-400">This method is used internally when metadata is being overridden.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="f3b1b-401">類別衍生自<see cref="T:System.Windows.PropertyMetadata" />（或這特別類別） 應該覆寫這個方法，以針對任何中繼資料屬性，在他們的實作中加入這些帳戶。</span>
            <span class="sxs-lookup">
              <span data-stu-id="f3b1b-401">Classes that derive from <see cref="T:System.Windows.PropertyMetadata" /> (or this class particularly) should override this method to account for any metadata properties they have added in their implementations.</span>
            </span>
            <span data-ttu-id="f3b1b-402">比方說，您的實作可能已經加入新旗列舉值，而<see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />實作應該可以正確結合這些旗標。</span>
            <span class="sxs-lookup">
              <span data-stu-id="f3b1b-402">For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.</span>
            </span>
            <span data-ttu-id="f3b1b-403">因為基底實作會處理合併上先前的型別階層架構中已經定義的所有內容，請務必呼叫基底實作您自己的實作之前。</span>
            <span class="sxs-lookup">
              <span data-stu-id="f3b1b-403">Always call the base implementation prior to your own implementation, because the base implementation takes care of merging all the properties already defined on previous types in the hierarchy.</span>
            </span>
            <span data-ttu-id="f3b1b-404">所加入的行為<see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />中的實作<see cref="T:System.Windows.FrameworkPropertyMetadata" />在於特定的 WPF 架構層級屬性中的中繼資料，例如<see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />會併入位元或作業。</span>
            <span class="sxs-lookup">
              <span data-stu-id="f3b1b-404">The behavior added by the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> is that specific WPF framework-level properties in the metadata such as <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> are combined in a bitwise or operation.</span>
            </span>
            <span data-ttu-id="f3b1b-405">
              <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />行為也會實作行為，當您藉由呼叫覆寫現有的相依性屬性的屬性中繼資料<see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />。，使用覆寫的中繼資料<see cref="T:System.Windows.FrameworkPropertyMetadata" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="f3b1b-405">The <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> behavior also implements the behavior when you override the property metadata on an existing dependency property by calling <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />., using override metadata that is <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="f3b1b-406">已套用這個中繼資料的相依性屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-406">The dependency property to which the metadata has been applied.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="f3b1b-407">如果這是型別特定的中繼資料，則為與這個中繼資料相關聯的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-407">The type associated with this metadata if this is type-specific metadata.</span>
          </span>
          <span data-ttu-id="f3b1b-408">如果這是預設中繼資料，則這個值可能是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-408">If this is default metadata, this value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f3b1b-409">在這個中繼資料已套用至屬性時呼叫，表示要密封中繼資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-409">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-410">任何可變動性的資料結構的<xref:System.Windows.FrameworkPropertyMetadata>執行個體應該標記為當做不變時叫用此方法。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-410">Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="f3b1b-411">
              <see cref="T:System.Windows.FrameworkPropertyMetadata" />實作這個方法不超過呼叫基底實作。</span>
            <span class="sxs-lookup">
              <span data-stu-id="f3b1b-411">The <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementation of this method does nothing beyond calling the base implementation.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesInheritanceBehavior">
      <MemberSignature Language="C#" Value="public bool OverridesInheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesInheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesInheritanceBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesInheritanceBehavior { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-412">取得或設定值，這個值表示屬性值繼承評估是否應該跨越項目邏輯樹狀中的特定內容界限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-412">Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-413">如果屬性值繼承應跨越特定內容界限則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-413">
              <see langword="true" /> if the property value inheritance should span across certain content boundaries; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f3b1b-414">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-414">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-415">此中繼資料會報告跨特殊的父項目子系項目界限少見修改屬性值繼承行為。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-415">This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</span></span> <span data-ttu-id="f3b1b-416">這類界限的標準範例是內容<xref:System.Windows.Controls.Frame>，其中<xref:System.Windows.Controls.Frame>內容可能會取得獨立的存在重新載入<xref:System.Windows.Controls.Frame>。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-416">The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>.</span></span> <span data-ttu-id="f3b1b-417">所需的屬性系統行為是屬性值繼承應該周遊到的內容<xref:System.Windows.Controls.Frame>，因為這些內容可能會裝載框架的應用程式不會擁有或控制的項目。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-417">The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control.</span></span> <span data-ttu-id="f3b1b-418">指定中繼資料與<xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A>設`true`，也會為指定<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>為`true`，將會導致的屬性的中繼資料套用為可繼承即使透過<xref:System.Windows.Controls.Frame>界限或類似的界限。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-418">Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.</span></span>  
  
 <span data-ttu-id="f3b1b-419">在衍生類別的屬性<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-419">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-420">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-420">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-421">不過，呼叫的一部分，會使用中繼資料之後<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-421">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-422">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-422">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_OverridesInheritanceBehavior"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-423">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-423">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-424">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-424">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-425">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-425">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="SubPropertiesDoNotAffectRender">
      <MemberSignature Language="C#" Value="public bool SubPropertiesDoNotAffectRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="VB.NET" Value="Public Property SubPropertiesDoNotAffectRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubPropertiesDoNotAffectRender { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f3b1b-426">取得或設定值，指出相依性屬性的子屬性是否不會影響包含物件的呈現。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-426">Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f3b1b-427">如果子屬性值的變更不會影響變更後的呈現則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-427">
              <see langword="true" /> if changes to sub-property values do not affect rendering if changed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f3b1b-428">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-428">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f3b1b-429">此中繼資料的選項是相關的是參考類型，其中該類型有它自己的屬性值的相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-429">This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</span></span> <span data-ttu-id="f3b1b-430">一般而言，配置系統邏輯是假設任何具有子屬性的相依性屬性可能會影響配置，因為檢查所有的子屬性的變更會耗用更多時間比實際執行另一個呈現的傳遞。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-430">Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</span></span> <span data-ttu-id="f3b1b-431">此選項設為`true`適用於最佳化 WPF 架構層級的版面配置系統實作的效能。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-431">Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.</span></span>  
  
 <span data-ttu-id="f3b1b-432">在衍生類別的屬性<xref:System.Windows.PropertyMetadata>通常定義為讀寫物件模型中。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-432">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="f3b1b-433">這是讓可在執行個體的初始設定之後加以調整。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-433">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="f3b1b-434">不過，一旦一部分的呼叫會使用中繼資料<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>屬性系統將密封該中繼資料執行個體，傳遞的中繼資料的細節的屬性現在會被視為不變。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-434">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="f3b1b-435">嘗試設定此屬性之後<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-435">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_SubPropertiesDoNotAffectRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f3b1b-436">XAML 文字用法</span><span class="sxs-lookup"><span data-stu-id="f3b1b-436">XAML Text Usage</span></span>  
 <span data-ttu-id="f3b1b-437">這個類別的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="f3b1b-437">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f3b1b-438">中繼資料已套用至相依性屬性作業，因此中繼資料已密封，而且無法設定中繼資料的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f3b1b-438">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Freezable" />
      </Docs>
    </Member>
  </Members>
</Type>