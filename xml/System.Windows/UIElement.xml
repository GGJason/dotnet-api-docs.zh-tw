<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UIElement.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d63614a-fd48-4a83-9dc4-ea1e401b6c153108d80804c11f9fc73349a26d55755b88a3cf5f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3108d80804c11f9fc73349a26d55755b88a3cf5f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b4804968da1dfdf71c501075a5b66957b54f2e8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/27/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 是以 Windows Presentation Foundation (WPF) 項目和基本呈現方式特性為建置基礎之 WPF 核心層級實作的基底類別。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 提供項目配置的特性，以及公開虛擬衍生類別的方法可以覆寫時，可能會影響轉譯行為的項目和其子項目配置的起始點。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Much of the input and focusing behavior for elements in general is also defined in the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> class.</source>
          <target state="translated">大部分的輸入和焦點行為項目的一般情況下也會定義在<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>This includes the events for keyboard, mouse and stylus input, and related status properties.</source>
          <target state="translated">這包括鍵盤、 滑鼠及手寫筆輸入及相關的狀態屬性的事件。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</source>
          <target state="translated">其中許多事件會路由的事件，以及許多輸入相關的事件都有兩個反昇路由版本，以及通道事件的版本。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>These paired events are typically the events of greatest interest to control authors.</source>
          <target state="translated">這些配對的事件通常是最大控制項作者感興趣的事件。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> also includes <ph id="ph2">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> that relate to the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> event model, including methods that can raise specified routed events that are sourced from an element instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 也包含<ph id="ph2">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph>相關的<ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>事件模型，包括可以引發的方法所指定路由傳送來自於項目執行個體的事件。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>In terms of architecture, <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> can be considered roughly equivalent to a window handle in <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> programming, or an Element in <ph id="ph3">[!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)]</ph> programming.</source>
          <target state="translated">就架構而言，<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>可以視為約略相當於視窗控制代碼，以<ph id="ph2">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph>程式設計中或中的項目<ph id="ph3">[!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)]</ph>程式設計。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> is a base element at the WPF core level.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 是基底的項目，在 WPF 核心層級。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> has the following capabilities that are specifically defined by the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> class:</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>具有下列功能，特別由定義<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>類別：</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Can render as a child element (<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> derives from <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>, a high level graphics class)</source>
          <target state="translated">可以轉譯為子元素 (<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>衍生自<ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>，高的層級圖形類別)</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Contains logic that is used to size and position possible child elements of a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> (when interpreted by a layout system)</source>
          <target state="translated">包含用於大小和位置可能子項目數的邏輯<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>（當解譯版面配置系統）</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)</source>
          <target state="translated">可以回應使用者輸入 （包括控制項的位置輸入傳送至事件路由傳送，或將命令路由，其處理透過）</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Can raise routed events that travel a route through the logical element tree</source>
          <target state="translated">可以提高路由的事件的路由邏輯項目樹狀結構</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Supports some aspects of the animation system</source>
          <target state="translated">支援動畫系統的某些層面，</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> is the WPF framework-level implementation class that builds on <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>, and adds specific interactions with the WPF framework level.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 是為基礎的 WPF 架構層級實作類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>，並將特定的 WPF 架構層級互動。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> adds and defines the following capabilities:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 新增並定義下列功能：</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Additional framework-specific layout characteristics</source>
          <target state="translated">其他架構特定配置的特性</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Support for richer metadata reporting on properties</source>
          <target state="translated">報告內容的中繼資料更豐富的支援</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Class-specific implementation of certain input base classes and their attached properties or attached events</source>
          <target state="translated">輸入基底類別和其附加的屬性的特定類別的特定實作，或附加事件</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Style support</source>
          <target state="translated">樣式支援</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Further animation support</source>
          <target state="translated">進一步的動畫支援</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Another related class is <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">另一個相關的類別是<ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> class implements many of the same members as does <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>; the difference between these two classes has to do with their intended place in the overall content model.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>類別會實作許多相同的成員沒有<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>; 並使用其預期將放在整體內容模型中對這兩個類別之間的差異。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>通常會在衍生的類別定義相對固定的內容模型，這表示有一些限制哪些項目可能會在標記中的子項目。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>There might be capacity for taking less restrictive child content in a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, but that capacity is typically centralized in designated content properties.</source>
          <target state="translated">可能會花費較不嚴格的子內容的容量<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>，但該容量通常會集中在指定的內容屬性中。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>A <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>衍生的類別通常不是內容，以支援的案例，例如流程格式的文件相關的嚴格。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> state affects all input handling by that element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> 狀態會影響所有的項目所處理的輸入。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.</source>
          <target state="translated">不會顯示的項目不會參與點擊測試，而不會收到輸入的事件，即使滑鼠經過範圍將項目如果可以看見。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.#ctor">
          <source>Creating a new instance that is actually of type <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> is uncommon in application code, because <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> is a base element.</source>
          <target state="translated">建立的新執行個體實際上是型別<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>是應用程式程式碼中不常發生因為<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>是基底的項目。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.#ctor">
          <source>See <bpt id="p1">[</bpt>Base Elements Overview<ept id="p1">](~/docs/framework/wpf/advanced/base-elements-overview.md)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>基底項目概觀<ept id="p1">](~/docs/framework/wpf/advanced/base-elements-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Windows.UIElement">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">加入所指定路由事件的路由事件處理常式，會將此處理常式加入目前項目的處理常式集合中。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>An identifier for the routed event to be handled.</source>
          <target state="translated">要處理的路由事件識別項。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>A reference to the handler implementation.</source>
          <target state="translated">處理常式實作的參考。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">加入所指定路由事件的路由事件處理常式，會將此處理常式加入目前項目的處理常式集合中。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">您可以加入相同的處理常式事件多次，而不會引發例外狀況。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">不過，此處理常式實際叫用時處理事件的多次。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">因此，請考慮如何這種行為可能會有副作用，都應該在處理常式實作。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">您通常使用這個方法來提供的 「 加入 」 存取子的實作<ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph>事件的自訂路由事件的存取模式。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>An identifier for the routed event to be handled.</source>
          <target state="translated">要處理的路由事件識別項。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>A reference to the handler implementation.</source>
          <target state="translated">處理常式實作的參考。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示註冊處理常式，以便即使路由事件在其事件資料中標記為已處理，仍會叫用該處理常式。<ph id="ph2">&lt;see langword="false" /&gt;</ph> 表示以預設條件註冊處理常式，也就是如果路由事件已經標記為已處理，則不會叫用該處理常式。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Do not routinely ask to rehandle a routed event.</source>
          <target state="translated">請勿定期要求重新處理路由事件。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">加入所指定路由事件的路由事件處理常式，會將此處理常式加入目前項目的處理常式集合中。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Specify <ph id="ph1">&lt;paramref name="handledEventsToo" /&gt;</ph> as <ph id="ph2">&lt;see langword="true" /&gt;</ph> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</source>
          <target state="translated">將 <ph id="ph1">&lt;paramref name="handledEventsToo" /&gt;</ph> 指定為 <ph id="ph2">&lt;see langword="true" /&gt;</ph>，以針對已經由事件路由上另一個項目標記為已處理的路由事件，叫用提供的處理常式。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Processing low-level input events in a practical way is a complex task.</source>
          <target state="translated">在可行的方式處理低階輸入是一個複雜的工作。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</source>
          <target state="translated">許多控制項實作特定事件標示為已處理，而取代為另一個更具直覺性事件的行為。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</source>
          <target state="translated">一般而言，控制項只會將平台輸入的事件，為已處理，如果沒有這麼做一些設計用意。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</source>
          <target state="translated">在某些情況下，這些設計目的不可能的輸入事件的特定處理的需要。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>It is for these scenarios that registering handlers with <ph id="ph1">`handledEventsToo`</ph> as <ph id="ph2">`true`</ph> is appropriate.</source>
          <target state="translated">這些案例是該註冊處理常式取代<ph id="ph1">`handledEventsToo`</ph>為<ph id="ph2">`true`</ph>適合。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>But you should not do this routinely.</source>
          <target state="translated">但您不應該這麼例行性。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</source>
          <target state="translated">叫用處理常式以回應所有事件，即使處理將會使得您自己的應用程式事件處理邏輯。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You may see a decrease in performance if the handler logic is substantial.</source>
          <target state="translated">如果處理常式邏輯的很大，可能會看到效能降低。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</source>
          <target state="translated">您應該保留附加尚未處理的情況下，您已經發現特定控制項所處理的事件，您仍然想要處理的應用程式邏輯在開發程序的事件處理常式的使用。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</source>
          <target state="translated">避免處理行為的某些事件控制組合類別的另一個技術是使用該事件預覽替代方案。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>For example, if <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> is marked handled by class handling, you might be able to add handlers for <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> instead.</source>
          <target state="translated">例如，如果<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>標示為已處理的類別處理，您可以加入處理常式<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>改為。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">您可以加入相同的處理常式事件多次，而不會引發例外狀況。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">不過，此處理常式實際叫用時處理事件的多次。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">因此，請考慮如何這種行為可能會有副作用，都應該在處理常式實作。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">您通常使用這個方法來提供的 「 加入 」 存取子的實作<ph id="ph1">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph>事件的自訂路由事件的存取模式。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>The following example implements a handler invoked on the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph> event on a page that attaches a defined handler to one of the named elements on the page using <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">下列範例會實作上叫用的處理常式<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Initialized&gt;</ph>將定義的處理常式附加至其中一個具名的項目頁面使用頁面上的事件<ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
          <source>This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</source>
          <target state="translated">會叫用這個處理常式，即使此路由上的另一個項目標示為已處理到達路由處理項目之前共用的事件資料。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>The event route that handlers are added to.</source>
          <target state="translated">加入處理常式的事件路由。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>The event data that is used to add the handlers.</source>
          <target state="translated">用於加入處理常式的事件資料。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>This method uses the <ph id="ph1">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> property of the event data to create the handlers.</source>
          <target state="translated">這個方法會使用事件資料的 <ph id="ph1">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> 屬性來建立處理常式。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>Adds handlers to the specified <ph id="ph1">&lt;see cref="T:System.Windows.EventRoute" /&gt;</ph> for the current <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> event handler collection.</source>
          <target state="translated">針對目前的 <ph id="ph1">&lt;see cref="T:System.Windows.EventRoute" /&gt;</ph> 事件處理常式集合，將處理常式加入至指定的 <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>This method can be used by content host elements (either those that implement <ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph> or those that don't) to add handlers for child elements to the <ph id="ph2">&lt;xref:System.Windows.EventRoute&gt;</ph>.</source>
          <target state="translated">內容主機項目可以使用這個方法 (可能是指實作<ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph>或未) 若要加入的子項目，來處理常式<ph id="ph2">&lt;xref:System.Windows.EventRoute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>Ordinarily, this is not required for <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, because handlers are automatically added for all elements found in a completed logical tree.</source>
          <target state="translated">通常，這是不必要的<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>，因為處理常式會自動新增為已完成的邏輯樹狀結構中找到的所有項目。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>However, in some cases where <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> are mixed in templated trees, intervening elements that came from the template need to be added to a route.</source>
          <target state="translated">不過，在某些情況下其中<ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>樣板化的樹狀結構中, 介來自要新增到路由範本需要的項目中混用。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
          <source>Both <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> support a version of this method.</source>
          <target state="translated">同時<ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>支援這個方法的版本。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</source>
          <target state="translated">取得或設定此元素是否可以當做拖放操作目標的值。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AllowDrop">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element can be used as the target of a drag-and-drop operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個項目可以用來做為拖放作業的目標則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>The default value is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值是 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">拖放作業依預設，未啟用，且必須藉由設定刻意啟用<ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph>至<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> or any other base element class.</source>
          <target state="translated">超出此基本設定，拖放行為完全實作特定，不由定義<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>或其他類型的基底項目類別。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Certain controls, for example, <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, do have a default behavior.</source>
          <target state="translated">某些控制項，例如<ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>，沒有預設行為。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>For more information on drag and drop, see <bpt id="p1">[</bpt>Drag and Drop Overview<ept id="p1">](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept>.</source>
          <target state="translated">如需拖放的詳細資訊，請參閱<bpt id="p1">[</bpt>拖曳和卸除概觀<ept id="p1">](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> overrides the metadata for this dependency property in its implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 覆寫這個實作中的相依性屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Specifically, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> designates this property to allow property value inheritance (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> is <ph id="ph3">`true`</ph> in metadata).</source>
          <target state="translated">具體來說，<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>指定這個屬性可讓屬性值繼承 (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph>是<ph id="ph3">`true`</ph>中繼資料中)。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Property value inheritance in this context means that if there are child elements with no other value for <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system.</source>
          <target state="translated">在此內容中的屬性值繼承表示，如果有任何其他值作為具有子元素<ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph>指派透過本機值或最接近的父元素的值指派 （同樣地，有兩種預設的樣式，此值與樣式值或為區域數值），然後從父元素的值會指派給所有先前未指派的子元素屬性系統。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as <ph id="ph1">`false`</ph>.</source>
          <target state="translated">實際上這表示您可以指定是否要在根項目，允許卸除作業，並將它做為值將會傳播到所有其子項目具有未特別指派<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>The following markup example sets the <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> property <ph id="ph2">`true`</ph> using an attribute on a <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, as well as setting some other related properties that in aggregate enable that <ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> to be the target of a multiline text data object when it is dragged in.</source>
          <target state="translated">下列標記範例會設定<ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph>屬性<ph id="ph2">`true`</ph>上使用屬性<ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>，以及一些其他設定相關的屬性，以彙總，讓<ph id="ph4">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>為目標的多行文字資料物件時拖曳。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AllowDrop">
          <source>For the complete sample, see <bpt id="p1">[</bpt>Load a Dropped File Sample<ept id="p1">](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7)</ept>.</source>
          <target state="translated">如需完整範例，請參閱<bpt id="p1">[</bpt>載入卸除檔案範例<ept id="p1">](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7)</ept>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.AllowDropProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AllowDrop" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AllowDrop" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="T:System.Windows.UIElement">
          <source>Applies an animation to a specified dependency property on this element.</source>
          <target state="translated">將動畫套用至這個項目上所指定的相依性屬性。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.UIElement">
          <source>This method is sealed and cannot be overridden.</source>
          <target state="translated">這是已密封的方法，無法覆寫。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>The identifier for the property to animate.</source>
          <target state="translated">要繪製的屬性之識別項。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">控制並宣告動畫的動畫時鐘。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Applies an animation to a specified dependency property on this element.</source>
          <target state="translated">將動畫套用至這個項目上所指定的相依性屬性。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Any existing animations are stopped and replaced with the new animation.</source>
          <target state="translated">任何現有動畫都會停止並取代為新的動畫。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">若要移除屬性的動畫，指定做為該屬性的識別項<ph id="ph1">`dp`</ph>並指定<ph id="ph2">`clock`</ph>為<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">這會移除動畫和動畫的屬性設定為其基底值。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">不過，並不會停止原先相關聯的動畫時鐘。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">指派給該時鐘的其他任何動畫會繼續執行。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
          <source>In the following example, a <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> <ph id="ph2">`myAnimatedRectangle`</ph> has a particular timing animation applied to it by calling <ph id="ph3">&lt;xref:System.Windows.UIElement.ApplyAnimationClock%2A&gt;</ph> .</source>
          <target state="translated">在下列範例中， <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> <ph id="ph2">`myAnimatedRectangle`</ph>有特定的計時動畫套用至它，藉由呼叫<ph id="ph3">&lt;xref:System.Windows.UIElement.ApplyAnimationClock%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The property to animate.</source>
          <target state="translated">要製作動畫的屬性。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">控制並宣告動畫的動畫時鐘。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value of the enumeration.</source>
          <target state="translated">列舉值。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph>, which will stop any existing animation and replace with the new one.</source>
          <target state="translated">預設為 <ph id="ph1">&lt;see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /&gt;</ph>，其會停止任何現有動畫並以新動畫取代。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</source>
          <target state="translated">將動畫套用至這個項目上所指定的相依性屬性，且可以指定此屬性已經有執行中的動畫時會發生哪種情況。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">若要移除屬性的動畫，指定做為該屬性的識別項<ph id="ph1">`dp`</ph>並指定<ph id="ph2">`clock`</ph>為<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">這會移除動畫和動畫的屬性設定為其基底值。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">不過，並不會停止原先相關聯的動畫時鐘。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">指派給該時鐘的其他任何動畫會繼續執行。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AreAnyTouchesCaptured">
          <source>Gets a value that indicates whether at least one touch is captured to this element.</source>
          <target state="translated">取得值，這個值表示是否至少有一個觸控擷取至這個項目。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AreAnyTouchesCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is captured to this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果至少有一個觸控擷取至這個項目，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin">
          <source>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</source>
          <target state="translated">取得值，這個值表示是否至少有一個觸控擷取至這個項目或其視覺化樹狀結構中的任何子項目。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果至少有一個觸控擷取至這個項目或其視覺化樹狀結構中的任何子項目，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver">
          <source>Gets a value that indicates whether at least one touch is pressed over this element.</source>
          <target state="translated">取得值，這個值表示是否至少有一個觸控在這個項目上按下。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is pressed over this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果至少有一個觸控在這個項目上按下，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.AreAnyTouchesOver">
          <source>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</source>
          <target state="translated">取得值，這個值表示是否至少有一個觸控在這個項目或其視覺化樹狀結構中的任何子項目上按下。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.AreAnyTouchesOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果至少有一個觸控在這個項目或其視覺化樹狀結構中的任何子項目上按下，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.AreAnyTouchesOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>The final size that the parent computes for the child element, provided as a <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph> instance.</source>
          <target state="translated">父代為子項目計算的最終大小，提供作為 <ph id="ph1">&lt;see cref="T:System.Windows.Rect" /&gt;</ph> 執行個體。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Positions child elements and determines a size for a <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">放置子項目，並且判斷 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 的大小。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Parent elements call this method from their <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /&gt;</ph> implementation (or a WPF framework-level equivalent) to form a recursive layout update.</source>
          <target state="translated">父項目從 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /&gt;</ph> 實作 (或 WPF 架構層級對等項目) 中呼叫此方法，以形成遞迴配置更新。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>This method constitutes the second pass of a layout update.</source>
          <target state="translated">這個方法會構成配置更新的第二個階段。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>For WPF framework-level element deriving scenarios, behavior for <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> should not (and cannot, unless you shadow) be changed.</source>
          <target state="translated">WPF 架構層級項目的衍生情況下，行為<ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>變更不應該 （而且也無法，除非您陰影）。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Instead, you should override the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> implementation in your class.</source>
          <target state="translated">相反地，您應該覆寫<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>您類別中的實作。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Your <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> implementation is called internally by <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> as part of default WPF framework-level layout operations.</source>
          <target state="translated">您<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>在內部呼叫實作<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>做為預設 WPF 架構層級配置作業的一部分。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Your <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementation should also call <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> on each child element, if it has child elements.</source>
          <target state="translated">您<ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph>實作也應該呼叫<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>上每個子項目，如果它具有子項目。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>For WPF core-level element deriving scenarios, the behavior for <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> should not (and cannot, unless you shadow) be changed.</source>
          <target state="translated">WPF 核心層級項目的衍生情況下，行為<ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>變更不應該 （而且也無法，除非您陰影）。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Instead, you should override <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> in your class.</source>
          <target state="translated">相反地，您應該覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph>在您的類別。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Your <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementation is called internally by <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> as part of default WPF framework-level layout operations.</source>
          <target state="translated">您<ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph>在內部呼叫實作<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>做為預設 WPF 架構層級配置作業的一部分。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> base element class.</source>
          <target state="translated">不過，這是假設您使用 WPF 架構層級版面配置和其版面配置系統，這通常是不案例特別所衍生之 WPF 核心層級從位於項目，如果<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>基底項目類別。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Your <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementation should also call <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> on each child element, if it has child elements.</source>
          <target state="translated">您<ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph>實作也應該呼叫<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>上每個子項目，如果它具有子項目。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Note that the WPF core-level scenario implies that you are not using a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, because <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph>.</source>
          <target state="translated">請注意 WPF 核心層級案例意味著您不使用<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>衍生類別，因為<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>標誌<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Computation of WPF framework-level layout positioning in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> consists of a <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call and an <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.</source>
          <target state="translated">計算中的 WPF 架構層級版面配置定位<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>組成<ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>呼叫和<ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>During the <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call, the layout system determines an element's size requirements using a provided <ph id="ph2">&lt;xref:System.Windows.Size&gt;</ph> (<ph id="ph3">`availableSize`</ph>) argument.</source>
          <target state="translated">期間<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>呼叫，版面配置系統決定使用提供的項目大小需求<ph id="ph2">&lt;xref:System.Windows.Size&gt;</ph>(<ph id="ph3">`availableSize`</ph>) 引數。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>During the <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call, the layout system finalizes the size and position of an element's bounding box.</source>
          <target state="translated">期間<ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>呼叫，版面配置系統終結大小和項目位置的週框方塊。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>For more information, see <bpt id="p1">[</bpt>Layout<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>配置<ept id="p1">](~/docs/framework/wpf/advanced/layout.md)</ept>。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source><ph id="ph1">`availableSize`</ph> can be any number from zero to infinity.</source>
          <target state="translated"><ph id="ph1">`availableSize`</ph> 可以是零到無限大之間的數字。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Elements to be laid out return the minimum <ph id="ph1">&lt;xref:System.Windows.Size&gt;</ph> they require through the <ph id="ph2">`availableSize`</ph> parameter.</source>
          <target state="translated">若要配置的項目傳回最小值<ph id="ph1">&lt;xref:System.Windows.Size&gt;</ph>它們需要透過<ph id="ph2">`availableSize`</ph>參數。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>When a layout is first instantiated, it always receives a <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call before <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.</source>
          <target state="translated">配置第一次具現化，它一律會接收<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>之前，先呼叫<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>However, after the first layout pass, it may receive an <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call without a <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>; this can happen when a property that affects only <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> is changed (such as alignment), or when the parent receives an <ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> without a <ph id="ph5">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>.</source>
          <target state="translated">不過之後第一次的版面配置傳遞，, 它可能會收到<ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>呼叫而不需要<ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>; 這種情形只會影響的屬性時<ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>變更 （例如對齊），或當父系收到<ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>沒有<ph id="ph5">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call will automatically invalidate an <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>呼叫將會自動讓失效<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Layout updates generally occur asynchronously (at a time determined by the layout system).</source>
          <target state="translated">以非同步方式 （在版面配置系統所決定的時間） 通常會進行配置更新。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>An element might not immediately reflect changes to properties that affect element sizing (such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>).</source>
          <target state="translated">項目可能不會立即反映屬性會影響項目調整大小的變更 (例如<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Layout updates can be forced by using the <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance.</source>
          <target state="translated">版面配置更新可以強制使用<ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>方法; 不過，呼叫這個函式則不建議，因為它通常不需要而且可能會導致效能不佳。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>In many situations where calling <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> might be appropriate, the layout system will probably already be processing updates.</source>
          <target state="translated">在許多情況下呼叫其中<ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>可能適合、 版面配置系統可能已經在處理更新。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.</source>
          <target state="translated">版面配置系統可以處理版面配置變更，可以最佳化做為封裝一部分的所有必要更新的方式。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>The layout system keeps two separate queues of invalid layouts, one for <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> and one for <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.</source>
          <target state="translated">版面配置系統會保留兩個不同的佇列的無效的版面配置，一個用於<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>，另一個用於<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>The layout queue is sorted based upon the order of elements in the visual tree.</source>
          <target state="translated">配置佇列會根據使用的視覺化樹狀結構中的項目順序來排序。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents.</source>
          <target state="translated">在樹狀結構中較高的項目是佇列的頂端，以避免多餘的配置，在父系中重複的變更所造成。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.</source>
          <target state="translated">從佇列中，會自動移除重複的項目和項目會自動從佇列中移除已有效。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>When updating layout, the <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue is emptied first, followed by the <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue.</source>
          <target state="translated">當更新配置，<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>佇列清空首先，後面接著<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>佇列。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
          <source>An element in the <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue will never be arranged if there is an element in the <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue.</source>
          <target state="translated">中的項目<ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>中的項目時，就永遠不會排列佇列<ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>佇列。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>The final area within the parent that element should use to arrange itself and its child elements.</source>
          <target state="translated">父系內該項目應該用來排列本身和其子項目的最終區域。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>Defines the template for WPF core-level arrange layout definition.</source>
          <target state="translated">定義 WPF 核心層級排列版面配置定義的範本。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, because <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph>.</source>
          <target state="translated">覆寫這個方法才適當所衍生的 WPF 核心層級，而且您不使用 WPF 架構層級配置系統和<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>衍生類別，因為<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>標誌<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>.</source>
          <target state="translated">如果您使用 WPF 架構層級配置系統，適當的方法來覆寫類別的特定配置排列行為是<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementations should call the base implementation to return a size, then call the <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> method of each visible child element, and reconcile the sizes returned by these <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> calls with the size of the base implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> 實作應該呼叫基底實作以傳回大小，然後呼叫<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>方法的每個可見子項目的，而協調這些所傳回的大小<ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>呼叫基底實作的大小。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>The logic for the reconciliation aspect of a <ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementation might vary, depending on the layout characteristics of your element.</source>
          <target state="translated">對帳外觀的邏輯<ph id="ph1">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph>實作可能有所不同，系統會根據項目的版面配置特性。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>In the following example template, <ph id="ph1">`VisualChildren`</ph> is a hypothetical property that your element might define to help enumerate its content; <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.</source>
          <target state="translated">在下列的範例範本中，<ph id="ph1">`VisualChildren`</ph>是假設性的屬性，您的項目可能會定義為了列舉其內容。<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>未定義內容集合在此層級中，WPF 架構層級架構會延遲到衍生的項目，例如特定控制項或控制項的基底類別的內容行為。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>If you are developing elements at the WPF core level,you should override this method to give your WPF core-level element a unique arrange layout behavior, or to make proper layout decisions about the child elements of your elements.</source>
          <target state="translated">如果您正在開發的 WPF 核心層級的項目，您應該覆寫此方法以提供您的 WPF 核心層級項目唯一排列配置行為，或將適當的版面配置決策的相關項目的子項目。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>An override might be necessary if those child elements are not recognizable from a defined pattern such as an <ph id="ph1">&lt;see cref="T:System.Windows.Controls.ItemCollection" /&gt;</ph>.</source>
          <target state="translated">覆寫可能會需要這些子項目不是從已定義的模式可辨識這類<ph id="ph1">&lt;see cref="T:System.Windows.Controls.ItemCollection" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
          <source>A parent element must call the class-specific <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph> on each child element, otherwise those child elements are not rendered.</source>
          <target state="translated">父項目必須先呼叫類別的特定<ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /&gt;</ph>上每個子項目，否則這些子項目不會轉譯。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="T:System.Windows.UIElement">
          <source>Starts an animation for a specified animated property on this element.</source>
          <target state="translated">針對這個項目之指定的動畫屬性，開始播放動畫。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The property to animate, which is specified as a dependency property identifier.</source>
          <target state="translated">要顯示動畫的屬性，該屬性會指定為相依性屬性識別項。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The timeline of the animation to start.</source>
          <target state="translated">啟動動畫的時刻表。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>Starts an animation for a specified animated property on this element.</source>
          <target state="translated">針對這個項目之指定的動畫屬性，開始播放動畫。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">當您檢查屬性是否動畫效果時，請注意，動畫會開始視為動畫呈現非動畫的起始點的第一個框架時。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id="ph2">`animation`</ph> is <ph id="ph3">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph>如<ph id="ph2">`animation`</ph>是<ph id="ph3">`null`</ph>，然後移除任何目前的動畫，並保留屬性的目前值。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">如果整個<ph id="ph1">`animation`</ph>值是<ph id="ph2">`null`</ph>、 從屬性移除所有動畫和屬性值還原成其基底值。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">不過，並不會停止原先相關聯的動畫時間軸。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">指派給該時間軸中的其他任何動畫會繼續執行。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
          <source>The following example creates an animation, assigns it, and then calls <ph id="ph1">&lt;xref:System.Windows.UIElement.BeginAnimation%2A&gt;</ph> to start it.</source>
          <target state="translated">下列範例會建立動畫、 指派，，然後呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.BeginAnimation%2A&gt;</ph>來啟動它。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The property to animate, which is specified as the dependency property identifier.</source>
          <target state="translated">要顯示動畫的屬性，該屬性會指定為相依性屬性識別項。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The timeline of the animation to be applied.</source>
          <target state="translated">套用動畫的時刻表。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</source>
          <target state="translated">一個列舉值，這個值指定新的動畫如何與已經影響屬性值的任何目前 (執行中) 動畫互動。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</source>
          <target state="translated">針對此項目上指定的動畫屬性啟動特定動畫，且可以選擇指定如果屬性已經有執行中的動畫時會發生何種情況。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">當您檢查屬性是否動畫效果時，請注意，動畫會開始視為動畫呈現非動畫的起始點的第一個框架時。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id="ph2">`animation`</ph> is <ph id="ph3">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph>如<ph id="ph2">`animation`</ph>是<ph id="ph3">`null`</ph>，然後移除任何目前的動畫，並保留屬性的目前值。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">如果整個<ph id="ph1">`animation`</ph>值是<ph id="ph2">`null`</ph>、 從屬性移除所有動畫和屬性值還原成其基底值。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">不過，並不會停止原先相關聯的動畫時間軸。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">指派給該時間軸中的其他任何動畫會繼續執行。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
          <source>The following example implements a handler that obtains an existing animation from a resource and then calls <ph id="ph1">&lt;xref:System.Windows.UIElement.BeginAnimation%2A&gt;</ph> with a specified handoff behavior.</source>
          <target state="translated">下列範例會實作的處理常式，從資源，然後呼叫取得現有動畫<ph id="ph1">&lt;xref:System.Windows.UIElement.BeginAnimation%2A&gt;</ph>與指定的遞移式行為。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>Gets or sets a bitmap effect that applies directly to the rendered content for this element.</source>
          <target state="translated">取得或設定直接套用至此元素呈現內容的點陣圖效果。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>The bitmap effect to apply.</source>
          <target state="translated">要套用的點陣圖效果。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph> is an abstract type, therefore the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage requires an implemented derived class of <ph id="ph3">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>, such as <ph id="ph4">&lt;xref:System.Windows.Media.Effects.OuterGlowBitmapEffect&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph> 是抽象類型，因此<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>使用量需要實作的衍生的類別的<ph id="ph3">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>，例如<ph id="ph4">&lt;xref:System.Windows.Media.Effects.OuterGlowBitmapEffect&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>Note that one implemented derived class is a collection type that allows you to specify more than one sequential <ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>, using a nested tag syntax.</source>
          <target state="translated">實作一個衍生類別的附註是集合型別，可讓您指定多個循序<ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>，使用巢狀的標記語法。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>No existing derived class of <ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph> supports a type converter, so the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax that you use for this property is generally property element syntax.</source>
          <target state="translated">沒有現有的衍生類別<ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>支援的類型轉換器，所以<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>您使用這個屬性的語法通常是屬性項目語法。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffect">
          <source>The following example sets a bitmap effect, using <ph id="ph1">&lt;xref:System.Windows.Media.Effects.BlurBitmapEffect&gt;</ph>.</source>
          <target state="translated">下列範例會設定點陣圖生效，使用<ph id="ph1">&lt;xref:System.Windows.Media.Effects.BlurBitmapEffect&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.</source>
          <target state="translated">取得或設定直接套用至此元素呈現內容的點陣圖效果輸入來源。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>The source for bitmap effects.</source>
          <target state="translated">點陣圖效果的來源。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.BitmapEffectInput">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.BitmapEffectInputProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.BitmapEffectInput" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.BitmapEffectInput" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.BitmapEffectProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.BitmapEffect" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.BitmapEffect" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.CacheMode">
          <source>Gets or sets a cached representation of the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">取得或設定 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 的快取表示。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CacheMode">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Media.CacheMode" /&gt;</ph> that holds a cached representation of the <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">保存 <ph id="ph1">&lt;see cref="T:System.Windows.Media.CacheMode" /&gt;</ph> 之快取表示的 <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CacheMode">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.UIElement.CacheMode%2A&gt;</ph> property when you need to increase performance for content that is time consuming to render.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Windows.UIElement.CacheMode%2A&gt;</ph>屬性，當您需要以提高效能，會耗用的時間來呈現的內容。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CacheMode">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Media.BitmapCache&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱<ph id="ph1">&lt;xref:System.Windows.Media.BitmapCache&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.CacheModeProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.CacheMode" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.CacheMode" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>Attempts to force capture of the mouse to this element.</source>
          <target state="translated">嘗試強制將滑鼠的捕捉給這個項目。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureMouse">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the mouse is successfully captured; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果成功捕捉到滑鼠則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">若要擷取項目都必須啟用。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>Check whether <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`true`</ph> before you call <ph id="ph3">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>.</source>
          <target state="translated">檢查是否<ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph>是<ph id="ph2">`true`</ph>之前先呼叫<ph id="ph3">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then <ph id="ph3">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> is also <ph id="ph4">`true`</ph>.</source>
          <target state="translated">如果呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>傳回<ph id="ph2">`true`</ph>，然後<ph id="ph3">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph>也<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> events are raised, with <ph id="ph5">&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType&gt;</ph> in the event data reported as the element where the <ph id="ph6">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> method is called.</source>
          <target state="translated">如果呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>傳回<ph id="ph2">`true`</ph>，然後在<ph id="ph3">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph>和<ph id="ph4">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph>引發事件，與<ph id="ph5">&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType&gt;</ph>事件中的項目報告資料其中<ph id="ph6">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>方法呼叫。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.</source>
          <target state="translated">如果您強制擷取時，您可能會干擾現有的擷取 — 尤其是使用與拖放滑鼠相關聯的擷取。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>To clear mouse capture from all elements, call <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph> with the <ph id="ph2">`element`</ph> parameter provided as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">若要清除所有項目從滑鼠擷取，請呼叫<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph>與<ph id="ph2">`element`</ph>提供做為參數<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureMouse">
          <source>The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.</source>
          <target state="translated">下列範例會實作一組滑鼠和輸入的按鍵組合的滑鼠捕捉 （和釋放） 的處理常式，並啟用檢視 3D 模型的特殊滑鼠模式。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>Attempts to force capture of the stylus to this element.</source>
          <target state="translated">嘗試強制將手寫筆的捕捉給這個項目。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureStylus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stylus was successfully captured; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果成功捕捉到手寫筆則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>The default implementation based on the underlying default stylus device always returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">永遠根據基礎的預設手寫筆裝置的預設實作會傳回<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</source>
          <target state="translated">不過，如果可延伸提供輸入系統的裝置實作的輸入的裝置，則可以替代手寫筆裝置的實作可能會傳回不同的結果，以建立系統。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</source>
          <target state="translated">當項目擷取手寫筆時，即使手寫筆在其範圍外接收手寫筆輸入。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">通常只會在拖放作業期間擷取手寫筆。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>Calling this method calls an underlying static <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph> method <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;</ph>.</source>
          <target state="translated">呼叫這個方法會呼叫基礎靜態<ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>方法<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>The actual capture behavior is implemented by the active stylus device implementation.</source>
          <target state="translated">實際擷取行為的實作方法的使用中的手寫筆裝置的實作。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">若要擷取項目都必須啟用。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>Check whether <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`true`</ph> return before you call <ph id="ph3">&lt;xref:System.Windows.UIElement.CaptureStylus%2A&gt;</ph>.</source>
          <target state="translated">檢查是否<ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph>是<ph id="ph2">`true`</ph>傳回才能呼叫<ph id="ph3">&lt;xref:System.Windows.UIElement.CaptureStylus%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureStylus">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureStylus%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> is also <ph id="ph4">`true`</ph>.</source>
          <target state="translated">如果呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureStylus%2A&gt;</ph>傳回<ph id="ph2">`true`</ph>，<ph id="ph3">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph>也<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>The device to capture.</source>
          <target state="translated">要擷取的裝置。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>Attempts to force capture of a touch to this element.</source>
          <target state="translated">嘗試強制將觸控擷取至這個項目。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified touch is captured to this element; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果指定的觸控已擷取至這個項目，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureTouch%2A&gt;</ph> will return <ph id="ph2">`false`</ph> if the <ph id="ph3">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> is currently captured to another element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureTouch%2A&gt;</ph> 會傳回<ph id="ph2">`false`</ph>如果<ph id="ph3">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph>目前擷取另一個項目。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureTouch%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;</ph> event is raised.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureTouch%2A&gt;</ph>傳回<ph id="ph2">`true`</ph>，然後在<ph id="ph3">&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;</ph>就會引發事件。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>To release capture of a single touch from this element, use the <ph id="ph1">&lt;xref:System.Windows.UIElement.ReleaseTouchCapture%2A&gt;</ph> method and specify the touch device to release.</source>
          <target state="translated">若要釋放擷取的單一觸控從這個項目，使用<ph id="ph1">&lt;xref:System.Windows.UIElement.ReleaseTouchCapture%2A&gt;</ph>方法並指定要發行的觸控式裝置。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source>To release all touches from this element, use the <ph id="ph1">&lt;xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A&gt;</ph> method.</source>
          <target state="translated">若要釋放所有的工作，從這個項目，使用<ph id="ph1">&lt;xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Clip">
          <source>Gets or sets the geometry used to define the outline of the contents of an element.</source>
          <target state="translated">取得或設定用來定義項目內容外框的幾何。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Clip">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The geometry to be used for clipping area sizing.</source>
          <target state="translated">用於裁剪區域大小的幾何。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The default is a null <ph id="ph1">&lt;see cref="T:System.Windows.Media.Geometry" /&gt;</ph>.</source>
          <target state="translated">預設值為 null <ph id="ph1">&lt;see cref="T:System.Windows.Media.Geometry" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Elements outside the geometry will be visually clipped in the rendered layout.</source>
          <target state="translated">呈現的版面配置中，會以視覺化方式裁剪幾何外部的項目。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The geometry does not have to be rectangular.</source>
          <target state="translated">幾何沒有是矩形。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>This example shows how to define a framework element's <ph id="ph1">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> region.</source>
          <target state="translated">這個範例示範如何定義架構項目的<ph id="ph1">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph>區域。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>To define a clip, use a <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> (for example, an <ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> to set the element's <ph id="ph3">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> property.</source>
          <target state="translated">若要定義剪輯，請使用<ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph>(例如，<ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph>設定項目的<ph id="ph3">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Only the area that is within the region of the geometry will be visible.</source>
          <target state="translated">只有是幾何的區域內的區域會顯示。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The following example shows an <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph> element without a defined clip region.</source>
          <target state="translated">下列範例所示<ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph>沒有定義之裁剪區域的項目。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Because no clip region is defined, the entire image is displayed.</source>
          <target state="translated">因為定義沒有裁剪區域，則會顯示整個影像。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source><bpt id="p1">![</bpt>An object before applying a clip region<ept id="p1">]</ept><bpt id="p2">(~/add/media/mil-task-clip-region-noclip.png "</bpt>An object before applying a clip region<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>套用裁剪區域之前的物件<ept id="p1">]</ept><bpt id="p2">(~/add/media/mil-task-clip-region-noclip.png "</bpt>套用裁剪區域之前的物件<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Image with No Clip Region</source>
          <target state="translated">不裁剪區域的映像</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>In the next example, an identical Image is created, except that it has a defined clip region.</source>
          <target state="translated">在下一個範例中，會建立完全相同的映像，不同之處在於它有已定義之裁剪區域。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Only the part of the image that is within the area the <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> will be displayed.</source>
          <target state="translated">只有區域內的映像的一部分<ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph>隨即出現。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source><bpt id="p1">![</bpt>A clipped object<ept id="p1">]</ept><bpt id="p2">(~/add/media/mil-task-clip-region-ellispe.PNG "</bpt>A clipped object<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>裁剪後的物件<ept id="p1">]</ept><bpt id="p2">(~/add/media/mil-task-clip-region-ellispe.PNG "</bpt>裁剪後的物件<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>Image with an Elliptical Clip Region</source>
          <target state="translated">橢圓形裁剪區域的映像</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The following example shows how animate a framework element's <ph id="ph1">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> region.</source>
          <target state="translated">下列範例示範如何以動畫顯示架構項目的<ph id="ph1">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph>區域。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>In this example, an <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> is used to define an elliptical clip region for an <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph> element.</source>
          <target state="translated">在此範例中，<ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph>用來定義的橢圓形的裁剪區域<ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph>項目。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.Animation.PointAnimation&gt;</ph> animates the ellipse geometry's <ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry.Center%2A&gt;</ph> property from (0, 0) to (200, 150).</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Media.Animation.PointAnimation&gt;</ph>繪製橢圓形的幾何<ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry.Center%2A&gt;</ph>從屬性 （0，0） 到 （200，150）。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>The animation starts playing after the image is loaded and repeats indefinitely.</source>
          <target state="translated">動畫開始播放後影像載入，不斷重複。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Clip">
          <source>For the full sample, see the <bpt id="p1">[</bpt>Clip Region Sample<ept id="p1">](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67)</ept>.</source>
          <target state="translated">如需完整的範例，請參閱<bpt id="p1">[</bpt>裁剪區域範例<ept id="p1">](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67)</ept>。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ClipProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Clip" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Clip" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.</source>
          <target state="translated">取得或設定是否裁剪此元素 (或來自此元素的子元素) 的內容，以符合容器元素大小的值。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the content should be clipped; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果應該裁剪內容即為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>The default value is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值是 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>For child elements, <ph id="ph1">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph><ph id="ph3"> / </ph><ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph><ph id="ph6"> / </ph><ph id="ph7">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>.</source>
          <target state="translated">子項目<ph id="ph1">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph>有不同的配置行為，根據是否的高度和寬度的父項目由決定影響<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> <ph id="ph3"> / </ph> <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>或<ph id="ph5">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph> <ph id="ph6"> / </ph> <ph id="ph7">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph><ph id="ph2"> / </ph><ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph> of the parent element are always respected regardless of the value of <ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> and the effective clipping will always clip the content based on these maximums.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph><ph id="ph2"> / </ph><ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph> 父元素的值為何會一律遵守<ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph>和有效裁剪一律會裁剪這些最大值為基礎的內容。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>The parent's <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph><ph id="ph2"> / </ph><ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> settings will not clip the content when <ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> is <ph id="ph5">`false`</ph>, but will clip the content if <ph id="ph6">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> is <ph id="ph7">`true`</ph>.</source>
          <target state="translated">在父系的<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> <ph id="ph2"> / </ph> <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>設定不會裁剪的內容時<ph id="ph4">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph>是<ph id="ph5">`false`</ph>，但會裁剪內容 if<ph id="ph6">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph>是<ph id="ph7">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Note that defaulting to <ph id="ph1">`false`</ph> is the general behavior as implemented in the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> class.</source>
          <target state="translated">請注意，預設為<ph id="ph1">`false`</ph>是一般的行為，以實作<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>It is possible for any given element that derives from <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> to override the dependency property metadata for this property in that instance to default to <ph id="ph2">`true`</ph> instead.</source>
          <target state="translated">您可針對指定的項目衍生自<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>覆寫這個屬性預設為該執行個體中的相依性屬性中繼資料<ph id="ph2">`true`</ph>改為。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Several existing derived classes override this metadata and/or adjust the dependency property default value.</source>
          <target state="translated">數個現有的衍生的類別覆寫此中繼資料及/或調整相依性屬性的預設值。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.InkPresenter&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> each override the default value to be <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph><ph id="ph2">&lt;xref:System.Windows.Controls.InkPresenter&gt;</ph>，和<ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph>每個覆寫這個預設值為<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> overrides the metadata for this dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 覆寫這個相依性屬性的中繼資料。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Specifically, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> designates this property to allow property value inheritance (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> is <ph id="ph3">`true`</ph> in metadata).</source>
          <target state="translated">具體來說，<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>指定這個屬性可讓屬性值繼承 (<ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph>是<ph id="ph3">`true`</ph>中繼資料中)。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Property value inheritance in this context means that if there are child elements with no other value for <ph id="ph1">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system.</source>
          <target state="translated">在此內容中的屬性值繼承表示，如果有任何其他值作為具有子元素<ph id="ph1">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph>指派透過本機值或最接近的父元素的值指派 （同樣地，有兩種預設的樣式，此值與樣式值，或在本機值)，然後從父元素的值會指派給所有未指派的子元素屬性系統。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as <ph id="ph1">`false`</ph>.</source>
          <target state="translated">實際上這表示您可以指定是否允許在根項目界限的剪輯，並將它做為值將會傳播到所有其子項目具有未特別指派<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.ClipToBounds">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ClipToBoundsProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.CommandBindings">
          <source>Gets a collection of <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> objects associated with this element.</source>
          <target state="translated">取得與這個項目關聯的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> 物件集合。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.CommandBindings">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> 會啟用此項目的命令處理，並宣告命令、其事件及此項目所附加之處理常式之間的連結。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>The collection of all <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> objects.</source>
          <target state="translated">所有 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> 物件的集合。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>Another typical way to populate the <ph id="ph1">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> collection is to use <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> methods programmatically.</source>
          <target state="translated">典型的另一種方式填入<ph id="ph1">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph>集合是使用<ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>方法以程式設計的方式。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 屬性項目用法</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>XAML Values</source>
          <target state="translated">XAML 值</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source><bpt id="p1">*</bpt>oneOrMoreCommandBindings<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreCommandBindings<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> elements.</source>
          <target state="translated">一或多個<ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>項目。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>Each of these should have a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> attribute set to a known command, and attributes set for the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> handler implementations.</source>
          <target state="translated">每一個都應該有<ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph>屬性設定為已知的命令，而且屬性設定為<ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph>處理常式實作。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>For more information see <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱<ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>The following example adds a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> to a window using markup.</source>
          <target state="translated">下列範例會將<ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>視窗使用的標記。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>Note that in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBindingCollection&gt;</ph> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> elements:</source>
          <target state="translated">請注意，在<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>、<ph id="ph2">&lt;xref:System.Windows.Input.CommandBindingCollection&gt;</ph>做為項目; 在標記中未宣告的集合物件由屬性會接受，型別推斷及填入屬性項目與一或多個<ph id="ph3">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>項目：</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>For more information about the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax for collections, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>.</source>
          <target state="translated">如需有關<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>語法的集合，請參閱<bpt id="p1">[</bpt>XAML 語法的詳細資料<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.CommandBindings">
          <source>The following example does essentially the same thing in code:</source>
          <target state="translated">下列範例會執行基本上相同的動作程式碼中：</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.DesiredSize">
          <source>Gets the size that this element computed during the measure pass of the layout process.</source>
          <target state="translated">取得這個項目在版面配置處理序的測量傳遞期間所計算的大小。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>The computed size, which becomes the desired size for the arrange pass.</source>
          <target state="translated">成為排列傳遞所需大小的計算大小。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>The value returned by this property will only be a valid measurement if the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">這個屬性所傳回的值才會有效的度量如果的值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph>屬性是<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> (in the <ph id="ph5">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> case, you might check <ph id="ph6">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> instead, but this depends on your implementation).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> 通常會檢查，因為其中一個度量因素，當您實作的配置行為的會覆寫這類<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>，或<ph id="ph4">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph>(在<ph id="ph5">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph>情況下，您可以檢查<ph id="ph6">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>相反地，但這取決於您實作）。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>Depending on the scenario, <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> might be fully respected by your implementation logic, constraints on <ph id="ph2">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> might be applied, and such constraints might also change other characteristics of either the parent element or child element.</source>
          <target state="translated">根據這種情況，<ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>可能完全代表會根據您的實作邏輯，條件約束上<ph id="ph2">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>可能會套用，而這類條件約束也可能會變更其他特性的父項目或子項目。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>.</source>
          <target state="translated">例如，支援可捲動區域 （但選擇不是衍生自已經啟用可捲動區域的 WPF 架構層級控制項） 的控制項無法比較可用的大小，以<ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>The control could then set an internal state that enabled scrollbars in the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> for that control.</source>
          <target state="translated">控制項無法再設定啟用捲軸中的內部狀態<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>該控制項。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>Or, <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> could potentially also be ignored in certain scenarios.</source>
          <target state="translated">或者，<ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>就可能在某些情況下也會忽略。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>The following example shows <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> as part of a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> implementation.</source>
          <target state="translated">下列範例所示<ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>一部分<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>Notice how <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> is called immediately prior to obtaining <ph id="ph2">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>.</source>
          <target state="translated">請注意如何<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>取得之前，立即呼叫<ph id="ph2">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.DesiredSize">
          <source>This assures that <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> holds a legitimate value.</source>
          <target state="translated">這可確保<ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>保存的合法值。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.DragEnter">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">輸入系統報告其下以此項目作為拖曳目標的拖曳事件時發生。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragEnter%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragEnter" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragEnter" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.DragLeave">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">輸入系統報告其下以此項目作為拖曳來源的拖曳事件時發生。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph>附加這個類別的事件，讓<ph id="ph2">&lt;xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragLeave%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragLeave" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragLeave" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.DragOver">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">在輸入系統回報以此項目作為可能置放目標的基礎拖曳事件時發生。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>This event occurs even if the drag originates in the element bounds.</source>
          <target state="translated">即使拖曳來自項目範圍中，就會發生此事件。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph> and related preview events.</source>
          <target state="translated">如果拖曳啟動界限之外，然後移動到內部，也會引發這個事件，以及<ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph>和相關的預覽事件。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph>附加這個類別的事件，讓<ph id="ph2">&lt;xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.DragOver">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnDragOver%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragOver" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.DragOver" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DragOverEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.Drop">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">輸入系統報告其下以這個項目作為置放目標的置放事件時發生。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.Drop?displayProperty=nameWithType&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph>附加這個類別的事件，讓<ph id="ph2">&lt;xref:System.Windows.UIElement.Drop?displayProperty=nameWithType&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.Drop">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnDrop%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnDrop%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.DropEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.Drop" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.Drop" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DropEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DropEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DropEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DropEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.DropEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Effect">
          <source>Gets or sets the bitmap effect to apply to the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">取得或設定要套用至 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 的點陣圖效果。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Effect">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Media.Effects.Effect" /&gt;</ph> that represents the bitmap effect.</source>
          <target state="translated">表示點陣圖效果的 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Effects.Effect" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.UIElement.Effect%2A&gt;</ph> property to apply a bitmap effect to a <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Windows.UIElement.Effect%2A&gt;</ph>屬性，將套用至點陣圖效果<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Effect">
          <source>The following XAML shows how to assign a custom <ph id="ph1">&lt;xref:System.Windows.Media.Effects.ShaderEffect&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.UIElement.Effect%2A&gt;</ph> property.</source>
          <target state="translated">下列 XAML 顯示如何指派自訂<ph id="ph1">&lt;xref:System.Windows.Media.Effects.ShaderEffect&gt;</ph>至<ph id="ph2">&lt;xref:System.Windows.UIElement.Effect%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.EffectProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Effect" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Effect" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Focus">
          <source>Attempts to set focus to this element.</source>
          <target state="translated">嘗試將焦點設定至此項目。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Focus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if keyboard focus and logical focus were set to this element; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if only logical focus was set to this element, or if the call to this method did not force the focus to change.</source>
          <target state="translated">如果邏輯與鍵盤焦點設定至此項目，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，如果只有邏輯焦點設為此項目，或是呼叫此方法並未強制焦點變更，則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>To be focusable, <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> must both be <ph id="ph3">`true`</ph>.</source>
          <target state="translated">若要可設定焦點，<ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph>兩者都必須是<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">即使項目是在特定的樹狀結構中的可設定焦點且已啟用，事件處理，（例如，針對複合控制項） 可能會回應預覽焦點事件藉由禁止焦點，因此這個方法會傳回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</source>
          <target state="translated">焦點通常由兩個不同的概念： 鍵盤焦點和邏輯焦點，並不一定相同。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>For more information, see <bpt id="p1">[</bpt>Focus Overview<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept> or <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>焦點概觀<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>或<bpt id="p2">[</bpt>輸入概觀<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>If calling <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> are also <ph id="ph5">`true`</ph>.</source>
          <target state="translated">如果呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>傳回<ph id="ph2">`true`</ph>，<ph id="ph3">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph>也<ph id="ph5">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>If the related properties are not already <ph id="ph1">`true`</ph>, when you call  <ph id="ph2">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>, one or more of the following events are raised in the following order: <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> (source is the new focus target), <ph id="ph5">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> (source is the new focus target).</source>
          <target state="translated">如果相關的屬性尚未<ph id="ph1">`true`</ph>，當您呼叫<ph id="ph2">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>，一或多個下列事件會依照下列順序引發： <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>， <ph id="ph4">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> （來源為新的焦點目標） <ph id="ph5">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph>， <ph id="ph6">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph>，<ph id="ph7">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>， <ph id="ph8">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> （來源為新的焦點目標）。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>In order for this call to be successful, some other element in the application needed to have focus previously.</source>
          <target state="translated">為了讓這個呼叫才會成功，應用程式中的某個其他項目需要先前有焦點。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Focus">
          <source>The following example sets focus to a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> referenced by <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>, and then adjusts the position of the cursor within the <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
          <target state="translated">下列範例會將焦點設為<ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>所參考<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>，並調整內游標的位置<ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Focusable">
          <source>Gets or sets a value that indicates whether the element can receive focus.</source>
          <target state="translated">取得或設定元素是否能夠接收焦點的值。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Focusable">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is focusable; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果項目可設定焦點則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>Only the focused element receives keyboard input.</source>
          <target state="translated">只有已取得焦點的項目收到鍵盤輸入。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> is the <ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 是<ph id="ph2">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph>實際上會相依性屬性的屬性存取子。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly in controls.</source>
          <target state="translated">這個特定的相依性屬性相當常有衍生的項目類別，尤其是在控制項中以不同方式設定其明顯"default"值。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>This commonly occurs in one of two ways:</source>
          <target state="translated">這通常會發生在兩種方式之一：</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</source>
          <target state="translated">相依性屬性繼承自特定的衍生類別，但是，衍生類別覆寫之相依性屬性的中繼資料，並變更屬性的預設值。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>A style or template is applied to an element, which sets that dependency property value differently.</source>
          <target state="translated">樣式或範本套用至項目，以不同的方式設定該相依性屬性的值。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>For example, the apparent "default" of <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> for a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control will be <ph id="ph3">`true`</ph>, even though <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph> inherits <ph id="ph5">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> as a <ph id="ph6">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> property directly from <ph id="ph7">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">例如，明顯 「 預設 」 的<ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph>的<ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>控制項將會是<ph id="ph3">`true`</ph>，即使<ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph>繼承<ph id="ph5">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph>為<ph id="ph6">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>直接從屬性<ph id="ph7">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>This is because the applied metadata value for the <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> dependency property was overridden within the static constructor of the <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> base class, which is situated between <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.UIElement&gt;</ph> in the class hierarchy.</source>
          <target state="translated">這是因為套用的中繼資料值<ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph>靜態建構函式內的相依性屬性遭到覆寫<ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph>基底類別，之間平均分攤工作量<ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>和<ph id="ph4">&lt;xref:System.Windows.UIElement&gt;</ph>類別階層架構中。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> or its derived classes, <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> redefines the default value of this property to be <ph id="ph3">`true`</ph>.</source>
          <target state="translated">當繼承<ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>或其衍生的類別，<ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph>會重新定義預設值，這個屬性是<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> (which is a <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> derived class), the default value is again redefined to be <ph id="ph3">`false`</ph>.</source>
          <target state="translated">當繼承<ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph>(也就是<ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph>衍生的類別)，預設值一次重新定義為<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>The following example code illustrates a control template for a particular custom control, which sets <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> <ph id="ph2">`false`</ph> on one of the elements within the template.</source>
          <target state="translated">下列程式碼範例將說明特定的自訂控制項，這會設定控制項範本<ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph><ph id="ph2">`false`</ph>上其中一個範本內的項目。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>When deriving from <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> directly (as opposed to from <ph id="ph2">&lt;see cref="T:System.Windows.Controls.Control" /&gt;</ph>), consider whether you wish your element to be focusable, because by default the element will not be focusable.</source>
          <target state="translated">衍生自<ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>直接 (相對於從<ph id="ph2">&lt;see cref="T:System.Windows.Controls.Control" /&gt;</ph>)，請考慮是否要讓您為可設定焦點，因為預設的項目將不是可設定焦點的項目。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>If you wish your element to be focusable, override the metadata for this property within your type's static constructor as follows:</source>
          <target state="translated">如果您希望您可設定焦點的項目時，覆寫此屬性類型的靜態建構函式內的中繼資料，如下所示：</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Focusable">
          <source>where <ph id="ph1">&lt;paramref name="myElement" /&gt;</ph> should be the class name of the type that you are overriding the metadata value on.</source>
          <target state="translated">其中<ph id="ph1">&lt;paramref name="myElement" /&gt;</ph>應該是類別名稱之類型的中繼資料值覆寫上。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.FocusableChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> property changes.</source>
          <target state="translated">發生於 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> 屬性的值變更時。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.FocusableChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.FocusableProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>The dependency property to check.</source>
          <target state="translated">要檢查的相依性屬性。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</source>
          <target state="translated">傳回這個項目上指定屬性的基底屬性值，不管任何執行中的可能動畫值，或停止動畫。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>The property value as if no animations are attached to the specified dependency property.</source>
          <target state="translated">屬性值，就好像指定的相依性屬性未附加任何動畫。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>If no animations are attached to the property, then the <ph id="ph1">&lt;xref:System.Windows.UIElement.GetAnimationBaseValue%2A&gt;</ph> return value is always identical to the <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> return value.</source>
          <target state="translated">如果屬性未不附加任何動畫則<ph id="ph1">&lt;xref:System.Windows.UIElement.GetAnimationBaseValue%2A&gt;</ph>傳回值一定是相同<ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph>傳回值。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</source>
          <target state="translated">如果附加的動畫，然後所有的可能動畫衍生值包括開始和停止值會被忽略，而且屬性值取決於所有可能的輸入。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>相依性屬性值優先順序<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
          <source>The following example implements a handler that reports the base value of an animated <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> property on a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>, as well as the base value of a transform.</source>
          <target state="translated">下列範例會實作報告動畫的基底值的處理常式<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>屬性<ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>，以及轉換的基底值。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>The available size provided by the element.</source>
          <target state="translated">由項目提供的可用大小。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>Returns an alternative clipping geometry that represents the region that would be clipped if <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph> were set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">傳回替代裁剪幾何，該裁剪幾何表示若 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.ClipToBounds" /&gt;</ph> 屬性設為 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 時會裁剪的區域。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>The potential clipping geometry.</source>
          <target state="translated">可能的裁剪幾何。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>The default implementation will return a legitimate value, but does not use the <ph id="ph1">`layoutSlotSize`</ph> parameter in its calculations.</source>
          <target state="translated">預設實作會傳回合法的值，但未使用<ph id="ph1">`layoutSlotSize`</ph>在其計算中的參數。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>Instead it uses the value of <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>.</source>
          <target state="translated">而是使用的值<ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>This method is substantially overridden by the immediately derived <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> class, and the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> override produces a more sophisticated behavior for general WPF framework-level elements.</source>
          <target state="translated">本質上覆寫這個方法由立即衍生<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>類別，而<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>覆寫會產生更複雜的行為，在一般的 WPF 架構層級項目。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
          <source>For details, see <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetUIParentCore">
          <source>When overridden in a derived class, returns an alternative <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> parent for this element if no visual parent exists.</source>
          <target state="translated">當在衍生類別中覆寫時，如果沒有視覺化父項目存在，則會為這個項目傳回替代的<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> 父項目。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.GetUIParentCore">
          <source>An object, if implementation of a derived class has an alternate parent connection to report.</source>
          <target state="translated">一個物件，如果衍生類別的實作有替代父代連接要報告。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetUIParentCore">
          <source>The default virtual implementation of this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">預設的虛擬實作這個方法會傳回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetUIParentCore">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> provides a practical implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> 提供實際的實作。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.GetUIParentCore">
          <source>Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</source>
          <target state="translated">替代的父代是用於事件的路由，在其中項目會建立替代父結構，讓它的事件會路由傳送偏離標準模式的視覺化樹狀目錄以標準的父代，路由的方式的情況下或在中向下預覽路由策略。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Occurs when the input system reports an underlying drag-and-drop event that involves this element.</source>
          <target state="translated">輸入系統報告其下牽涉此元素的拖放事件時發生。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph>事件允許拖曳事件修改滑鼠指標外觀，以便將使用者視覺化回應提供拖放作業期間的來源。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>The visual feedback reinforces that a drag-and-drop operation is in process.</source>
          <target state="translated">視覺回應強調拖放作業正在進行。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph>附加這個類別的事件，讓<ph id="ph2">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GiveFeedback">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnGiveFeedback%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GiveFeedback" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GiveFeedback" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GiveFeedbackEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GotFocus">
          <source>Occurs when this element gets logical focus.</source>
          <target state="translated">此元素取得邏輯焦點時發生。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">如果使用方法呼叫刻意強制焦點，但上一個鍵盤焦點存在於不同的範圍與鍵盤焦點不同邏輯焦點。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>In this scenario, keyboard focus remains where it is and the element where a <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> method is called still gets logical focus.</source>
          <target state="translated">在此案例中，鍵盤焦點會維持其所在和項目位置<ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>方法呼叫仍取得邏輯焦點。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>A more precise interpretation of this event is that it is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property of an element in the route is changed from <ph id="ph2">`false`</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">這個事件的更精確的解釋是它時引發的值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph>屬性路由的項目已從<ph id="ph2">`false`</ph>至<ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由於這個事件會使用反昇路由，接收焦點的項目可能是子元素，而非項目實際附加事件處理常式。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.</source>
          <target state="translated">請檢查<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph>事件資料來判斷實際取得焦點的項目中。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>There is no corresponding tunneling event.</source>
          <target state="translated">沒有任何對應通道的事件。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">鍵盤以此元素為焦點時發生。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <ph id="ph2">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> event is raised in many of the same circumstances.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> 是類似的事件可追蹤之屬性維護的項目; 焦點狀態中的狀態變更<ph id="ph2">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph>的許多相同的情況下，就會引發事件。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">這個事件會使用反昇路由，因為具有焦點的項目可能是子元素，而非項目實際附加事件處理常式。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.</source>
          <target state="translated">請檢查<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph>事件資料來判斷實際具有焦點的項目中。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph>附加這個類別的事件，讓<ph id="ph2">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotKeyboardFocus%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotKeyboardFocus" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Occurs when this element captures the mouse.</source>
          <target state="translated">此元素擷取滑鼠時發生。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</source>
          <target state="translated">當項目捕捉到滑鼠時，它收到滑鼠輸入，即使將滑鼠指標位於其範圍外。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">滑鼠通常只會在拖放作業期間擷取並且擷取之前拖放作業的拖放動作發生。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">這個事件會使用反昇路由，因為已擷取的項目可能是子元素，而非項目實際附加事件處理常式。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has mouse capture.</source>
          <target state="translated">請檢查<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph>資料，以判斷實際項目具有滑鼠擷取的事件。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> attached event for  this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph>附加這個類別的事件，讓<ph id="ph2">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">沒有定義對應通道的事件。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotMouseCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotMouseCapture%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotMouseCapture" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotMouseCapture" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotMouseCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Occurs when this element captures the stylus.</source>
          <target state="translated">此元素擷取手寫筆時發生。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">當項目擷取手寫筆時，即使指標位於其範圍外接收手寫筆輸入。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">手寫筆通常只會在拖放作業期間擷取，並保留擷取，直到拖放作業的拖放動作發生。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">這個事件會使用反昇路由，因為已擷取的項目可能是子元素，而非項目實際附加事件處理常式。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has capture.</source>
          <target state="translated">請檢查<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph>事件資料來判斷已擷取的實際項目中。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>This event creates an alias for the attached event for this class so that <ph id="ph1">&lt;xref:System.Windows.UIElement.GotStylusCapture&gt;</ph> is part of the class members list when <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立這個類別的附加事件的別名，讓<ph id="ph1">&lt;xref:System.Windows.UIElement.GotStylusCapture&gt;</ph>屬於類別的成員 清單時<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.GotStylusCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.GotStylusCapture&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">沒有定義對應通道的事件。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotStylusCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotStylusCapture%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotStylusCapture" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotStylusCapture" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.GotStylusCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Occurs when a touch is captured to this element.</source>
          <target state="translated">當觸控擷取至這個項目時發生。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.GotTouchCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.GotTouchCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotTouchCapture" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotTouchCapture" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.HasAnimatedProperties">
          <source>Gets a value indicating whether this element has any animated properties.</source>
          <target state="translated">取得值，這個值表示此項目是否有任何動畫屬性。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.HasAnimatedProperties">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has animations attached to any of its properties; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個項目有附加至其任一屬性的動畫則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.HasAnimatedProperties">
          <source>This property returns <ph id="ph1">`true`</ph> either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.</source>
          <target state="translated">這個屬性會傳回<ph id="ph1">`true`</ph>的持續性 （unclocked，一律執行） 的動畫，或有特定的時間表的動畫。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.HasEffectiveKeyboardFocus">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> has focus.</source>
          <target state="translated">取得值，指出 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 是否具有焦點。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.HasEffectiveKeyboardFocus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> has focus; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 具有焦點，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.HasEffectiveKeyboardFocus">
          <source>Subclasses can override this property to specify when the element has keyboard focus.</source>
          <target state="translated">子類別可以覆寫這個屬性來指定項目具有鍵盤焦點時。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.HasEffectiveKeyboardFocus">
          <source>This is useful when your <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> contains elements that can have keyboard focus and you want your element to report that it has focus.</source>
          <target state="translated">這非常有用時您<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>包含項目具有鍵盤焦點，而且您想有焦點的報表項目。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="T:System.Windows.UIElement">
          <source>Implements <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /&gt;</ph> to supply base element hit testing behavior.</source>
          <target state="translated">實作 <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /&gt;</ph> 以提供基底項目點擊測試行為。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>Describes the hit test to perform, including the initial hit point.</source>
          <target state="translated">描述要執行的點擊測試，包括初始點擊點。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>Implements <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /&gt;</ph> to supply base element hit testing behavior (returning <ph id="ph2">&lt;see cref="T:System.Windows.Media.GeometryHitTestResult" /&gt;</ph>).</source>
          <target state="translated">實作 <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /&gt;</ph> 以提供基底項目點擊測試行為 (傳回 <ph id="ph2">&lt;see cref="T:System.Windows.Media.GeometryHitTestResult" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>Results of the test, including the evaluated geometry.</source>
          <target state="translated">測試的結果，包括已評估的幾何。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>See the original virtual method <ph id="ph1">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType&gt;</ph> for information on overriding this method in further derived classes.</source>
          <target state="translated">請參閱原始虛擬方法<ph id="ph1">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType&gt;</ph>有關進一步覆寫這個方法在衍生類別。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>Note that several specific controls (<ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, for example) do have distinct implementations, which override this one.</source>
          <target state="translated">請注意，數個特定的控制項 (<ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>，例如) 沒有相異的實作，覆寫這一個。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>This method is not intended to be called from your application code.</source>
          <target state="translated">這個方法不是從應用程式程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
          <source>This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</source>
          <target state="translated">這個方法支援 （滑鼠指標是否為某項目，例如），輸入系統的各個層面所公開的內部點擊測試行為。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>Describes the hit test to perform, including the initial hit point.</source>
          <target state="translated">描述要執行的點擊測試，包括初始點擊點。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>Implements <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /&gt;</ph> to supply base element hit testing behavior (returning <ph id="ph2">&lt;see cref="T:System.Windows.Media.HitTestResult" /&gt;</ph>).</source>
          <target state="translated">實作 <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /&gt;</ph> 以提供基底項目點擊測試行為 (傳回 <ph id="ph2">&lt;see cref="T:System.Windows.Media.HitTestResult" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>Results of the test, including the evaluated point.</source>
          <target state="translated">測試結果，包括受評估的點。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>See the original virtual method <ph id="ph1">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType&gt;</ph> for information on overriding this method in further derived classes.</source>
          <target state="translated">請參閱原始虛擬方法<ph id="ph1">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType&gt;</ph>有關進一步覆寫這個方法在衍生類別。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>Note that several specific controls (<ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, for example) do have distinct implementations, which override <ph id="ph2">&lt;xref:System.Windows.UIElement.HitTestCore%2A&gt;</ph> as defined by <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">請注意，數個特定的控制項 (<ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>，例如) 沒有覆寫的不同實作<ph id="ph2">&lt;xref:System.Windows.UIElement.HitTestCore%2A&gt;</ph>所定義的<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>This method is not intended to be called from your application code.</source>
          <target state="translated">這個方法不是從應用程式程式碼呼叫。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
          <source>This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</source>
          <target state="translated">這個方法支援 （滑鼠指標是否為某項目，例如），輸入系統的各個層面所公開的內部點擊測試行為。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.InputBindings">
          <source>Gets the collection of input bindings associated with this element.</source>
          <target state="translated">取得與此元素關聯的輸入繫結集合。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>The collection of input bindings.</source>
          <target state="translated">輸入繫結的集合。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>Input bindings support the binding of commands to input devices.</source>
          <target state="translated">輸入繫結支援命令與輸入裝置繫的結。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> implements input bindings that include properties that are particular to mouse devices.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>實作輸入包含的滑鼠裝置特定內容的繫結。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</source>
          <target state="translated">輸入繫結的集合會包含屬於此類型的輸入繫結以及宣告執行個體的輸入繫結。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>A related property, <ph id="ph1">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph>, maintains a collection of command bindings.</source>
          <target state="translated">相關的屬性， <ph id="ph1">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph>，維持命令繫結的集合。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</source>
          <target state="translated">這些不同從輸入繫結，因為它們代表的下一個層級的動作會繫結至已知命令的命令處理。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 屬性項目用法</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>XAML Values</source>
          <target state="translated">XAML 值</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source><bpt id="p1">*</bpt>oneOrMoreInputBindings<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreInputBindings<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>One or more <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> elements (typically the <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> derived classes).</source>
          <target state="translated">一或多個<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>項目 (通常<ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>衍生類別)。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>Each of these is expected to have a <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> attribute set.</source>
          <target state="translated">每一個都應該要有<ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph>屬性設定。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>The following example populates this property on a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, with a single <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>.</source>
          <target state="translated">下列範例會填入這個屬性上<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>，具有單一<ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.InputBindings">
          <source>For more information about the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax for collections, see <bpt id="p1">[</bpt>XAML Syntax In Detail<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>.</source>
          <target state="translated">如需有關<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>語法的集合，請參閱<bpt id="p1">[</bpt>XAML 語法的詳細資料<ept id="p1">](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>The offset coordinates within this element.</source>
          <target state="translated">這個項目內的位移 (Offset) 座標。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.</source>
          <target state="translated">在目前項目範圍中傳回的輸入項目，輸入項目位在相對於目前項目原點的指定座標。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>The element child that is located at the given position.</source>
          <target state="translated">位在指定位置的項目子系。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source><ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> is returned as the return type, because that type is a common interface for both <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> 傳回為傳回類型，因為該類型是兩者的通用介面<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph> interface.</source>
          <target state="translated">然後可以適當地轉型傳回型別或使用介面的執行個體所定義的特定成員<ph id="ph1">&lt;xref:System.Windows.IInputElement&gt;</ph>介面。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>This method typically is not called from your application code.</source>
          <target state="translated">呼叫這個方法通常是無法從應用程式程式碼。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source>Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.</source>
          <target state="translated">呼叫這個方法僅適用於您想要重新實作大量已出現，例如滑鼠裝置的邏輯重新建立的低階輸入功能。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
          <source><ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph> contracts an <ph id="ph2">&lt;xref:System.Windows.IContentHost.InputHitTest%2A&gt;</ph> method with the same signature, which some elements choose to implement explicitly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.IContentHost&gt;</ph> 合約<ph id="ph2">&lt;xref:System.Windows.IContentHost.InputHitTest%2A&gt;</ph>相同的簽章，某些項目選擇明確實作的方法。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InvalidateArrange">
          <source>Invalidates the arrange state (layout) for the element.</source>
          <target state="translated">使項目的排列狀態 (配置) 失效。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InvalidateArrange">
          <source>After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.UpdateLayout" /&gt;</ph>.</source>
          <target state="translated">在失效之後，項目會更新其配置，且這是非同步發生，除非後續由 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.UpdateLayout" /&gt;</ph> 所強制。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateArrange">
          <source>Frequent calls to <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> or in particular to <ph id="ph2">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> have significant performance consequences.</source>
          <target state="translated">經常呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph>或在特定的<ph id="ph2">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>有顯著的效能影響。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateArrange">
          <source>Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in your code.</source>
          <target state="translated">因此，除非絕對需要精確的配置狀態的其他後續呼叫，呼叫這個方法來避免<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>程式碼中。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateArrange">
          <source>An advanced scenario where you might call <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> is if you are creating a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a dependency property that is not on a <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class that still influences the arrange pass of layout when it changes.</source>
          <target state="translated">進階的案例，您可能會呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph>是如果您建立<ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>不在相依性屬性的<ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph>或<ph id="ph4">&lt;xref:System.Windows.FrameworkElement&gt;</ph>衍生類別，其變更時，仍然會影響版面配置的排列傳遞。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>Invalidates the measurement state (layout) for the element.</source>
          <target state="translated">使項目的測量狀態 (配置) 失效。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>Calling this method also calls <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> internally, there is no need to call <ph id="ph2">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> in succession.</source>
          <target state="translated">呼叫這個方法也會呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph>就內部而言，不是需要呼叫<ph id="ph2">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph>連續。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> is called to force a synchronous layout change.</source>
          <target state="translated">之後失效，項目將擁有其配置更新，會以非同步的方式，除非<ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>呼叫以強制變更同步的配置。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary.</source>
          <target state="translated">WPF 架構層級配置系統會其自己的變更項目的視覺化樹狀結構中處理，並在最常見版面配置失效的情況下版面配置系統會呼叫這個方法只有在必要時對等項目。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios.</source>
          <target state="translated">如果您要產生完整的版面配置的實作，可直接操作項目樹狀結構中，或類似進階案例，您才應該呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>One such advanced scenario is if you are creating a <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a dependency property that is not on a <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class that still influences the measure pass of layout when it changes.</source>
          <target state="translated">這類進階的案例之一是如果您建立<ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>不在相依性屬性的<ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>衍生類別，仍然會影響配置的測量行程，當監視變更。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>Frequent calls to <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> or in particular to <ph id="ph2">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> have significant performance consequences.</source>
          <target state="translated">經常呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph>或在特定的<ph id="ph2">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>有顯著的效能影響。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateMeasure">
          <source>Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in your code.</source>
          <target state="translated">因此，除非絕對需要精確的配置狀態的其他後續呼叫，呼叫這個方法來避免<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph>程式碼中。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>Invalidates the rendering of the element, and forces a complete new layout pass.</source>
          <target state="translated">讓項目的呈現失效，並強制全新的配置傳遞。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /&gt;</ph> is called after the layout cycle is completed.</source>
          <target state="translated">在配置週期完成後，會呼叫 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>This method calls <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> internally.</source>
          <target state="translated">這個方法會呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph>內部。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>This method is not generally called from your application code.</source>
          <target state="translated">從您的應用程式程式碼不通常呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already.</source>
          <target state="translated">WPF 架構層級配置系統沒有自己的變更項目的視覺化樹狀結構中處理，會呼叫這個方法只有在必要時對等項目已經。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>Calling this method is necessary only for advanced scenarios.</source>
          <target state="translated">僅適用於進階案例，必須呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.InvalidateVisual">
          <source>One such advanced scenario is if you are creating a <ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a dependency property that is not on a <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class that still influences the layout when it changes.</source>
          <target state="translated">這類進階的案例之一是如果您建立<ph id="ph1">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>不在相依性屬性的<ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>衍生類別，當監視變更，仍會影響配置。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source>Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.</source>
          <target state="translated">取得值，這個值表示在此項目之配置中子項目的計算大小和位置是有效的。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the size and position of layout are valid; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果配置的大小和位置有效則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source>You can force arrangement to be invalidated by calling <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> on this element (or its parents).</source>
          <target state="translated">您可以強制排列方式以透過呼叫失效<ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph>在這個項目 （或其父代）。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source>This flags the layout for recomposition at such time as the layout system determines.</source>
          <target state="translated">此旗標 at 次例如版面配置系統決定重新編輯畫的配置。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source>Alternatively, an immediate call to <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).</source>
          <target state="translated">或者，若要立即呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>無法進行，但這應該只有在執行如果確定沒有進一步的失效暫止 （大量不必要地強制更新會影響效能）。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsArrangeValid">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph> cannot be <ph id="ph2">`true`</ph> unless <ph id="ph3">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> is also <ph id="ph4">`true`</ph> (in the layout process, arrangement cannot be valid without measurement first being valid).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph> 不能<ph id="ph2">`true`</ph>除非<ph id="ph3">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph>也<ph id="ph4">`true`</ph>（版面配置處理序中排列不能有效而不先在 有效的度量）。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Gets or sets a value indicating whether this element is enabled in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">取得或設定值，這個值表示此項目是否在<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> 中啟用。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsEnabled">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已啟用該項目則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">預設值是 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Note that this property is influenced by class-specific implementations of <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;</ph> on particular elements, often at runtime.</source>
          <target state="translated">請注意這個屬性會受到特定類別的實作<ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;</ph>特定項目，通常在執行階段。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Therefore, the default value listed here is sometimes not effective.</source>
          <target state="translated">因此，此處所列的預設值有時不是有效。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>For instance, a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph> will be <ph id="ph2">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> <ph id="ph3">`false`</ph> whenever it is determined that there is no need to support a scrollbar.</source>
          <target state="translated">比方說，<ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph>將<ph id="ph2">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph><ph id="ph3">`false`</ph>每當判斷為不需要支援捲軸。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Attempting to set this value will also potentially be overridden by the value returned by <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;</ph>.</source>
          <target state="translated">嘗試設定此值將也可能會覆寫所傳回的值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</source>
          <target state="translated">未啟用的項目不會參與點擊測試或焦點，而且不會因此輸入事件的來源。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabled">
          <source>The following example shows a handler on one button that when executed will set <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> <ph id="ph2">`false`</ph> on another named button <ph id="ph3">`b1`</ph>.</source>
          <target state="translated">下列範例顯示處理常式上一個 按鈕時執行的將設定<ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph><ph id="ph2">`false`</ph>上另一個具名的按鈕<ph id="ph3">`b1`</ph>。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsEnabledChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph> property on this element changes.</source>
          <target state="translated">當這個項目的 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph> 屬性值變更時發生。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsEnabledChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>Gets a value that becomes the return value of <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph> in derived classes.</source>
          <target state="translated">取得值，這個值會成為衍生類別中 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph> 的傳回值。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已啟用該項目則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</source>
          <target state="translated">這個屬性的預設實作快取的值，而且也會計算這個項目之父項目是否已啟用。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>(If the parent is not enabled, the child element cannot be effectively enabled in practical <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</source>
          <target state="translated">(如果未啟用父代，無法在實際有效地啟用的子項目<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>。)如果您選擇覆寫這個實作，請確定呼叫基底實作以保留此行為。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Controls.Primitives.ScrollBar" /&gt;</ph> class provides an existing override implementation of this property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Controls.Primitives.ScrollBar" /&gt;</ph>類別會提供這個屬性的現有覆寫實作。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>This override determines whether the content inside the content presentation area exceeds the available area.</source>
          <target state="translated">此覆寫會決定內容呈現區域內的內容是否超過可用的區域。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>If the content does exceed the area, the scrollbar portion is enabled.</source>
          <target state="translated">如果內容未超出區域，已啟用的捲軸部分。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsEnabledCore">
          <source>Otherwise, the scrollbar is not enabled.</source>
          <target state="translated">否則，不會啟用捲軸。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsEnabledProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsEnabled" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsFocused">
          <source>Gets a value that determines whether this element has logical focus.</source>
          <target state="translated">取得值，決定這個項目是否具有邏輯焦點。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsFocused">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has logical focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個項目擁有邏輯焦點則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</source>
          <target state="translated">如果某個應用程式多個焦點分區，例如功能表內容和應用程式的其餘部分之間，可能會與鍵盤焦點不同邏輯焦點。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</source>
          <target state="translated">在此案例中，應用程式 UI 的一個項目上只能是鍵盤焦點，不過，其他焦點分割中的特定項目可能仍會保留邏輯焦點。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>For more information on logical focus, see <bpt id="p1">[</bpt>Focus Overview<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>.</source>
          <target state="translated">如需有關邏輯焦點的詳細資訊，請參閱<bpt id="p1">[</bpt>焦點概觀<ept id="p1">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>You do not set focus by setting this property (it is read-only).</source>
          <target state="translated">您未設定此屬性 （它是唯讀） 設定焦點。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>The typical use for this property is to use it as a dependency property for a <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph>.</source>
          <target state="translated">這個屬性的典型用法就是使用它作為相依性屬性的<ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>To set focus programmatically, call <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>.</source>
          <target state="translated">若要以程式設計方式設定焦點，呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</source>
          <target state="translated">藉由使用者動作或控制項實作，其中可能包括滑鼠捕捉行為，也可以設定焦點。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>The following example is a code handler that changes the background of a control when it is focused.</source>
          <target state="translated">下列範例會變更控制項的背景，當它主要針對程式碼處理常式。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>Another common way to achieve this same effect is to place a <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> in the <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the <ph id="ph3">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>.</source>
          <target state="translated">另一個常見的方式來達成這個相同的效果是放置<ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph>中<ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph>的控制項; 這種方法不需要處理程式碼後置的特定事件，而且可讓設計工具的互動式和圖形本質更大的存取<ph id="ph3">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsFocused">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Create an Outer Glow Effect<ept id="p1">](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)</ept>.</source>
          <target state="translated">如需範例，請參閱<bpt id="p1">[</bpt>How to： 建立外部的光暈效果<ept id="p1">](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)</ept>。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsFocusedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsFocused" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsFocused" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</source>
          <target state="translated">取得或設定宣告此元素是否可以從其呈現內容的某些部分傳回，作為點擊測試結果的值。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element could be returned as a hit test result from at least one point; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個項目可從至少一個點當做點擊測試結果傳回則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">預設值是 <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</source>
          <target state="translated">這個屬性的有效值會受到點擊測試的項目邏輯樹狀中的相對位置。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain <ph id="ph1">`false`</ph>, even if attempting to set that value locally.</source>
          <target state="translated">比方說，如果某個元素的子元素的項目，不會叫用測試顯示，將會繼續的子系上屬性的有效值<ph id="ph1">`false`</ph>，即使嘗試在本機設定該值。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>For this reason, it is important that you do not set <ph id="ph1">&lt;xref:System.Windows.UIElement.IsHitTestVisible%2A&gt;</ph> to <ph id="ph2">`false`</ph> on a composited control unless you do not want any input or hit testing on that control.</source>
          <target state="translated">基於這個理由，請務必確認您未設定<ph id="ph1">&lt;xref:System.Windows.UIElement.IsHitTestVisible%2A&gt;</ph>至<ph id="ph2">`false`</ph>複合控制項上，除非您不想要的任何輸入或的點擊測試該控制項。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>For more information on hit testing, see <bpt id="p1">[</bpt>Hit Testing in the Visual Layer<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)</ept>.</source>
          <target state="translated">如需點擊測試的詳細資訊，請參閱<bpt id="p1">[</bpt>視覺分層中的點擊測試<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)</ept>。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsHitTestVisible">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsHitTestVisibleChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsHitTestVisible" /&gt;</ph> dependency property changes on this element.</source>
          <target state="translated">當這個項目的 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsHitTestVisible" /&gt;</ph> 相依性屬性值變更時發生。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsHitTestVisibleChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsHitTestVisibleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsHitTestVisible" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsHitTestVisible" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsInputMethodEnabled">
          <source>Gets a value indicating whether an input method system, such as an <ph id="ph1">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph>,  is enabled for processing the input to this element.</source>
          <target state="translated">取得值，這個值指出是否已啟用輸入方法系統，例如<ph id="ph1">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph>，以處理此項目的輸入。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsInputMethodEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an input method is active; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果輸入方法作用中則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsInputMethodEnabled">
          <source>The default value of the underlying attached property is <ph id="ph1">&lt;see langword="true;" /&gt;</ph> however, this will be influenced by the actual state of input methods at runtime.</source>
          <target state="translated">基礎附加屬性的預設值是<ph id="ph1">&lt;see langword="true;" /&gt;</ph>不過，這會受到輸入法在執行階段的實際狀態。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsInputMethodEnabled">
          <source>This property returns the value that is returned by the attached property <ph id="ph1">&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType&gt;</ph> for the currently enabled input methods (keyboard, speech, and other input devices).</source>
          <target state="translated">這個屬性會傳回附加的屬性所傳回的值<ph id="ph1">&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType&gt;</ph>針對目前啟用輸入法 （鍵盤、 語音、 和其他輸入的裝置）。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>Gets a value indicating whether this element has keyboard focus.</source>
          <target state="translated">取得值，指出這個項目是否具有鍵盤焦點。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has keyboard focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個項目具有鍵盤焦點則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>Changes to the determined value of this property may be accompanied by focus-related events.</source>
          <target state="translated">決定的值，這個屬性的變更可能會伴隨焦點相關事件。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph>常用類別事件處理常式中的其他輸入相關的事件，例如來決定項目已經有鍵盤焦點，或進行決定當滑鼠事件和鍵盤事件一起出現。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocused">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsKeyboardFocusedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocused" /&gt;</ph> property changes on this element.</source>
          <target state="translated">當這個項目的 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocused" /&gt;</ph> 屬性值變更時發生。</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsKeyboardFocusedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsKeyboardFocusedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocused" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocused" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</source>
          <target state="translated">取得值，表示鍵盤焦點是否在項目或其視覺化樹狀子項目內的任何位置。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if keyboard focus is on the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果鍵盤焦點在項目或其子項目上則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Changes to the value of this property typically raise the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> event, unless a derived class has overridden <ph id="ph2">&lt;xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A&gt;</ph> to suppress the event.</source>
          <target state="translated">對這個屬性的值的變更通常引發<ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph>事件，除非在衍生的類別已覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A&gt;</ph>来隱藏的事件。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>You do not set this property directly, but you can set the focus to an element by calling <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>, or by making a <ph id="ph2">&lt;xref:System.Windows.UIElement.MoveFocus%2A&gt;</ph> request.</source>
          <target state="translated">您未設定這個屬性，但您也可以呼叫的項目設定焦點<ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>，或藉由<ph id="ph2">&lt;xref:System.Windows.UIElement.MoveFocus%2A&gt;</ph>要求。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Either of these method calls might change this property value.</source>
          <target state="translated">這些方法會呼叫其中一項可能會變更這個屬性值。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph>通常用於類別的事件處理常式中其他輸入相關的事件，例如來決定項目已經有鍵盤焦點，或進行決定當滑鼠事件和鍵盤事件一起出現。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsKeyboardFocusWithin">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /&gt;</ph> property changes on this element.</source>
          <target state="translated">當這個項目的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /&gt;</ph> 屬性值變更時發生。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>Gets or sets a value that indicates whether manipulation events are enabled on this <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">取得或設定值，這個值表示是否在此 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 上啟用操作事件。</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if manipulation events are enabled on this <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果在這個 <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 上啟用操作事件則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>Set this property to true if you want the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> to receive the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph>, and <ph id="ph7">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph> events.</source>
          <target state="translated">設定此屬性設定為 true，如果您想<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>接收<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph>， <ph id="ph4">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>， <ph id="ph5">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph>， <ph id="ph6">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph>，和<ph id="ph7">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需操作的詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">如需操作回應的應用程式的範例，請參閱<bpt id="p1">[</bpt>逐步解說： 建立您第一個接觸的應用程式<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>The following example creates an application that has a red Rectangle.</source>
          <target state="translated">下列範例會建立具有紅色矩形的應用程式。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> property of the Rectangle is set to true and the application's window subscribes to the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph>矩形的屬性設定為 true，且應用程式的視窗訂閱<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>， <ph id="ph3">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>，和<ph id="ph4">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsManipulationEnabled">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">這個範例是在較大範例的一部分<bpt id="p1">[</bpt>逐步解說： 建立您第一個接觸的應用程式<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsManipulationEnabledProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsManipulationEnabled" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsManipulationEnabled" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>Gets a value indicating whether the current size returned by layout measure is valid.</source>
          <target state="translated">取得值，這個值表示配置測量所傳回的目前大小是否有效。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the measure pass of layout returned a valid and current value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果配置的測量傳遞傳回有效的目前值則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>You can force measurement and arrangement to be invalidated by calling <ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> on this element (or any parent element up the visual tree).</source>
          <target state="translated">您可以強制度量和排列方式以透過呼叫失效<ph id="ph1">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph>在這個項目 （或視覺化樹狀結構的任何父項目）。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system.</source>
          <target state="translated">這會指定配置以重新編輯畫以非同步的方式，取決於版面配置系統一次發生。</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>Alternatively, you could make an immediate call to <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>.</source>
          <target state="translated">或者，您可以進行的立即呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>However, you should only call <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).</source>
          <target state="translated">不過，您應該只呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>如果很可能沒有進一步的失效暫止 （大量不必要地強制更新會有影響效能）。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMeasureValid">
          <source>If <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> is <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph> must also be <ph id="ph4">`false`</ph> (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph>是<ph id="ph2">`false`</ph>，<ph id="ph3">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph>也必須是<ph id="ph4">`false`</ph>（版面配置處理序，強制執行邏輯，排列方式不能有效而不先在 有效的度量）。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>Gets a value indicating whether the mouse is captured to this element.</source>
          <target state="translated">取得值，指出是否將滑鼠擷取至這個項目。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element has mouse capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果項目已具有滑鼠捕捉則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>Mouse capture state is related to in-process drag-and-drop operations.</source>
          <target state="translated">與處理序中的拖放作業相關的滑鼠捕捉的狀態。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.</source>
          <target state="translated">下列範例會根據是否已捕捉滑鼠的項目，開啟或關閉滑鼠擷取狀態。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>If mouse capture is elsewhere, the mouse capture is set to that element.</source>
          <target state="translated">如果滑鼠擷取是在其他地方，滑鼠擷取設定為該元素。</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptured">
          <source>If the element had mouse capture, it is cleared by calling <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph> with a null input.</source>
          <target state="translated">如果項目具有滑鼠擷取，它會清除藉由呼叫<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType&gt;</ph>具有 null 輸入。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsMouseCapturedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptured" /&gt;</ph> property changes on this element.</source>
          <target state="translated">當這個項目的 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptured" /&gt;</ph> 屬性值變更時發生。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsMouseCapturedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsMouseCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptured" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</source>
          <target state="translated">取得值，這個值決定滑鼠擷取是由這個項目持有，還是由其視覺化樹狀結構中的子項目持有。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element or a contained element has mouse capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個項目或包含的項目具有滑鼠捕捉則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseCaptureWithin">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsMouseCaptureWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /&gt;</ph> changes on this element.</source>
          <target state="translated">當這個項目的 <ph id="ph1">&lt;see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /&gt;</ph> 值變更時發生。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsMouseCaptureWithinChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsMouseCaptureWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">取得值，指出滑鼠指標位置是否與點擊測試結果對應，該結果會將複合項目納入考量。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the mouse pointer is over the same element result as a hit test; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 如果滑鼠指標位於相同的項目結果與點擊測試。否則， <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph>, this property is only <ph id="ph2">`true`</ph> if the mouse pointer is over the literal element—as it is for a hit test.</source>
          <target state="translated">不同於<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph>，這個屬性才<ph id="ph2">`true`</ph>如果滑鼠指標常值的項目，因為其適用於點擊測試。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果滑鼠指標位於子項目上方，特別是在項目一部分的項目更深入的範本和複合 （compositing），這個屬性會是<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">除非您知道控制項的複合 （例如，您使用這個屬性的自訂控制項範本中的控制項，您定義），這個屬性可能會傳回非預期的結果。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>For most scenarios where you are not authoring controls, use <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> instead.</source>
          <target state="translated">大部分的情況下都不製作控制項，使用<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph>改為。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>If the mouse is captured by this element, and this property is <ph id="ph1">`true`</ph> at time of capture, this property will continue to return <ph id="ph2">`true`</ph> until mouse capture is lost and the pointer is not over its bounds.</source>
          <target state="translated">如果將滑鼠擷取由這個項目，而且這個屬性為<ph id="ph1">`true`</ph>在擷取時，這個屬性會繼續傳回<ph id="ph2">`true`</ph>直到失去滑鼠捕捉但其範圍不是指標。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseDirectlyOver">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsMouseDirectlyOverChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /&gt;</ph> property changes on this element.</source>
          <target state="translated">當這個項目的 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /&gt;</ph> 屬性值變更時發生。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsMouseDirectlyOverChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsMouseDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</source>
          <target state="translated">取得值，指出滑鼠指標是否在這個項目上方 (包括視覺化樹狀中的子項目)。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if mouse pointer is over the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果滑鼠指標位於項目或其子項目上方則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</source>
          <target state="translated">一般而言，控制項是複合的控制項 （視覺化樹狀結構） 內的各種項目都會報告包含控制項的滑鼠狀態。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> style control will report <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> as <ph id="ph3">`true`</ph> if the mouse is anywhere over its geometry, including any <ph id="ph4">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph>.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>樣式控制項將會報告<ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph>為<ph id="ph3">`true`</ph>如果滑鼠任意處是它的幾何，包括任何<ph id="ph4">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</source>
          <target state="translated">雖然類似"IsMouseOverChanged 」 事件不存在，便會執行數個類似的事件。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>For example, you can handle <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph>.</source>
          <target state="translated">例如，您可以處理<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph>， <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>，和<ph id="ph3">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>If this element captures the mouse, this property remains <ph id="ph1">`true`</ph> until mouse capture is lost and the mouse pointer leaves the element bounds.</source>
          <target state="translated">如果此元素擷取滑鼠，這個屬性會保留<ph id="ph1">`true`</ph>直到已失去滑鼠捕捉滑鼠指標離開項目範圍。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</source>
          <target state="translated">有些控制項刻意捕捉滑鼠上似乎沒有直接牽涉到滑鼠特定動作。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>This can lead to <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> being <ph id="ph2">`true`</ph> even though the mouse has not apparently moved.</source>
          <target state="translated">這可能會導致<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph>正在<ph id="ph2">`true`</ph>即使看似沒有移動滑鼠。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>The following example references this property as the property type of a <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph>, part of a <ph id="ph2">\&lt;</ph>Style.Triggers&gt; block.</source>
          <target state="translated">下列範例會參考這個屬性的屬性類型為<ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph>，屬於<ph id="ph2">\&lt;</ph>Style.Triggers &gt; 區塊。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsMouseOver">
          <source>If the mouse is over the control, the control text turns blue and the cursor becomes a hand.</source>
          <target state="translated">如果滑鼠位於控制項上，控制項文字會變成藍色，資料指標會變成手的形狀。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsMouseOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseOver" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseOver" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>Gets a value indicating whether the stylus is captured by this element.</source>
          <target state="translated">取得值，指出這個項目是否擷取手寫筆。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element has stylus capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果項目已具有手寫筆捕捉則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptured">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsStylusCapturedChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptured" /&gt;</ph> property changes on this element.</source>
          <target state="translated">當這個項目的 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptured" /&gt;</ph> 屬性值變更時發生。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsStylusCapturedChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsStylusCapturedProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptured" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptured" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</source>
          <target state="translated">取得值，這個值決定手寫筆擷取是由這個項目持有，還是由項目範圍及其視覺化樹狀中的項目持有。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element or a contained element has stylus capture; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果這個項目或包含的項目具有手寫筆捕捉則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>For more information, see <bpt id="p1">[</bpt>Touch Input Support in Windows Vista<ept id="p1">](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept> and <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>觸控輸入支援在 Windows Vista<ept id="p1">](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept>和<bpt id="p2">[</bpt>輸入概觀<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusCaptureWithin">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsStylusCaptureWithinChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /&gt;</ph> property changes on this element.</source>
          <target state="translated">當這個項目的 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /&gt;</ph> 屬性值變更時發生。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsStylusCaptureWithinChanged">
          <source>This is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsStylusCaptureWithinProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">取得值，指出手寫筆位置是否與點擊測試結果相對應，該結果會將複合項目納入考量。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stylus pointer is over the same element result as a hit test; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果手寫筆位於與點擊測試相同的項目結果上方則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Unlike <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph>, this property is only <ph id="ph2">`true`</ph> if the stylus is over the element.</source>
          <target state="translated">不同於<ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph>，這個屬性才<ph id="ph2">`true`</ph>如果手寫筆在元素上方。</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果手寫筆改為透過子元素或元素的更深入的複合 （視覺化樹狀結構） 的一部分的項目，這個屬性會是<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">除非您知道控制項的複合 （例如，您使用這個屬性的自訂控制項範本中的控制項，您定義），這個屬性可能會傳回非預期的結果。</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>For most scenarios where you are not authoring controls, use <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> instead.</source>
          <target state="translated">大部分的情況下都不製作控制項，使用<ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph>改為。</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>If this element has stylus capture and this property is <ph id="ph1">`true`</ph> at the time of capture, this property remains <ph id="ph2">`true`</ph> until stylus capture is lost and the stylus is not over its bounds.</source>
          <target state="translated">如果這個項目具有手寫筆擷取，而且這個屬性是<ph id="ph1">`true`</ph>在擷取時，這個屬性會保持<ph id="ph2">`true`</ph>直到手寫筆擷取遺失，且其範圍不是手寫筆。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusDirectlyOver">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsStylusDirectlyOverChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /&gt;</ph> property changes on this element.</source>
          <target state="translated">當這個項目的 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /&gt;</ph> 屬性值變更時發生。</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsStylusDirectlyOverChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsStylusDirectlyOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</source>
          <target state="translated">取得值，指出手寫筆游標是否位在這個項目上方 (包括視覺子項目)。</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if stylus cursor is over the element or its child elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果手寫筆游標位於項目或其子項目上方則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>If this element has stylus capture, this property will continue to return <ph id="ph1">`true`</ph> until stylus capture is lost and the pointer is out of its bounds.</source>
          <target state="translated">如果這個項目具有手寫筆擷取，這個屬性會繼續傳回<ph id="ph1">`true`</ph>直到手寫筆擷取是遺失而且已超出其範圍的指標。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsStylusOver">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsStylusOverProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusOver" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsStylusOver" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsVisible">
          <source>Gets a value indicating whether this element is visible in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">取得值，這個值表示此項目在<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> 中是否為可見的。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.IsVisible">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is visible; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果事件為可見的則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>Determination of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> value takes all factors of layout into account.</source>
          <target state="translated">判斷<ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph>值會考量所有配置的因素。</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</source>
          <target state="translated">相反地， <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>，這是可設定的屬性，只表示要以程式設計的方式讓項目，可見或不可見。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>Elements where <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> is <ph id="ph2">`false`</ph> do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</source>
          <target state="translated">項目位置<ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph>是<ph id="ph2">`false`</ph>參與輸入的事件 （或命令），請執行不影響量值或排列傳遞的版面配置，不是可設定焦點、 索引標籤順序而且不會報告在點擊測試。</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>In contrast, elements where <ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> is <ph id="ph2">`false`</ph> will still participate in events and commands, and hit testing, but are also not focusable.</source>
          <target state="translated">相較之下，項目位置<ph id="ph1">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph>是<ph id="ph2">`false`</ph>仍會參與事件和命令，以及點擊測試，但是也不是可設定焦點。</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.IsVisible">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.IsVisibleChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsVisible" /&gt;</ph> property changes on this element.</source>
          <target state="translated">當這個項目的 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsVisible" /&gt;</ph> 屬性值變更時發生。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsVisibleChanged">
          <source>This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> property.</source>
          <target state="translated">如果項目不呈現的版面配置系統的值以外的原因而不會引發這個事件<ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsVisibleChanged">
          <source>For example, the element might not have an associated visual.</source>
          <target state="translated">例如，項目可能沒有相關聯的 visual。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.IsVisibleChanged">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.IsVisibleProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsVisible" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsVisible" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.KeyDown">
          <source>Occurs when a key is pressed while focus is on this element.</source>
          <target state="translated">焦點在這個項目上方且按下按鍵時發生。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph>是可能無法如預期般特定控制項的較低層級文字輸入的事件。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">這是因為有些控制項會有複合控制項，或提供文字的高階版本的類別處理輸入處理和相關事件。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> attached event for this class so that <ph id="ph2">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph>附加這個類別的事件，讓<ph id="ph2">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.KeyDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.KeyDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.KeyUp">
          <source>Occurs when a key is released while focus is on this element.</source>
          <target state="translated">焦點在這個項目上方且放開按鍵時發生。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> attached event for this class so that  <ph id="ph2">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph>附加這個類別的事件，讓<ph id="ph2">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.KeyUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.KeyUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.KeyUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.KeyUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LayoutUpdated">
          <source>Occurs when the layout of the various visual elements associated with the current <ph id="ph1">&lt;see cref="T:System.Windows.Threading.Dispatcher" /&gt;</ph> changes.</source>
          <target state="translated">當目前 <ph id="ph1">&lt;see cref="T:System.Windows.Threading.Dispatcher" /&gt;</ph> 的數個關聯視覺化項目的配置變更時發生。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LayoutUpdated">
          <source>A layout update can occur as a result of a property change, a window resize, or an explicit user request.</source>
          <target state="translated">配置更新可能會發生在屬性變更、 視窗調整大小或明確的使用者要求的結果。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LayoutUpdated">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">這個成員是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>事件，則不是路由的事件。</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LostFocus">
          <source>Occurs when this element loses logical focus.</source>
          <target state="translated">此元素失去邏輯焦點時發生。</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">如果使用方法呼叫刻意強制焦點，但上一個鍵盤焦點存在於不同範圍中，則邏輯焦點會與鍵盤焦點不同。</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>In this scenario, keyboard focus remains where it is, and the element where a <ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> method is called still gets logical focus.</source>
          <target state="translated">在此案例中、 鍵盤焦點會維持為，其所在和項目位置<ph id="ph1">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>方法呼叫仍取得邏輯焦點。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>A more precise interpretation of this event is that it is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property of an element in the route changes from <ph id="ph2">`true`</ph> to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">這個事件的更精確的解釋是它時引發的值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph>屬性路由的項目從變更<ph id="ph2">`true`</ph>至<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由於這個事件會使用反昇路由，失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.</source>
          <target state="translated">請檢查<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph>事件資料來判斷實際取得焦點的項目中。</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>There is no corresponding tunneling event.</source>
          <target state="translated">沒有任何對應通道的事件。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostFocus%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Occurs when the keyboard is no longer focused on this element,.</source>
          <target state="translated">鍵盤不再以此項目為焦點時發生。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由於這個事件會使用反昇路由，失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">請檢查<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph>事件資料來判斷實際失去焦點的項目中。</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostKeyboardFocus%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostKeyboardFocus" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Occurs when this element loses mouse capture.</source>
          <target state="translated">此元素失去滑鼠擷取時發生。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</source>
          <target state="translated">當項目捕捉到滑鼠時，它收到滑鼠輸入，即使指標位於其範圍外。</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>The mouse is typically captured only during drag-and-drop operations.</source>
          <target state="translated">滑鼠通常只會在拖放作業期間擷取。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由於這個事件會使用反昇路由，失去擷取項目可能是子元素，而非項目實際附加事件處理常式。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost capture.</source>
          <target state="translated">請檢查<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph>事件資料來判斷實際遺失擷取的項目中。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.LostMouseCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.LostMouseCapture&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.LostMouseCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.LostMouseCapture&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">沒有定義對應通道的事件。</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostMouseCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostMouseCapture%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostMouseCapture" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostMouseCapture" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostMouseCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Occurs when this element loses stylus capture.</source>
          <target state="translated">此元素失去手寫筆擷取時發生。</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">當項目擷取手寫筆時，即使指標位於其範圍外接收手寫筆輸入。</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">通常只會在拖放作業期間擷取手寫筆。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由於這個事件會使用反昇路由，失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">請檢查<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph>事件資料來判斷實際失去焦點的項目中。</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.LostStylusCapture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.LostStylusCapture&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.LostStylusCapture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.LostStylusCapture&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">沒有定義對應通道的事件。</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostStylusCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostStylusCapture%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostStylusCapture" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostStylusCapture" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.LostStylusCaptureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Occurs when this element loses a touch capture.</source>
          <target state="translated">當這個項目失去觸控擷取時發生。</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.LostTouchCapture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.LostTouchCaptureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostTouchCapture" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostTouchCapture" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Occurs when the manipulation encounters a boundary.</source>
          <target state="translated">當操作遇到界限時發生。</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> 事件。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Occurs when a manipulation and inertia on the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> object is complete.</source>
          <target state="translated">當對 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 物件進行的操作和慣性完成時發生。</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>You can use this event to get information about the manipulation when it completes.</source>
          <target state="translated">若要取得之操作的相關資訊，完成時，您可以使用此事件。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType&gt;</ph> property to determine the total amount the position of the manipulation changed.</source>
          <target state="translated">例如，您可以使用<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType&gt;</ph>屬性來判斷總量操作的位置變更。</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需操作的詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">如需操作回應的應用程式的範例，請參閱<bpt id="p1">[</bpt>逐步解說： 建立您第一個接觸的應用程式<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationCompleted">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationCompletedEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationCompletedEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationCompletedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationCompleted" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationCompleted" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Occurs when the input device changes position during a manipulation.</source>
          <target state="translated">輸入裝置在操作期間變更位置時發生。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>事件在當使用者拖曳手指螢幕操作期間，一次慣性發生時，就會發生多次。</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>You can use the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A&gt;</ph> property to check whether the event is occurring during inertia.</source>
          <target state="translated">您可以使用<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A&gt;</ph>屬性檢查事件是否發生在慣性期間。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The element on with <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurs is not affected in any way when the event occurs.</source>
          <target state="translated">使用的項目<ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>不影響任何方式在事件發生時，事件就會發生。</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>You must provide the logic to the element that is to be manipulated.</source>
          <target state="translated">您必須提供邏輯以可操作的項目。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> properties, which are of type <ph id="ph3">&lt;xref:System.Windows.Input.ManipulationDelta&gt;</ph>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph>屬性，這些型別的屬性<ph id="ph3">&lt;xref:System.Windows.Input.ManipulationDelta&gt;</ph>，包含有關如何變更操作的位置資料，而解譯為移動、 調整大小或旋轉的物件。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>You apply that information to the element that is to be manipulated.</source>
          <target state="translated">您可將該資訊套用至可操作的項目中。</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需操作的詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">如需操作回應的應用程式的範例，請參閱<bpt id="p1">[</bpt>逐步解說： 建立您第一個接觸的應用程式<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The following example shows an event handler for the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event.</source>
          <target state="translated">下列範例顯示的事件處理常式<ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> property to move, resize, and rotate a <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>.</source>
          <target state="translated">此範例會使用<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph>屬性來移動、 調整大小，和旋轉<ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>The example also checks whether the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurred during inertia and whether the rectangle is touching the edge of a window.</source>
          <target state="translated">此範例也會檢查是否<ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>慣性和矩形是否接觸視窗邊緣期間發生的事件。</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</source>
          <target state="translated">如果這種情況下，應用程式會停止操作，若要防止將應用程式的可見區域的矩形。</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationDelta">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">這個範例是在較大範例的一部分<bpt id="p1">[</bpt>逐步解說： 建立您第一個接觸的應用程式<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationDeltaEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Occurs when the input device loses contact with the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> object during a manipulation and inertia begins.</source>
          <target state="translated">當輸入裝置在操作期間失去和 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 物件的通訊以及慣性開始時發生。</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event occurs when the user lifts all of the fingers from the screen during a manipulation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph>事件發生於使用者將取消所有從螢幕的指操作期間。</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>For example, if a user "throws" a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> across a surface, the user will touch the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> to begin the action, move the finger across the screen for a short distance, and then release the <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">例如，如果使用者 」 會擲回 「<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>跨介面，使用者將觸控<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>開始的動作，請將手指移短的距離，畫面上，然後放開<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>When the user releases the element, inertia begins and the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event occurs.</source>
          <target state="translated">當使用者放開項目時，會開始慣性和<ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph>就會發生事件。</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> continues to receive <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> events to indicate that inertia is occurring on the element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>會繼續接收<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>事件，以指出慣性發生之項目上。</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>You can use this event to specify the behavior of the inertia.</source>
          <target state="translated">若要指定慣性的行為，您可以使用此事件。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>For example, you can set the initial velocity that is used when inertia begins.</source>
          <target state="translated">例如，您可以設定慣性開始時所使用的初始速度。</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.</source>
          <target state="translated">藉由設定所需的減速或設定所需的位置，您也可以指定慣性數量。</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>You can set these values for each type of manipulation (translation, expansion, or rotation) independently.</source>
          <target state="translated">您可以個別設定每一種操作 （轉譯、 擴充或旋轉） 的這些值。</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需操作的詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">如需操作回應的應用程式的範例，請參閱<bpt id="p1">[</bpt>逐步解說： 建立您第一個接觸的應用程式<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia.</source>
          <target state="translated">下列範例所示<ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph>事件處理常式，並設定所需的減速的轉譯、 擴充，以及使用慣性期間的旋轉。</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationInertiaStarting">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">這個範例是在較大範例的一部分<bpt id="p1">[</bpt>逐步解說： 建立您第一個接觸的應用程式<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationInertiaStartingEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Occurs when an input device begins a manipulation on the <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> object.</source>
          <target state="translated">當輸入裝置開始對 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 物件進行操作時發生。</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph> event occurs after the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph>之後就會發生事件<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>You can do the following with the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;</ph>:</source>
          <target state="translated">您可以使用下列<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Get the element that the manipulation's position is relative to by using the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A&gt;</ph> property.</source>
          <target state="translated">取得操作的位置是相對於使用的項目<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Get the origin of the manipulation by using the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A&gt;</ph> property.</source>
          <target state="translated">取得操作的原點使用<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Cancel the manipulation by calling the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A&gt;</ph> method.</source>
          <target state="translated">藉由呼叫取消操作<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需操作的詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">如需操作回應的應用程式的範例，請參閱<bpt id="p1">[</bpt>逐步解說： 建立您第一個接觸的應用程式<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarted">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationStartedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarted" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarted" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Occurs when the manipulation processor is first created.</source>
          <target state="translated">發生於第一次建立操作處理器時。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event occurs on an element that has the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> property set to <ph id="ph3">`true`</ph> when the user puts a finger on it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>事件發生在具有的項目上<ph id="ph2">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph>屬性設定為<ph id="ph3">`true`</ph>當使用者將手指放在其上。</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>By default, subsequent manipulation events report the position of the manipulation relative to the element that has <ph id="ph1">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">根據預設，後續的操作事件報告的位置相對於元素具有操作<ph id="ph1">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph>設<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>You can specify that the position should be relative to another element by setting the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;</ph> property.</source>
          <target state="translated">您可以指定，位置必須是相對於另一個項目，藉由設定<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>For example, you can make the manipulation relative to the parent of the element.</source>
          <target state="translated">比方說，您可以進行此操作相對於項目的父代。</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>You can also do the following in an event handler for <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>:</source>
          <target state="translated">您也可以執行的事件處理常式中的下列<ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Specify whether the user needs more than one finger to perform the manipulations by setting the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">指定使用者是否需要多個執行的操作，藉由設定手指<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Specify which types of manipulation are enabled by setting the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType&gt;</ph> property to a <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationModes&gt;</ph> enumeration.</source>
          <target state="translated">指定依設定會啟用何種類型的操作<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType&gt;</ph>屬性<ph id="ph2">&lt;xref:System.Windows.Input.ManipulationModes&gt;</ph>列舉型別。</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Specify the center of a single-finger rotation by setting the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">設定指定單指旋轉中心的<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Cancel the manipulation by calling the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">藉由呼叫取消操作<ph id="ph1">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需操作的詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">如需操作回應的應用程式的範例，請參閱<bpt id="p1">[</bpt>逐步解說： 建立您第一個接觸的應用程式<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>The following example shows the event handler for the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event and sets the <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;</ph> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.</source>
          <target state="translated">下列範例顯示的事件處理常式<ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>事件和集合<ph id="ph2">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;</ph>接收管理事件，讓操作的座標是相對於父項與父元素。</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.ManipulationStarting">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">這個範例是在較大範例的一部分<bpt id="p1">[</bpt>逐步解說： 建立您第一個接觸的應用程式<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.ManipulationStartingEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarting" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarting" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>The available space that a parent element can allocate a child element.</source>
          <target state="translated">可供父項目用來配置子項目的空間。</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</source>
          <target state="translated">子項目可以要求比可用空間更大的空間；如果在目前項目的內容模型中能夠捲動，就可能容納提供的大小。</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Updates the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.DesiredSize" /&gt;</ph> of a <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">更新 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.DesiredSize" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Parent elements call this method from their own <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /&gt;</ph> implementations to form a recursive layout update.</source>
          <target state="translated">父項目會從其自己的 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /&gt;</ph> 實作呼叫這個方法，以形成遞迴配置更新。</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Calling this method constitutes the first pass (the "Measure" pass) of a layout update.</source>
          <target state="translated">呼叫此方法即構成配置更新的第一次傳遞 (「量值」傳遞)。</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Computation of layout positioning in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> is comprised of a <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call and an <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.</source>
          <target state="translated">計算的版面配置定位在<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>組成<ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>呼叫和<ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>During the <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call, an element determines its size requirements by using an <ph id="ph2">`availableSize`</ph> input.</source>
          <target state="translated">期間<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>呼叫時，項目決定其大小需求使用<ph id="ph2">`availableSize`</ph>輸入。</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>During the <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call, the element size is finalized.</source>
          <target state="translated">期間<ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>完成呼叫時，項目大小。</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source><ph id="ph1">`availableSize`</ph> can be any number from zero to infinite.</source>
          <target state="translated"><ph id="ph1">`availableSize`</ph> 可為任何介於 0 到無限。</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Elements participating in layout should return the minimum <ph id="ph1">&lt;xref:System.Windows.Size&gt;</ph> they require for a given <ph id="ph2">`availableSize`</ph>.</source>
          <target state="translated">參與配置的項目應該會傳回最小值<ph id="ph1">&lt;xref:System.Windows.Size&gt;</ph>它們需要針對給定<ph id="ph2">`availableSize`</ph>。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>When a layout is first instantiated, it always receives a <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call before <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.</source>
          <target state="translated">配置第一次具現化，它一律會接收<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>之前，先呼叫<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>However, after the first layout pass, it may receive an <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call without a <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>; this can happen when a property that affects only <ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> is changed (such as alignment), or when the parent receives an <ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> without a <ph id="ph5">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>.</source>
          <target state="translated">不過之後第一次的版面配置傳遞，, 它可能會收到<ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>呼叫而不需要<ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>; 這種情形只會影響的屬性時<ph id="ph3">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>變更 （例如對齊），或當父系收到<ph id="ph4">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>沒有<ph id="ph5">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call will automatically invalidate an <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>呼叫將會自動讓失效<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>呼叫。</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change.</source>
          <target state="translated">主要執行緒並未等待的每一個可能的版面配置變更，以非同步的方式，會配置更新。</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> property, for example).</source>
          <target state="translated">查詢透過程式碼後置檢查的屬性值的項目可能不會立即反映變更互動的調整大小或版面配置特性的屬性 (<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>內容，例如)。</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Layout updates can be forced by using the <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> method.</source>
          <target state="translated">版面配置更新可以強制使用<ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>However, calling this method is usually unnecessary and can cause poor performance.</source>
          <target state="translated">不過，呼叫這個方法通常不需要而且可能會導致效能不佳。</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>The layout system keeps two separate queues of invalid layouts, one for <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> and one for <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.</source>
          <target state="translated">版面配置系統會保留兩個不同的佇列的無效的版面配置，一個用於<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>，另一個用於<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents.</source>
          <target state="translated">配置佇列會根據執行版面配置; 項目的視覺化樹狀結構中項目的順序排序在樹狀結構中較高的項目是在佇列中，以避免多餘的配置，在父系中重複的變更所造成的頂端。</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.</source>
          <target state="translated">從佇列中，會自動移除重複的項目和項目會自動從佇列中移除已配置驗證。</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>When updating layout, the <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue is emptied first, followed by the <ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue.</source>
          <target state="translated">當更新配置，<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>佇列清空首先，後面接著<ph id="ph2">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>佇列。</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.Measure(System.Windows.Size)">
          <source>An element in the <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue will never be arranged if there is an element in the <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue.</source>
          <target state="translated">中的項目<ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>中的項目時，就永遠不會排列佇列<ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>佇列。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>The available size that the parent element can allocate for the child.</source>
          <target state="translated">父項目可以配置給子項目使用的大小。</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</source>
          <target state="translated">任一項目在衍生類別中被覆寫時，會提供可以正確調整該項目的度量邏輯，並且也會同時考慮所有子項目內容的大小。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>The desired size of this element in layout.</source>
          <target state="translated">這個項目在配置中需要的大小。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>It is more common to derive an element from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">比較常衍生的項目從<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>而不是<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>If you are deriving from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, note that an override of <ph id="ph2">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> on <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals the <ph id="ph4">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> method.</source>
          <target state="translated">如果您衍生自<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>，請注意，覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph>上<ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>標誌<ph id="ph4">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Therefore, you only override <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> as a means to alter layout measure characteristics if you derive from <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> through an inheritance that does not include <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
          <target state="translated">因此，您只會覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph>做為 alter 配置量值的特性，如果您是衍生自<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>透過不含繼承<ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>This might be the case if you are attempting to build your own implementation on the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> core-level.</source>
          <target state="translated">如果您嘗試建置您自己的實作，這可能是大小寫<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>核心層級。</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Otherwise, if you are deriving from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, then the implementation template for Measure behavior is the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation of .<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>.</source>
          <target state="translated">否則，如果您衍生自<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>，則量值的行為的實作範本是<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>的實作。<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>A parent element with child elements must call <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.</source>
          <target state="translated">父項目具有子元素必須呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>上每個子系，否則這些子元素不調整大小或排列，便會有效地在版面配置中消失。</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>A typical override of <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> follows this approximate pattern (there is not a built-in collection called <ph id="ph2">`VisualChildren`</ph>; <ph id="ph3">`VisualChildren`</ph> is a  placeholder that represents whatever child collection your element maintains).</source>
          <target state="translated">典型的覆寫的<ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph>遵循此近似模式 (不是內建集合，稱為<ph id="ph2">`VisualChildren`</ph>;<ph id="ph3">`VisualChildren`</ph>是一個預留位置，表示您的項目會維護任何子系集合)。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>You must call <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> on each child element.</source>
          <target state="translated">您必須呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>每個子項目上。</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Generally, your implementation should cache measurement information between the <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> method calls in the same element.</source>
          <target state="translated">一般而言，您的實作應該快取間的度量資訊<ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph>方法會呼叫相同的項目中。</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Calling base implementations of <ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> is not required, but might be appropriate if the base implementation provides a desired layout capability.</source>
          <target state="translated">呼叫的基底實作<ph id="ph1">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph>不是必要的但是可能適合基底實作提供所需的版面配置功能。</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Calls to <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> on child elements should pass either the same <ph id="ph2">`availableSize`</ph> as the parent, or a subset of the area, depending on the type of layout the parent element supports.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>子系上項目應該傳遞相同<ph id="ph2">`availableSize`</ph>做為父系或子區域的集合，根據的配置類型的父項目支援。</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control.</source>
          <target state="translated">比方說，它會有效移除的項目特定框線或填補、 捲軸或自訂控制項的區域。</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Implementations must be able to process a value provided for <ph id="ph1">&lt;paramref name="availableSize" /&gt;</ph> that is infinite.</source>
          <target state="translated">實作必須能夠處理提供給值<ph id="ph1">&lt;paramref name="availableSize" /&gt;</ph>，為無限。</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>An infinite value indicates no requested constraints, and effectively defers measurement choice to the parent element, through recursive Measure calls.</source>
          <target state="translated">無限值表示沒有要求的條件約束，而實際上會延遲度量選擇父項目，透過遞迴呼叫量值。</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>Implementations can consider the value provided for <ph id="ph1">&lt;paramref name="availableSize" /&gt;</ph> to be a soft constraint.</source>
          <target state="translated">實作可以考慮針對提供的值<ph id="ph1">&lt;paramref name="availableSize" /&gt;</ph>是軟性條件約束。</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>The child element might specify a larger size, even if other aspects of application code were able to determine the current actual size of the parent element.</source>
          <target state="translated">子元素可能會指定較大的大小，即使應用程式程式碼其他方面仍可判斷目前的實際大小的父項目。</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
          <source>The large size request is a convention that indicates that the child element is querying whether your parent element can support content scrolling within a content display region.</source>
          <target state="translated">大型要求是一項慣例，指出父項目是否可以支援內容捲動內容的顯示區域內查詢的子項目。</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseDown">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">指標在此元素上方且按下任何滑鼠按鈕時發生。</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph>通常就會引發事件一起可能<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>，這對應到其中的兩個標準滑鼠按鈕的按下。</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> 和<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>事件到達事件路由上的這個項目。</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">請參閱備註<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Some controls might have inherent class handling for mouse button events.</source>
          <target state="translated">某些控制項可能會繼承的類別處理滑鼠按鈕的事件。</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">滑鼠左鍵按下事件是最有可能有控制項中的類別處理事件。</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>The class handling often marks the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.</source>
          <target state="translated">處理通常類別標示基礎<ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph>為已處理的類別事件。</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">一旦處理標記事件，通常無法引發另一個執行個體處理常式附加至該元素。</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">不通常也會引發任何其他類別或執行個體的處理常式附加到反昇方向朝向 UI 樹狀目錄中的根項目。</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</source>
          <target state="translated">您可以解決問題，會在前面的重要概述，仍然會接收<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph>滑鼠左鍵，往下處理使用其中一個這些方案的類別衍生類別上的事件的事件：</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Attach handlers for the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.</source>
          <target state="translated">附加的處理常式<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph>未標示為已由控制項所處理的事件。</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">請注意，因為這是預覽事件時，路由從根目錄開始，並透過通道傳送到控制項。</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Register a handler on the control procedurally by calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">藉由呼叫可循序註冊控制項上的處理常式<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>，然後選擇讓接聽事件，即使它們已標示為已處理路由的事件資料中的處理常式的簽章選項。</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Occurs when the mouse pointer enters the bounds of this element.</source>
          <target state="translated">滑鼠指標進入此元素的邊界時發生。</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> is a  that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> 是，使用直接的事件處理路由策略。</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">不過，它們會啟用路由的事件的行為，例如事件觸發程序在樣式中的其他層面。</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id="ph3">`false`</ph> to <ph id="ph4">`true`</ph> on this element.</source>
          <target state="translated">雖然<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph>時滑鼠指標進入項目的邊界時發生，此事件的詳細追蹤逐字報告<ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph>屬性值已經從<ph id="ph3">`false`</ph>至<ph id="ph4">`true`</ph>這個項目上。</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> (or any <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph> derived class) has native handling for a <ph id="ph3">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event when the button has focus, and the pressed key is the space bar.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> (或任何<ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph>衍生的類別) 有原生處理的<ph id="ph3">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph>事件時按鈕具有焦點，且已按下的索引鍵空格鍵。</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>The native handling raises the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move.</source>
          <target state="translated">原生處理引發<ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>與做為來源，按鈕的事件，即使似乎移動滑鼠指標，也會擷取滑鼠。</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>As a result of the mouse capture, a <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> event is also raised with the button as the source.</source>
          <target state="translated">因為滑鼠捕捉，<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph>與做為來源按鈕也會引發事件。</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>In general, if an element captures the mouse, then <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> is raised, as well as <ph id="ph2">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> and possibly other control-specific events.</source>
          <target state="translated">一般而言，如果項目捕捉滑鼠，然後<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph>引發時，以及<ph id="ph2">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph>和可能是其他控制項的特定事件。</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseEnter%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseEnter" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseEnter" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Occurs when the mouse pointer leaves the bounds of this element.</source>
          <target state="translated">滑鼠指標離開此元素的邊界時發生。</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> is a  that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> 是，使用直接的事件處理路由策略。</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">不過，它們會啟用路由的事件的行為，例如事件觸發程序在樣式中的其他層面。</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> tracks when the mouse leaves an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id="ph3">`true`</ph> to <ph id="ph4">`false`</ph> on this element.</source>
          <target state="translated">雖然<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph>曲目，當滑鼠離開項目時，此事件多逐字報告<ph id="ph2">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph>屬性值已經從<ph id="ph3">`true`</ph>至<ph id="ph4">`false`</ph>這個項目上。</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeave%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeave" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeave" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且按下滑鼠左按鈕時發生。</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">雖然這看起來進行反昇路由處理項目樹狀結構，但實際上是直接的路由的事件引發且由每個項目樹狀結構沿著 reraised <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>事件，這是附加的事件處理的事件路由上的每個項目。</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">這個事件的事件資料會公開事件資料的基礎<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>，選項來處理已標記為已處理的事件、 事件接聽程式，才能使用。</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">如果您將標示<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>處理，您要基本上標記<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>路由中的所有其他接聽程式處理，而且所有相關事件。</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>This possibly includes class-handler generated events such as <ph id="ph1">&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;</ph>.</source>
          <target state="translated">這可能是包含類別處理常式產生事件如<ph id="ph1">&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">在概念上，將這個事件 (和其他滑鼠按鈕的事件上<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) 是滑鼠 「 服務 」 (所提供的服務定義<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別)。</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph>上<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別而不是那些在<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Some control classes might have inherent class handling for mouse button events.</source>
          <target state="translated">某些控制項類別可能具有固有的類別處理滑鼠按鈕的事件。</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">滑鼠左鍵按下事件是最有可能有控制項中的類別處理事件。</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>The class handling often marks the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.</source>
          <target state="translated">處理通常類別標示基礎<ph id="ph1">&lt;xref:System.Windows.Input.Mouse&gt;</ph>為已處理的類別事件。</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">一旦處理標記事件，通常無法引發另一個執行個體處理常式附加至該元素。</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">不通常也會引發任何其他類別或執行個體的處理常式附加到反昇方向朝向 UI 樹狀目錄中的根項目。</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</source>
          <target state="translated">您可以解決問題，會在前面的重要概述，仍然會接收<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>滑鼠左鍵，往下處理使用其中一個這些方案的類別衍生類別上的事件的事件：</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Attach handlers for the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.</source>
          <target state="translated">附加的處理常式<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph>未標示為已由控制項所處理的事件。</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">請注意，因為這是預覽事件時，路由從根目錄開始，並透過通道傳送到控制項。</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Register a handler on the control procedurally by calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">藉由呼叫可循序註冊控制項上的處理常式<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>，然後選擇讓接聽事件，即使它們已標示為已處理路由的事件資料中的處理常式的簽章選項。</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且放開滑鼠左按鈕時發生。</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">雖然這看起來進行反昇路由處理項目樹狀結構，但實際上是直接的路由的事件引發且由每個項目樹狀結構沿著 reraised <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>事件，這是附加的事件處理的事件路由上的每個項目。</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">這個事件的事件資料會公開事件資料的基礎<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>，選項來處理已標記為已處理的事件、 事件接聽程式，才能使用。</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">如果您將標示<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph>處理，您要基本上標記<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>路由中的所有其他接聽程式處理，而且所有相關事件。</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">在概念上，將這個事件 (和其他滑鼠按鈕的事件上<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) 是滑鼠 「 服務 」 (所提供的服務定義<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別)。</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph>上<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別而不是那些在<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseLeftButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseMove">
          <source>Occurs when the mouse pointer moves while over this element.</source>
          <target state="translated">滑鼠指標在此元素上方移動時發生。</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseMove%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseMove" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseMove" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且按下滑鼠右按鈕時發生。</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">雖然這看起來進行反昇路由處理項目樹狀結構，但實際上是直接的路由的事件引發且由每個項目樹狀結構沿著 reraised <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>事件，這是附加的事件處理的事件路由上的每個項目。</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">這個事件的事件資料會公開事件資料的基礎<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>，選項來處理已標記為已處理的事件、 事件接聽程式，才能使用。</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">如果您將標示<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>處理，您要基本上標記<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>路由中的所有其他接聽程式處理，而且所有相關事件。</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>This possibly includes class-handler generated events such as <ph id="ph1">&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;</ph>.</source>
          <target state="translated">這可能是包含類別處理常式產生事件如<ph id="ph1">&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">在概念上，將這個事件 (和其他滑鼠按鈕的事件上<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) 是滑鼠 「 服務 」 (所提供的服務定義<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別)。</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph>上<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別而不是那些在<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Right button mouse events frequently have native handling in application scenarios.</source>
          <target state="translated">滑鼠右鍵事件中通常會有原生處理應用程式案例。</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>For instance, a right mouse button down might display a context menu.</source>
          <target state="translated">比方說，向下的滑鼠右按鈕可能會顯示內容功能表。</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>See <bpt id="p1">[</bpt>ContextMenu Overview<ept id="p1">](~/docs/framework/wpf/controls/contextmenu-overview.md)</ept>.</source>
          <target state="translated">請參閱<bpt id="p1">[</bpt>ContextMenu 概觀<ept id="p1">](~/docs/framework/wpf/controls/contextmenu-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且放開滑鼠右按鈕時發生。</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">雖然這看起來進行反昇路由處理項目樹狀結構，但實際上是直接的路由的事件引發且由每個項目樹狀結構沿著 reraised <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>事件，這是附加的事件處理的事件路由上的每個項目。</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">這個事件的事件資料會公開事件資料的基礎<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>，選項來處理已標記為已處理的事件、 事件接聽程式，才能使用。</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">如果您將標示<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>處理，您要基本上標記<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>路由中的所有其他接聽程式處理，而且所有相關事件。</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">在概念上，將這個事件 (和其他滑鼠按鈕的事件上<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) 是滑鼠 「 服務 」 (所提供的服務定義<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別)。</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph>上<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別而不是那些在<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseRightButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseRightButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseUp">
          <source>Occurs when any mouse button is released over this element.</source>
          <target state="translated">在此元素上方放開任何滑鼠按鈕時發生。</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>, which correspond to a release of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph>通常就會引發事件一起可能<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>，這對應至其中的兩個標準滑鼠按鈕的版本。</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> 和<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<ph id="ph3">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>事件到達事件路由上的這個項目。</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">請參閱備註<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且使用者滾動滑鼠滾輪時發生。</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">焦點或滑鼠捕捉優先於滑鼠指標所在位置。因此，如果您收到<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph>事件從取得焦點或擷取的項目，將滑鼠指標可能實際上是透過另一個項目。</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseWheel&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseWheel&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.MouseWheel">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseWheel%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseWheel" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseWheel" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.MouseWheelEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</source>
          <target state="translated">包含屬性的周遊要求，該屬性指出在現有定位順序中周遊的模式，或以視覺化方式移動的方向。</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Attempts to move focus from this element to another element.</source>
          <target state="translated">嘗試將焦點從這個項目移至另一個項目。</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</source>
          <target state="translated">移動焦點的方向是由指引方向所指定，該指引方向是在這個項目之視覺化父代的組織內解譯。</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the requested traversal was performed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已執行要求的周遊則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>Make sure you check the return value of this method.</source>
          <target state="translated">請確定您檢查此方法的傳回值。</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
          <source>A return value of <ph id="ph1">`false`</ph> might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</source>
          <target state="translated">傳回值為<ph id="ph1">`false`</ph>如果周遊時碰到的定位點由控制項的組合所定義，並周遊要求未包裝要求可能會傳回。</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>The event data to the access key event.</source>
          <target state="translated">便捷鍵事件的事件資料。</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>The event data reports which key was invoked, and indicate whether the <ph id="ph1">&lt;see cref="T:System.Windows.Input.AccessKeyManager" /&gt;</ph> object that controls the sending of these events also sent this access key invocation to other elements.</source>
          <target state="translated">該事件資料會報告叫用哪個便捷鍵，並指出控制這些事件之傳送的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.AccessKeyManager" /&gt;</ph> 物件，是否也會將這個便捷鍵引動過程傳送至其他項目。</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>Provides class handling for when an access key that is meaningful for this element is invoked.</source>
          <target state="translated">當叫用對這個項目有意義的便捷鍵 (Access Key) 時，為其提供類別處理。</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>There is no actual AccessKey event in the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> class, or elsewhere, which you can raise or attach handlers for.</source>
          <target state="translated">在任何實際 AccessKey 事件<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>類別，或其他位置，您可以引發或附加的處理常式。</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>Instead, the event is originated via a dedicated manager class, <ph id="ph1">&lt;xref:System.Windows.Input.AccessKeyManager&gt;</ph>, which post-processes all input to search for access keys that are applicable to the entire input model.</source>
          <target state="translated">相反地，透過專用的管理員類別，產生事件<ph id="ph1">&lt;xref:System.Windows.Input.AccessKeyManager&gt;</ph>，其中進行後置處理所有輸入来搜尋適用於整個輸入模型的存取金鑰。</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>The default implementation of this method in <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> sets keyboard focus to this element (by calling <ph id="ph2">&lt;see cref="M:System.Windows.UIElement.Focus" /&gt;</ph>).</source>
          <target state="translated">這個方法中的預設實作<ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>設定鍵盤焦點移到這個項目 (藉由呼叫<ph id="ph2">&lt;see cref="M:System.Windows.UIElement.Focus" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>Implementations should perpetuate this behavior if they are focusable, because it is an expected behavior for accessibility scenarios.</source>
          <target state="translated">如果它們是可設定焦點，因為它是協助工具案例中的預期的行為的實作應該延續此行為。</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>Note that the base implementation does nothing with the passed event data and raises no further event; it just sets the focus.</source>
          <target state="translated">請注意，基底實作不做任何動作與傳遞的事件資料，而且會引發任何進一步的事件。它只會將焦點。</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>The child element that is being resized.</source>
          <target state="translated">正在調整大小的子項目。</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>Supports layout behavior when a child element is resized.</source>
          <target state="translated">會在調整子項目的大小時支援配置行為。</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>This method is typically not called by your application code.</source>
          <target state="translated">您的應用程式程式碼通常不呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>It is exposed so that derived element classes can make further checks on their own possibly invalid layout state.</source>
          <target state="translated">它會公開讓衍生的類別可以進行進一步的項目會檢查其本身可能是無效的配置狀態。</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements.</source>
          <target state="translated">類別也可嘗試最佳化，以將配置傳遞至子元素的大小變更為基礎的處理時間降到最低。</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>An example derived element class that implements <ph id="ph1">&lt;xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A&gt;</ph> is the <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph> control.</source>
          <target state="translated">範例衍生項目類別可實作<ph id="ph1">&lt;xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A&gt;</ph>是<ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>控制項。</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /&gt;</ph> method has the default implementation of calling <ph id="ph2">&lt;see cref="M:System.Windows.UIElement.InvalidateMeasure" /&gt;</ph> on itself.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /&gt;</ph>方法具有呼叫的預設實作<ph id="ph2">&lt;see cref="M:System.Windows.UIElement.InvalidateMeasure" /&gt;</ph>本身。</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>A typical implementation would be: do whatever optimization your own element supports, and then typically call base <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /&gt;</ph> from at least one of the code branches (the one that indicated "dirty" state per your own measure caching logic).</source>
          <target state="translated">一般的實作： 請勿任何最佳化您自己的項目支援，以及然後通常會呼叫基底<ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /&gt;</ph>至少其中一個程式碼分支 （表示 「 有所變更 」 狀態，每個快取邏輯您自己的量值的一個）。</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>This method is only called in the layout processing if it was the child itself that originated the size changes.</source>
          <target state="translated">版面配置處理中如果它的子系本身發出大小變更，只會呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>Otherwise, if the parent element initiates the <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /&gt;</ph> pass, according to the layout system rules, the parent is recalculating layout already.</source>
          <target state="translated">否則，如果父項目會起始<ph id="ph1">&lt;see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /&gt;</ph>傳遞，版面配置系統規則，根據父代重新計算配置已。</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
          <source>The layout system processes layout in the order of child-to-parent, so no return to parent element sizing from the child element layout calls is necessary.</source>
          <target state="translated">版面配置系統順序處理配置子系的父系，因此需要從子項目配置呼叫沒有傳回父項目調整大小。</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnCreateAutomationPeer">
          <source>Returns class-specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementations for the <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure.</source>
          <target state="translated">為 <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 基礎結構傳回類別特定的 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> 實作。</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnCreateAutomationPeer">
          <source>The type-specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementation.</source>
          <target state="translated">因型別而異的 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> 實作。</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnCreateAutomationPeer">
          <source>The implementation of this method is typically to call the constructor of a specific <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementation, and return it as the return value.</source>
          <target state="translated">這個方法的實作會在呼叫的特定建構函式通常是<ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>實作中，並將其傳回做為傳回值。</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnCreateAutomationPeer">
          <source>All <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> derived classes should implement this method in order to provide their own specific <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph> implementations to the <ph id="ph3">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure.</source>
          <target state="translated">所有<ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>衍生的類別應該實作這個方法以提供它們自己的特定<ph id="ph2">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>實作<ph id="ph3">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>基礎結構。</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnCreateAutomationPeer">
          <source>For details on implementing this pattern, see <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>.</source>
          <target state="translated">如需實作此模式的詳細資訊，請參閱<ph id="ph1">&lt;see cref="T:System.Windows.Automation.Peers.AutomationPeer" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragLeave" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragLeave" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragOver" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragOver" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.DragEnter" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.GiveFeedback" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.GiveFeedback" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>，包含事件資料。</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This event data must contain the identifier for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> event.</source>
          <target state="translated">此事件資料必須包含 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> 事件的識別項。</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> routed event by using the event data provided.</source>
          <target state="translated">使用所提供的事件資料引發 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This method, although virtual, does have a default implementation that raises the event.</source>
          <target state="translated">這個方法中，雖然是虛擬的沒有預設實作會引發事件。</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property value changes.</source>
          <target state="translated">這在 * 方法實作用來引發事件，這個相同的方法實作會在內部叫用來引發事件時<ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph>屬性值變更。</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph> implementation differs from some other <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph>實作不同於其他<ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>上 * 只提供便利的方式來加入類別處理事件的實作。</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</source>
          <target state="translated">除非您有故意和不尋常的需要，將不會引發焦點事件，請確定您的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>Otherwise, the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph> event is not raised during typical user operations that ordinarily set focus to this element.</source>
          <target state="translated">否則，<ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotFocus" /&gt;</ph>通常將焦點設定至這個項目的一般使用者作業期間將不會引發事件。</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
          <source>If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果您不想要您可設定焦點的項目，您可以防止項目可設定焦點設定<ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph>至<ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotTouchCapture" /&gt;</ph> routed event that occurs when a touch is captured to this element.</source>
          <target state="translated">提供 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.GotTouchCapture" /&gt;</ph> 路由事件的類別處理，而這個事件會在擷取到對此項目的觸控時發生。</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">確定呼叫基底類別的<ph id="ph1">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph>方法的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">會在對這個項目引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /&gt;</ph> 事件時被叫用。</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> dependency property changes.</source>
          <target state="translated">此虛擬方法，就會引發時的值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph>相依性屬性變更。</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虛擬方法會先引發，並可以操作需要的事件資料。</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">然後在<ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph>與該相同的事件資料執行個體就會引發事件。</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the  <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">請注意，<ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph>事件就不會路由的事件。</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此，您無法將它標示為已處理的類別處理常式中。</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked just before the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /&gt;</ph> event is raised by this element.</source>
          <target state="translated">會在 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /&gt;</ph> 事件正要由這個項目引發前被叫用。</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> dependency property changes .</source>
          <target state="translated">此虛擬方法，就會引發時的值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph>相依性屬性變更。</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虛擬方法會先引發，並可以操作需要的事件資料。</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">然後在<ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph>與該相同的事件資料執行個體就會引發事件。</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">請注意，<ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph>事件就不會路由的事件。</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此，您無法將它標示為已處理的類別處理常式中。</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">會在對這個項目引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /&gt;</ph> 事件時被叫用。</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">此虛擬方法，就會引發時的值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph>相依性屬性變更其值。</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虛擬方法會先引發，並可以操作需要的事件資料。</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">然後在<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph>與該相同的事件資料執行個體就會引發事件。</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">請注意，<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph>事件就不會是路由的事件。因此，您無法將它標示為已處理的類別處理常式中。</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">會在對這個項目引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /&gt;</ph> 事件時被叫用。</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /&gt;</ph> dependency property changes its value.</source>
          <target state="translated">此虛擬方法，就會引發時的值<ph id="ph1">&lt;see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /&gt;</ph>相依性屬性變更其值。</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虛擬方法會先引發，並可以操作需要的事件資料。</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">然後在<ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /&gt;</ph>與該相同的事件資料執行個體就會引發事件。</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</source>
          <target state="translated">請注意，此事件不是路由的事件。因此，您無法將它標示為已處理的類別處理常式中。</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">會在對這個項目引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /&gt;</ph> 事件時被叫用。</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOver%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">此虛擬方法，就會引發時的值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOver%2A&gt;</ph>相依性屬性變更其值。</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虛擬方法會先引發，並可以操作需要的事件資料。</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">然後在<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph>與該相同的事件資料執行個體就會引發事件。</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph> event is not a routed event.</source>
          <target state="translated">請注意，<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph>事件就不會路由的事件。</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此，您無法將它標示為已處理的類別處理常式中。</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">會在對這個項目引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /&gt;</ph> 事件時被叫用。</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">此虛擬方法，就會引發時的值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph>相依性屬性變更其值。</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虛擬方法會先引發，並可以操作需要的事件資料。</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCapturedChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">然後在<ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCapturedChanged&gt;</ph>與該相同的事件資料執行個體就會引發事件。</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">請注意，事件就不會路由的事件。</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此，您無法將它標示為已處理的類別處理常式中。</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">會在對這個項目引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /&gt;</ph> 事件時被叫用。</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptureWithin%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">此虛擬方法，就會引發時的值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptureWithin%2A&gt;</ph>相依性屬性變更其值。</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虛擬方法會先引發，並可以操作需要的事件資料。</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptureWithinChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">然後在<ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptureWithinChanged&gt;</ph>與該相同的事件資料執行個體就會引發事件。</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">請注意，事件就不會路由的事件。</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此，您無法將它標示為已處理的類別處理常式中。</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /&gt;</ph> event is raised on this element.</source>
          <target state="translated">會在對這個項目引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /&gt;</ph> 事件時被叫用。</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This virtual method is raised when the value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusDirectlyOver%2A&gt;</ph> dependency property changes its value.</source>
          <target state="translated">此虛擬方法，就會引發時的值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusDirectlyOver%2A&gt;</ph>相依性屬性變更其值。</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虛擬方法會先引發，並可以操作需要的事件資料。</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.</source>
          <target state="translated">然後在<ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusDirectlyOverChanged&gt;</ph>與該相同的事件資料執行個體就會引發事件。</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">請注意，事件就不會路由的事件。</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此您無法將它標示為已處理的類別處理常式中。</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Keystrokes are handled by a dedicated input manager.</source>
          <target state="translated">按鍵動作是由專用的輸入管理員處理。</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</source>
          <target state="translated">依賴按鍵，例如，輸入和命令繫結的其他程式設計功能可能會處理按鍵之前它會公開為一般的按鍵。</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>If these input system features mark the event as handled, then <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">如果這些輸入系統功能將事件標記為已處理，然後<ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt;</ph>不會叫用。</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Keystrokes are handled by a dedicated input manager.</source>
          <target state="translated">按鍵動作是由專用的輸入管理員處理。</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</source>
          <target state="translated">依賴按鍵，例如，輸入和命令繫結的其他程式設計功能可能會處理按鍵之前它會公開為一般的按鍵。</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>If these input system features mark the event as handled, then <ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">如果這些輸入系統功能將事件標記為已處理，然後<ph id="ph1">&lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt;</ph>不會叫用。</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>，包含事件資料。</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This event data must contain the identifier for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> event.</source>
          <target state="translated">此事件資料必須包含 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> 事件的識別項。</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> routed event by using the event data that is provided.</source>
          <target state="translated">使用所提供的事件資料引發 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This method, although virtual, does have a default implementation that raises the event.</source>
          <target state="translated">這個方法中，雖然是虛擬的沒有預設實作會引發事件。</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property value changes.</source>
          <target state="translated">這在 * 方法實作用來引發事件，這個相同的方法實作會在內部叫用來引發事件時<ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph>屬性值變更。</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>This implementation differs from some other <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.</source>
          <target state="translated">這項實作不同於其他<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>上 * 只提供便利的方式來加入類別處理事件的實作。</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</source>
          <target state="translated">除非您有故意和不尋常的需要，將不會引發焦點事件，請確定您的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>Otherwise, the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph> event is not raised during typical user operations that ordinarily set focus to this element.</source>
          <target state="translated">否則，<ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostFocus" /&gt;</ph>通常將焦點設定至這個項目的一般使用者作業期間將不會引發事件。</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
          <source>If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph> to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果您不想要您可設定焦點的項目，您可以防止項目可設定焦點設定<ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Focusable" /&gt;</ph>至<ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostTouchCapture" /&gt;</ph> routed event that occurs when this element loses a touch capture.</source>
          <target state="translated">提供 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.LostTouchCapture" /&gt;</ph> 路由事件的類別處理，而這個事件會在此項目失去觸控擷取時發生。</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.LostTouchCapture&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.LostTouchCapture&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">確定呼叫基底類別的<ph id="ph1">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph>方法的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">事件的資料。</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> event occurs.</source>
          <target state="translated">當 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /&gt;</ph> 事件發生時呼叫。</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
          <source>Be sure to call the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> method of the base class so that base classes receive the event.</source>
          <target state="translated">請務必呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph>方法的基底類別的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">事件的資料。</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationCompleted" /&gt;</ph> event occurs.</source>
          <target state="translated">當 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationCompleted" /&gt;</ph> 事件發生時呼叫。</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
          <source>Be sure to call the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> method of the base class so that base classes receive the event.</source>
          <target state="translated">請務必呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph>方法的基底類別的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">事件的資料。</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> event occurs.</source>
          <target state="translated">當 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> 事件發生時呼叫。</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
          <source>Be sure to call the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> method of the base class so that base classes receive the event.</source>
          <target state="translated">請務必呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph>方法的基底類別的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">事件的資料。</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /&gt;</ph> event occurs.</source>
          <target state="translated">當 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /&gt;</ph> 事件發生時呼叫。</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
          <source>Be sure to call the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> method of the base class so that base classes receive the event.</source>
          <target state="translated">請務必呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph>方法的基底類別的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
          <source>The data for the event.</source>
          <target state="translated">事件的資料。</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
          <source>Called when the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarted" /&gt;</ph> event occurs.</source>
          <target state="translated">當 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarted" /&gt;</ph> 事件發生時呼叫。</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
          <source>Be sure to call the <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> method of the base class so that base classes receive the event.</source>
          <target state="translated">請務必呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph>方法的基底類別的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarting" /&gt;</ph> routed event that occurs when the manipulation processor is first created.</source>
          <target state="translated">提供當第一次建立操作處理器時，所發生 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationStarting" /&gt;</ph> 路由事件的類別處理。</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">確定呼叫基底類別的<ph id="ph1">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph>方法的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This event data reports details about the mouse button that was pressed and the handled state.</source>
          <target state="translated">此事件資料會報告有關按下的滑鼠按鈕以及已處理狀態的詳細資訊。</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseDown" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">滑鼠按鈕動作也是由專用的輸入管理員處理。</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">依賴滑鼠按鈕的動作，例如輸入和命令繫結之前它會公開為一般的滑鼠按鈕動作, 可能會叫用動作的處理常式的其他程式設計功能。</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">如果這些輸入系統功能標記<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>事件為已處理，<ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph>不會叫用。</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">如果您使用這個類別處理常式來標示為已處理的事件時，可能會影響下列事件：<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events may be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">其中一個這些事件可能會接收的項目上引發時<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>收到。</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">如果您要標示為已處理的類別中處理此事件，仍然會引發子;不過，它們將傳遞事件資料中處理的狀態。</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">如果在處理中的類別處理事件，副的執行個體處理常式不會叫用除非您明確地使用<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>與<ph id="ph2">`handledEventsToo`</ph><ph id="ph3">`true`</ph>才能附加處理常式。</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">類別處理常式也不會叫用這些類別處理常式已向除非<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>簽章與<ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.</source>
          <target state="translated">藉由處理<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph>，您會隱含的類別處理負責執行下的所有可能的滑鼠按鈕。</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">這種行為可能不想;當您使用此虛擬方法標記為已處理的事件，因此，使用警告。</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">每個按鈕特定直接事件也有虛擬機器 * 方法。請考慮是否覆寫這些按鈕特定的類別處理常式可能更合適。</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph> attached event is raised on this element.</source>
          <target state="translated">當這個項目上引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseEnter" /&gt;</ph> 附加事件時叫用。</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">在此情況下，符合的事件是具有直接路由策略的路由的事件。</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">將事件標示為已處理仍很有用防止一般的執行個體的處理常式 (這些不指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph> attached event is raised on this element.</source>
          <target state="translated">當這個項目上引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseLeave" /&gt;</ph> 附加事件時叫用。</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">在此情況下，符合的事件是具有直接路由策略的路由的事件。</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">將事件標示為已處理仍很有用防止一般的執行個體的處理常式 (這些不指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">事件資料會報告滑鼠左鍵已按下。</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /&gt;</ph> routed event is raised on this element.</source>
          <target state="translated">當這個項目上引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /&gt;</ph> 路由事件時叫用。</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>事件反昇路由會出現但實際上是以間接方式。</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 為路由傳送，泡泡圖的基礎事件和每個<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>沿著事件路由會使用相同的處理來直接路由的事件的引發<ph id="ph3">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">雖然您可以將標記<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">一般的滑鼠事件處理中的預設實作<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>接聽<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>並將它轉換成適當的本機事件。</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果您想要覆寫這個邏輯，您必須建立衍生的類別。</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在衍生類別的靜態建構函式中註冊替代的類別處理常式<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">您無法變更處理行為的滑鼠<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>藉由覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">您是否願意呼叫基底實作，取決於您的案例。</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">無法呼叫基底會停用該也預期會叫用的上階類別上的滑鼠事件的預設輸入的處理<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
          <target state="translated">例如，您可以從衍生<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>並覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>在您衍生的類別，而不需要呼叫基底實作; 不過，這會覆寫停用<ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">事件資料會報告已放開滑鼠左鍵。</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /&gt;</ph> 路由事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph>事件反昇路由會出現但實際上是以間接方式。</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 為路由傳送，泡泡圖的基礎事件和每個<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>沿著事件路由會使用相同的處理來直接路由的事件的引發<ph id="ph3">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">雖然您可以將標記<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">一般的滑鼠事件處理中的預設實作<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>接聽<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>並將它轉換成適當的本機事件。</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果您想要覆寫這個邏輯，您必須建立衍生的類別。</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在衍生類別的靜態建構函式中註冊替代的類別處理常式<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;</ph>.</source>
          <target state="translated">您無法變更處理行為的滑鼠<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>藉由覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseMove" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">事件資料會報告滑鼠右鍵已按下。</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonDown" /&gt;</ph> 路由事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>事件反昇路由會出現但實際上是以間接方式。</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> 為路由傳送，泡泡圖的基礎事件和每個<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>沿著事件路由會使用相同的處理來直接路由的事件的引發<ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">雖然您可以將標記<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">一般的滑鼠事件處理中的預設實作<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>接聽<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>並將它轉換成適當的本機事件。</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果您想要覆寫這個邏輯，您必須建立衍生的類別。</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在衍生類別的靜態建構函式中註冊替代的類別處理常式<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">您無法變更處理行為的滑鼠<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>藉由覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">您是否願意呼叫基底實作，取決於您的案例。</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">無法呼叫基底會停用該也預期會叫用的上階類別上的滑鼠事件的預設輸入的處理<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.</source>
          <target state="translated">例如，您可以從衍生<ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>並覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>中您的衍生類別，而不呼叫基底; 不過，此覆寫停用內容功能表上的服務您的控制項，也就是組件的<ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph>預設行為。</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">事件資料會報告已放開滑鼠右鍵。</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.MouseRightButtonUp" /&gt;</ph> 路由事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>事件反昇路由會出現但實際上是以間接方式。</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is bubble routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> 為路由傳送，泡泡圖的基礎事件和每個<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>沿著事件路由會使用相同的處理來直接路由的事件的引發<ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">雖然您可以將標記<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">一般的滑鼠事件處理中的預設實作<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>接聽<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>並將它轉換成適當的本機事件。</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果您想要覆寫這個邏輯，您必須建立衍生的類別。</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在衍生類別的靜態建構函式中註冊替代的類別處理常式<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;</ph>.</source>
          <target state="translated">您無法變更處理行為的滑鼠<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>藉由覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the mouse button was released.</source>
          <target state="translated">事件資料會報告滑鼠按鈕已釋放。</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseUp" /&gt;</ph> 路由事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">滑鼠按鈕動作也是由專用的輸入管理員處理。</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">依賴滑鼠按鈕的動作，例如輸入和命令繫結之前它會公開為一般的滑鼠按鈕動作, 可能會叫用動作的處理常式的其他程式設計功能。</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">如果這些輸入系統功能標記<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>事件為已處理，<ph id="ph2">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph>不會叫用。</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">如果您使用這個類別處理常式來標示為已處理的事件時，可能會影響下列事件：<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events might be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">其中一個這些事件可能會接收項目上引發時<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType&gt;</ph>收到。</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">如果您要標示為已處理的類別中處理此事件，仍然會引發子;不過，它們將傳遞事件資料中處理的狀態。</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">如果在處理中的類別處理事件，副的執行個體處理常式不會叫用除非您明確地使用<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>與<ph id="ph2">`handledEventsToo`</ph><ph id="ph3">`true`</ph>才能附加處理常式。</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">類別處理常式也不會叫用這些類別處理常式已向除非<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>簽章與<ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.</source>
          <target state="translated">藉由處理<ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph>，您會隱含的類別處理計算在內的所有可能滑鼠動作。</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">這種行為可能不想;當您使用此虛擬方法標記為已處理的事件，因此，使用警告。</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">每個按鈕特定直接事件也有虛擬機器 * 方法。請考慮是否覆寫這些按鈕特定的類別處理常式可能更合適。</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.MouseWheel" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragEnter" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragEnter" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragLeave" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragLeave" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragOver" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDragOver" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.DragEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDrop" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewDrop" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.GiveFeedbackEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that one or more mouse buttons were pressed.</source>
          <target state="translated">事件資料會報告一個或多個滑鼠按鈕已按下。</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph> attached routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /&gt;</ph> 附加路由事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">滑鼠按鈕動作也是由專用的輸入管理員處理。</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">依賴滑鼠按鈕的動作，例如輸入和命令繫結之前它會公開為一般的滑鼠按鈕動作, 可能會叫用動作的處理常式的其他程式設計功能。</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph> is not invoked.</source>
          <target state="translated">如果這些輸入系統功能標記<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>事件為已處理，<ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph>不會叫用。</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">如果您使用這個類別處理常式來標示為已處理的事件時，可能會影響下列事件：<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events may be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">其中一個這些事件可能會接收的項目上引發時<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>收到。</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">如果您要標示為已處理的類別中處理此事件，仍然會引發子;不過，它們將傳遞事件資料中處理的狀態。</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">如果在處理中的類別處理事件，副的執行個體處理常式不會叫用除非您明確地使用<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>與<ph id="ph2">`handledEventsToo`</ph><ph id="ph3">`true`</ph>才能附加處理常式。</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">類別處理常式也不會叫用這些類別處理常式已向除非<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>簽章與<ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.</source>
          <target state="translated">藉由處理<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph>，您會隱含的類別處理負責執行下的所有可能的滑鼠按鈕。</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">這種行為可能不想;當您使用此虛擬方法標記為已處理的事件，因此，使用警告。</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">每個按鈕特定直接事件也有虛擬機器 * 方法。請考慮是否覆寫這些按鈕特定的類別處理常式可能更合適。</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">事件資料會報告滑鼠左鍵已按下。</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /&gt;</ph> 路由事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>事件傳輸通道的路由會出現但實際上是以間接方式。</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 為基礎的事件通道路由傳送，且每個<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>沿著事件路由會使用相同的處理來直接路由的事件的引發<ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">雖然您可以將標記<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">一般的滑鼠事件處理中的預設實作<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>接聽<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>並將它轉換成適當的本機事件。</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果您想要覆寫這個邏輯，您必須建立衍生的類別。</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在衍生類別的靜態建構函式中註冊替代的類別處理常式<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">您無法變更處理行為的滑鼠<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>藉由覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">您是否願意呼叫基底實作，取決於您的案例。</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.</source>
          <target state="translated">無法呼叫基底會停用該也預期會叫用的上階類別上的滑鼠事件的預設輸入的處理<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
          <target state="translated">例如，您可以從衍生<ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph>並覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>在您衍生的類別，而不需要呼叫基底實作; 不過，這會覆寫停用<ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">事件資料會報告已放開滑鼠左鍵。</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /&gt;</ph> 路由事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph>事件傳輸通道的路由會出現但實際上是以間接方式。</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 為基礎的事件通道路由傳送，且每個<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>沿著事件路由會使用相同的處理來直接路由的事件的引發<ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">雖然您可以將標記<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">一般的滑鼠事件處理中的預設實作<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>接聽<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>並將它轉換成適當的本機事件。</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果您想要覆寫這個邏輯，您必須建立衍生的類別。</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在衍生類別的靜態建構函式中註冊替代的類別處理常式<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>.</source>
          <target state="translated">您無法變更處理行為的滑鼠<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>藉由覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">事件資料會報告滑鼠右鍵已按下。</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /&gt;</ph> 路由事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>事件傳輸通道的路由會出現但實際上是以間接方式。</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> 為基礎的事件通道路由傳送，且每個<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>沿著事件路由會使用相同的處理來直接路由的事件的引發<ph id="ph3">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">雖然您可以將標記<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">一般的滑鼠事件處理中的預設實作<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>接聽<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>並將它轉換成適當的本機事件。</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果您想要覆寫這個邏輯，您必須建立衍生的類別。</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在衍生類別的靜態建構函式中註冊替代的類別處理常式<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">您無法變更處理行為的滑鼠<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>藉由覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">您是否願意呼叫基底實作，取決於您的案例。</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.</source>
          <target state="translated">無法呼叫基底會停用該也預期會叫用的上階類別上的滑鼠事件的預設輸入的處理<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
          <source>For example, you can derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.</source>
          <target state="translated">例如，您可以從衍生<ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>並覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>中您的衍生類別，而不呼叫基底; 不過，此覆寫停用內容功能表上的服務您的控制項，也就是組件的<ph id="ph3">&lt;xref:System.Windows.Controls.Control&gt;</ph>預設行為。</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">事件資料會報告已放開滑鼠右鍵。</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /&gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /&gt;</ph> 路由事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>事件傳輸通道的路由會出現但實際上是以間接方式。</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is the underlying event that is tunnel routed, and each <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> 為基礎的事件通道路由傳送，且每個<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>沿著事件路由會使用相同的處理來直接路由的事件的引發<ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Although you can mark the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">雖然您可以將標記<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The default implementation for general mouse event handling in <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> and converts it to an appropriate local event.</source>
          <target state="translated">一般的滑鼠事件處理中的預設實作<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>接聽<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>並將它轉換成適當的本機事件。</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果您想要覆寫這個邏輯，您必須建立衍生的類別。</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In the static constructor of your derived class, register an alternative class handler for <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">在衍生類別的靜態建構函式中註冊替代的類別處理常式<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>You cannot change the mouse handling behavior of <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>.</source>
          <target state="translated">您無法變更處理行為的滑鼠<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>藉由覆寫<ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The event data reports that one or more mouse buttons were released.</source>
          <target state="translated">事件資料會報告一個或多個滑鼠按鈕已釋放。</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Mouse button actions are also handled by a dedicated input manager.</source>
          <target state="translated">滑鼠按鈕動作也是由專用的輸入管理員處理。</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</source>
          <target state="translated">依賴滑鼠按鈕的動作，例如輸入和命令繫結之前它會公開為一般的滑鼠按鈕動作, 可能會叫用動作的處理常式的其他程式設計功能。</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If these input system features mark the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event as handled, <ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph> is not invoked.</source>
          <target state="translated">如果這些輸入系統功能標記<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>事件為已處理，<ph id="ph2">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph>不會叫用。</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">如果您使用這個類別處理常式來標示為已處理的事件時，可能會影響下列事件：<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either of these events might be raised on the receiving element when <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> is received.</source>
          <target state="translated">其中一個這些事件可能會接收項目上引發時<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>收到。</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</source>
          <target state="translated">如果您要標示為已處理的類別中處理此事件，仍然會引發子;不過，它們將傳遞事件資料中處理的狀態。</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph> in order to attach handlers.</source>
          <target state="translated">如果在處理中的類別處理事件，副的執行個體處理常式不會叫用除非您明確地使用<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>與<ph id="ph2">`handledEventsToo`</ph><ph id="ph3">`true`</ph>才能附加處理常式。</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Class handlers also are not invoked unless those class handlers were registered with the <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>.</source>
          <target state="translated">類別處理常式也不會叫用這些類別處理常式已向除非<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>簽章與<ph id="ph2">`handledEventsToo`</ph> <ph id="ph3">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>By handling <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.</source>
          <target state="translated">藉由處理<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph>，您會隱含的類別處理計算在內的所有可能滑鼠動作。</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</source>
          <target state="translated">這種行為可能不想;當您使用此虛擬方法標記為已處理的事件，因此，使用警告。</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.</source>
          <target state="translated">每個按鈕特定直接事件也有虛擬機器 * 方法。請考慮是否覆寫這些按鈕特定的類別處理常式可能更合適。</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.MouseWheelEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</source>
          <target state="translated">是特別針對預覽事件的另一種情形是將它們加以處理，因此相符的反昇類別處理常式不會叫用標記。</target>       </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchDown" /&gt;</ph> routed event that occurs when a touch presses this element.</source>
          <target state="translated">提供 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchDown" /&gt;</ph> 路由事件的類別處理，而這個事件會在觸控按下此項目時發生。</target>       </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">確定呼叫基底類別的<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph>方法的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchMove" /&gt;</ph> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">提供 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchMove" /&gt;</ph> 路由事件的類別處理，而這個事件會在觸控尚處於此項目內並有所移動時發生。</target>       </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">確定呼叫基底類別的<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph>方法的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchUp" /&gt;</ph> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">提供 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchUp" /&gt;</ph> 路由事件的類別處理，而這個事件會在觸控於此項目內放開時發生。</target>       </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">確定呼叫基底類別的<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph>方法的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.QueryContinueDragEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.QueryContinueDrag" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.DragDrop.QueryContinueDrag" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.QueryCursorEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.QueryCursorEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Mouse.QueryCursor" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>The drawing instructions for a specific element.</source>
          <target state="translated">特定項目的繪圖指令。</target>       </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>This context is provided to the layout system.</source>
          <target state="translated">此內容會提供給配置系統。</target>       </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>When overridden in a derived class, participates in rendering operations that are directed by the layout system.</source>
          <target state="translated">在衍生類別中覆寫時，參與由配置系統導向的呈現作業。</target>       </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</source>
          <target state="translated">這個項目的呈現指令不會在叫用此方法時直接使用，而是會加以保留，以便稍後由配置和繪圖做非同步使用。</target>       </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>This method has no default implementation in the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> class.</source>
          <target state="translated">這個方法有預設的實作<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>The following code example shows a possible implementation for a panel derived class.</source>
          <target state="translated">下列程式碼範例示範可能的面板衍生類別實作。</target>       </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /&gt;</ph> method can be overridden to add further graphical elements (not previously defined in a logical tree) to a rendered element, such as effects or adorners.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /&gt;</ph>可以覆寫方法新增其他圖形 （先前未定義於邏輯樹狀結構） 的項目呈現的項目，例如效果或裝飾項。</target>       </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Media.DrawingContext" /&gt;</ph> object is passed as an argument, which provides methods for drawing shapes, text, images or videos.</source>
          <target state="translated">A<ph id="ph1">&lt;see cref="T:System.Windows.Media.DrawingContext" /&gt;</ph>物件會傳遞做為引數，提供方法來繪製圖形、 文字、 影像或視訊。</target>       </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>The packaged parameters (<ph id="ph1">&lt;see cref="T:System.Windows.SizeChangedInfo" /&gt;</ph>), which includes old and new sizes, and which dimension actually changes.</source>
          <target state="translated">封裝的參數 (<ph id="ph1">&lt;see cref="T:System.Windows.SizeChangedInfo" /&gt;</ph>)，其包含舊大小和新大小，且維度 (Dimension) 實際上有變更。</target>       </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>When overridden in a derived class, participates in rendering operations that are directed by the layout system.</source>
          <target state="translated">在衍生類別中覆寫時，參與由配置系統導向的呈現作業。</target>       </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>This method is invoked after layout update, and before rendering, if the element's <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderSize" /&gt;</ph> has changed as a result of layout update.</source>
          <target state="translated">如果項目的 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderSize" /&gt;</ph> 已由於配置更新而變更，則會在配置更新之後且在呈現之前叫用這個方法。</target>       </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>A typical WPF framework-level element uses the override implementation from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
          <target state="translated">一般的 WPF 架構層級項目會使用從覆寫實作<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation invalidates the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> properties and handles the basics of remaking the layout.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>實作失效<ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>屬性，並處理改造版面配置的基本概念。</target>       </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
          <source>Overriding <ph id="ph1">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph> at the <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph>在<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>層級意味著，項目實作如果故意不使用的 WPF 架構層級實作，因此您的項目必須處理的配置邏輯更直接，通常透過撰寫取代版面配置系統。</target>       </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusButtonEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusDownEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusDown" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusDown" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusEnter" /&gt;</ph> attached event is raised by this element.</source>
          <target state="translated">當這個項目引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusEnter" /&gt;</ph> 附加事件時叫用。</target>       </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">將事件標示為已處理仍很有用防止一般的執行個體處理常式 (這些不指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusInRange" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusLeave" /&gt;</ph> attached event is raised by this element.</source>
          <target state="translated">當這個項目引發未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusLeave" /&gt;</ph> 附加事件時叫用。</target>       </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">您可能會呼叫基底之前或之後特殊處理，根據您的需求。</target>       </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">將事件標示為已處理仍很有用防止一般的執行個體處理常式 (這些不指定<ph id="ph1">`handledEventsToo`</ph>) 叫用。</target>       </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusMove" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusMove" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.StylusEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusUp" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Stylus.StylusUp" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">包含事件資料的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TextCompositionEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Invoked when an unhandled <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /&gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">當未處理的 <ph id="ph1">&lt;see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /&gt;</ph> 附加事件到達其路由中衍生自此類別的項目時叫用。</target>       </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">實作這個方法可為此事件加入類別處理。</target>       </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>This method has no default implementation.</source>
          <target state="translated">這個方法會具有預設的實作。</target>       </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">這個方法的目的是類似於<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件模式 * 方法： 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。</target>       </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在此情況下，符合的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</source>
          <target state="translated">由於路由的事件就會引發子元素，不一定會叫用處理常式的項目，On * 方法的實作模式是不同的路由事件。</target>       </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Therefore, your implementation needs to examine the source properties of the event data.</source>
          <target state="translated">因此，您的實作必須檢查的事件資料來源屬性。</target>       </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>It should not try to reraise the event in most cases.</source>
          <target state="translated">它不應嘗試重新引發此事件在大部分情況下。</target>       </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>Either by overriding this method or by registering class handlers with <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.</source>
          <target state="translated">覆寫這個方法，或登錄類別處理常式取代<ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>，衍生的類別<ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>事件路由上收到事件時，可以呼叫私用類別處理常式方法。</target>       </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
          <source>One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</source>
          <target state="translated">其中類別處理是適當的其中一個案例是操作事件資料，並標示為已處理的路由的事件。</target>       </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchDown" /&gt;</ph> routed event that occurs when a touch presses inside this element.</source>
          <target state="translated">提供 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchDown" /&gt;</ph> 路由事件的類別處理，而這個事件會在觸控按下此項目內部時發生。</target>       </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">確定呼叫基底類別的<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph>方法的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchEnter" /&gt;</ph> routed event that occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">提供 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchEnter" /&gt;</ph> 路由事件的類別處理，而這個事件會在觸控從外面移至此項目範圍內時發生。</target>       </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchEnter&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.TouchEnter&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">確定呼叫基底類別的<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph>方法的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchLeave" /&gt;</ph> routed event that occurs when a touch moves from inside to outside the bounds of this <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">提供 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchLeave" /&gt;</ph> 路由事件的類別處理，而這個事件會在觸控輸入從此 <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 內移至其範圍外時發生。</target>       </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchLeave&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.TouchLeave&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">確定呼叫基底類別的<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph>方法的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchMove" /&gt;</ph> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">提供 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchMove" /&gt;</ph> 路由事件的類別處理，而這個事件會在觸控尚處於此項目內並有所移動時發生。</target>       </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">確定呼叫基底類別的<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph>方法的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchEventArgs" /&gt;</ph>，其中包含事件資料。</target>       </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Provides class handling for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchUp" /&gt;</ph> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">提供 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchUp" /&gt;</ph> 路由事件的類別處理，而這個事件會在觸控於此項目內放開時發生。</target>       </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> method has no default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph>方法有預設的實作。</target>       </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> in a derived class to handle the <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph> event.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph>處理衍生類別中<ph id="ph2">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
          <source>Be sure to call the base class’s <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> method so that base classes receive the event.</source>
          <target state="translated">確定呼叫基底類別的<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph>方法的基底類別，接收到事件。</target>       </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The previous parent.</source>
          <target state="translated">先前的父代。</target>       </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>This may be provided as <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> did not have a parent element previously.</source>
          <target state="translated">如果 <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> 先前沒有父項目，這可提供為 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Invoked when the parent element of this <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> reports a change to its underlying visual parent.</source>
          <target state="translated">當這個 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 的父項目報告其基礎視覺化父項目的變更時叫用。</target>       </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>If you override this method, always call the base implementation.</source>
          <target state="translated">如果您覆寫這個方法，請務必呼叫基底實作。</target>       </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>The default base implementation performs some internal maintenance of reverse-inherited property state.</source>
          <target state="translated">預設基底實作會執行某些內部維護的反向繼承的屬性狀態。</target>       </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>Failing to call the base implementation will invalidate this state.</source>
          <target state="translated">無法呼叫基底實作，會使此狀態。</target>       </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source>This method overrides <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>.</source>
          <target state="translated">這個方法覆寫 <ph id="ph1">&lt;see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph> both also override the <ph id="ph3">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> implementation of <ph id="ph4">&lt;see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>, and <ph id="ph5">&lt;see cref="T:System.Windows.Window" /&gt;</ph> seals it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> 和<ph id="ph2">&lt;see cref="T:System.Windows.Window" /&gt;</ph>兩者也覆寫<ph id="ph3">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>實作<ph id="ph4">&lt;see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" /&gt;</ph>，和<ph id="ph5">&lt;see cref="T:System.Windows.Window" /&gt;</ph>密封它。</target>       </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Opacity">
          <source>Gets or sets the opacity factor applied to the entire <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> when it is rendered in the <ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">取得或設定不透明度因素，當該因素在<ph id="ph2">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> 中呈現時會套用至整個 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Opacity">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>The opacity factor.</source>
          <target state="translated">不透明度因素。</target>       </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Default opacity is 1.0.</source>
          <target state="translated">預設不透明度為 1.0。</target>       </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Expected values are between 0.0 and 1.0.</source>
          <target state="translated">值必須介於 0.0 到 1.0 之間。</target>       </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>The 1.0 default value is the default provided by the initial metadata of this dependency property on the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> class.</source>
          <target state="translated">1.0 的預設值是提供初始的中繼資料，在此相依性屬性的預設值<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.</source>
          <target state="translated">其他衍生的類別可能可以藉由覆寫其類別建構函式內的中繼資料變更此預設值。</target>       </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>The value of <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> won't be applied to actual layout unless the element is also visible (<ph id="ph2">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">值<ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph>除非項目也會顯示將不會套用至實際的配置 (<ph id="ph2">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph>是<ph id="ph3">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> 會套用至從父項目向下項目樹狀結構子項目，但巢狀的不透明度設定不以個別的子元素的屬性值的顯示效果。</target>       </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property would still be 0.2 when queried.</source>
          <target state="translated">比方說，如果清單有 50%(0.5) 的不透明度，其中一個清單項目有自己設定為 20%(0.2) 的不透明度，net 可見的不透明度，清單項目將會轉譯好像 10%(0.1)，但清單項目的屬性值<ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph>屬性仍將是 0.2 時，會查詢。</target>       </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable.</source>
          <target state="translated">即使宣告或評估的不透明度為 0，項目仍參與輸入的事件和命令，並可能可設定焦點。</target>       </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements.</source>
          <target state="translated">這方面很有用，例如用於不透明度零之類的物件 （圖形） 遮罩具有透明項目的基礎物件。</target>       </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>The opacity-zero object can then handle all the input event processing for an underlying area.</source>
          <target state="translated">不透明度為零的物件，然後可處理所有輸入的事件處理為基礎的區域。</target>       </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>However, the <ph id="ph1">`Background`</ph> or <ph id="ph2">`Fill`</ph> of the object or shape should be set to a value, even if it is <ph id="ph3">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph>, otherwise hit testing is not enabled, and no events are received.</source>
          <target state="translated">不過，<ph id="ph1">`Background`</ph>或<ph id="ph2">`Fill`</ph>物件或圖形的應設為值，即使它是<ph id="ph3">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph>，否則不啟用點擊測試，並不接收任何事件。</target>       </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Opacity">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.OpacityMask">
          <source>Gets or sets an opacity mask, as a <ph id="ph1">&lt;see cref="T:System.Windows.Media.Brush" /&gt;</ph> implementation that is applied to any alpha-channel masking for the rendered content of this element.</source>
          <target state="translated">取得或設定不透明遮罩做為 <ph id="ph1">&lt;see cref="T:System.Windows.Media.Brush" /&gt;</ph> 實作，該實作會套用至這個項目之呈現內容的任何 Alpha 色頻 (Alpha Channel) 遮罩。</target>       </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.OpacityMask">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>The brush to use for opacity masking.</source>
          <target state="translated">用於不透明度遮罩的筆刷。</target>       </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>This property only uses whatever the alpha channel value is for the supplied <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>.</source>
          <target state="translated">這個屬性只會使用 alpha 色板值會提供任何<ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>The other channels of the <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>'s rendered content (Red, Green, or Blue) are ignored.</source>
          <target state="translated">其他頻道的<ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>的呈現的內容 （紅色、 綠色或藍色） 都會被忽略。</target>       </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>The most typical <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> for this purpose is an <ph id="ph2">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph>, which can be used for a variety of photo masking techniques such as a vignette.</source>
          <target state="translated">最常見<ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>為此用途<ph id="ph2">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph>，可以使用各種不同的遮罩技術，例如插文的相片。</target>       </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>But any defined <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> (such as <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph>) can be used.</source>
          <target state="translated">但定義<ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>(例如<ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph>) 可以使用。</target>       </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>In <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>, this property value can use an inline syntax that is specific to each implementation of the <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph> abstract class.</source>
          <target state="translated">在<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>，這個屬性值可以使用內嵌語法所特有的每個實作<ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph>抽象類別。</target>       </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>For more information, see <bpt id="p1">[</bpt>Painting with Solid Colors and Gradients Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>使用單色和漸層概觀繪製<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.OpacityMask">
          <source>The following markup example shows an <ph id="ph1">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph> opacity mask applied to another <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph>.</source>
          <target state="translated">下列標記範例所示<ph id="ph1">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph>套用至另一個的不透明度遮罩<ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.OpacityMaskProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.OpacityMask" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.OpacityMask" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.OpacityProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Opacity" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Opacity" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.PersistId">
          <source>Gets a value that uniquely identifies this element.</source>
          <target state="translated">取得值，這個值可唯一識別此項目。</target>       </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source>The unique identifier for this element.</source>
          <target state="translated">這個項目的唯一識別項。</target>       </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.PersistId%2A&gt;</ph> uniquely identifies each element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PersistId%2A&gt;</ph> 可唯一識別每個項目。</target>       </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source>An element keeps the same <ph id="ph1">&lt;xref:System.Windows.UIElement.PersistId%2A&gt;</ph> every time the same <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> is loaded (including binary representations).</source>
          <target state="translated">項目會保存相同<ph id="ph1">&lt;xref:System.Windows.UIElement.PersistId%2A&gt;</ph>每次相同<ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>載入 （包括二進位表示法）。</target>       </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source>This identifier is used for internal loading, parsing and serialization requirements.</source>
          <target state="translated">這個識別碼用於內部載入、 剖析和序列化需求。</target>       </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source>It is not intended to be used by your application code.</source>
          <target state="translated">它不是可供您的應用程式程式碼。</target>       </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.PersistId">
          <source>This property has no relationship to the <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> result for any given instance.</source>
          <target state="translated">此屬性沒有任何關聯性<ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>任何給定的執行個體的結果。</target>       </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The direction of the requested focus traversal.</source>
          <target state="translated">要求的焦點周遊方向。</target>       </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</source>
          <target state="translated">在衍生類別中覆寫時，傳回會針對指定之焦點周遊方向接收焦點的項目，而不用實際將焦點移至該項目。</target>       </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The element that would have received focus if <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph> were actually invoked.</source>
          <target state="translated">如果實際上有叫用 <ph id="ph1">&lt;see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /&gt;</ph>，就會取得焦點的項目。</target>       </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
          <source>The default implementation of this method in this class is incomplete, and always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">這個類別中，這個方法的預設實作不完整，且一律會傳回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">輸入系統報告其下以此項目作為拖曳目標的拖曳事件時發生。</target>       </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragEnter%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragEnter" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragEnter" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">輸入系統報告其下以此項目作為拖曳來源的拖曳事件時發生。</target>       </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragLeave&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragLeave&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragLeave%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragLeave" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragLeave" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">在輸入系統回報以此項目作為可能置放目標的基礎拖曳事件時發生。</target>       </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragOver&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDragOver&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragOver&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDragOver&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2618" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2619" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2620" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2621" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2622" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2623" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDragOver">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDragOver%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2624" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragOver" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDragOver" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2625" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2626" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2627" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2628" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2629" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDragOverEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2630" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">輸入系統報告其下以這個項目作為置放目標的置放事件時發生。</target>       </trans-unit>
        <trans-unit id="2631" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2632" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2633" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2634" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2635" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2636" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2637" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2638" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.Drop&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2639" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewDrop">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDrop%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewDrop%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2640" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDrop" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewDrop" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2641" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2642" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2643" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2644" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2645" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewDropEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2646" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Occurs when a drag-and-drop operation is started.</source>
          <target state="translated">拖放操作開始時發生。</target>       </trans-unit>
        <trans-unit id="2647" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph>事件可讓修改滑鼠指標的外觀，以便將使用者視覺化回應提供拖放作業期間的拖曳事件來源。</target>       </trans-unit>
        <trans-unit id="2648" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2649" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2650" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2651" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2652" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2653" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2654" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2655" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2656" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGiveFeedback">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2657" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2658" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2659" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2660" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2661" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2662" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2663" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">鍵盤以此元素為焦點時發生。</target>       </trans-unit>
        <trans-unit id="2664" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">這個事件使用通道路由，因為具有焦點的項目可能是子元素，而非項目實際附加事件處理常式。</target>       </trans-unit>
        <trans-unit id="2665" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.</source>
          <target state="translated">請檢查<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph>事件資料來判斷實際具有焦點的項目中。</target>       </trans-unit>
        <trans-unit id="2666" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2667" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2668" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2669" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2670" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2671" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2672" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2673" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2674" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2675" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2676" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2677" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2678" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2679" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2680" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2681" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Occurs when a key is pressed while focus is on this element.</source>
          <target state="translated">焦點在這個項目上方且按下按鍵時發生。</target>       </trans-unit>
        <trans-unit id="2682" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。</target>       </trans-unit>
        <trans-unit id="2683" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph>是可能無法如預期般特定控制項的較低層級文字輸入的事件。</target>       </trans-unit>
        <trans-unit id="2684" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">這是因為有些控制項會有複合控制項，或提供文字的高階版本的類別處理輸入處理和相關事件。</target>       </trans-unit>
        <trans-unit id="2685" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2686" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2687" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2688" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2689" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2690" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2691" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2692" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2693" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewKeyDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2694" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewKeyDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewKeyDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2695" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2696" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2697" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2698" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2699" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2700" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Occurs when a key is released while focus is on this element.</source>
          <target state="translated">焦點在這個項目上方且放開按鍵時發生。</target>       </trans-unit>
        <trans-unit id="2701" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。</target>       </trans-unit>
        <trans-unit id="2702" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph>是可能無法如預期般特定控制項的較低層級文字輸入的事件。</target>       </trans-unit>
        <trans-unit id="2703" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">這是因為有些控制項會有複合控制項，或提供文字的高階版本的類別處理輸入處理和相關事件。</target>       </trans-unit>
        <trans-unit id="2704" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>For details, check the documentation for individual controls.</source>
          <target state="translated">如需詳細資訊，請檢查個別控制項的文件。</target>       </trans-unit>
        <trans-unit id="2705" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2706" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2707" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2708" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2709" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2710" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2711" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2712" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2713" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewKeyUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewKeyUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2714" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewKeyUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewKeyUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2715" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2716" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2717" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2718" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2719" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewKeyUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2720" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Occurs when the keyboard is no longer focused on this element.</source>
          <target state="translated">鍵盤不再以此元素為焦點時發生。</target>       </trans-unit>
        <trans-unit id="2721" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">這個事件使用通道路由，因為失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。</target>       </trans-unit>
        <trans-unit id="2722" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Check the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.</source>
          <target state="translated">請檢查<ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph>事件資料來判斷實際失去焦點的項目中。</target>       </trans-unit>
        <trans-unit id="2723" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2724" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2725" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2726" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2727" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2728" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2729" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2730" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2731" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2732" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2733" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2734" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2735" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2736" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2737" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2738" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">指標在此元素上方且按下任何滑鼠按鈕時發生。</target>       </trans-unit>
        <trans-unit id="2739" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2740" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2741" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph>通常就會引發事件一起可能<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>，這對應到其中的兩個標準滑鼠按鈕的按下。</target>       </trans-unit>
        <trans-unit id="2742" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> 和<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>事件到達事件路由上的這個項目。</target>       </trans-unit>
        <trans-unit id="2743" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>.</source>
          <target state="translated">請參閱備註<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2744" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2745" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2746" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2747" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2748" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2749" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2750" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2751" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2752" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2753" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2754" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2755" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2756" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2757" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且按下滑鼠左按鈕時發生。</target>       </trans-unit>
        <trans-unit id="2758" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">雖然這看起來要遵循的通道路由處理項目樹狀結構，但實際上是直接的路由的事件引發且由每個項目樹狀結構沿著 reraised <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2759" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>事件，這是附加的事件處理的事件路由上的每個項目。</target>       </trans-unit>
        <trans-unit id="2760" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">這個事件的事件資料會公開事件資料的基礎<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2761" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>，選項來處理已標記為已處理的事件、 事件接聽程式，才能使用。</target>       </trans-unit>
        <trans-unit id="2762" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">如果您將標示<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>處理，您要基本上標記<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>路由中的所有其他接聽程式處理，而且所有相關事件。</target>       </trans-unit>
        <trans-unit id="2763" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>This possibly includes class-handler generated events such as <ph id="ph1">&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;</ph>.</source>
          <target state="translated">這可能是包含類別處理常式產生事件如<ph id="ph1">&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2764" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">在概念上，將這個事件 (和其他滑鼠按鈕的事件上<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) 是滑鼠 「 服務 」 (所提供的服務定義<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別)。</target>       </trans-unit>
        <trans-unit id="2765" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</target>       </trans-unit>
        <trans-unit id="2766" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph>上<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別而不是那些在<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2767" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2768" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2769" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2770" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="2771" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2772" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2773" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2774" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2775" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2776" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2777" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2778" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2779" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且放開滑鼠左按鈕時發生。</target>       </trans-unit>
        <trans-unit id="2780" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">雖然這看起來要遵循的通道路由處理項目樹狀結構，但實際上是直接的路由的事件引發且由每個項目樹狀結構沿著 reraised <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2781" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>事件，這是附加的事件處理的事件路由上的每個項目。</target>       </trans-unit>
        <trans-unit id="2782" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">這個事件的事件資料會公開事件資料的基礎<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2783" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>，選項來處理已標記為已處理的事件、 事件接聽程式，才能使用。</target>       </trans-unit>
        <trans-unit id="2784" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">如果您將標示<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph>處理，您要基本上標記<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>路由中的所有其他接聽程式處理，而且所有相關事件。</target>       </trans-unit>
        <trans-unit id="2785" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">在概念上，將這個事件 (和其他滑鼠按鈕的事件上<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) 是滑鼠 「 服務 」 (所提供的服務定義<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別)。</target>       </trans-unit>
        <trans-unit id="2786" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</target>       </trans-unit>
        <trans-unit id="2787" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph>上<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別而不是那些在<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2788" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2789" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2790" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2791" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="2792" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2793" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2794" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2795" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2796" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2797" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2798" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2799" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2800" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Occurs when the mouse pointer moves while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且移動滑鼠指標時發生。</target>       </trans-unit>
        <trans-unit id="2801" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</source>
          <target state="translated">都會發生這個事件項目界限，第一次進入滑鼠指標時，也會在滑鼠指標移時仍保持項目範圍內。</target>       </trans-unit>
        <trans-unit id="2802" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2803" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2804" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2805" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2806" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2807" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2808" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2809" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2810" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseMove%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2811" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseMove" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseMove" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2812" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2813" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2814" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2815" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2816" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2817" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且按下滑鼠右按鈕時發生。</target>       </trans-unit>
        <trans-unit id="2818" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">雖然這看起來要遵循的通道路由處理項目樹狀結構，但實際上是直接的路由的事件引發且由每個項目樹狀結構沿著 reraised <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2819" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>事件，這是附加的事件處理的事件路由上的每個項目。</target>       </trans-unit>
        <trans-unit id="2820" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">這個事件的事件資料會公開事件資料的基礎<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2821" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>，選項來處理已標記為已處理的事件、 事件接聽程式，才能使用。</target>       </trans-unit>
        <trans-unit id="2822" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">如果您將標示<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>處理，您要基本上標記<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType&gt;</ph>路由中的所有其他接聽程式處理，而且所有相關事件。</target>       </trans-unit>
        <trans-unit id="2823" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>This possibly includes class-handler generated events such as <ph id="ph1">&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;</ph>.</source>
          <target state="translated">這可能是包含類別處理常式產生事件如<ph id="ph1">&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2824" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">在概念上，將這個事件 (和其他滑鼠按鈕的事件上<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) 是滑鼠 「 服務 」 (所提供的服務定義<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別)。</target>       </trans-unit>
        <trans-unit id="2825" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</target>       </trans-unit>
        <trans-unit id="2826" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph>上<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別而不是那些在<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2827" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2828" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2829" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2830" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="2831" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2832" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2833" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2834" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2835" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2836" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2837" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2838" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2839" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且放開滑鼠右按鈕時發生。</target>       </trans-unit>
        <trans-unit id="2840" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">雖然這看起來要遵循的通道路由處理項目樹狀結構，但實際上是直接的路由的事件引發且由每個項目樹狀結構沿著 reraised <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2841" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>事件，這是附加的事件處理的事件路由上的每個項目。</target>       </trans-unit>
        <trans-unit id="2842" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>The event data of this event exposes the event data of the underlying <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">這個事件的事件資料會公開事件資料的基礎<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="2843" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>，選項來處理已標記為已處理的事件、 事件接聽程式，才能使用。</target>       </trans-unit>
        <trans-unit id="2844" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>If you mark <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> handled, you are essentially marking <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">如果您將標示<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>處理，您要基本上標記<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>路由中的所有其他接聽程式處理，而且所有相關事件。</target>       </trans-unit>
        <trans-unit id="2845" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Conceptually, think of this event (and other mouse-button events on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse "service" (with the service definition provided by the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).</source>
          <target state="translated">在概念上，將這個事件 (和其他滑鼠按鈕的事件上<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>) 是滑鼠 「 服務 」 (所提供的服務定義<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別)。</target>       </trans-unit>
        <trans-unit id="2846" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</target>       </trans-unit>
        <trans-unit id="2847" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph>上<ph id="ph2">&lt;xref:System.Windows.Input.Mouse&gt;</ph>類別而不是那些在<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2848" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2849" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2850" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2851" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="2852" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2853" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2854" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2855" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2856" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2857" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2858" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2859" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2860" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Occurs when any mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且放開任何滑鼠按鈕時發生。</target>       </trans-unit>
        <trans-unit id="2861" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2862" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2863" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> event is often raised together with either <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph>通常就會引發事件一起可能<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph>或<ph id="ph3">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>，這對應到其中的兩個標準滑鼠按鈕的按下。</target>       </trans-unit>
        <trans-unit id="2864" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph> event reaches this element along the event route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> 和<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<ph id="ph3">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType&gt;</ph>事件到達事件路由上的這個項目。</target>       </trans-unit>
        <trans-unit id="2865" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>.</source>
          <target state="translated">請參閱備註<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2866" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2867" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2868" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2869" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2870" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2871" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2872" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2873" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2874" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2875" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2876" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2877" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2878" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2879" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">滑鼠指標在此元素上方且使用者滾動滑鼠滾輪時發生。</target>       </trans-unit>
        <trans-unit id="2880" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">焦點或滑鼠捕捉優先於滑鼠指標所在位置。因此，如果您收到這個事件與已取得焦點或擷取的項目時，滑鼠指標實際上可能是透過另一個項目。</target>       </trans-unit>
        <trans-unit id="2881" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2882" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2883" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2884" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2885" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2886" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2887" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2888" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2889" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewMouseWheel">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewMouseWheel%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2890" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseWheel" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewMouseWheel" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2891" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2892" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2893" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2894" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2895" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewMouseWheelEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2896" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">拖放操作期間，鍵盤或滑鼠按鈕狀態變更時發生。</target>       </trans-unit>
        <trans-unit id="2897" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph>事件可讓拖曳來源能夠宣告是否應取消拖放作業。</target>       </trans-unit>
        <trans-unit id="2898" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2899" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2900" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2901" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2902" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2903" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2904" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2905" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2906" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewQueryContinueDrag">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2907" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2908" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2909" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2910" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2911" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2912" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2913" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">手寫筆指標在此元素上方且按下手寫筆按鈕時發生。</target>       </trans-unit>
        <trans-unit id="2914" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2915" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2916" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="2917" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>For more information, see <bpt id="p1">[</bpt>Touch Input Support in Windows Vista<ept id="p1">](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept> and <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>觸控輸入支援在 Windows Vista<ept id="p1">](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept>和<bpt id="p2">[</bpt>輸入概觀<ept id="p2">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="2918" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2919" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2920" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2921" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2922" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2923" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2924" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2925" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2926" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2927" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2928" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2929" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2930" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2931" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">手寫筆指標在此元素上方且放開手寫筆按鈕時發生。</target>       </trans-unit>
        <trans-unit id="2932" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2933" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2934" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="2935" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="2936" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2937" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2938" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2939" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2940" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2941" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2942" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2943" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2944" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2945" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2946" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2947" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2948" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2949" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Occurs when the stylus touches the digitizer while it is over this element.</source>
          <target state="translated">手寫筆在此項目上方且碰觸數位板時發生。</target>       </trans-unit>
        <trans-unit id="2950" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2951" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2952" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="2953" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="2954" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2955" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2956" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2957" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2958" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2959" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2960" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2961" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2962" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2963" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2964" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2965" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2966" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2967" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">手寫筆在項目上方移動，但沒有真正碰觸數位板時發生。</target>       </trans-unit>
        <trans-unit id="2968" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2969" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2970" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="2971" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="2972" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2973" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2974" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2975" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2976" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2977" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2978" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInAirMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2979" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2980" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2981" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="2982" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="2983" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2984" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2985" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">手寫筆在此項目上方，且夠靠近數位板而被偵測到時發生。</target>       </trans-unit>
        <trans-unit id="2986" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="2987" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="2988" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="2989" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="2990" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="2991" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="2992" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="2993" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="2994" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="2995" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="2996" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusInRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusInRange%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="2997" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInRange" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInRange" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="2998" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="2999" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3000" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3001" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3002" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3003" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Occurs when the stylus moves while over the element.</source>
          <target state="translated">當手寫筆位在項目上方並移動時發生。</target>       </trans-unit>
        <trans-unit id="3004" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>The stylus must move while being detected by the digitizer to raise this event, otherwise, <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /&gt;</ph> is raised instead.</source>
          <target state="translated">手寫筆必須在受到數位板偵測時移動才能引發此事件，否則會改為引發 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3005" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3006" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3007" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3008" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3009" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3010" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3011" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3012" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="3013" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3014" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3015" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusMove%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3016" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusMove" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusMove" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3017" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3018" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3019" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3020" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3021" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3022" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Occurs when the stylus is too far from the digitizer to be detected.</source>
          <target state="translated">手寫筆遠離數位板而無法被偵測到時發生。</target>       </trans-unit>
        <trans-unit id="3023" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3024" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3025" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3026" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3027" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3028" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3029" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3030" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="3031" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3032" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3033" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusOutOfRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3034" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3035" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3036" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3037" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3038" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3039" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3040" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">使用者執行其中一種手寫筆筆勢時發生。</target>       </trans-unit>
        <trans-unit id="3041" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>For information about stylus gestures, see <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</source>
          <target state="translated">手寫筆筆勢的相關資訊，請參閱<ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3042" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3043" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3044" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3045" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3046" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3047" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3048" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3049" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="3050" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3051" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3052" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusSystemGesture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3053" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3054" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3055" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3056" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3057" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3058" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3059" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</source>
          <target state="translated">手寫筆在此項目上方，且使用者將手寫筆舉起離開數位板時發生。</target>       </trans-unit>
        <trans-unit id="3060" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3061" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3062" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3063" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3064" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3065" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3066" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3067" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="3068" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3069" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3070" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewStylusUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewStylusUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3071" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewStylusUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3072" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3073" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3074" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3075" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3076" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewStylusUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3077" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">此元素以一種與裝置無關的方式取得文字時發生。</target>       </trans-unit>
        <trans-unit id="3078" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>事件可讓元件或應用程式與裝置無關的方式接聽文字輸入。</target>       </trans-unit>
        <trans-unit id="3079" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>The keyboard is the primary means of <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>; but speech, handwriting, and other input devices can also generate <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>.</source>
          <target state="translated">鍵盤是的主要方式<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>; 但也可以產生語音、 手寫，以及其他輸入的裝置<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3080" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.</source>
          <target state="translated">因為組合 — 在預設鍵盤或輸入的法編輯器透過 — 多個按鍵事件可能會引發一個文字輸入的事件。</target>       </trans-unit>
        <trans-unit id="3081" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3082" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3083" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3084" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3085" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3086" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="3087" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3088" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3089" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTextInput">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTextInput%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3090" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTextInput" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTextInput" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3091" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3092" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3093" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3094" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3095" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.PreviewTextInputEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3096" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">手指在這個項目上方且在螢幕上觸控時發生。</target>       </trans-unit>
        <trans-unit id="3097" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">根據預設，<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph>手指接觸到螢幕，並移動之前不會發生事件。</target>       </trans-unit>
        <trans-unit id="3098" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</source>
          <target state="translated">手指在螢幕上按住不移動的方式會使按下並按住行為<ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3099" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">按住行為相當於按一下滑鼠右鍵。</target>       </trans-unit>
        <trans-unit id="3100" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>To cause the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> attached property to <ph id="ph4">`false`</ph> for this element.</source>
          <target state="translated">若要讓<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph>手指接觸到螢幕，因為發生事件設定<ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph>附加屬性<ph id="ph4">`false`</ph>這個項目的。</target>       </trans-unit>
        <trans-unit id="3101" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3102" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3103" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3104" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="3105" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3106" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3107" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3108" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3109" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewTouchDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3110" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">手指在這個項目上方且在螢幕上移動時發生。</target>       </trans-unit>
        <trans-unit id="3111" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3112" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3113" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3114" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="3115" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3116" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3117" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3118" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3119" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewTouchMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchMove" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchMove" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3120" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">手指在這個項目上方且離開螢幕時發生。</target>       </trans-unit>
        <trans-unit id="3121" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3122" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3123" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3124" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Tunneling</source>
          <target state="translated">通道</target>       </trans-unit>
        <trans-unit id="3125" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3126" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3127" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>The corresponding bubbling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph>.</source>
          <target state="translated">對應的反昇事件<ph id="ph1">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3128" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.PreviewTouchUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3129" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.PreviewTouchUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.PreviewTouchUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3130" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">拖放操作期間，鍵盤或滑鼠按鈕狀態變更時發生。</target>       </trans-unit>
        <trans-unit id="3131" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph>事件可讓拖曳來源能夠決定是否應取消拖放作業。</target>       </trans-unit>
        <trans-unit id="3132" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3133" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3134" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3135" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3136" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3137" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3138" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3139" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3140" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryContinueDrag">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnQueryContinueDrag%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3141" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.QueryContinueDrag" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.QueryContinueDrag" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3144" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryContinueDragEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3147" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Occurs when the cursor is requested to display.</source>
          <target state="translated">要求顯示游標時發生。</target>       </trans-unit>
        <trans-unit id="3148" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.QueryCursor">
          <source>This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</source>
          <target state="translated">每當滑鼠指標移動至新位置時，都會引發此事件，這意謂游標物件可能會根據其新位置而變更。</target>       </trans-unit>
        <trans-unit id="3149" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3150" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3151" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</source>
          <target state="translated">這個事件名稱所參考的資料指標不一定是文字游標 （有時稱為插入點）。</target>       </trans-unit>
        <trans-unit id="3152" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</source>
          <target state="translated">相反地，此內容中的資料指標是宣告畫面的圖形化顯示數個可能的輸入相關裝置或在 Windows 程式設計概念相關的物件。</target>       </trans-unit>
        <trans-unit id="3153" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>That object is represented by the <ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph> class in WPF.</source>
          <target state="translated">該物件由<ph id="ph1">&lt;xref:System.Windows.Input.Cursor&gt;</ph>WPF 中的類別。</target>       </trans-unit>
        <trans-unit id="3154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</source>
          <target state="translated">WPF 輸入的系統可讓您變更這個資料指標，它代表在螢幕上的滑鼠指標位置時。</target>       </trans-unit>
        <trans-unit id="3155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>You can use predefined values from the <ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph> enumeration, or you can declare a custom cursor as an image file.</source>
          <target state="translated">您可以使用預先定義的值從<ph id="ph1">&lt;xref:System.Windows.Input.Cursors&gt;</ph>列舉型別，或者您可以宣告為影像檔的自訂資料指標。</target>       </trans-unit>
        <trans-unit id="3156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Listening for the <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> event is not an efficient technique for cursor management.</source>
          <target state="translated">接聽<ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph>事件就不會針對資料指標管理而有效率的技術。</target>       </trans-unit>
        <trans-unit id="3157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Instead, each element should define its own cursor behavior with <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;</ph>.</source>
          <target state="translated">相反地，每個項目應該定義自己的資料指標行為<ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>You should only rely on <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</source>
          <target state="translated">您只應依賴<ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph>如果您不想要使用的 WPF 架構層級基底項目，或在異常的情況下，其中定義以每個項目為基礎的資料指標的行為不符合您的需求。</target>       </trans-unit>
        <trans-unit id="3159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>For more information on implementing cursor behavior in response to <ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph>, see <ph id="ph2">&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;</ph>.</source>
          <target state="translated">如需有關在回應中實作資料指標行為<ph id="ph1">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph>，請參閱<ph id="ph2">&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>There is no defined corresponding tunneling event.</source>
          <target state="translated">沒有定義對應通道的事件。</target>       </trans-unit>
        <trans-unit id="3166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.QueryCursor">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnQueryCursor%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnQueryCursor%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3167" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.QueryCursor" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.QueryCursor" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3168" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3169" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3170" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3171" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3172" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.QueryCursorEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3173" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> that contains the event data and also identifies the event to raise.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph>，其包含事件資料，也會識別要引發的事件。</target>       </trans-unit>
        <trans-unit id="3174" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>Raises a specific routed event.</source>
          <target state="translated">引發特定路由事件。</target>       </trans-unit>
        <trans-unit id="3175" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> to be raised is identified within the <ph id="ph2">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> instance that is provided (as the <ph id="ph3">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> property of that event data).</source>
          <target state="translated">要引發的 <ph id="ph1">&lt;see cref="T:System.Windows.RoutedEvent" /&gt;</ph> 是在所提供的 <ph id="ph2">&lt;see cref="T:System.Windows.RoutedEventArgs" /&gt;</ph> 執行個體內被識別 (該執行個體是提供做為該事件資料的 <ph id="ph3">&lt;see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /&gt;</ph> 屬性)。</target>       </trans-unit>
        <trans-unit id="3176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The <ph id="ph1">`e`</ph> parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</source>
          <target state="translated"><ph id="ph1">`e`</ph>參數的型別做為路由的事件的所有資料的通用基底類型; 不過，應該指定事件資料為最特定的事件資料類型是適用於所引發的事件，因為<ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph>衍生的類別包含實際的特定資料是針對特定事件時引發此事件的屬性。</target>       </trans-unit>
        <trans-unit id="3177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> is not just the state properties for the event; it also identifies which routed event to raise.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> 沒有狀態內容事件。它也會識別要引發哪個路由的事件。</target>       </trans-unit>
        <trans-unit id="3178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>This event-raising pattern and the routed event data both differ from <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> events and data classes, which typically just contain properties that are related to the event.</source>
          <target state="translated">此事件引發模式且同時與不同的路由的事件資料<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>事件和資料類別，通常只包含與事件相關的屬性。</target>       </trans-unit>
        <trans-unit id="3179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
          <source>The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</source>
          <target state="translated">下列範例會建立事件資料、 將事件的識別項附加至資料，，然後使用 以引發自訂的路由的事件的 事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3180" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseAllTouchCaptures">
          <source>Releases all captured touch devices from this element.</source>
          <target state="translated">從這個項目釋放所有擷取到的觸控裝置。</target>       </trans-unit>
        <trans-unit id="3181" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseMouseCapture">
          <source>Releases the mouse capture, if this element held the capture.</source>
          <target state="translated">如果這個項目保有滑鼠捕捉，則釋放捕捉。</target>       </trans-unit>
        <trans-unit id="3182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ReleaseMouseCapture">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">如果這個項目按擷取不放，呼叫這個方法沒有任何作用。</target>       </trans-unit>
        <trans-unit id="3183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ReleaseMouseCapture">
          <source>Consider checking the value of <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> before you call this method.</source>
          <target state="translated">請考慮檢查值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph>之前先呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="3184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ReleaseMouseCapture">
          <source>The following example is the parallel to the example given for <ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>: it handles mouse button up to release mouse capture and re-enable moving the mouse.</source>
          <target state="translated">下列範例是針對提供的範例平行<ph id="ph1">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>： 它會處理發行滑鼠捕捉到滑鼠按鈕，再重新啟用 移動滑鼠。</target>       </trans-unit>
        <trans-unit id="3185" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseStylusCapture">
          <source>Releases the stylus device capture, if this element held the capture.</source>
          <target state="translated">如果這個項目保有手寫筆裝置捕捉，則釋放捕捉。</target>       </trans-unit>
        <trans-unit id="3186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ReleaseStylusCapture">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">如果這個項目按擷取不放，呼叫這個方法沒有任何作用。</target>       </trans-unit>
        <trans-unit id="3187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ReleaseStylusCapture">
          <source>Consider checking the value of <ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> before you call this method.</source>
          <target state="translated">請考慮檢查值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph>之前先呼叫這個方法。</target>       </trans-unit>
        <trans-unit id="3188" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source>The device to release.</source>
          <target state="translated">要釋放的裝置。</target>       </trans-unit>
        <trans-unit id="3189" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source>Attempts to release the specified touch device from this element.</source>
          <target state="translated">嘗試從這個項目中釋放指定的觸控裝置。</target>       </trans-unit>
        <trans-unit id="3190" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the touch device is released; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果已釋放觸控裝置則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3191" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
          <source><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="touchDevice" /&gt;</ph> 為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3192" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The identifier of the routed event for which the handler is attached.</source>
          <target state="translated">要附加處理常式之路由事件的識別項。</target>       </trans-unit>
        <trans-unit id="3193" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The specific handler implementation to remove from the event handler collection on this element.</source>
          <target state="translated">要從這個項目上的事件處理常式集合中移除的特定處理常式實作。</target>       </trans-unit>
        <trans-unit id="3194" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Removes the specified routed event handler from this element.</source>
          <target state="translated">從這個項目中移除指定的路由事件處理常式。</target>       </trans-unit>
        <trans-unit id="3195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The most common scenario for using this <ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> is when you implement the <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> level.</source>
          <target state="translated">最常見的案例使用這<ph id="ph1">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph>是當您實作<ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph>自訂路由事件，特別是當您實作在處理常式的 「 移除 」 邏輯時相關聯的 「 包裝函式 」 事件<ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>層級。</target>       </trans-unit>
        <trans-unit id="3196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The example that follows this remarks section illustrates this scenario.</source>
          <target state="translated">這會遵循範例 &lt; 備註 &gt; 一節會說明這種情況。</target>       </trans-unit>
        <trans-unit id="3197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.</source>
          <target state="translated">如果沒有任何處理常式註冊以比對方法呼叫的輸入的參數的準則，則呼叫這個方法任何作用。</target>       </trans-unit>
        <trans-unit id="3198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</source>
          <target state="translated">如果一個以上的處理常式附加事件處理常式存放區會移除比對準則，第一個處理常式。</target>       </trans-unit>
        <trans-unit id="3199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>This behavior is consistent with <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> behavior of the <ph id="ph2">`-=`</ph> operator.</source>
          <target state="translated">這個行為會與一致<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>行為<ph id="ph2">`-=`</ph>運算子。</target>       </trans-unit>
        <trans-unit id="3200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Neither <ph id="ph1">`routedEvent`</ph> nor <ph id="ph2">`handler`</ph> may be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">既不<ph id="ph1">`routedEvent`</ph>也<ph id="ph2">`handler`</ph>可能<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="3201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Attempting to provide either value as <ph id="ph1">`null`</ph> will raise an exception.</source>
          <target state="translated">嘗試在提供做為任一個值<ph id="ph1">`null`</ph>會引發例外狀況。</target>       </trans-unit>
        <trans-unit id="3202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>This method ignores the <ph id="ph1">`handledEventsToo`</ph> parameter information, which is provided if the handler was first added with the <ph id="ph2">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature that enables handling of already-handled events.</source>
          <target state="translated">這個方法會忽略<ph id="ph1">`handledEventsToo`</ph>加上參數資訊，如果第一個處理常式提供<ph id="ph2">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph>簽章，可讓已處理事件的處理。</target>       </trans-unit>
        <trans-unit id="3203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>Either type of handler is removed.</source>
          <target state="translated">會移除任一類型的處理常式。</target>       </trans-unit>
        <trans-unit id="3204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Windows.UIElement.RemoveHandler%2A&gt;</ph> as part of an event wrapper definition.</source>
          <target state="translated">下列範例會使用<ph id="ph1">&lt;xref:System.Windows.UIElement.RemoveHandler%2A&gt;</ph>做為事件的包裝函式定義的一部分。</target>       </trans-unit>
        <trans-unit id="3205" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.RenderSize">
          <source>Gets (or sets) the final render size of this element.</source>
          <target state="translated">取得 (或設定) 這個項目的最終呈現大小。</target>       </trans-unit>
        <trans-unit id="3206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>The rendered size for this element.</source>
          <target state="translated">這個項目的呈現大小。</target>       </trans-unit>
        <trans-unit id="3207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>Do not attempt to set this property, either in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> or in code, if using the WPF framework-level layout system.</source>
          <target state="translated">請勿嘗試設定此屬性有兩種<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>或程式碼，如果使用 WPF 架構層級配置系統中。</target>       </trans-unit>
        <trans-unit id="3208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>Nearly all typical application scenarios will use this layout system.</source>
          <target state="translated">幾乎所有的一般應用程式案例將會使用這個版面配置系統。</target>       </trans-unit>
        <trans-unit id="3209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>The layout system will not respect sizes set in the <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> property directly.</source>
          <target state="translated">版面配置系統將不會使用在中設定的大小<ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>直接屬性。</target>       </trans-unit>
        <trans-unit id="3210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <ph id="ph2">&lt;xref:System.Windows.Documents.Adorner&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>屬性宣告只用於讓特定 WPF 核心層級橋接刻意規避的一般版面配置通訊協定，例如支援的情況下可寫入<ph id="ph2">&lt;xref:System.Windows.Documents.Adorner&gt;</ph>類別。</target>       </trans-unit>
        <trans-unit id="3211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>This property can be used for checking the applicable render size within layout system overrides such as <ph id="ph1">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.UIElement.GetLayoutClip%2A&gt;</ph>.</source>
          <target state="translated">這個屬性可以用來檢查版面配置系統中的適用呈現大小會覆寫這類<ph id="ph1">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Windows.UIElement.GetLayoutClip%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>A more common scenario is handling the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph> event with the class handler override or the <ph id="ph2">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph> event.</source>
          <target state="translated">更常見的案例處理<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph>事件的類別處理常式覆寫或<ph id="ph2">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="3213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderSize">
          <source>The following example shows how a custom adorner uses the <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> value in order to create and size the rectangle graphic that defines the adorner, as part of its <ph id="ph2">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> implementation.</source>
          <target state="translated">下列範例示範如何使用自訂的裝飾項<ph id="ph1">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>值，以便建立及調整大小的矩形圖形，定義一部分的裝飾項，其<ph id="ph2">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph>實作。</target>       </trans-unit>
        <trans-unit id="3214" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Gets or sets transform information that affects the rendering position of this element.</source>
          <target state="translated">取得或設定影響這個項目呈現位置的轉換資訊。</target>       </trans-unit>
        <trans-unit id="3215" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.RenderTransform">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="3216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Describes the specifics of the desired render transform.</source>
          <target state="translated">描述所需呈現轉換的特性。</target>       </trans-unit>
        <trans-unit id="3217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>The default is <ph id="ph1">&lt;see cref="P:System.Windows.Media.Transform.Identity" /&gt;</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">&lt;see cref="P:System.Windows.Media.Transform.Identity" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>A render transform does not regenerate layout size or render size information.</source>
          <target state="translated">呈現轉換不會重新產生配置大小或呈現大小資訊。</target>       </trans-unit>
        <trans-unit id="3219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Render transforms are typically intended for animating or applying a temporary effect to an element.</source>
          <target state="translated">呈現轉換通常用動畫顯示或元素套用暫時效果。</target>       </trans-unit>
        <trans-unit id="3220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">已取得焦點或將指標放上方，或可能會在載入該部分以吸引抖動時，此項目，例如可能縮放<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="3221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="3222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="3224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransform">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="3225" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Gets or sets the center point of any possible render transform declared by <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransform" /&gt;</ph>, relative to the bounds of the element.</source>
          <target state="translated">取得或設定任何可能由 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransform" /&gt;</ph> 宣告之呈現轉換、相對於項目範圍的中心點。</target>       </trans-unit>
        <trans-unit id="3226" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="3227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The value that declares the render transform.</source>
          <target state="translated">宣告呈現轉換的值。</target>       </trans-unit>
        <trans-unit id="3228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The default value is a <ph id="ph1">&lt;see cref="T:System.Windows.Point" /&gt;</ph> with coordinates (0,0).</source>
          <target state="translated">預設值為具有座標 (0,0) 的 <ph id="ph1">&lt;see cref="T:System.Windows.Point" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph> has a somewhat nonstandard use of the <ph id="ph2">&lt;xref:System.Windows.Point&gt;</ph> structure value, in that the <ph id="ph3">&lt;xref:System.Windows.Point&gt;</ph> does not represent an absolute location in a coordinate system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph> 有多少非標準方式使用<ph id="ph2">&lt;xref:System.Windows.Point&gt;</ph>結構中的值<ph id="ph3">&lt;xref:System.Windows.Point&gt;</ph>不代表絕對位置座標系統中的。</target>       </trans-unit>
        <trans-unit id="3230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis.</source>
          <target state="translated">相反地，介於 0 和 1 之間的值會解譯為目前的項目中每個 x，y 軸的範圍內的因素。</target>       </trans-unit>
        <trans-unit id="3231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element.</source>
          <target state="translated">例如，(0.5，0.5) 會造成呈現轉換的元素上置中 (1，1) 會將呈現轉換底端右下角的項目。</target>       </trans-unit>
        <trans-unit id="3232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source><ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> is not an accepted value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> 不接受的值。</target>       </trans-unit>
        <trans-unit id="3233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects.</source>
          <target state="translated">0 和 1 以外的值也會接受的並會導致更多的非傳統的轉換效果。</target>       </trans-unit>
        <trans-unit id="3234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>For instance, if you set <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph> to be (5,5), and then apply a <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph>, the rotation point will be well outside the bounds of the element itself.</source>
          <target state="translated">比方說，如果您設定<ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph>(5,5)，並接著套用<ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph>，項目本身的範圍之外，也會旋轉點。</target>       </trans-unit>
        <trans-unit id="3235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The transform will spin your element around in a big circle that originates beyond bottom right.</source>
          <target state="translated">轉換將會微調您的項目是圓形中有大源自右下角之外。</target>       </trans-unit>
        <trans-unit id="3236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view.</source>
          <target state="translated">來源可能會在其父項目內的某處，並可能超出框架或檢視表。</target>       </trans-unit>
        <trans-unit id="3237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Negative point values are similar, these will go beyond the top left bounds.</source>
          <target state="translated">負數的點值都是類似，會產生超出左上方的界限。</target>       </trans-unit>
        <trans-unit id="3238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.</source>
          <target state="translated">呈現轉換不會影響配置，以及通常用來建立動畫，或將暫存效果套用至項目。</target>       </trans-unit>
        <trans-unit id="3239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML Attribute Usage</target>       </trans-unit>
        <trans-unit id="3240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>XAML Property Element Usage</source>
          <target state="translated">XAML 屬性項目用法</target>       </trans-unit>
        <trans-unit id="3241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>XAML Values</source>
          <target state="translated">XAML 值</target>       </trans-unit>
        <trans-unit id="3242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source><bpt id="p1">*</bpt>xOrigin<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>xOrigin<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="3243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The horizontal origin factor.</source>
          <target state="translated">水平的原始比例。</target>       </trans-unit>
        <trans-unit id="3244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>This is typically given as a value between 0 and 1.</source>
          <target state="translated">這通常是指定為介於 0 和 1 之間的值。</target>       </trans-unit>
        <trans-unit id="3245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>See Remarks.</source>
          <target state="translated">請參閱＜備註＞。</target>       </trans-unit>
        <trans-unit id="3246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source><bpt id="p1">*</bpt>yOrigin<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>yOrigin<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="3247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The vertical origin factor.</source>
          <target state="translated">垂直原點因數。</target>       </trans-unit>
        <trans-unit id="3248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>This is typically given as a value between 0 and 1.</source>
          <target state="translated">這通常是指定為介於 0 和 1 之間的值。</target>       </trans-unit>
        <trans-unit id="3249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>See Remarks.</source>
          <target state="translated">請參閱＜備註＞。</target>       </trans-unit>
        <trans-unit id="3250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="3251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="3253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="3254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.RenderTransformOrigin">
          <source>The following example builds up elements in code, applies a <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph>, and then applies a  <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph>.</source>
          <target state="translated">下列範例會建立在程式碼中的項目，適用於<ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph>，然後再套用<ph id="ph2">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3255" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.RenderTransformOriginProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransformOrigin" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransformOrigin" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="3256" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.RenderTransformProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransform" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.RenderTransform" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="3257" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.CommandBindings" /&gt;</ph> property on instances of this class.</source>
          <target state="translated">傳回序列化 (Serialization) 處理序是否應該在這個類別的執行個體上，將 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.CommandBindings" /&gt;</ph> 屬性的內容序列化。</target>       </trans-unit>
        <trans-unit id="3258" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.UIElement.CommandBindings" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果應序列化 <ph id="ph2">&lt;see cref="P:System.Windows.UIElement.CommandBindings" /&gt;</ph> 屬性值，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>This will return <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> is locally set.</source>
          <target state="translated">這會傳回<ph id="ph1">`true`</ph>如果<ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph>本機設定。</target>       </trans-unit>
        <trans-unit id="3260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> property does not have a simple default value.</source>
          <target state="translated">這<ph id="ph1">`ShouldSerialize`</ph>方法提供，因為<ph id="ph2">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph>屬性並沒有簡單的預設值。</target>       </trans-unit>
        <trans-unit id="3261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">這個方法會指出屬性是否已變更其預設值。</target>       </trans-unit>
        <trans-unit id="3262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">您通常叫用這個方法如果在開發設計師或開發您自己的控制項加入<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>定義預設值使用 ShouldSerialize 和重設方法<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3264" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>Returns whether serialization processes should serialize the contents of the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.InputBindings" /&gt;</ph> property on instances of this class.</source>
          <target state="translated">傳回序列化 (Serialization) 處理序是否應該在這個類別的執行個體上，將 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.InputBindings" /&gt;</ph> 屬性的內容序列化。</target>       </trans-unit>
        <trans-unit id="3265" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="P:System.Windows.UIElement.InputBindings" /&gt;</ph> property value should be serialized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果應序列化 <ph id="ph2">&lt;see cref="P:System.Windows.UIElement.InputBindings" /&gt;</ph> 屬性值，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>This will return <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> is locally set.</source>
          <target state="translated">這會傳回<ph id="ph1">`true`</ph>如果<ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph>本機設定。</target>       </trans-unit>
        <trans-unit id="3267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> property does not have a simple default value.</source>
          <target state="translated">這<ph id="ph1">`ShouldSerialize`</ph>方法提供，因為<ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph>屬性並沒有簡單的預設值。</target>       </trans-unit>
        <trans-unit id="3268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">這個方法會指出屬性是否已變更其預設值。</target>       </trans-unit>
        <trans-unit id="3269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>.</source>
          <target state="translated">您通常叫用這個方法如果在開發設計師或開發您自己的控制項加入<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.ShouldSerializeInputBindings">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>定義預設值使用 ShouldSerialize 和重設方法<ept id="p1">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3271" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.</source>
          <target state="translated">取得或設定值，該值判斷這個項目的呈現在呈現期間是否該使用裝置特定像素的設定。</target>       </trans-unit>
        <trans-unit id="3272" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="3273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element should render in accordance to device pixels; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果項目應按照裝置像素來呈現則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>The default as declared on <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 上所宣告的預設值為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>You can set this property to <ph id="ph1">`true`</ph> on your root element to enable pixel snap rendering throughout the UI.</source>
          <target state="translated">您可以將此屬性設定為<ph id="ph1">`true`</ph>在您的根項目，若要啟用像素貼齊呈現整個 UI。</target>       </trans-unit>
        <trans-unit id="3276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>For devices operating at greater than 96 <ph id="ph1">[!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]</ph>, pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.</source>
          <target state="translated">適用於裝置超過 96 <ph id="ph1">[!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]</ph>，像素貼齊呈現可以減少單一單元實線來消除鋸齒視覺成品。</target>       </trans-unit>
        <trans-unit id="3277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or any possible derived classes, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> overrides the metadata for this dependency property to set the <ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> metadata property to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">當繼承<ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>或任何可能在衍生類別，<ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>設定此相依性屬性的中繼資料會覆寫<ph id="ph3">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph>中繼資料屬性來<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="3278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>What this achieves is that only the outermost element in a subtree needs to specify <ph id="ph1">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> as <ph id="ph2">`true`</ph>, and all child elements of that subtree will then report <ph id="ph3">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> as <ph id="ph4">`true`</ph> and will have the <ph id="ph5">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> visual effect.</source>
          <target state="translated">這可達到是只將最外層項目樹狀子目錄中的必須指定<ph id="ph1">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph>為<ph id="ph2">`true`</ph>，然後將會報告該子樹狀結構的所有子項目<ph id="ph3">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph>為<ph id="ph4">`true`</ph>，而且必須<ph id="ph5">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph>視覺效果。</target>       </trans-unit>
        <trans-unit id="3279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="3280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="3282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.SnapsToDevicePixels">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="3283" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.SnapsToDevicePixelsProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="3284" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">手寫筆指標在此元素上方且按下手寫筆按鈕時發生。</target>       </trans-unit>
        <trans-unit id="3285" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3286" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3287" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3288" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3289" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3290" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3291" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3292" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3293" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3294" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3295" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusButtonDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3296" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusButtonDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusButtonDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3297" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3298" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3299" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3300" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3301" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3302" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">手寫筆指標在此元素上方且放開手寫筆按鈕時發生。</target>       </trans-unit>
        <trans-unit id="3303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3307" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3308" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3309" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3310" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3311" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3312" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3313" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusButtonUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusButtonUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3314" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusButtonUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusButtonUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3315" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3316" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3317" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3318" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3319" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusButtonUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3320" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusDown">
          <source>Occurs when the stylus touches the digitizer while the stylus is over this element.</source>
          <target state="translated">手寫筆在此項目上方且碰觸數位板時發生。</target>       </trans-unit>
        <trans-unit id="3321" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3322" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3323" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3324" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3326" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3327" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3328" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3329" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3330" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3331" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3332" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3333" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3334" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3335" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3336" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3337" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusDownEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3338" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Occurs when the stylus enters the bounds of this element.</source>
          <target state="translated">手寫筆進入此元素的邊界時發生。</target>       </trans-unit>
        <trans-unit id="3339" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> is a  that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> 是，使用直接的事件處理路由策略。</target>       </trans-unit>
        <trans-unit id="3340" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。</target>       </trans-unit>
        <trans-unit id="3341" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">不過，它們會啟用路由的事件的行為，例如事件觸發程序在樣式中的其他層面。</target>       </trans-unit>
        <trans-unit id="3342" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> tracks when the stylus enters the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id="ph3">`false`</ph> to <ph id="ph4">`true`</ph> on this element.</source>
          <target state="translated">雖然<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph>當手寫筆進入範圍的項目，這個多個事件的追蹤依其字面報告<ph id="ph2">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph>屬性值已經從<ph id="ph3">`false`</ph>至<ph id="ph4">`true`</ph>這個項目上。</target>       </trans-unit>
        <trans-unit id="3343" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3348" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3349" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3350" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="3351" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3352" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusEnter%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3353" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusEnter" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusEnter" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3354" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3355" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3356" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3357" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3358" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusEnterEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3359" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">手寫筆在項目上方移動，但沒有真正碰觸數位板時發生。</target>       </trans-unit>
        <trans-unit id="3360" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3361" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3362" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3363" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3364" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3365" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3366" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3367" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3368" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3369" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3370" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInAirMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusInAirMove%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3371" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInAirMove" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInAirMove" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3372" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3373" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3374" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3375" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3376" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInAirMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3377" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">手寫筆在此項目上方，且夠靠近數位板而被偵測到時發生。</target>       </trans-unit>
        <trans-unit id="3378" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3379" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3380" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3381" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3382" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3383" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3384" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3385" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3386" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3387" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3388" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusInRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusInRange%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3389" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInRange" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInRange" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3390" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3391" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3392" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3393" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3394" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusInRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3395" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Occurs when the stylus leaves the bounds of the element.</source>
          <target state="translated">手寫筆離開元素的邊界時發生。</target>       </trans-unit>
        <trans-unit id="3396" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> is a  that uses the direct event handling routing strategy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> 是，使用直接的事件處理路由策略。</target>       </trans-unit>
        <trans-unit id="3397" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。</target>       </trans-unit>
        <trans-unit id="3398" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">不過，它們會啟用路由的事件的行為，例如事件觸發程序在樣式中的其他層面。</target>       </trans-unit>
        <trans-unit id="3399" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id="ph3">`true`</ph> to <ph id="ph4">`false`</ph> on this element.</source>
          <target state="translated">雖然<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph>時手寫筆離開範圍的項目，此事件的多個追蹤逐字報告<ph id="ph2">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph>屬性值已經從<ph id="ph3">`true`</ph>至<ph id="ph4">`false`</ph>這個項目上。</target>       </trans-unit>
        <trans-unit id="3400" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3401" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3402" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3403" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3404" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3405" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3406" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3407" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="3408" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3409" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusLeave%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3410" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusLeave" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusLeave" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3411" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3412" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3413" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3414" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3415" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusLeaveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3416" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusMove">
          <source>Occurs when the stylus moves over this element.</source>
          <target state="translated">當手寫筆移至此項目上方時發生。</target>       </trans-unit>
        <trans-unit id="3417" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusMove">
          <source>The stylus must move while on the digitizer to raise this event.</source>
          <target state="translated">手寫筆在數位板上必須移動才會引發這個事件。</target>       </trans-unit>
        <trans-unit id="3418" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusMove">
          <source>Otherwise, <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInAirMove" /&gt;</ph> is raised instead.</source>
          <target state="translated">否則會改為引發 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusInAirMove" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3419" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3420" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3421" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3422" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3423" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3424" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3425" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3426" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3427" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3428" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3429" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusMove%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3430" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusMove" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusMove" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3431" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3432" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3433" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3434" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3435" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusMoveEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3436" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Occurs when the stylus is too far from the digitizer to be detected, while over this element.</source>
          <target state="translated">手寫筆在此項目上方，且遠離數位板而無法被偵測到時發生。</target>       </trans-unit>
        <trans-unit id="3437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3439" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3440" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3441" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3442" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3443" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3444" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3445" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3446" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3447" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusOutOfRange">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusOutOfRange%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3448" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusOutOfRange" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusOutOfRange" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3449" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3450" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3451" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3452" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3453" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusOutOfRangeEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3454" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source>Gets a collection of all stylus plug-in (customization) objects associated with this element.</source>
          <target state="translated">取得與這個項目關聯的所有手寫筆外掛程式 (自訂) 物件集合。</target>       </trans-unit>
        <trans-unit id="3455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source>The collection of stylus plug-ins, as a specialized collection.</source>
          <target state="translated">手寫筆外掛程式集合，做為特定的集合。</target>       </trans-unit>
        <trans-unit id="3456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source>An example of a control that populates this collection is <ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>.</source>
          <target state="translated">舉例來說，會填入這個集合的控制項是<ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> adds the <ph id="ph2">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph> as a collection item, which enables the <ph id="ph3">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph> to interact with stylus input and produce the unique rendering in response to stylus driven events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> 新增<ph id="ph2">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph>做為集合項目，這可讓<ph id="ph3">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph>互動手寫筆輸入，並產生唯一的呈現方式，以回應手寫筆驅動事件。</target>       </trans-unit>
        <trans-unit id="3458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source>For information on creating custom plug-ins that can receive and interpret stylus input, see <bpt id="p1">[</bpt>Intercepting Input from the Stylus<ept id="p1">](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)</ept>.</source>
          <target state="translated">如需有關建立自訂外掛程式可以接收和解譯手寫筆輸入，請參閱<bpt id="p1">[</bpt>輸入將手寫筆攔截<ept id="p1">](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.StylusPlugIns">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph> instance and adds it to the <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusPlugIns%2A&gt;</ph> collection for a custom ink handling control.</source>
          <target state="translated">下列範例會建立<ph id="ph1">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph>執行個體，並將它加入至<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusPlugIns%2A&gt;</ph>處理控制項的自訂筆墨的集合。</target>       </trans-unit>
        <trans-unit id="3460" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">使用者執行其中一種手寫筆筆勢時發生。</target>       </trans-unit>
        <trans-unit id="3461" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>For more information about stylus gestures, see <ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.</source>
          <target state="translated">手寫筆筆勢的相關資訊的詳細資訊，請參閱<ph id="ph1">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3462" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3463" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3464" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3465" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3466" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3467" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3468" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3469" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3470" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3471" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3472" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusSystemGesture">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusSystemGesture%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3473" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusSystemGesture" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusSystemGesture" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3474" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3475" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3476" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3477" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3478" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusSystemGestureEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3479" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.StylusUp">
          <source>Occurs when the user raises the stylus off the digitizer while it is over this element.</source>
          <target state="translated">手寫筆在此項目上方，且使用者將手寫筆舉起離開數位板時發生。</target>       </trans-unit>
        <trans-unit id="3480" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3481" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3482" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</target>       </trans-unit>
        <trans-unit id="3483" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>輸入概觀<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>。</target>       </trans-unit>
        <trans-unit id="3484" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3485" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3486" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3487" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3488" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3489" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusUp&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewStylusUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3490" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.StylusUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnStylusUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3491" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.StylusUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3492" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3493" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3494" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3495" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3496" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.StylusUpEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3497" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TextInput">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">此元素以一種與裝置無關的方式取得文字時發生。</target>       </trans-unit>
        <trans-unit id="3498" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>This event might already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated">此事件可能已標示為處理複合控制項的內部實作。</target>       </trans-unit>
        <trans-unit id="3499" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>See Remark below.</source>
          <target state="translated">請參閱下方的 「 備註。</target>       </trans-unit>
        <trans-unit id="3500" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event may already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>事件可能已標示為已處理的複合控制項的內部實作。</target>       </trans-unit>
        <trans-unit id="3501" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is a composited control where the <ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event is already marked as handled; within its compositing.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>是複合控制項其中<ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>事件已標示為處理; 在其複合 （compositing）。</target>       </trans-unit>
        <trans-unit id="3502" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</source>
          <target state="translated">控制項執行這項操作，因為控制項必須解譯某些類型的輸入，例如方向鍵，該控制項的特別意義。</target>       </trans-unit>
        <trans-unit id="3503" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>If you use <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> as the event where you attach handlers for text input, you may receive better results.</source>
          <target state="translated">如果您使用<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>您用來附加文字輸入的處理常式的事件，您可能會收到更好的結果。</target>       </trans-unit>
        <trans-unit id="3504" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</source>
          <target state="translated">這項技術規避大部分的情況下，其中已將這個事件標記為已處理控制項撰寫，而防止接收事件路由上的事件處理常式。</target>       </trans-unit>
        <trans-unit id="3505" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>事件可讓元件或應用程式與裝置無關的方式接聽文字輸入。</target>       </trans-unit>
        <trans-unit id="3506" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>The keyboard is the primary means of <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>, but speech, handwriting, and other input devices can also raise <ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>.</source>
          <target state="translated">鍵盤是的主要方式<ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>，但也可以引發語音、 手寫，以及其他輸入的裝置<ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3507" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.</source>
          <target state="translated">因為組合 — 在預設鍵盤或輸入的法編輯器透過 — 多個按鍵事件可能會引發一個文字輸入的事件。</target>       </trans-unit>
        <trans-unit id="3508" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>This event creates an alias for the <ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> attached event for this class, so that <ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> is part of the class members list when <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.</source>
          <target state="translated">此事件會建立一個別名<ph id="ph1">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph>附加事件，這個類別，以便<ph id="ph2">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>屬於類別的成員 清單時<ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>繼承基底的項目。</target>       </trans-unit>
        <trans-unit id="3509" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Event handlers that are attached to the <ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event are attached to the underlying <ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph> attached event and receive the same event data instance.</source>
          <target state="translated">事件處理常式附加至<ph id="ph1">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>事件會附加至基礎<ph id="ph2">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType&gt;</ph>附加事件和接收相同的事件資料執行個體。</target>       </trans-unit>
        <trans-unit id="3510" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3511" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3512" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3513" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3514" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3515" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3516" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TextInput">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTextInput%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3517" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TextInput" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TextInput" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3518" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">註冊路由事件時，會建立路由事件識別項。</target>       </trans-unit>
        <trans-unit id="3519" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</target>       </trans-unit>
        <trans-unit id="3520" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">您可以使用這些識別項來加入類別處理常式。</target>       </trans-unit>
        <trans-unit id="3521" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>For more information about registering routed events, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.</source>
          <target state="translated">如需註冊路由事件的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3522" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.UIElement.TextInputEvent">
          <source>For more information about using routed event identifiers to add class handlers, see <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.</source>
          <target state="translated">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3523" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TouchDown">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">手指在這個項目上方且在螢幕上觸控時發生。</target>       </trans-unit>
        <trans-unit id="3524" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">根據預設，<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph>手指接觸到螢幕，並移動之前不會發生事件。</target>       </trans-unit>
        <trans-unit id="3525" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.</source>
          <target state="translated">手指在螢幕上按住不移動的方式會使按下並按住行為<ph id="ph1">&lt;xref:System.Windows.Input.Stylus&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3526" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">按住行為相當於按一下滑鼠右鍵。</target>       </trans-unit>
        <trans-unit id="3527" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>To cause the <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph> attached property to <ph id="ph4">`false`</ph> for this element.</source>
          <target state="translated">若要讓<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph>和<ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph>手指接觸到螢幕，因為發生事件設定<ph id="ph3">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType&gt;</ph>附加屬性<ph id="ph4">`false`</ph>這個項目的。</target>       </trans-unit>
        <trans-unit id="3528" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3529" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3530" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3531" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3532" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3533" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3534" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3535" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchDown">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3536" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TouchDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchDown" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchDown" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3537" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">當觸控從這個項目的界限外部移至內部時發生。</target>       </trans-unit>
        <trans-unit id="3538" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>This event is always raised, whether or not the touch device is captured to this element.</source>
          <target state="translated">一律引發這個事件，或有觸控式裝置擷取至這個項目。</target>       </trans-unit>
        <trans-unit id="3539" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3540" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3541" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3542" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="3543" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3544" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3545" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchEnter">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3546" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TouchEnterEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchEnter" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchEnter" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3547" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.TouchesCaptured">
          <source>Gets all touch devices that are captured to this element.</source>
          <target state="translated">取得已擷取至這個項目的所有觸控裝置。</target>       </trans-unit>
        <trans-unit id="3548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.TouchesCaptured">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are captured to this element.</source>
          <target state="translated">已擷取至這個項目之 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 物件的列舉。</target>       </trans-unit>
        <trans-unit id="3549" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.TouchesCapturedWithin">
          <source>Gets all touch devices that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">取得已擷取至這個項目或其視覺化樹狀結構中之任何子項目的所有觸控裝置。</target>       </trans-unit>
        <trans-unit id="3550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.TouchesCapturedWithin">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">已擷取至這個項目或其視覺化樹狀結構中之任何子項目的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 物件列舉。</target>       </trans-unit>
        <trans-unit id="3551" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.TouchesDirectlyOver">
          <source>Gets all touch devices that are over this element.</source>
          <target state="translated">取得在這個項目上停留的所有觸控裝置。</target>       </trans-unit>
        <trans-unit id="3552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.TouchesDirectlyOver">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are over this element.</source>
          <target state="translated">在這個項目之上的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 物件列舉。</target>       </trans-unit>
        <trans-unit id="3553" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.TouchesOver">
          <source>Gets all touch devices that are over this element or any child elements in its visual tree.</source>
          <target state="translated">取得在這個項目或其視覺化樹狀結構中之任何子項目上停留的所有觸控裝置。</target>       </trans-unit>
        <trans-unit id="3554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.TouchesOver">
          <source>An enumeration of <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> objects that are over this element or any child elements in its visual tree.</source>
          <target state="translated">在這個項目或其視覺化樹狀結構中之任何子項目上停留的 <ph id="ph1">&lt;see cref="T:System.Windows.Input.TouchDevice" /&gt;</ph> 物件列舉。</target>       </trans-unit>
        <trans-unit id="3555" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Occurs when a touch moves from inside to outside the bounds of this element.</source>
          <target state="translated">當觸控從這個項目的界限內部移至外部時發生。</target>       </trans-unit>
        <trans-unit id="3556" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>This event is always raised, whether or not the touch device is captured to this element.</source>
          <target state="translated">一律引發這個事件，或有觸控式裝置擷取至這個項目。</target>       </trans-unit>
        <trans-unit id="3557" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3558" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3559" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3560" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Direct</source>
          <target state="translated">直接</target>       </trans-unit>
        <trans-unit id="3561" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3562" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3563" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchLeave">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3564" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TouchLeaveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchLeave" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchLeave" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3565" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TouchMove">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">手指在這個項目上方且在螢幕上移動時發生。</target>       </trans-unit>
        <trans-unit id="3566" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3567" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3568" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3569" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3570" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3571" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3572" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3573" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchMove">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3574" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TouchMoveEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchMove" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchMove" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3575" translate="yes" xml:space="preserve" uid="E:System.Windows.UIElement.TouchUp">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">手指在這個項目上方且離開螢幕時發生。</target>       </trans-unit>
        <trans-unit id="3576" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Routed Event Information</source>
          <target state="translated">路由事件資訊</target>       </trans-unit>
        <trans-unit id="3577" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3578" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Routing strategy</source>
          <target state="translated">路由策略</target>       </trans-unit>
        <trans-unit id="3579" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Bubbling</source>
          <target state="translated">反昇</target>       </trans-unit>
        <trans-unit id="3580" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Delegate</source>
          <target state="translated">Delegate - 委派</target>       </trans-unit>
        <trans-unit id="3581" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source><ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.</source>
          <target state="translated">型別 <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> 的 <ph id="ph2">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3582" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>The corresponding tunneling event is <ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;</ph>.</source>
          <target state="translated">對應通道的事件<ph id="ph1">&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3583" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.UIElement.TouchUp">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.</source>
          <target state="translated">覆寫<ph id="ph1">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph>實作在衍生類別中這個事件的類別處理。</target>       </trans-unit>
        <trans-unit id="3584" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.TouchUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchUp" /&gt;</ph> routed event.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.TouchUp" /&gt;</ph> 路由事件。</target>       </trans-unit>
        <trans-unit id="3585" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>The point value, as relative to this element.</source>
          <target state="translated">相對於這個項目的點值。</target>       </trans-unit>
        <trans-unit id="3586" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>The element to translate the given point into.</source>
          <target state="translated">指定的點要轉換成的項目。</target>       </trans-unit>
        <trans-unit id="3587" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>Translates a point relative to this element to coordinates that are relative to the specified element.</source>
          <target state="translated">將相對於這個項目的點轉換成相對於指定項目的座標。</target>       </trans-unit>
        <trans-unit id="3588" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>A point value, now relative to the target element rather than this source element.</source>
          <target state="translated">點值，現在會相對於目標項目，而不是這個來源項目。</target>       </trans-unit>
        <trans-unit id="3589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>Passing <ph id="ph1">`null`</ph> for <ph id="ph2">`relativeTo`</ph> is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.</source>
          <target state="translated">傳遞<ph id="ph1">`null`</ph>如<ph id="ph2">`relativeTo`</ph>允許，並指出座標應該相對於這個項目所屬之邏輯樹狀結構中的根元素。</target>       </trans-unit>
        <trans-unit id="3590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>This method is used for translating hit test point values.</source>
          <target state="translated">這個方法用來轉譯點擊測試點值。</target>       </trans-unit>
        <trans-unit id="3591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level.</source>
          <target state="translated">呼叫這個方法是主要相關，如果您正在撰寫的控制項，而且需要處理較低層級的輸入。</target>       </trans-unit>
        <trans-unit id="3592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
          <source>If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.</source>
          <target state="translated">如果您使用現有的控制項，您通常可以假設已完成的控制項將報表正確轉譯的點擊的測試結果。</target>       </trans-unit>
        <trans-unit id="3593" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Uid">
          <source>Gets or sets the unique identifier (for localization) for this element.</source>
          <target state="translated">取得或設定這個項目的唯一識別項 (適用於當地語系化)。</target>       </trans-unit>
        <trans-unit id="3594" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Uid">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="3595" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>A string that is the unique identifier for this element.</source>
          <target state="translated">這個項目之唯一識別項的字串。</target>       </trans-unit>
        <trans-unit id="3596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>Used by designers to get the <ph id="ph1">`x:Uid`</ph> value (see <bpt id="p1">[</bpt>WPF Globalization and Localization Overview<ept id="p1">](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)</ept> for more information).</source>
          <target state="translated">設計工具用來取得<ph id="ph1">`x:Uid`</ph>值 (請參閱<bpt id="p1">[</bpt>WPF 全球化和當地語系化概觀<ept id="p1">](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)</ept>如需詳細資訊)。</target>       </trans-unit>
        <trans-unit id="3597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="3598" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="3600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Uid">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="3601" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.UidProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Uid" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Uid" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
        <trans-unit id="3602" translate="yes" xml:space="preserve" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>Ensures that all visual child elements of this element are properly updated for layout.</source>
          <target state="translated">確認這個項目的所有視覺化子項目都已正確為配置而更新。</target>       </trans-unit>
        <trans-unit id="3603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>When you call this method, elements with <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph><ph id="ph2">`false`</ph> or <ph id="ph3">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph><ph id="ph4">`false`</ph> will call element-specific <ph id="ph5">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> methods, which forces layout update, and all computed sizes will be validated.</source>
          <target state="translated">當您呼叫這個方法，具有項目<ph id="ph1">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph><ph id="ph2">`false`</ph>或<ph id="ph3">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph><ph id="ph4">`false`</ph>會呼叫項目專屬<ph id="ph5">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph>和<ph id="ph6">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph>方法，這會強制版面配置更新，且會驗證所有計算的大小。</target>       </trans-unit>
        <trans-unit id="3604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid.</source>
          <target state="translated">呼叫這個方法沒有任何作用，如果配置並未變更，或配置的排列方式都度量狀態無效。</target>       </trans-unit>
        <trans-unit id="3605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>However, if layout is invalid in either respect, the <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> call will redo the entire layout.</source>
          <target state="translated">不過，如果配置不能用在任一一方面，<ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>呼叫將會取消整個版面配置。</target>       </trans-unit>
        <trans-unit id="3606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>Therefore, you should avoid calling <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> after each incremental and minor change in the element tree.</source>
          <target state="translated">因此，您應該避免呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>項目樹狀結構中的每個增量和次要變更後。</target>       </trans-unit>
        <trans-unit id="3607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid.</source>
          <target state="translated">延後的方式，使用的演算法來平衡效能與貨幣，並使用加權策略延遲根目錄的變更，直到所有的子元素都是有效的版面配置系統會執行項目配置。</target>       </trans-unit>
        <trans-unit id="3608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.UIElement.UpdateLayout">
          <source>You should only call <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.</source>
          <target state="translated">您應該只呼叫<ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>如果一定需要更新的大小和位置，並且只在您確認之後所有控制項，您可能會影響配置的屬性變更完成都之後。</target>       </trans-unit>
        <trans-unit id="3609" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Visibility">
          <source>Gets or sets the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> visibility of this element.</source>
          <target state="translated">取得或設定這個項目的<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> 可視性。</target>       </trans-unit>
        <trans-unit id="3610" translate="yes" xml:space="preserve" uid="P:System.Windows.UIElement.Visibility">
          <source>This is a dependency property.</source>
          <target state="translated">這是相依性屬性。</target>       </trans-unit>
        <trans-unit id="3611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>A value of the enumeration.</source>
          <target state="translated">列舉值。</target>       </trans-unit>
        <trans-unit id="3612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Windows.Visibility.Visible" /&gt;</ph>.</source>
          <target state="translated">預設值是 <ph id="ph1">&lt;see cref="F:System.Windows.Visibility.Visible" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Setting this property affects the value of <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph>, which in turn may raise the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsVisibleChanged&gt;</ph> event.</source>
          <target state="translated">設定這個屬性會影響值<ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph>，其接著可能會引發<ph id="ph2">&lt;xref:System.Windows.UIElement.IsVisibleChanged&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="3614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>However, <ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> has other factors that influence it, for instance the visibility settings of parents that contain it.</source>
          <target state="translated">不過，<ph id="ph1">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph>有其他因素影響，例如包含它的父代的可見性設定。</target>       </trans-unit>
        <trans-unit id="3615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Elements where <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> is not <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.</source>
          <target state="translated">項目位置<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>不<ph id="ph2">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>不會參與輸入事件 （或命令）、 不會影響測量或排列傳遞的版面配置、 索引標籤順序及將不會報告在點擊測試。</target>       </trans-unit>
        <trans-unit id="3616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>When inherited by <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> or its derived classes, <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> redefines the default value of this property to be <ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.</source>
          <target state="translated">當繼承<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>或其衍生的類別，<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>會重新定義預設值，這個屬性是<ph id="ph3">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>This has the effect of not running the Measure pass of layout on an initially created <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, and <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> returns (0,0).</source>
          <target state="translated">這是不執行上一開始建立的 版面配置的測量傳遞的效果<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>，和<ph id="ph2">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>傳回 (0，0)。</target>       </trans-unit>
        <trans-unit id="3618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>For details, see <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">如需詳細資訊，請參閱 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> also redefines the default value to be <ph id="ph2">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>, with similar resulting behavior for <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> and its derived classes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> 也會重新定義預設值為<ph id="ph2">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>，具有類似的結果行為，如<ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph>和其衍生的類別。</target>       </trans-unit>
        <trans-unit id="3620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Dependency Property Information</source>
          <target state="translated">相依性屬性資訊</target>       </trans-unit>
        <trans-unit id="3621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Identifier field</source>
          <target state="translated">識別項欄位</target>       </trans-unit>
        <trans-unit id="3622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
          <target state="translated">中繼資料屬性設定為 <ph id="ph1">`true`</ph></target>       </trans-unit>
        <trans-unit id="3623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>None</source>
          <target state="translated">無</target>       </trans-unit>
        <trans-unit id="3624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface.</source>
          <target state="translated">下列範例會實作參考兩個不同的具名的按鈕要是互斥的配對，使用者介面中的處理常式。</target>       </trans-unit>
        <trans-unit id="3625" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.UIElement.Visibility">
          <source>Prior to running the actual program logic associated with the button, the button itself is set to be <ph id="ph1">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>, and the other button in the pair is set to <ph id="ph2">&lt;xref:System.Windows.Visibility.Visible?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">按鈕本身設定為執行與按鈕相關聯的實際程式邏輯之前, <ph id="ph1">&lt;xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType&gt;</ph>，而且配對中的其他按鈕設為<ph id="ph2">&lt;xref:System.Windows.Visibility.Visible?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="3626" translate="yes" xml:space="preserve" uid="F:System.Windows.UIElement.VisibilityProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> dependency property.</source>
          <target state="translated">識別 <ph id="ph1">&lt;see cref="P:System.Windows.UIElement.Visibility" /&gt;</ph> 相依性屬性。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>