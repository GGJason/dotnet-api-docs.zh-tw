<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="459f040609207bd2e230eb1f650399e6c4cf0bc2" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57951327" /></Metadata><TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type UIElement = class&#xA;    inherit Visual&#xA;    interface IAnimatable&#xA;    interface IInputElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="84df3-101"><see cref="T:System.Windows.UIElement" /> 是以 Windows Presentation Foundation (WPF) 項目和基本呈現方式特性為建置基礎之 WPF 核心層級實作的基底類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-101"><see cref="T:System.Windows.UIElement" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-102"><xref:System.Windows.UIElement> 提供項目配置的特性，以及公開虛擬方法，衍生類別可以覆寫時，可能會影響轉譯行為的項目和其子元素的版面配置的起始點。</span><span class="sxs-lookup"><span data-stu-id="84df3-102"><xref:System.Windows.UIElement> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.</span></span>  
  
 <span data-ttu-id="84df3-103">大部分的輸入和焦點行為項目的一般情況下也會定義在<xref:System.Windows.UIElement>類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-103">Much of the input and focusing behavior for elements in general is also defined in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="84df3-104">這包括鍵盤、 滑鼠及手寫筆輸入及相關的狀態屬性的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-104">This includes the events for keyboard, mouse and stylus input, and related status properties.</span></span> <span data-ttu-id="84df3-105">其中許多事件都是路由的事件，且許多的輸入相關的事件都有兩個事件反昇路由版本，以及事件的通道版本。</span><span class="sxs-lookup"><span data-stu-id="84df3-105">Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</span></span> <span data-ttu-id="84df3-106">這些配對的事件通常是控制項作者的最大感興趣的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-106">These paired events are typically the events of greatest interest to control authors.</span></span>  
  
 <span data-ttu-id="84df3-107"><xref:System.Windows.UIElement> 也包含[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]相關的[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]事件模型，包括可以引發的方法指定路由事件，其源自項目執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-107"><xref:System.Windows.UIElement> also includes [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance.</span></span>  
  
 <span data-ttu-id="84df3-108">就架構而言，<xref:System.Windows.UIElement>可以視為大致上相當於視窗控制代碼，以[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]程式設計或中的項目[!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)]程式設計。</span><span class="sxs-lookup"><span data-stu-id="84df3-108">In terms of architecture, <xref:System.Windows.UIElement> can be considered roughly equivalent to a window handle in [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programming, or an Element in [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programming.</span></span> <span data-ttu-id="84df3-109"><xref:System.Windows.UIElement> 是 WPF 核心層級的基底項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-109"><xref:System.Windows.UIElement> is a base element at the WPF core level.</span></span>  
  
 <span data-ttu-id="84df3-110">A<xref:System.Windows.UIElement>具有下列功能，特別由定義<xref:System.Windows.UIElement>類別：</span><span class="sxs-lookup"><span data-stu-id="84df3-110">A <xref:System.Windows.UIElement> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement> class:</span></span>  
  
-   <span data-ttu-id="84df3-111">可以轉譯為子元素 (<xref:System.Windows.UIElement>衍生自<xref:System.Windows.Media.Visual>，高的層級圖形類別)</span><span class="sxs-lookup"><span data-stu-id="84df3-111">Can render as a child element (<xref:System.Windows.UIElement> derives from <xref:System.Windows.Media.Visual>, a high level graphics class)</span></span>  
  
-   <span data-ttu-id="84df3-112">包含大小和位置的可能的子項目使用的邏輯<xref:System.Windows.UIElement>（當解譯由配置系統）</span><span class="sxs-lookup"><span data-stu-id="84df3-112">Contains logic that is used to size and position possible child elements of a <xref:System.Windows.UIElement> (when interpreted by a layout system)</span></span>  
  
-   <span data-ttu-id="84df3-113">可以回應使用者輸入 （包括控制項的輸入取得傳送到何處透過其處理的事件路由，或在命令路由）</span><span class="sxs-lookup"><span data-stu-id="84df3-113">Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)</span></span>  
  
-   <span data-ttu-id="84df3-114">可以引發邏輯的項目樹狀結構路由的路由的事件</span><span class="sxs-lookup"><span data-stu-id="84df3-114">Can raise routed events that travel a route through the logical element tree</span></span>  
  
-   <span data-ttu-id="84df3-115">支援動畫系統的某些層面</span><span class="sxs-lookup"><span data-stu-id="84df3-115">Supports some aspects of the animation system</span></span>  
  
 <span data-ttu-id="84df3-116"><xref:System.Windows.FrameworkElement> 是為基礎的 WPF 架構層級實作類別<xref:System.Windows.UIElement>，並將加入 WPF 架構層級的特定互動。</span><span class="sxs-lookup"><span data-stu-id="84df3-116"><xref:System.Windows.FrameworkElement> is the WPF framework-level implementation class that builds on <xref:System.Windows.UIElement>, and adds specific interactions with the WPF framework level.</span></span> <span data-ttu-id="84df3-117"><xref:System.Windows.FrameworkElement> 新增並定義下列功能：</span><span class="sxs-lookup"><span data-stu-id="84df3-117"><xref:System.Windows.FrameworkElement> adds and defines the following capabilities:</span></span>  
  
-   <span data-ttu-id="84df3-118">額外的架構特定版面配置特性</span><span class="sxs-lookup"><span data-stu-id="84df3-118">Additional framework-specific layout characteristics</span></span>  
  
-   <span data-ttu-id="84df3-119">支援更豐富的中繼資料屬性的報告</span><span class="sxs-lookup"><span data-stu-id="84df3-119">Support for richer metadata reporting on properties</span></span>  
  
-   <span data-ttu-id="84df3-120">輸入基底類別和其附加的屬性的特定類別的特定實作，或附加事件</span><span class="sxs-lookup"><span data-stu-id="84df3-120">Class-specific implementation of certain input base classes and their attached properties or attached events</span></span>  
  
-   <span data-ttu-id="84df3-121">樣式支援</span><span class="sxs-lookup"><span data-stu-id="84df3-121">Style support</span></span>  
  
-   <span data-ttu-id="84df3-122">進一步的動畫支援</span><span class="sxs-lookup"><span data-stu-id="84df3-122">Further animation support</span></span>  
  
 <span data-ttu-id="84df3-123">另一個相關的類別是<xref:System.Windows.ContentElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-123">Another related class is <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="84df3-124"><xref:System.Windows.ContentElement>類別會實作許多相同的成員，如同<xref:System.Windows.UIElement>; 已將執行其預定使用的整體內容模型中的這兩個類別之間的差異。</span><span class="sxs-lookup"><span data-stu-id="84df3-124">The <xref:System.Windows.ContentElement> class implements many of the same members as does <xref:System.Windows.UIElement>; the difference between these two classes has to do with their intended place in the overall content model.</span></span> <span data-ttu-id="84df3-125">A<xref:System.Windows.UIElement>衍生的類別通常會將相對固定的內容模型，這表示沒有限制哪些項目可能會在標記中的子項目定義。</span><span class="sxs-lookup"><span data-stu-id="84df3-125">A <xref:System.Windows.UIElement> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup.</span></span> <span data-ttu-id="84df3-126">可能會花較不嚴格的子內容的容量<xref:System.Windows.UIElement>，但該容量通常會集中在指定的內容屬性中。</span><span class="sxs-lookup"><span data-stu-id="84df3-126">There might be capacity for taking less restrictive child content in a <xref:System.Windows.UIElement>, but that capacity is typically centralized in designated content properties.</span></span> <span data-ttu-id="84df3-127">A<xref:System.Windows.ContentElement>衍生的類別通常不是限制的相關內容，以支援案例，例如流程格式的文件。</span><span class="sxs-lookup"><span data-stu-id="84df3-127">A <xref:System.Windows.ContentElement> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="84df3-128"><xref:System.Windows.UIElement.Visibility%2A> 狀態會影響所有的輸入處理該項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-128"><xref:System.Windows.UIElement.Visibility%2A> state affects all input handling by that element.</span></span> <span data-ttu-id="84df3-129">不可見的項目不會參與點擊測試，且不會收到輸入的事件，即使在滑鼠位於範圍的項目就是，如果可見。</span><span class="sxs-lookup"><span data-stu-id="84df3-129">Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-130">初始化 <see cref="T:System.Windows.UIElement" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-130">Initializes a new instance of the <see cref="T:System.Windows.UIElement" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-131">建立新的執行個體卻是類型<xref:System.Windows.UIElement>是應用程式程式碼中很常見，因為<xref:System.Windows.UIElement>是基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-131">Creating a new instance that is actually of type <xref:System.Windows.UIElement> is uncommon in application code, because <xref:System.Windows.UIElement> is a base element.</span></span> <span data-ttu-id="84df3-132">請參閱[基底項目概觀](~/docs/framework/wpf/advanced/base-elements-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-132">See [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="84df3-133">加入所指定路由事件的路由事件處理常式，會將此處理常式加入目前項目的處理常式集合中。</span><span class="sxs-lookup"><span data-stu-id="84df3-133">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="84df3-134">要處理的路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-134">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="84df3-135">處理常式實作的參考。</span><span class="sxs-lookup"><span data-stu-id="84df3-135">A reference to the handler implementation.</span></span></param>
        <summary><span data-ttu-id="84df3-136">加入所指定路由事件的路由事件處理常式，會將此處理常式加入目前項目的處理常式集合中。</span><span class="sxs-lookup"><span data-stu-id="84df3-136">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-137">您可以新增相同的處理常式，相同事件多次，而不會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="84df3-137">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="84df3-138">不過，處理常式實際叫用的多次時處理事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-138">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="84df3-139">因此，請考慮如何這種行為可能會有副作用，都應該在自己的處理常式實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-139">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="84df3-140">您通常使用這個方法來提供的 「 新增 」 存取子的實作[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]事件的自訂路由事件的存取模式。</span><span class="sxs-lookup"><span data-stu-id="84df3-140">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="84df3-141">要處理的路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-141">An identifier for the routed event to be handled.</span></span></param>
        <param name="handler"><span data-ttu-id="84df3-142">處理常式實作的參考。</span><span class="sxs-lookup"><span data-stu-id="84df3-142">A reference to the handler implementation.</span></span></param>
        <param name="handledEventsToo"><span data-ttu-id="84df3-143"><see langword="true" /> 登錄處理常式，使得即使路由事件被標記為已處理時，也會被叫用。<see langword="false" /> 登錄處理常式，預設條件為若路由事件被標示為已處理時則不被叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-143"><see langword="true" /> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</span></span>  
  
<span data-ttu-id="84df3-144">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-144">The default is <see langword="false" />.</span></span>  
  
<span data-ttu-id="84df3-145">請勿定期要求重新處理路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-145">Do not routinely ask to rehandle a routed event.</span></span></param>
        <summary><span data-ttu-id="84df3-146">加入所指定路由事件的路由事件處理常式，會將此處理常式加入目前項目的處理常式集合中。</span><span class="sxs-lookup"><span data-stu-id="84df3-146">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span></span> <span data-ttu-id="84df3-147">將 <paramref name="handledEventsToo" /> 指定為 <see langword="true" />，為已標示為由事件路由上另一個項目處理的事件叫用提供的處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-147">Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-148">實用的方式處理低階的輸入的事件是一個複雜的工作。</span><span class="sxs-lookup"><span data-stu-id="84df3-148">Processing low-level input events in a practical way is a complex task.</span></span> <span data-ttu-id="84df3-149">許多控制項實作的行為，其中特定事件標示為已處理，並已由另一個更具直覺性的事件所取代。</span><span class="sxs-lookup"><span data-stu-id="84df3-149">Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</span></span> <span data-ttu-id="84df3-150">一般而言，控制項只會將平台的輸入的事件，為已處理，如果沒有這項操作的一些設計意圖。</span><span class="sxs-lookup"><span data-stu-id="84df3-150">Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</span></span> <span data-ttu-id="84df3-151">在某些情況下，這些設計目的不可能您的輸入事件的特定處理的要求。</span><span class="sxs-lookup"><span data-stu-id="84df3-151">In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</span></span> <span data-ttu-id="84df3-152">針對這些案例是該註冊處理常式`handledEventsToo`做為`true`適合。</span><span class="sxs-lookup"><span data-stu-id="84df3-152">It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate.</span></span> <span data-ttu-id="84df3-153">但您不應該這麼定期。</span><span class="sxs-lookup"><span data-stu-id="84df3-153">But you should not do this routinely.</span></span> <span data-ttu-id="84df3-154">叫用處理常式以回應所有的事件，即使處理將會使您自己的應用程式事件處理邏輯更為複雜。</span><span class="sxs-lookup"><span data-stu-id="84df3-154">Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</span></span> <span data-ttu-id="84df3-155">如果處理常式邏輯則相當大，可能會看到效能降低。</span><span class="sxs-lookup"><span data-stu-id="84df3-155">You may see a decrease in performance if the handler logic is substantial.</span></span> <span data-ttu-id="84df3-156">您應該保留使用附加的情況下，您已經發現特定控制項所處理的事件，您仍然想要處理的應用程式邏輯在開發程序已經處理的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-156">You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</span></span>  
  
 <span data-ttu-id="84df3-157">為避免處理行為的某些事件控制項組合的類別的另一個方法是使用該事件預覽替代方案。</span><span class="sxs-lookup"><span data-stu-id="84df3-157">Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</span></span> <span data-ttu-id="84df3-158">例如，如果<xref:System.Windows.UIElement.MouseLeftButtonDown>標示為已處理的類別處理，您可以加入處理常式<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>改為。</span><span class="sxs-lookup"><span data-stu-id="84df3-158">For example, if <xref:System.Windows.UIElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> instead.</span></span>  
  
 <span data-ttu-id="84df3-159">您可以新增相同的處理常式，相同事件多次，而不會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="84df3-159">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="84df3-160">不過，處理常式實際叫用的多次時處理事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-160">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="84df3-161">因此，請考慮如何這種行為可能會有副作用，都應該在自己的處理常式實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-161">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="84df3-162">您通常使用這個方法來提供的 「 新增 」 存取子的實作[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]事件的自訂路由事件的存取模式。</span><span class="sxs-lookup"><span data-stu-id="84df3-162">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-163">下列範例會實作上叫用處理常式<xref:System.Windows.FrameworkElement.Initialized>將定義的處理常式附加至其中一個頁面上的具名元素在頁面上的事件`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-163">The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`.</span></span> <span data-ttu-id="84df3-164">這個處理常式會叫用，即使路由中的另一個項目會標示為已處理到達路由中的處理項目之前共用的事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-164">This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.</span></span>  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route"><span data-ttu-id="84df3-165">加入處理常式的事件路由。</span><span class="sxs-lookup"><span data-stu-id="84df3-165">The event route that handlers are added to.</span></span></param>
        <param name="e"><span data-ttu-id="84df3-166">用於加入處理常式的事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-166">The event data that is used to add the handlers.</span></span> <span data-ttu-id="84df3-167">這個方法會使用事件資料的 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 屬性來建立處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-167">This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers.</span></span></param>
        <summary><span data-ttu-id="84df3-168">針對目前的 <see cref="T:System.Windows.EventRoute" /> 事件處理常式集合，將處理常式加入至指定的 <see cref="T:System.Windows.UIElement" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-168">Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement" /> event handler collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-169">這個方法可供內容主機項目 (可能是指實作<xref:System.Windows.IContentHost>或未) 新增為子項目，以處理常式<xref:System.Windows.EventRoute>。</span><span class="sxs-lookup"><span data-stu-id="84df3-169">This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>.</span></span> <span data-ttu-id="84df3-170">一般情況下，這是不必要的<xref:System.Windows.UIElement>，因為在已完成的邏輯樹狀結構中找到的所有項目會自動加入處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-170">Ordinarily, this is not required for <xref:System.Windows.UIElement>, because handlers are automatically added for all elements found in a completed logical tree.</span></span> <span data-ttu-id="84df3-171">不過，在某些情況下所在<xref:System.Windows.ContentElement>和<xref:System.Windows.UIElement>混合樣板化樹狀結構，中間是來自範本必須新增至路由的項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-171">However, in some cases where <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are mixed in templated trees, intervening elements that came from the template need to be added to a route.</span></span> <span data-ttu-id="84df3-172">兩者<xref:System.Windows.ContentElement>和<xref:System.Windows.UIElement>支援這個方法的版本。</span><span class="sxs-lookup"><span data-stu-id="84df3-172">Both <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> support a version of this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-173">取得或設定此元素是否可以當做拖放操作目標的值。</span><span class="sxs-lookup"><span data-stu-id="84df3-173">Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</span></span>  <span data-ttu-id="84df3-174">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-174">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-175">如果這個項目可以作為拖放作業的目標，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-175"><see langword="true" /> if this element can be used as the target of a drag-and-drop operation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-176">預設值為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-176">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-177">拖放作業不會預設啟用，且必須藉由設定刻意啟用<xref:System.Windows.UIElement.AllowDrop%2A>至`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-177">Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement.AllowDrop%2A> to `true`.</span></span> <span data-ttu-id="84df3-178">超過此基本的設定，拖放行為完全是特定的實作並不由定義<xref:System.Windows.UIElement>或任何其他基底元素類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-178">Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement> or any other base element class.</span></span> <span data-ttu-id="84df3-179">某些控制項，例如<xref:System.Windows.Controls.RichTextBox>，沒有預設行為。</span><span class="sxs-lookup"><span data-stu-id="84df3-179">Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior.</span></span> <span data-ttu-id="84df3-180">如需有關功能的詳細資訊，請參閱[拖放概觀](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-180">For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).</span></span>  
  
 <span data-ttu-id="84df3-181"><xref:System.Windows.FrameworkElement> 覆寫這個實作中的相依性屬性的中繼資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-181"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property in its implementation.</span></span> <span data-ttu-id="84df3-182">具體而言，<xref:System.Windows.FrameworkElement>指定此屬性，以允許屬性值繼承 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>是`true`中繼資料中)。</span><span class="sxs-lookup"><span data-stu-id="84df3-182">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="84df3-183">在此內容中的屬性值繼承表示，如果有任何其他值的子項目<xref:System.Windows.UIElement.AllowDrop%2A>指派透過本機值或最接近的父項目的值，與指派 （同樣地，無論是在樣式中，依預設此值的樣式值或本機值），然後從父元素的值會指派給所有先前未指派的子項目，屬性系統。</span><span class="sxs-lookup"><span data-stu-id="84df3-183">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system.</span></span> <span data-ttu-id="84df3-184">實際上這表示您可以指定是否要在根項目允許卸除作業，並將它做為值將會傳播至所有子項目具有不是明確地指派`false`。</span><span class="sxs-lookup"><span data-stu-id="84df3-184">In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-185">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-185">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-186">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-186">Identifier field</span></span>|<xref:System.Windows.UIElement.AllowDropProperty>|  
|<span data-ttu-id="84df3-187">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-187">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-188">無</span><span class="sxs-lookup"><span data-stu-id="84df3-188">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-189">下列標記範例會設定<xref:System.Windows.UIElement.AllowDrop%2A>屬性`true`上使用屬性<xref:System.Windows.Controls.TextBox>，以及一些其他設定相關屬性，可彙總，讓<xref:System.Windows.Controls.TextBox>多行文字的資料物件的目標時拖曳。</span><span class="sxs-lookup"><span data-stu-id="84df3-189">The following markup example sets the <xref:System.Windows.UIElement.AllowDrop%2A> property `true` using an attribute on a <xref:System.Windows.Controls.TextBox>, as well as setting some other related properties that in aggregate enable that <xref:System.Windows.Controls.TextBox> to be the target of a multiline text data object when it is dragged in.</span></span> <span data-ttu-id="84df3-190">如需完整的範例，請參閱[載入卸除檔案範例](https://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7)。</span><span class="sxs-lookup"><span data-stu-id="84df3-190">For the complete sample, see [Load a Dropped File Sample](https://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).</span></span>  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-191">識別 <see cref="P:System.Windows.UIElement.AllowDrop" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-191">Identifies the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="84df3-192">將動畫套用至這個項目上所指定的相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-192">Applies an animation to a specified dependency property on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-193">這是已密封的方法，無法覆寫。</span><span class="sxs-lookup"><span data-stu-id="84df3-193">This method is sealed and cannot be overridden.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="84df3-194">要繪製的屬性之識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-194">The identifier for the property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="84df3-195">控制並宣告動畫的動畫時鐘。</span><span class="sxs-lookup"><span data-stu-id="84df3-195">The animation clock that controls and declares the animation.</span></span></param>
        <summary><span data-ttu-id="84df3-196">將動畫套用至這個項目上所指定的相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-196">Applies an animation to a specified dependency property on this element.</span></span> <span data-ttu-id="84df3-197">任何現有動畫都會停止並取代為新的動畫。</span><span class="sxs-lookup"><span data-stu-id="84df3-197">Any existing animations are stopped and replaced with the new animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-198">若要移除屬性的動畫，請指定 做為該屬性的識別項`dp`並指定`clock`做為`null`。</span><span class="sxs-lookup"><span data-stu-id="84df3-198">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="84df3-199">這會移除動畫，動畫的屬性設定為其基底值。</span><span class="sxs-lookup"><span data-stu-id="84df3-199">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="84df3-200">不過，並不會停止原先相關聯的動畫時鐘。</span><span class="sxs-lookup"><span data-stu-id="84df3-200">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="84df3-201">指派給該時鐘的任何其他動畫都會繼續執行。</span><span class="sxs-lookup"><span data-stu-id="84df3-201">Any other animations assigned to that clock will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-202">在下列範例中， <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle`有套用至它所呼叫的特定時間動畫<xref:System.Windows.UIElement.ApplyAnimationClock%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-202">In the following example, a <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` has a particular timing animation applied to it by calling <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="84df3-203">要製作動畫的屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-203">The property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="84df3-204">控制並宣告動畫的動畫時鐘。</span><span class="sxs-lookup"><span data-stu-id="84df3-204">The animation clock that controls and declares the animation.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="84df3-205">列舉值。</span><span class="sxs-lookup"><span data-stu-id="84df3-205">A value of the enumeration.</span></span> <span data-ttu-id="84df3-206">預設值是 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />，將停止任何現有的動畫，並以新的動畫取代。</span><span class="sxs-lookup"><span data-stu-id="84df3-206">The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</span></span></param>
        <summary><span data-ttu-id="84df3-207">將動畫套用至這個項目上所指定的相依性屬性，且可以指定此屬性已經有執行中的動畫時會發生哪種情況。</span><span class="sxs-lookup"><span data-stu-id="84df3-207">Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-208">若要移除屬性的動畫，請指定 做為該屬性的識別項`dp`並指定`clock`做為`null`。</span><span class="sxs-lookup"><span data-stu-id="84df3-208">To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`.</span></span> <span data-ttu-id="84df3-209">這會移除動畫，動畫的屬性設定為其基底值。</span><span class="sxs-lookup"><span data-stu-id="84df3-209">This removes the animation and the animated property is set to its base value.</span></span> <span data-ttu-id="84df3-210">不過，並不會停止原先相關聯的動畫時鐘。</span><span class="sxs-lookup"><span data-stu-id="84df3-210">However, the originally associated animation clock is not stopped.</span></span> <span data-ttu-id="84df3-211">指派給該時鐘的任何其他動畫都會繼續執行。</span><span class="sxs-lookup"><span data-stu-id="84df3-211">Any other animations assigned to that clock will continue to run.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-212">取得值，這個值表示是否至少有一個觸控擷取至這個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-212">Gets a value that indicates whether at least one touch is captured to this element.</span></span></summary>
        <value><span data-ttu-id="84df3-213">如果至少有一個觸控擷取至這個項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-213"><see langword="true" /> if at least one touch is captured to this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-214">識別 <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-214">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-215">取得值，這個值表示是否至少有一個觸控擷取至這個項目或其視覺化樹狀結構中的任何子項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-215">Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="84df3-216">如果至少有一個觸控擷取至這個項目或其視覺化樹狀結構中的任何子項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-216"><see langword="true" /> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-217">識別 <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-217">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-218">取得值，這個值表示是否至少有一個觸控在這個項目上按下。</span><span class="sxs-lookup"><span data-stu-id="84df3-218">Gets a value that indicates whether at least one touch is pressed over this element.</span></span></summary>
        <value><span data-ttu-id="84df3-219">如果至少有一個觸控在這個項目上按下，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-219"><see langword="true" /> if at least one touch is pressed over this element; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-220">識別 <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-220">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-221">取得值，這個值表示是否至少有一個觸控在這個項目或其視覺化樹狀結構中的任何子項目上按下。</span><span class="sxs-lookup"><span data-stu-id="84df3-221">Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="84df3-222">如果至少有一個觸控在這個項目或其視覺化樹狀結構中的任何子項目上按下，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-222"><see langword="true" /> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-223">識別 <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-223">Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="member this.Arrange : System.Windows.Rect -&gt; unit" Usage="uIElement.Arrange finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect"><span data-ttu-id="84df3-224">父代為子項目計算的最終大小，提供作為 <see cref="T:System.Windows.Rect" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-224">The final size that the parent computes for the child element, provided as a <see cref="T:System.Windows.Rect" /> instance.</span></span></param>
        <summary><span data-ttu-id="84df3-225">放置子項目，並且判斷 <see cref="T:System.Windows.UIElement" /> 的大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-225">Positions child elements and determines a size for a <see cref="T:System.Windows.UIElement" />.</span></span> <span data-ttu-id="84df3-226">父項目從 <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> 實作 (或 WPF 架構層級對等項目) 中呼叫此方法，以形成遞迴配置更新。</span><span class="sxs-lookup"><span data-stu-id="84df3-226">Parent elements call this method from their <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> implementation (or a WPF framework-level equivalent) to form a recursive layout update.</span></span> <span data-ttu-id="84df3-227">這個方法會構成配置更新的第二個階段。</span><span class="sxs-lookup"><span data-stu-id="84df3-227">This method constitutes the second pass of a layout update.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-228">WPF 架構層級項目衍生的案例中，行為<xref:System.Windows.UIElement.Arrange%2A>變更不應該 （而且也無法，除非您陰影）。</span><span class="sxs-lookup"><span data-stu-id="84df3-228">For WPF framework-level element deriving scenarios, behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="84df3-229">相反地，您應該覆寫<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>類別中的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-229">Instead, you should override the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation in your class.</span></span> <span data-ttu-id="84df3-230">您<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>就會在內部呼叫實作<xref:System.Windows.UIElement.Arrange%2A>預設 WPF 架構層級的配置作業的一部分。</span><span class="sxs-lookup"><span data-stu-id="84df3-230">Your <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="84df3-231">您<xref:System.Windows.UIElement.ArrangeCore%2A>實作也應該呼叫<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>每個子項目，如果它有子系項目上。</span><span class="sxs-lookup"><span data-stu-id="84df3-231">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> on each child element, if it has child elements.</span></span>  
  
 <span data-ttu-id="84df3-232">WPF 核心層級項目衍生的行為，案例<xref:System.Windows.UIElement.Arrange%2A>變更不應該 （而且也無法，除非您陰影）。</span><span class="sxs-lookup"><span data-stu-id="84df3-232">For WPF core-level element deriving scenarios, the behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed.</span></span> <span data-ttu-id="84df3-233">相反地，您應該覆寫<xref:System.Windows.UIElement.ArrangeCore%2A>在您的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-233">Instead, you should override <xref:System.Windows.UIElement.ArrangeCore%2A> in your class.</span></span> <span data-ttu-id="84df3-234">您<xref:System.Windows.UIElement.ArrangeCore%2A>就會在內部呼叫實作<xref:System.Windows.UIElement.Arrange%2A>預設 WPF 架構層級的配置作業的一部分。</span><span class="sxs-lookup"><span data-stu-id="84df3-234">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations.</span></span> <span data-ttu-id="84df3-235">不過，這是假設您使用 WPF 架構層級的版面配置和其版面配置系統，通常不是如果您特別衍生項目，在 WPF 核心層級從<xref:System.Windows.UIElement>基底元素類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-235">However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <xref:System.Windows.UIElement> base element class.</span></span> <span data-ttu-id="84df3-236">您<xref:System.Windows.UIElement.ArrangeCore%2A>實作也應該呼叫<xref:System.Windows.UIElement.Arrange%2A>每個子項目，如果它有子系項目上。</span><span class="sxs-lookup"><span data-stu-id="84df3-236">Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.UIElement.Arrange%2A> on each child element, if it has child elements.</span></span> <span data-ttu-id="84df3-237">WPF 核心層級案例表示您未使用的附註<xref:System.Windows.FrameworkElement>衍生類別，因為<xref:System.Windows.FrameworkElement>標誌<xref:System.Windows.FrameworkElement.ArrangeCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-237">Note that the WPF core-level scenario implies that you are not using a <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span>  
  
 <span data-ttu-id="84df3-238">計算中的 WPF 架構層級的版面配置定位[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]組成<xref:System.Windows.UIElement.Measure%2A>呼叫和<xref:System.Windows.UIElement.Arrange%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="84df3-238">Computation of WPF framework-level layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consists of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="84df3-239">期間<xref:System.Windows.UIElement.Measure%2A>呼叫時，版面配置系統會決定使用所提供的項目大小需求<xref:System.Windows.Size>(`availableSize`) 引數。</span><span class="sxs-lookup"><span data-stu-id="84df3-239">During the <xref:System.Windows.UIElement.Measure%2A> call, the layout system determines an element's size requirements using a provided <xref:System.Windows.Size> (`availableSize`) argument.</span></span> <span data-ttu-id="84df3-240">期間<xref:System.Windows.UIElement.Arrange%2A>呼叫時，配置系統完成大小和位置的項目週框方塊。</span><span class="sxs-lookup"><span data-stu-id="84df3-240">During the <xref:System.Windows.UIElement.Arrange%2A> call, the layout system finalizes the size and position of an element's bounding box.</span></span>  <span data-ttu-id="84df3-241">如需詳細資訊，請參閱[配置](~/docs/framework/wpf/advanced/layout.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-241">For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).</span></span>  
  
 <span data-ttu-id="84df3-242">`availableSize` 可以是零，為無限大的任何數字。</span><span class="sxs-lookup"><span data-stu-id="84df3-242">`availableSize` can be any number from zero to infinity.</span></span> <span data-ttu-id="84df3-243">若要配置的項目傳回最小值<xref:System.Windows.Size>它們需要透過`availableSize`參數。</span><span class="sxs-lookup"><span data-stu-id="84df3-243">Elements to be laid out return the minimum <xref:System.Windows.Size> they require through the `availableSize` parameter.</span></span>  
  
 <span data-ttu-id="84df3-244">當第一次執行個體化的版面配置時，它一律會收到<xref:System.Windows.UIElement.Measure%2A>之前，先呼叫<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-244">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="84df3-245">不過之後第一次的版面配置傳遞，, 它可能會收到<xref:System.Windows.UIElement.Arrange%2A>呼叫，而不<xref:System.Windows.UIElement.Measure%2A>; 這種情形只會影響的屬性時<xref:System.Windows.UIElement.Arrange%2A>變更 （例如對齊），或是當父系收到<xref:System.Windows.UIElement.Arrange%2A>沒有<xref:System.Windows.UIElement.Measure%2A>.</span><span class="sxs-lookup"><span data-stu-id="84df3-245">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="84df3-246">A<xref:System.Windows.UIElement.Measure%2A>呼叫會自動失效<xref:System.Windows.UIElement.Arrange%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="84df3-246">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="84df3-247">以非同步方式 （一次由配置系統判定） 通常會進行版面配置更新。</span><span class="sxs-lookup"><span data-stu-id="84df3-247">Layout updates generally occur asynchronously (at a time determined by the layout system).</span></span> <span data-ttu-id="84df3-248">項目可能不會立即反映屬性會影響項目調整大小的變更 (例如<xref:System.Windows.FrameworkElement.Width%2A>)。</span><span class="sxs-lookup"><span data-stu-id="84df3-248">An element might not immediately reflect changes to properties that affect element sizing (such as <xref:System.Windows.FrameworkElement.Width%2A>).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="84df3-249">版面配置更新可以強制使用<xref:System.Windows.UIElement.UpdateLayout%2A>方法; 不過，呼叫此函式不建議，因為它通常不需要而且可能會導致效能不佳。</span><span class="sxs-lookup"><span data-stu-id="84df3-249">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance.</span></span> <span data-ttu-id="84df3-250">在許多情況下，呼叫<xref:System.Windows.UIElement.UpdateLayout%2A>可能適當，版面配置系統可能已經在處理更新。</span><span class="sxs-lookup"><span data-stu-id="84df3-250">In many situations where calling <xref:System.Windows.UIElement.UpdateLayout%2A> might be appropriate, the layout system will probably already be processing updates.</span></span> <span data-ttu-id="84df3-251">版面配置系統可以處理版面配置變更，可以最佳化所有必要的更新套件的一部分的方式。</span><span class="sxs-lookup"><span data-stu-id="84df3-251">The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.</span></span>  
  
 <span data-ttu-id="84df3-252">版面配置系統會保留兩個不同的佇列，不正確的版面配置，一個用於<xref:System.Windows.UIElement.Measure%2A>，另一個用於<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-252">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="84df3-253">配置的佇列會根據使用的視覺化樹狀結構中的項目順序來排序。</span><span class="sxs-lookup"><span data-stu-id="84df3-253">The layout queue is sorted based upon the order of elements in the visual tree.</span></span> <span data-ttu-id="84df3-254">樹狀結構中較高的項目會在佇列中，頂端，以避免重複的變更，在父代所造成的備援配置。</span><span class="sxs-lookup"><span data-stu-id="84df3-254">Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="84df3-255">自動從佇列中移除重複的項目和項目會自動從佇列中移除如果他們已經有效。</span><span class="sxs-lookup"><span data-stu-id="84df3-255">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.</span></span>  
  
 <span data-ttu-id="84df3-256">更新配置時<xref:System.Windows.UIElement.Measure%2A>佇列清空第一，後面接著<xref:System.Windows.UIElement.Arrange%2A>佇列。</span><span class="sxs-lookup"><span data-stu-id="84df3-256">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="84df3-257">中的項目<xref:System.Windows.UIElement.Arrange%2A>中的項目時，就永遠不會排列佇列<xref:System.Windows.UIElement.Measure%2A>佇列。</span><span class="sxs-lookup"><span data-stu-id="84df3-257">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeCore : System.Windows.Rect -&gt; unit&#xA;override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="uIElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect"><span data-ttu-id="84df3-258">父系內該項目應該用來排列本身和其子項目的最終區域。</span><span class="sxs-lookup"><span data-stu-id="84df3-258">The final area within the parent that element should use to arrange itself and its child elements.</span></span></param>
        <summary><span data-ttu-id="84df3-259">定義 WPF 核心層級排列版面配置定義的範本。</span><span class="sxs-lookup"><span data-stu-id="84df3-259">Defines the template for WPF core-level arrange layout definition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="84df3-260">覆寫此方法時，才適用如果您所衍生的 WPF 核心層級，而且您不想要使用 WPF 架構層級配置系統並<xref:System.Windows.FrameworkElement>衍生類別，因為<xref:System.Windows.FrameworkElement>標誌<xref:System.Windows.FrameworkElement.ArrangeCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-260">Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</span></span> <span data-ttu-id="84df3-261">如果您使用的 WPF 架構層級配置系統，適當的方法，來覆寫特定類別的配置排列行為是<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-261">If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-262"><xref:System.Windows.UIElement.ArrangeCore%2A> 實作應該呼叫基底實作傳回的大小，然後呼叫<xref:System.Windows.UIElement.Arrange%2A>每個可見子項目的的方法，並調解這些所傳回的大小<xref:System.Windows.UIElement.Arrange%2A>呼叫基底實作的大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-262"><xref:System.Windows.UIElement.ArrangeCore%2A> implementations should call the base implementation to return a size, then call the <xref:System.Windows.UIElement.Arrange%2A> method of each visible child element, and reconcile the sizes returned by these <xref:System.Windows.UIElement.Arrange%2A> calls with the size of the base implementation.</span></span> <span data-ttu-id="84df3-263">對帳層面的邏輯<xref:System.Windows.UIElement.ArrangeCore%2A>實作可能會有所不同，視您的項目配置特性而定。</span><span class="sxs-lookup"><span data-stu-id="84df3-263">The logic for the reconciliation aspect of a <xref:System.Windows.UIElement.ArrangeCore%2A> implementation might vary, depending on the layout characteristics of your element.</span></span> <span data-ttu-id="84df3-264">在下列的範例範本中，`VisualChildren`是假設性的屬性，您的項目可能會定義為了列舉其內容;<xref:System.Windows.UIElement>未定義內容的集合在這個層級中，WPF 架構層級架構會延後內容的行為，例如特定的控制項或控制項基底類別的衍生項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-264">In the following example template, `VisualChildren` is a hypothetical property that your element might define to help enumerate its content; <xref:System.Windows.UIElement> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-265">如果您正在開發的 WPF 核心層級的項目，您應該覆寫此方法，讓您的 WPF 核心層級項目唯一排列版面配置行為，或進行適當的版面配置決策的相關元素的子項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-265">If you are developing elements at the WPF core level,you should override this method to give your WPF core-level element a unique arrange layout behavior, or to make proper layout decisions about the child elements of your elements.</span></span> <span data-ttu-id="84df3-266">覆寫可能會需要這些子項目不是從已定義的模式可辨識這類<see cref="T:System.Windows.Controls.ItemCollection" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-266">An override might be necessary if those child elements are not recognizable from a defined pattern such as an <see cref="T:System.Windows.Controls.ItemCollection" />.</span></span>  
  
<span data-ttu-id="84df3-267">父項目必須呼叫類別的特定<see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />上每個子項目，否則這些子項目不會轉譯。</span><span class="sxs-lookup"><span data-stu-id="84df3-267">A parent element must call the class-specific <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each child element, otherwise those child elements are not rendered.</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="84df3-268">針對這個項目之指定的動畫屬性，開始播放動畫。</span><span class="sxs-lookup"><span data-stu-id="84df3-268">Starts an animation for a specified animated property on this element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="84df3-269">要顯示動畫的屬性，該屬性會指定為相依性屬性識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-269">The property to animate, which is specified as a dependency property identifier.</span></span></param>
        <param name="animation"><span data-ttu-id="84df3-270">啟動動畫的時刻表。</span><span class="sxs-lookup"><span data-stu-id="84df3-270">The timeline of the animation to start.</span></span></param>
        <summary><span data-ttu-id="84df3-271">針對這個項目之指定的動畫屬性，開始播放動畫。</span><span class="sxs-lookup"><span data-stu-id="84df3-271">Starts an animation for a specified animated property on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-272">當您檢查是否建立屬性的動畫時，請注意，動畫會開始被視為轉譯之外的非動畫的起始點的第一個框架時以動畫顯示。</span><span class="sxs-lookup"><span data-stu-id="84df3-272">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="84df3-273">如果<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>for`animation`是`null`，然後會移除任何目前動畫，並保留屬性的目前值。</span><span class="sxs-lookup"><span data-stu-id="84df3-273">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="84df3-274">如果整個`animation`值是`null`、 從屬性中移除所有動畫和屬性值還原為其基底值。</span><span class="sxs-lookup"><span data-stu-id="84df3-274">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="84df3-275">不過，原先相關聯的動畫時間軸不會停止。</span><span class="sxs-lookup"><span data-stu-id="84df3-275">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="84df3-276">指派給該時間軸中的任何其他動畫都會繼續執行。</span><span class="sxs-lookup"><span data-stu-id="84df3-276">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-277">下列範例會建立動畫、 指派，，然後呼叫<xref:System.Windows.UIElement.BeginAnimation%2A>啟動它。</span><span class="sxs-lookup"><span data-stu-id="84df3-277">The following example creates an animation, assigns it, and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> to start it.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="84df3-278">要顯示動畫的屬性，該屬性會指定為相依性屬性識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-278">The property to animate, which is specified as the dependency property identifier.</span></span></param>
        <param name="animation"><span data-ttu-id="84df3-279">套用動畫的時刻表。</span><span class="sxs-lookup"><span data-stu-id="84df3-279">The timeline of the animation to be applied.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="84df3-280">一個列舉值，這個值指定新的動畫如何與已經影響屬性值的任何目前 (執行中) 動畫互動。</span><span class="sxs-lookup"><span data-stu-id="84df3-280">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</span></span></param>
        <summary><span data-ttu-id="84df3-281">針對此項目上指定的動畫屬性啟動特定動畫，且可以選擇指定如果屬性已經有執行中的動畫時會發生何種情況。</span><span class="sxs-lookup"><span data-stu-id="84df3-281">Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-282">當您檢查是否建立屬性的動畫時，請注意，動畫會開始被視為轉譯之外的非動畫的起始點的第一個框架時以動畫顯示。</span><span class="sxs-lookup"><span data-stu-id="84df3-282">When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</span></span>  
  
 <span data-ttu-id="84df3-283">如果<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>for`animation`是`null`，然後會移除任何目前動畫，並保留屬性的目前值。</span><span class="sxs-lookup"><span data-stu-id="84df3-283">If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.</span></span>  
  
 <span data-ttu-id="84df3-284">如果整個`animation`值是`null`、 從屬性中移除所有動畫和屬性值還原為其基底值。</span><span class="sxs-lookup"><span data-stu-id="84df3-284">If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value.</span></span> <span data-ttu-id="84df3-285">不過，原先相關聯的動畫時間軸不會停止。</span><span class="sxs-lookup"><span data-stu-id="84df3-285">However, the originally associated animation timeline is not stopped.</span></span> <span data-ttu-id="84df3-286">指派給該時間軸中的任何其他動畫都會繼續執行。</span><span class="sxs-lookup"><span data-stu-id="84df3-286">Any other animations assigned to that timeline will continue to run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-287">下列範例會從一個資源，然後呼叫取得現有動畫的處理常式<xref:System.Windows.UIElement.BeginAnimation%2A>與指定的遞移式行為。</span><span class="sxs-lookup"><span data-stu-id="84df3-287">The following example implements a handler that obtains an existing animation from a resource and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> with a specified handoff behavior.</span></span>  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffect : System.Windows.Media.Effects.BitmapEffect with get, set" Usage="System.Windows.UIElement.BitmapEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-288">取得或設定直接套用至此元素呈現內容的點陣圖效果。</span><span class="sxs-lookup"><span data-stu-id="84df3-288">Gets or sets a bitmap effect that applies directly to the rendered content for this element.</span></span>  <span data-ttu-id="84df3-289">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-289">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-290">要套用的點陣圖效果。</span><span class="sxs-lookup"><span data-stu-id="84df3-290">The bitmap effect to apply.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-291"><xref:System.Windows.Media.Effects.BitmapEffect> 是抽象類型，因此[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用方式必須實作的衍生的類別的<xref:System.Windows.Media.Effects.BitmapEffect>，例如<xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>。</span><span class="sxs-lookup"><span data-stu-id="84df3-291"><xref:System.Windows.Media.Effects.BitmapEffect> is an abstract type, therefore the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage requires an implemented derived class of <xref:System.Windows.Media.Effects.BitmapEffect>, such as <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>.</span></span> <span data-ttu-id="84df3-292">實作一個衍生類別的附註是集合型別，可讓您指定多個循序<xref:System.Windows.Media.Effects.BitmapEffect>，使用巢狀的標記語法。</span><span class="sxs-lookup"><span data-stu-id="84df3-292">Note that one implemented derived class is a collection type that allows you to specify more than one sequential <xref:System.Windows.Media.Effects.BitmapEffect>, using a nested tag syntax.</span></span>  
  
 <span data-ttu-id="84df3-293">目前沒有衍生的類別<xref:System.Windows.Media.Effects.BitmapEffect>支援的型別轉換子，所以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]您使用這個屬性的語法通常是屬性元素語法。</span><span class="sxs-lookup"><span data-stu-id="84df3-293">No existing derived class of <xref:System.Windows.Media.Effects.BitmapEffect> supports a type converter, so the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax that you use for this property is generally property element syntax.</span></span>  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-294">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-294">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-295">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-295">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|<span data-ttu-id="84df3-296">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-296">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-297">無</span><span class="sxs-lookup"><span data-stu-id="84df3-297">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-298">下列範例會設定點陣圖效果，使用<xref:System.Windows.Media.Effects.BlurBitmapEffect>。</span><span class="sxs-lookup"><span data-stu-id="84df3-298">The following example sets a bitmap effect, using <xref:System.Windows.Media.Effects.BlurBitmapEffect>.</span></span>  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffectInput : System.Windows.Media.Effects.BitmapEffectInput with get, set" Usage="System.Windows.UIElement.BitmapEffectInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-299">取得或設定直接套用至此元素呈現內容的點陣圖效果輸入來源。</span><span class="sxs-lookup"><span data-stu-id="84df3-299">Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.</span></span>  <span data-ttu-id="84df3-300">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-300">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-301">點陣圖效果的來源。</span><span class="sxs-lookup"><span data-stu-id="84df3-301">The source for bitmap effects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-302">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-302">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-303">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-303">Identifier field</span></span>|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|<span data-ttu-id="84df3-304">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-304">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-305">無</span><span class="sxs-lookup"><span data-stu-id="84df3-305">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectInputProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-306">識別 <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-306">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-307">識別 <see cref="P:System.Windows.UIElement.BitmapEffect" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-307">Identifies the <see cref="P:System.Windows.UIElement.BitmapEffect" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheMode : System.Windows.Media.CacheMode with get, set" Usage="System.Windows.UIElement.CacheMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-308">取得或設定 <see cref="T:System.Windows.UIElement" /> 的快取表示。</span><span class="sxs-lookup"><span data-stu-id="84df3-308">Gets or sets a cached representation of the <see cref="T:System.Windows.UIElement" />.</span></span></summary>
        <value><span data-ttu-id="84df3-309">保存 <see cref="T:System.Windows.Media.CacheMode" /> 之快取表示的 <see cref="T:System.Windows.UIElement" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-309">A <see cref="T:System.Windows.Media.CacheMode" /> that holds a cached representation of the <see cref="T:System.Windows.UIElement" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-310">設定<xref:System.Windows.UIElement.CacheMode%2A>屬性，當您需要增加很多時間來呈現內容的效能。</span><span class="sxs-lookup"><span data-stu-id="84df3-310">Set the <xref:System.Windows.UIElement.CacheMode%2A> property when you need to increase performance for content that is time consuming to render.</span></span> <span data-ttu-id="84df3-311">如需詳細資訊，請參閱<xref:System.Windows.Media.BitmapCache>。</span><span class="sxs-lookup"><span data-stu-id="84df3-311">For more information, see <xref:System.Windows.Media.BitmapCache>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CacheModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.CacheModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-312">識別 <see cref="P:System.Windows.UIElement.CacheMode" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-312">Identifies the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-313">嘗試強制將滑鼠的捕捉給這個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-313">Attempts to force capture of the mouse to this element.</span></span></summary>
        <returns><span data-ttu-id="84df3-314">如果成功捕捉到滑鼠則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-314"><see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-315">若要擷取項目必須先啟用。</span><span class="sxs-lookup"><span data-stu-id="84df3-315">To be captured, an element must be enabled.</span></span> <span data-ttu-id="84df3-316">檢查是否<xref:System.Windows.UIElement.IsEnabled%2A>已`true`之前先呼叫<xref:System.Windows.UIElement.CaptureMouse%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-316">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement.CaptureMouse%2A>.</span></span>  
  
 <span data-ttu-id="84df3-317">如果呼叫<xref:System.Windows.UIElement.CaptureMouse%2A>會傳回`true`，然後<xref:System.Windows.UIElement.IsMouseCaptured%2A>也是`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-317">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement.IsMouseCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="84df3-318">如果呼叫<xref:System.Windows.UIElement.CaptureMouse%2A>傳回`true`，則<xref:System.Windows.UIElement.GotMouseCapture>並<xref:System.Windows.UIElement.IsMouseCapturedChanged>引發事件，與<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType>事件中的項目報告資料其中<xref:System.Windows.UIElement.CaptureMouse%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-318">If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement.GotMouseCapture> and <xref:System.Windows.UIElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> in the event data reported as the element where the <xref:System.Windows.UIElement.CaptureMouse%2A> method is called.</span></span> <span data-ttu-id="84df3-319">如果您強制擷取時，您可能會干擾現有的擷取-特別是使用與拖曳和置放滑鼠的擷取。</span><span class="sxs-lookup"><span data-stu-id="84df3-319">If you force capture, you might interfere with existing captures - especially with captures that relate to drag-and-drop with the mouse.</span></span>  
  
 <span data-ttu-id="84df3-320">若要清除滑鼠捕捉，從所有的項目，請呼叫<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType>具有`element`提供的參數`null`。</span><span class="sxs-lookup"><span data-stu-id="84df3-320">To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with the `element` parameter provided as `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-321">下列範例會實作一組處理常式的滑鼠和輸入的按鍵組合的滑鼠捕捉 （和釋放），並啟用檢視 3D 模型的特殊滑鼠模式。</span><span class="sxs-lookup"><span data-stu-id="84df3-321">The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-322">嘗試強制將手寫筆的捕捉給這個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-322">Attempts to force capture of the stylus to this element.</span></span></summary>
        <returns><span data-ttu-id="84df3-323">如果成功捕捉到手寫筆則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-323"><see langword="true" /> if the stylus was successfully captured; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-324">一律根據基礎的預設手寫筆裝置的預設實作會傳回`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-324">The default implementation based on the underlying default stylus device always returns `true`.</span></span> <span data-ttu-id="84df3-325">不過，如果您要擴充提供輸入系統的裝置實作的輸入的裝置，就可以建立一個系統可能會傳回不同結果的替代的手寫筆裝置實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-325">However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</span></span>  
  
 <span data-ttu-id="84df3-326">元素擷取手寫筆，當它收到手寫筆輸入，即使手寫筆位於其範圍外也一樣。</span><span class="sxs-lookup"><span data-stu-id="84df3-326">When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</span></span> <span data-ttu-id="84df3-327">要捕捉手寫筆通常只會在拖放作業期間。</span><span class="sxs-lookup"><span data-stu-id="84df3-327">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="84df3-328">呼叫這個方法會呼叫基礎靜態<xref:System.Windows.Input.Stylus>方法<xref:System.Windows.Input.Stylus.Capture%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-328">Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>.</span></span> <span data-ttu-id="84df3-329">實際擷取行為被藉由使用中的手寫筆裝置實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-329">The actual capture behavior is implemented by the active stylus device implementation.</span></span>  
  
 <span data-ttu-id="84df3-330">若要擷取項目必須先啟用。</span><span class="sxs-lookup"><span data-stu-id="84df3-330">To be captured, an element must be enabled.</span></span> <span data-ttu-id="84df3-331">檢查是否<xref:System.Windows.UIElement.IsEnabled%2A>已`true`傳回才能呼叫<xref:System.Windows.UIElement.CaptureStylus%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-331">Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement.CaptureStylus%2A>.</span></span>  
  
 <span data-ttu-id="84df3-332">如果呼叫<xref:System.Windows.UIElement.CaptureStylus%2A>會傳回`true`，<xref:System.Windows.UIElement.IsStylusCaptured%2A>也是`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-332">If calling <xref:System.Windows.UIElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> is also `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="84df3-333">要擷取的裝置。</span><span class="sxs-lookup"><span data-stu-id="84df3-333">The device to capture.</span></span></param>
        <summary><span data-ttu-id="84df3-334">嘗試強制將觸控擷取至這個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-334">Attempts to force capture of a touch to this element.</span></span></summary>
        <returns><span data-ttu-id="84df3-335">如果指定的觸控已擷取至這個項目，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-335"><see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-336"><xref:System.Windows.UIElement.CaptureTouch%2A> 會傳回`false`如果<xref:System.Windows.Input.TouchDevice>目前擷取至另一個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-336"><xref:System.Windows.UIElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.</span></span>  
  
 <span data-ttu-id="84df3-337">如果<xref:System.Windows.UIElement.CaptureTouch%2A>會傳回`true`，然後在<xref:System.Windows.UIElement.GotTouchCapture>就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-337">If <xref:System.Windows.UIElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement.GotTouchCapture> event is raised.</span></span>  
  
 <span data-ttu-id="84df3-338">若要釋放的單一觸控從這個項目擷取，請使用<xref:System.Windows.UIElement.ReleaseTouchCapture%2A>方法並指定要釋放的觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="84df3-338">To release capture of a single touch from this element, use the <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> method and specify the touch device to release.</span></span> <span data-ttu-id="84df3-339">若要釋放所有修飾，從這個項目，請使用<xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-339">To release all touches from this element, use the <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="84df3-340"><paramref name="touchDevice" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-340"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Windows.Media.Geometry with get, set" Usage="System.Windows.UIElement.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-341">取得或設定用來定義項目內容外框的幾何。</span><span class="sxs-lookup"><span data-stu-id="84df3-341">Gets or sets the geometry used to define the outline of the contents of an element.</span></span>  <span data-ttu-id="84df3-342">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-342">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-343">用於裁剪區域大小的幾何。</span><span class="sxs-lookup"><span data-stu-id="84df3-343">The geometry to be used for clipping area sizing.</span></span> <span data-ttu-id="84df3-344">預設值為 null <see cref="T:System.Windows.Media.Geometry" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-344">The default is a null <see cref="T:System.Windows.Media.Geometry" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-345">呈現的版面配置中，會以視覺化方式裁剪幾何以外的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-345">Elements outside the geometry will be visually clipped in the rendered layout.</span></span> <span data-ttu-id="84df3-346">幾何沒有為矩形。</span><span class="sxs-lookup"><span data-stu-id="84df3-346">The geometry does not have to be rectangular.</span></span>  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-347">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-347">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-348">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-348">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipProperty>|  
|<span data-ttu-id="84df3-349">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-349">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-350">無</span><span class="sxs-lookup"><span data-stu-id="84df3-350">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-351">此範例示範如何定義架構元素<xref:System.Windows.UIElement.Clip%2A>區域。</span><span class="sxs-lookup"><span data-stu-id="84df3-351">This example shows how to define a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="84df3-352">若要定義剪輯，請使用<xref:System.Windows.Media.Geometry>(例如<xref:System.Windows.Media.EllipseGeometry>若要設定的項目<xref:System.Windows.UIElement.Clip%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-352">To define a clip, use a <xref:System.Windows.Media.Geometry> (for example, an <xref:System.Windows.Media.EllipseGeometry> to set the element's <xref:System.Windows.UIElement.Clip%2A> property.</span></span> <span data-ttu-id="84df3-353">在幾何區域內的區域會顯示。</span><span class="sxs-lookup"><span data-stu-id="84df3-353">Only the area that is within the region of the geometry will be visible.</span></span>  
  
 <span data-ttu-id="84df3-354">下列範例所示<xref:System.Windows.Controls.Image>元素若沒有定義之裁剪區域。</span><span class="sxs-lookup"><span data-stu-id="84df3-354">The following example shows an <xref:System.Windows.Controls.Image> element without a defined clip region.</span></span> <span data-ttu-id="84df3-355">因為未不定義任何的裁剪區域，則會顯示整個影像。</span><span class="sxs-lookup"><span data-stu-id="84df3-355">Because no clip region is defined, the entire image is displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 <span data-ttu-id="84df3-356">![套用裁剪區域之前的物件](~/add/media/mil-task-clip-region-noclip.png "之前套用裁剪區域的物件")</span><span class="sxs-lookup"><span data-stu-id="84df3-356">![An object before applying a clip region](~/add/media/mil-task-clip-region-noclip.png "An object before applying a clip region")</span></span>  
<span data-ttu-id="84df3-357">使用任何的裁剪區域的映像</span><span class="sxs-lookup"><span data-stu-id="84df3-357">Image with No Clip Region</span></span>  
  
 <span data-ttu-id="84df3-358">在下一個範例中，會建立相同的映像，不同之處在於其定義之裁剪區域。</span><span class="sxs-lookup"><span data-stu-id="84df3-358">In the next example, an identical Image is created, except that it has a defined clip region.</span></span> <span data-ttu-id="84df3-359">只有在區域內的影像部分<xref:System.Windows.Media.EllipseGeometry>隨即出現。</span><span class="sxs-lookup"><span data-stu-id="84df3-359">Only the part of the image that is within the area the <xref:System.Windows.Media.EllipseGeometry> will be displayed.</span></span>  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 <span data-ttu-id="84df3-360">![裁剪後的物件](~/add/media/mil-task-clip-region-ellispe.PNG "裁剪後的物件")</span><span class="sxs-lookup"><span data-stu-id="84df3-360">![A clipped object](~/add/media/mil-task-clip-region-ellispe.PNG "A clipped object")</span></span>  
<span data-ttu-id="84df3-361">橢圓形的裁剪區域的映像</span><span class="sxs-lookup"><span data-stu-id="84df3-361">Image with an Elliptical Clip Region</span></span>  
  
 <span data-ttu-id="84df3-362">下列範例示範如何以動畫顯示架構元素的<xref:System.Windows.UIElement.Clip%2A>區域。</span><span class="sxs-lookup"><span data-stu-id="84df3-362">The following example shows how animate a framework element's <xref:System.Windows.UIElement.Clip%2A> region.</span></span> <span data-ttu-id="84df3-363">在此範例中，<xref:System.Windows.Media.EllipseGeometry>用來定義橢圓形的裁剪區域<xref:System.Windows.Controls.Image>項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-363">In this example, an <xref:System.Windows.Media.EllipseGeometry> is used to define an elliptical clip region for an <xref:System.Windows.Controls.Image> element.</span></span> <span data-ttu-id="84df3-364">A<xref:System.Windows.Media.Animation.PointAnimation>繪製橢圓形幾何<xref:System.Windows.Media.EllipseGeometry.Center%2A>屬性從 （0，0） 到 （200，150）。</span><span class="sxs-lookup"><span data-stu-id="84df3-364">A <xref:System.Windows.Media.Animation.PointAnimation> animates the ellipse geometry's <xref:System.Windows.Media.EllipseGeometry.Center%2A> property from (0, 0) to (200, 150).</span></span> <span data-ttu-id="84df3-365">動畫開始播放後的映像載入，並不斷重複。</span><span class="sxs-lookup"><span data-stu-id="84df3-365">The animation starts playing after the image is loaded and repeats indefinitely.</span></span>  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 <span data-ttu-id="84df3-366">如需完整的範例，請參閱[裁剪區域範例](https://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67)。</span><span class="sxs-lookup"><span data-stu-id="84df3-366">For the full sample, see the [Clip Region Sample](https://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-367">識別 <see cref="P:System.Windows.UIElement.Clip" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-367">Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ClipToBounds : bool with get, set" Usage="System.Windows.UIElement.ClipToBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-368">取得或設定是否裁剪此元素 (或來自此元素的子元素) 的內容，以符合容器元素大小的值。</span><span class="sxs-lookup"><span data-stu-id="84df3-368">Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.</span></span>   <span data-ttu-id="84df3-369">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-369">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-370">如果應該裁剪內容即為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-370"><see langword="true" /> if the content should be clipped; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-371">預設值為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-371">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-372">子項目的<xref:System.Windows.UIElement.ClipToBounds%2A>有不同的效果，在版面配置行為，取決於是否的高度和寬度的父項目也就決定所<xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A>或是<xref:System.Windows.FrameworkElement.MaxHeight%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span><span class="sxs-lookup"><span data-stu-id="84df3-372">For child elements, <xref:System.Windows.UIElement.ClipToBounds%2A> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> or <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span> <span data-ttu-id="84df3-373"><xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> 父元素的值為何會一律遵守<xref:System.Windows.UIElement.ClipToBounds%2A>和有效的裁剪一律會裁剪內容，根據這些最大值。</span><span class="sxs-lookup"><span data-stu-id="84df3-373"><xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> of the parent element are always respected regardless of the value of <xref:System.Windows.UIElement.ClipToBounds%2A> and the effective clipping will always clip the content based on these maximums.</span></span> <span data-ttu-id="84df3-374">家長<xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A>設定將不會裁剪內容時<xref:System.Windows.UIElement.ClipToBounds%2A>是`false`，但會將裁剪內容 if<xref:System.Windows.UIElement.ClipToBounds%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-374">The parent's <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> settings will not clip the content when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`, but will clip the content if <xref:System.Windows.UIElement.ClipToBounds%2A> is `true`.</span></span>  
  
 <span data-ttu-id="84df3-375">請注意，預設為`false`是一般的行為，因為在實作<xref:System.Windows.UIElement>類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-375">Note that defaulting to `false` is the general behavior as implemented in the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="84df3-376">您可針對任何指定的項目衍生自<xref:System.Windows.UIElement>覆寫這個屬性預設為該執行個體中的相依性屬性中繼資料`true`改。</span><span class="sxs-lookup"><span data-stu-id="84df3-376">It is possible for any given element that derives from <xref:System.Windows.UIElement> to override the dependency property metadata for this property in that instance to default to `true` instead.</span></span> <span data-ttu-id="84df3-377">數個現有的衍生的類別覆寫此中繼資料及/或調整相依性屬性預設值。</span><span class="sxs-lookup"><span data-stu-id="84df3-377">Several existing derived classes override this metadata and/or adjust the dependency property default value.</span></span>  
  
 <span data-ttu-id="84df3-378"><xref:System.Windows.Controls.InkCanvas><xref:System.Windows.Controls.InkPresenter>，並<xref:System.Windows.Controls.Primitives.Popup>每個覆寫這個預設值為`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-378"><xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, and <xref:System.Windows.Controls.Primitives.Popup> each override the default value to be `true`.</span></span>  
  
 <span data-ttu-id="84df3-379"><xref:System.Windows.FrameworkElement> 覆寫這個相依性屬性的中繼資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-379"><xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property.</span></span> <span data-ttu-id="84df3-380">具體而言，<xref:System.Windows.FrameworkElement>指定此屬性，以允許屬性值繼承 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>是`true`中繼資料中)。</span><span class="sxs-lookup"><span data-stu-id="84df3-380">Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata).</span></span> <span data-ttu-id="84df3-381">在此內容中的屬性值繼承表示，如果有任何其他值的子項目<xref:System.Windows.UIElement.ClipToBounds%2A>指派透過本機值或最接近的父項目的值，與指派 （同樣地，無論是在樣式中，依預設此值的樣式值，或在本機值)，然後從父元素的值會指派給所有未指派的子項目，屬性系統。</span><span class="sxs-lookup"><span data-stu-id="84df3-381">Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.ClipToBounds%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system.</span></span> <span data-ttu-id="84df3-382">實際上這表示您可以指定是否要在根項目，允許裁剪界限，並將它做為值將會傳播至所有子項目具有不是明確地指派`false`。</span><span class="sxs-lookup"><span data-stu-id="84df3-382">In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.</span></span>  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-383">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-383">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-384">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-384">Identifier field</span></span>|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|<span data-ttu-id="84df3-385">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-385">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-386">無</span><span class="sxs-lookup"><span data-stu-id="84df3-386">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipToBoundsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-387">識別 <see cref="P:System.Windows.UIElement.ClipToBounds" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-387">Identifies the <see cref="P:System.Windows.UIElement.ClipToBounds" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-388">取得與這個項目關聯的 <see cref="T:System.Windows.Input.CommandBinding" /> 物件集合。</span><span class="sxs-lookup"><span data-stu-id="84df3-388">Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element.</span></span> <span data-ttu-id="84df3-389"><see cref="T:System.Windows.Input.CommandBinding" /> 會啟用此項目的命令處理，並宣告命令、其事件及此項目所附加之處理常式之間的連結。</span><span class="sxs-lookup"><span data-stu-id="84df3-389">A <see cref="T:System.Windows.Input.CommandBinding" /> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</span></span></summary>
        <value><span data-ttu-id="84df3-390">所有 <see cref="T:System.Windows.Input.CommandBinding" /> 物件的集合。</span><span class="sxs-lookup"><span data-stu-id="84df3-390">The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-391">典型的另一種方式填入<xref:System.Windows.UIElement.CommandBindings%2A>集合是使用<xref:System.Windows.Input.CommandManager>方法以程式設計的方式。</span><span class="sxs-lookup"><span data-stu-id="84df3-391">Another typical way to populate the <xref:System.Windows.UIElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.</span></span>  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="84df3-392">XAML 屬性項目用法</span><span class="sxs-lookup"><span data-stu-id="84df3-392">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="84df3-393">XAML 值</span><span class="sxs-lookup"><span data-stu-id="84df3-393">XAML Values</span></span>  
 <span data-ttu-id="84df3-394">*oneOrMoreCommandBindings*</span><span class="sxs-lookup"><span data-stu-id="84df3-394">*oneOrMoreCommandBindings*</span></span>  
 <span data-ttu-id="84df3-395">一或多個<xref:System.Windows.Input.CommandBinding>項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-395">One or more <xref:System.Windows.Input.CommandBinding> elements.</span></span> <span data-ttu-id="84df3-396">每一種應有<xref:System.Windows.Input.CommandBinding.Command%2A>屬性設為已知的命令，並針對設定屬性<xref:System.Windows.Input.CommandBinding.CanExecute>和<xref:System.Windows.Input.CommandBinding.Executed>處理常式實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-396">Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations.</span></span> <span data-ttu-id="84df3-397">如需詳細資訊，請參閱<xref:System.Windows.Input.CommandBinding>。</span><span class="sxs-lookup"><span data-stu-id="84df3-397">For more information see <xref:System.Windows.Input.CommandBinding>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-398">下列範例會將<xref:System.Windows.Input.CommandBinding>使用標記的視窗。</span><span class="sxs-lookup"><span data-stu-id="84df3-398">The following example adds a <xref:System.Windows.Input.CommandBinding> to a window using markup.</span></span> <span data-ttu-id="84df3-399">請注意，在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，則<xref:System.Windows.Input.CommandBindingCollection>當做項目; 標記中未宣告的集合物件由屬性接受的類型推斷並填入屬性項目，一或多個<xref:System.Windows.Input.CommandBinding>項目：</span><span class="sxs-lookup"><span data-stu-id="84df3-399">Note that in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the <xref:System.Windows.Input.CommandBindingCollection> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <xref:System.Windows.Input.CommandBinding> elements:</span></span>  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 <span data-ttu-id="84df3-400">如需詳細資訊[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]語法的集合，請參閱[XAML 語法詳細資料](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-400">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 <span data-ttu-id="84df3-401">下列範例會執行程式碼基本上是相同的動作：</span><span class="sxs-lookup"><span data-stu-id="84df3-401">The following example does essentially the same thing in code:</span></span>  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DesiredSize : System.Windows.Size" Usage="System.Windows.UIElement.DesiredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-402">取得這個項目在版面配置處理序的測量傳遞期間所計算的大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-402">Gets the size that this element computed during the measure pass of the layout process.</span></span></summary>
        <value><span data-ttu-id="84df3-403">成為排列傳遞所需大小的計算大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-403">The computed size, which becomes the desired size for the arrange pass.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-404">這個屬性所傳回的值才會有效度量如果的值<xref:System.Windows.UIElement.IsMeasureValid%2A>屬性是`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-404">The value returned by this property will only be a valid measurement if the value of the <xref:System.Windows.UIElement.IsMeasureValid%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="84df3-405"><xref:System.Windows.UIElement.DesiredSize%2A> 當其中一個度量因素，當您實作版面配置行為覆寫這類，通常會檢查<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>， <xref:System.Windows.FrameworkElement.MeasureOverride%2A>，或<xref:System.Windows.UIElement.OnRender%2A>(在<xref:System.Windows.UIElement.OnRender%2A>情況下，您可以檢查<xref:System.Windows.UIElement.RenderSize%2A>相反的但這取決於您實作）。</span><span class="sxs-lookup"><span data-stu-id="84df3-405"><xref:System.Windows.UIElement.DesiredSize%2A> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, or <xref:System.Windows.UIElement.OnRender%2A> (in the <xref:System.Windows.UIElement.OnRender%2A> case, you might check <xref:System.Windows.UIElement.RenderSize%2A> instead, but this depends on your implementation).</span></span> <span data-ttu-id="84df3-406">根據案例中，<xref:System.Windows.UIElement.DesiredSize%2A>可能會完全遵守您的實作邏輯，條件約束上<xref:System.Windows.UIElement.DesiredSize%2A>可能會套用，以及這類條件約束也可能會變更其他特性的父項目或子項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-406">Depending on the scenario, <xref:System.Windows.UIElement.DesiredSize%2A> might be fully respected by your implementation logic, constraints on <xref:System.Windows.UIElement.DesiredSize%2A> might be applied, and such constraints might also change other characteristics of either the parent element or child element.</span></span> <span data-ttu-id="84df3-407">例如，支援可捲動區域 （卻選擇不是衍生自已經啟用 可捲動區域的 WPF 架構層級控制項） 的控制項無法比較可用的大小，以<xref:System.Windows.UIElement.DesiredSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-407">For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="84df3-408">控制項接著可以將設定內部狀態的啟用中的捲軸[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]該控制項。</span><span class="sxs-lookup"><span data-stu-id="84df3-408">The control could then set an internal state that enabled scrollbars in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] for that control.</span></span> <span data-ttu-id="84df3-409">或者，<xref:System.Windows.UIElement.DesiredSize%2A>可能會造成在某些情況下也會忽略。</span><span class="sxs-lookup"><span data-stu-id="84df3-409">Or, <xref:System.Windows.UIElement.DesiredSize%2A> could potentially also be ignored in certain scenarios.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-410">下列範例所示<xref:System.Windows.UIElement.DesiredSize%2A>一部分<xref:System.Windows.FrameworkElement.MeasureOverride%2A>實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-410">The following example shows <xref:System.Windows.UIElement.DesiredSize%2A> as part of a <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementation.</span></span> <span data-ttu-id="84df3-411">請注意如何<xref:System.Windows.UIElement.Measure%2A>呼叫之前取得<xref:System.Windows.UIElement.DesiredSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-411">Notice how <xref:System.Windows.UIElement.Measure%2A> is called immediately prior to obtaining <xref:System.Windows.UIElement.DesiredSize%2A>.</span></span> <span data-ttu-id="84df3-412">這可確保<xref:System.Windows.UIElement.DesiredSize%2A>保留的合法值。</span><span class="sxs-lookup"><span data-stu-id="84df3-412">This assures that <xref:System.Windows.UIElement.DesiredSize%2A> holds a legitimate value.</span></span>  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-413">輸入系統報告其下以此項目作為拖曳目標的拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-413">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-414">此事件建立的別名<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-414">This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-415">附加至事件處理常式<xref:System.Windows.UIElement.DragEnter>事件會附加至基礎<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-415">Event handlers that are attached to the <xref:System.Windows.UIElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-416">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-416">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-417">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-417">Identifier field</span></span>|<xref:System.Windows.UIElement.DragEnterEvent>|  
|<span data-ttu-id="84df3-418">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-418">Routing strategy</span></span>|<span data-ttu-id="84df3-419">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-419">Bubbling</span></span>|  
|<span data-ttu-id="84df3-420">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-420">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="84df3-421">對應的通道事件是<xref:System.Windows.UIElement.PreviewDragEnter>。</span><span class="sxs-lookup"><span data-stu-id="84df3-421">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDragEnter>.</span></span>  
  
-   <span data-ttu-id="84df3-422">覆寫<xref:System.Windows.UIElement.OnDragEnter%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-422">Override <xref:System.Windows.UIElement.OnDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-423">識別 <see cref="E:System.Windows.UIElement.DragEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-423">Identifies the <see cref="E:System.Windows.UIElement.DragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-424">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-424">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-425">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-425">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-426">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-426">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-427">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-427">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-428">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-428">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-429">輸入系統報告其下以此項目作為拖曳來源的拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-429">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-430">本項目中建立的別名<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-430">This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-431">附加至事件處理常式<xref:System.Windows.UIElement.DragLeave>事件會附加至基礎<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-431">Event handlers that are attached to the <xref:System.Windows.UIElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-432">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-432">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-433">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-433">Identifier field</span></span>|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|<span data-ttu-id="84df3-434">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-434">Routing strategy</span></span>|<span data-ttu-id="84df3-435">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-435">Bubbling</span></span>|  
|<span data-ttu-id="84df3-436">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-436">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="84df3-437">對應的通道事件是<xref:System.Windows.DragDrop.PreviewDragLeave>。</span><span class="sxs-lookup"><span data-stu-id="84df3-437">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.</span></span>  
  
-   <span data-ttu-id="84df3-438">覆寫<xref:System.Windows.UIElement.OnDragLeave%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-438">Override <xref:System.Windows.UIElement.OnDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-439">識別 <see cref="E:System.Windows.UIElement.DragLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-439">Identifies the <see cref="E:System.Windows.UIElement.DragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-440">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-440">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-441">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-441">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-442">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-442">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-443">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-443">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-444">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-444">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-445">在輸入系統回報以此項目作為可能置放目標的基礎拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-445">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-446">即使拖曳來源中項目範圍，就會發生此事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-446">This event occurs even if the drag originates in the element bounds.</span></span> <span data-ttu-id="84df3-447">如果拖曳開始界限之外，然後將移內，也會引發這個事件，以及<xref:System.Windows.UIElement.DragEnter>和相關預覽事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-447">If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement.DragEnter> and related preview events.</span></span>  
  
 <span data-ttu-id="84df3-448">本項目中建立的別名<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-448">This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-449">附加至事件處理常式<xref:System.Windows.UIElement.DragOver>事件會附加至基礎<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-449">Event handlers that are attached to the <xref:System.Windows.UIElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-450">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-450">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-451">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-451">Identifier field</span></span>|<xref:System.Windows.UIElement.DragOverEvent>|  
|<span data-ttu-id="84df3-452">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-452">Routing strategy</span></span>|<span data-ttu-id="84df3-453">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-453">Bubbling</span></span>|  
|<span data-ttu-id="84df3-454">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-454">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="84df3-455">對應的通道事件是<xref:System.Windows.DragDrop.PreviewDragOver>。</span><span class="sxs-lookup"><span data-stu-id="84df3-455">The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.</span></span>  
  
-   <span data-ttu-id="84df3-456">覆寫<xref:System.Windows.UIElement.OnDragOver%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-456">Override <xref:System.Windows.UIElement.OnDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-457">識別 <see cref="E:System.Windows.UIElement.DragOver" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-457">Identifies the <see cref="E:System.Windows.UIElement.DragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-458">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-458">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-459">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-459">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-460">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-460">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-461">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-461">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-462">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-462">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-463">輸入系統報告其下以這個項目作為置放目標的置放事件時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-463">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-464">本項目中建立的別名<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement.Drop?displayProperty=nameWithType>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-464">This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-465">附加至事件處理常式<xref:System.Windows.UIElement.Drop>事件會附加至基礎<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-465">Event handlers that are attached to the <xref:System.Windows.UIElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-466">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-466">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-467">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-467">Identifier field</span></span>|<xref:System.Windows.UIElement.DropEvent>|  
|<span data-ttu-id="84df3-468">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-468">Routing strategy</span></span>|<span data-ttu-id="84df3-469">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-469">Bubbling</span></span>|  
|<span data-ttu-id="84df3-470">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-470">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="84df3-471">對應的通道事件是<xref:System.Windows.UIElement.PreviewDrop>。</span><span class="sxs-lookup"><span data-stu-id="84df3-471">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDrop>.</span></span>  
  
-   <span data-ttu-id="84df3-472">覆寫<xref:System.Windows.UIElement.OnDrop%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-472">Override <xref:System.Windows.UIElement.OnDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-473">識別 <see cref="E:System.Windows.UIElement.Drop" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-473">Identifies the <see cref="E:System.Windows.UIElement.Drop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-474">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-474">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-475">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-475">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-476">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-476">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-477">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-477">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-478">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-478">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Media.Effects.Effect with get, set" Usage="System.Windows.UIElement.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-479">取得或設定要套用至 <see cref="T:System.Windows.UIElement" /> 的點陣圖效果。</span><span class="sxs-lookup"><span data-stu-id="84df3-479">Gets or sets the bitmap effect to apply to the <see cref="T:System.Windows.UIElement" />.</span></span> <span data-ttu-id="84df3-480">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-480">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-481">表示點陣圖效果的 <see cref="T:System.Windows.Media.Effects.Effect" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-481">An <see cref="T:System.Windows.Media.Effects.Effect" /> that represents the bitmap effect.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-482">使用<xref:System.Windows.UIElement.Effect%2A>屬性，將套用至點陣圖效果<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-482">Use the <xref:System.Windows.UIElement.Effect%2A> property to apply a bitmap effect to a <xref:System.Windows.UIElement>.</span></span>  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-483">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-483">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-484">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-484">Identifier field</span></span>|<xref:System.Windows.UIElement.EffectProperty>|  
|<span data-ttu-id="84df3-485">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-485">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-486">無</span><span class="sxs-lookup"><span data-stu-id="84df3-486">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-487">下列 XAML 示範如何指派自訂<xref:System.Windows.Media.Effects.ShaderEffect>至<xref:System.Windows.UIElement.Effect%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-487">The following XAML shows how to assign a custom <xref:System.Windows.Media.Effects.ShaderEffect> to the <xref:System.Windows.UIElement.Effect%2A> property.</span></span>  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable EffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.EffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-488">識別 <see cref="P:System.Windows.UIElement.Effect" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-488">Identifies the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-489">嘗試將焦點設定至此項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-489">Attempts to set focus to this element.</span></span></summary>
        <returns><span data-ttu-id="84df3-490">如果邏輯與鍵盤焦點設定至此項目，則為 <see langword="true" />，如果只有邏輯焦點設為此項目，或是呼叫此方法並未強制焦點變更，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-490"><see langword="true" /> if keyboard focus and logical focus were set to this element; <see langword="false" /> if only logical focus was set to this element, or if the call to this method did not force the focus to change.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-491">若要可設定焦點，<xref:System.Windows.UIElement.Focusable%2A>並<xref:System.Windows.UIElement.IsEnabled%2A>兩者都必須是`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-491">To be focusable, <xref:System.Windows.UIElement.Focusable%2A> and <xref:System.Windows.UIElement.IsEnabled%2A> must both be `true`.</span></span>  
  
 <span data-ttu-id="84df3-492">即使項目是可設定焦點且有效的`Focus`預覽事件可能會處理在特定的樹狀目錄中，並著重於該項目可能不允許 （例如，在複合控制項）。</span><span class="sxs-lookup"><span data-stu-id="84df3-492">Even if the element is focusable and valid, the `Focus` preview events may be processed in a specific tree, and focus on that element may not be allowed (for example, in a composite control).</span></span>
<span data-ttu-id="84df3-493">在此情況下，這個方法會傳回`false`。</span><span class="sxs-lookup"><span data-stu-id="84df3-493">In such a case, this method returns `false`.</span></span>
 
 <span data-ttu-id="84df3-494">一般情況下，焦點會受到兩個不同的概念︰ 鍵盤焦點和邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-494">In general, focus is controlled by two different concepts: keyboard focus and logical focus.</span></span> <span data-ttu-id="84df3-495">這兩個概念並不一定相同。</span><span class="sxs-lookup"><span data-stu-id="84df3-495">These two concepts are not always the same.</span></span> <span data-ttu-id="84df3-496">如需詳細資訊，請參閱 <<c0> [ 焦點摘要](~/docs/framework/wpf/advanced/focus-overview.md)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-496">For more information, see [Focus summary](~/docs/framework/wpf/advanced/focus-overview.md) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>
 
 <span data-ttu-id="84df3-497">如果呼叫<xref:System.Windows.UIElement.Focus%2A>會傳回`true`，<xref:System.Windows.UIElement.IsKeyboardFocused%2A>並<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>還有`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-497">If calling <xref:System.Windows.UIElement.Focus%2A> returns `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are also `true`.</span></span>  
  
 <span data-ttu-id="84df3-498">如果相關的屬性尚未存在`true`，當您呼叫<xref:System.Windows.UIElement.Focus%2A>，以下列順序引發一或多個下列事件： <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>， <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> （來源為新的焦點目標）， <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>， <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>，<xref:System.Windows.UIElement.LostKeyboardFocus>， <xref:System.Windows.UIElement.GotKeyboardFocus> （來源為新的焦點目標）。</span><span class="sxs-lookup"><span data-stu-id="84df3-498">If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (source is the new focus target).</span></span>  
  
 <span data-ttu-id="84df3-499">為了讓這個呼叫才會成功，應用程式中的某個其他項目需要先前擁有焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-499">In order for this call to be successful, some other element in the application needed to have focus previously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-500">下列範例會將焦點設<xref:System.Windows.Controls.TextBox>所參考<xref:System.Windows.FrameworkElement.Name%2A>，然後調整游標的位置內<xref:System.Windows.Controls.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="84df3-500">The following example sets focus to a <xref:System.Windows.Controls.TextBox> referenced by <xref:System.Windows.FrameworkElement.Name%2A>, and then adjusts the position of the cursor within the <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-501">取得或設定元素是否能夠接收焦點的值。</span><span class="sxs-lookup"><span data-stu-id="84df3-501">Gets or sets a value that indicates whether the element can receive focus.</span></span>  <span data-ttu-id="84df3-502">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-502">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-503">如果這個項目可設定焦點，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-503"><see langword="true" /> if the element is focusable; otherwise <see langword="false" />.</span></span> <span data-ttu-id="84df3-504">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-504">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-505">只有具有焦點的項目收到鍵盤輸入。</span><span class="sxs-lookup"><span data-stu-id="84df3-505">Only the focused element receives keyboard input.</span></span>  
  
 <span data-ttu-id="84df3-506"><xref:System.Windows.UIElement.Focusable%2A> 是[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]屬性存取子是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-506"><xref:System.Windows.UIElement.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="84df3-507">這個特定的相依性屬性很通常會有衍生的項目類別，尤其是在控制項中以不同方式設定其明顯的 「 預設 」 值。</span><span class="sxs-lookup"><span data-stu-id="84df3-507">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly in controls.</span></span> <span data-ttu-id="84df3-508">這通常是在兩種方式之一：</span><span class="sxs-lookup"><span data-stu-id="84df3-508">This commonly occurs in one of two ways:</span></span>  
  
-   <span data-ttu-id="84df3-509">相依性屬性繼承自特定的衍生類別，但是，衍生類別覆寫相依性屬性中繼資料，並變更屬性的預設值。</span><span class="sxs-lookup"><span data-stu-id="84df3-509">The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</span></span>  
  
-   <span data-ttu-id="84df3-510">樣式或範本套用到元素，它會以不同的方式設定該相依性屬性值。</span><span class="sxs-lookup"><span data-stu-id="84df3-510">A style or template is applied to an element, which sets that dependency property value differently.</span></span>  
  
 <span data-ttu-id="84df3-511">比方說，明顯 「 預設 」 的<xref:System.Windows.UIElement.Focusable%2A>for<xref:System.Windows.Controls.Button>控制項將會是`true`，即使<xref:System.Windows.Controls.Button>繼承<xref:System.Windows.UIElement.Focusable%2A>作為[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]屬性，直接從<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-511">For example, the apparent "default" of <xref:System.Windows.UIElement.Focusable%2A> for a <xref:System.Windows.Controls.Button> control will be `true`, even though <xref:System.Windows.Controls.Button> inherits <xref:System.Windows.UIElement.Focusable%2A> as a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property directly from <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="84df3-512">這是因為套用的中繼資料值<xref:System.Windows.UIElement.Focusable%2A>內的靜態建構函式已遭覆寫相依性屬性<xref:System.Windows.Controls.Control>基底類別，之間平均分攤工作量<xref:System.Windows.Controls.Button>和<xref:System.Windows.UIElement>類別階層架構中。</span><span class="sxs-lookup"><span data-stu-id="84df3-512">This is because the applied metadata value for the <xref:System.Windows.UIElement.Focusable%2A> dependency property was overridden within the static constructor of the <xref:System.Windows.Controls.Control> base class, which is situated between <xref:System.Windows.Controls.Button> and <xref:System.Windows.UIElement> in the class hierarchy.</span></span>  
  
 <span data-ttu-id="84df3-513">當繼承<xref:System.Windows.Controls.Control>或其衍生的類別，<xref:System.Windows.Controls.Control>重新定義預設值，這個屬性是`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-513">When inherited by <xref:System.Windows.Controls.Control> or its derived classes, <xref:System.Windows.Controls.Control> redefines the default value of this property to be `true`.</span></span>  
  
 <span data-ttu-id="84df3-514">當繼承<xref:System.Windows.Controls.Label>(即<xref:System.Windows.Controls.Control>衍生類別)，預設值一次重新定義為`false`。</span><span class="sxs-lookup"><span data-stu-id="84df3-514">When inherited by <xref:System.Windows.Controls.Label> (which is a <xref:System.Windows.Controls.Control> derived class), the default value is again redefined to be `false`.</span></span>  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-515">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-515">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-516">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-516">Identifier field</span></span>|<xref:System.Windows.UIElement.FocusableProperty>|  
|<span data-ttu-id="84df3-517">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-517">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-518">無</span><span class="sxs-lookup"><span data-stu-id="84df3-518">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-519">下列範例程式碼說明特定的自訂控制項，它會設定控制項樣板<xref:System.Windows.UIElement.Focusable%2A>`false`上其中一個範本內的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-519">The following example code illustrates a control template for a particular custom control, which sets <xref:System.Windows.UIElement.Focusable%2A> `false` on one of the elements within the template.</span></span>  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-520">當衍生自<see cref="T:System.Windows.UIElement" />直接 (而不是從<see cref="T:System.Windows.Controls.Control" />)，請考慮您是否希望是可設定焦點，因為預設項目可焦點化項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-520">When deriving from <see cref="T:System.Windows.UIElement" /> directly (as opposed to from <see cref="T:System.Windows.Controls.Control" />), consider whether you wish your element to be focusable, because by default the element will not be focusable.</span></span> <span data-ttu-id="84df3-521">如果您希望您可設定焦點的項目時，覆寫此屬性類型的靜態建構函式內的中繼資料，如下所示：</span><span class="sxs-lookup"><span data-stu-id="84df3-521">If you wish your element to be focusable, override the metadata for this property within your type's static constructor as follows:</span></span> 
<span data-ttu-id="84df3-522">[!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)] [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]</span><span class="sxs-lookup"><span data-stu-id="84df3-522">[!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)] [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]</span></span> 
<span data-ttu-id="84df3-523">其中<paramref name="myElement" />應該是您會在覆寫中繼資料值類型的類別名稱。</span><span class="sxs-lookup"><span data-stu-id="84df3-523">where <paramref name="myElement" /> should be the class name of the type that you are overriding the metadata value on.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-524">發生於 <see cref="P:System.Windows.UIElement.Focusable" /> 屬性的值變更時。</span><span class="sxs-lookup"><span data-stu-id="84df3-524">Occurs when the value of the <see cref="P:System.Windows.UIElement.Focusable" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-525">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-525">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-526">識別 <see cref="P:System.Windows.UIElement.Focusable" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-526">Identifies the <see cref="P:System.Windows.UIElement.Focusable" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="uIElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="84df3-527">要檢查的相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-527">The dependency property to check.</span></span></param>
        <summary><span data-ttu-id="84df3-528">傳回這個項目上指定屬性的基底屬性值，不管任何執行中的可能動畫值，或停止動畫。</span><span class="sxs-lookup"><span data-stu-id="84df3-528">Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</span></span></summary>
        <returns><span data-ttu-id="84df3-529">屬性值，就好像指定的相依性屬性未附加任何動畫。</span><span class="sxs-lookup"><span data-stu-id="84df3-529">The property value as if no animations are attached to the specified dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-530">如果未不附加任何動畫屬性，則<xref:System.Windows.UIElement.GetAnimationBaseValue%2A>傳回值一定是相同<xref:System.Windows.DependencyObject.GetValue%2A>傳回值。</span><span class="sxs-lookup"><span data-stu-id="84df3-530">If no animations are attached to the property, then the <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value.</span></span> <span data-ttu-id="84df3-531">如果有附加的動畫，然後所有可能的動畫衍生值包括 開始和停止值會被忽略，而且屬性的值取決於所有可能的輸入。</span><span class="sxs-lookup"><span data-stu-id="84df3-531">If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</span></span> <span data-ttu-id="84df3-532">如需詳細資訊，請參閱[相依性屬性值優先順序](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-532">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-533">下列範例會報告動畫的基底值的處理常式<xref:System.Windows.FrameworkElement.Width%2A>屬性上的<xref:System.Windows.Controls.Button>，以及轉換的基底值。</span><span class="sxs-lookup"><span data-stu-id="84df3-533">The following example implements a handler that reports the base value of an animated <xref:System.Windows.FrameworkElement.Width%2A> property on a <xref:System.Windows.Controls.Button>, as well as the base value of a transform.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry&#xA;override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="uIElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize"><span data-ttu-id="84df3-534">由項目提供的可用大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-534">The available size provided by the element.</span></span></param>
        <summary><span data-ttu-id="84df3-535">如果 <see cref="P:System.Windows.UIElement.ClipToBounds" /> 設定為 <see langword="true" />，則傳回表示所要裁剪之區域的替代裁剪幾何。</span><span class="sxs-lookup"><span data-stu-id="84df3-535">Returns an alternative clipping geometry that represents the region that would be clipped if <see cref="P:System.Windows.UIElement.ClipToBounds" /> were set to <see langword="true" />.</span></span></summary>
        <returns><span data-ttu-id="84df3-536">可能的裁剪幾何。</span><span class="sxs-lookup"><span data-stu-id="84df3-536">The potential clipping geometry.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-537">預設實作會傳回合法的值，但不會使用`layoutSlotSize`其計算中的參數。</span><span class="sxs-lookup"><span data-stu-id="84df3-537">The default implementation will return a legitimate value, but does not use the `layoutSlotSize` parameter in its calculations.</span></span> <span data-ttu-id="84df3-538">它會改為使用值<xref:System.Windows.UIElement.RenderSize%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-538">Instead it uses the value of <xref:System.Windows.UIElement.RenderSize%2A>.</span></span>  
  
 <span data-ttu-id="84df3-539">本質上覆寫此方法由立即衍生<xref:System.Windows.FrameworkElement>類別，而<xref:System.Windows.FrameworkElement>覆寫會產生更複雜的行為，一般的 WPF 架構層級項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-539">This method is substantially overridden by the immediately derived <xref:System.Windows.FrameworkElement> class, and the <xref:System.Windows.FrameworkElement> override produces a more sophisticated behavior for general WPF framework-level elements.</span></span> <span data-ttu-id="84df3-540">如需詳細資訊，請參閱 <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84df3-540">For details, see <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-541">當在衍生類別中覆寫時，如果沒有視覺化父項目存在，則會為這個項目傳回替代的[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 父項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-541">When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</span></span></summary>
        <returns><span data-ttu-id="84df3-542">一個物件，如果衍生類別的實作有替代父代連接要報告。</span><span class="sxs-lookup"><span data-stu-id="84df3-542">An object, if implementation of a derived class has an alternate parent connection to report.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-543">預設虛擬實作這個方法會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="84df3-543">The default virtual implementation of this method returns `null`.</span></span> <span data-ttu-id="84df3-544"><xref:System.Windows.FrameworkElement> 提供實用的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-544"><xref:System.Windows.FrameworkElement> provides a practical implementation.</span></span>  
  
 <span data-ttu-id="84df3-545">替代的父代是用於事件的路由，在其中項目會建立替代父結構，讓它的事件會路由傳送分離至標準的父代，則視覺樹狀結構路由傳送的標準模式的方式的情況下則會在向下預覽路由策略。</span><span class="sxs-lookup"><span data-stu-id="84df3-545">Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-546">輸入系統報告其下牽涉此元素的拖放事件時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-546">Occurs when the input system reports an underlying drag-and-drop event that involves this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-547"><xref:System.Windows.UIElement.GiveFeedback>事件允許來源修改滑鼠指標外觀，以便將使用者的視覺化回饋提供拖放作業期間的拖曳事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-547">The <xref:System.Windows.UIElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span> <span data-ttu-id="84df3-548">視覺化回饋強調拖放作業正在處理中。</span><span class="sxs-lookup"><span data-stu-id="84df3-548">The visual feedback reinforces that a drag-and-drop operation is in process.</span></span>  
  
 <span data-ttu-id="84df3-549">本項目中建立的別名<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement.GiveFeedback>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-549">This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-550">附加至事件處理常式<xref:System.Windows.UIElement.GiveFeedback>事件會附加至基礎<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-550">Event handlers that are attached to the <xref:System.Windows.UIElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-551">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-551">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-552">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-552">Identifier field</span></span>|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|<span data-ttu-id="84df3-553">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-553">Routing strategy</span></span>|<span data-ttu-id="84df3-554">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-554">Bubbling</span></span>|  
|<span data-ttu-id="84df3-555">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-555">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="84df3-556">對應的通道事件是<xref:System.Windows.UIElement.PreviewGiveFeedback>。</span><span class="sxs-lookup"><span data-stu-id="84df3-556">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGiveFeedback>.</span></span>  
  
-   <span data-ttu-id="84df3-557">覆寫<xref:System.Windows.UIElement.OnGiveFeedback%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-557">Override <xref:System.Windows.UIElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-558">識別 <see cref="E:System.Windows.UIElement.GiveFeedback" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-558">Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-559">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-559">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-560">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-560">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-561">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-561">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-562">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-562">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-563">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-563">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-564">此元素取得邏輯焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-564">Occurs when this element gets logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-565">如果使用的方法呼叫刻意強制焦點，但存在於不同範圍的上一個鍵盤焦點，則邏輯焦點與鍵盤焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-565">Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="84df3-566">在此案例中，鍵盤焦點會維持其所在和項目其中<xref:System.Windows.UIElement.Focus%2A>方法呼叫仍取得邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-566">In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="84df3-567">此事件的更精確地解譯時，就是引發時間的值<xref:System.Windows.UIElement.IsFocused%2A>路由的項目屬性變更時，從`false`來`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-567">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.</span></span>  
  
 <span data-ttu-id="84df3-568">此事件會使用事件反昇的路由，因為接收焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-568">Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="84df3-569">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際取得焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-569">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-570">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-570">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-571">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-571">Identifier field</span></span>|<xref:System.Windows.UIElement.GotFocusEvent>|  
|<span data-ttu-id="84df3-572">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-572">Routing strategy</span></span>|<span data-ttu-id="84df3-573">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-573">Bubbling</span></span>|  
|<span data-ttu-id="84df3-574">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-574">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="84df3-575">沒有任何對應的通道事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-575">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="84df3-576">覆寫<xref:System.Windows.UIElement.OnGotFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-576">Override <xref:System.Windows.UIElement.OnGotFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-577">識別 <see cref="E:System.Windows.UIElement.GotFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-577">Identifies the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-578">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-578">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-579">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-579">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-580">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-580">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-581">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-581">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-582">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-582">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-583">鍵盤以此元素為焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-583">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-584"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> 是類似的事件追蹤會維護項目中; 的焦點狀態的屬性中的狀態變更<xref:System.Windows.UIElement.GotKeyboardFocus>的許多相同的情況下，就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-584"><xref:System.Windows.UIElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement.GotKeyboardFocus> event is raised in many of the same circumstances.</span></span>  
  
 <span data-ttu-id="84df3-585">此事件會使用事件反昇的路由，因為具有焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-585">Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="84df3-586">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際擁有焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-586">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="84df3-587">本項目中建立的別名<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement.GotKeyboardFocus>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-587">This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-588">附加至事件處理常式<xref:System.Windows.UIElement.GotKeyboardFocus>事件會附加至基礎<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-588">Event handlers that are attached to the <xref:System.Windows.UIElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-589">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-589">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-590">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-590">Identifier field</span></span>|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|<span data-ttu-id="84df3-591">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-591">Routing strategy</span></span>|<span data-ttu-id="84df3-592">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-592">Bubbling</span></span>|  
|<span data-ttu-id="84df3-593">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-593">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="84df3-594">對應的通道事件是<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="84df3-594">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="84df3-595">覆寫<xref:System.Windows.UIElement.OnGotKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-595">Override <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-596">識別 <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-596">Identifies the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-597">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-597">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-598">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-598">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-599">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-599">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-600">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-600">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-601">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-601">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-602">此元素擷取滑鼠時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-602">Occurs when this element captures the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-603">元素擷取滑鼠，當它收到滑鼠輸入，即使滑鼠指標位於其範圍外也一樣。</span><span class="sxs-lookup"><span data-stu-id="84df3-603">When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</span></span> <span data-ttu-id="84df3-604">滑鼠通常只會在拖放作業期間擷取，直到擷取拖放作業的拖放動作，就會發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-604">The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="84df3-605">此事件會使用事件反昇的路由，因為已擷取的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-605">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="84df3-606">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>在事件資料，以判斷實際項目具有滑鼠擷取。</span><span class="sxs-lookup"><span data-stu-id="84df3-606">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.</span></span>  
  
 <span data-ttu-id="84df3-607">本項目中建立的別名<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement.GotMouseCapture>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-607">This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event for  this class so that <xref:System.Windows.UIElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-608">附加至事件處理常式<xref:System.Windows.UIElement.GotMouseCapture>事件會附加至基礎<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-608">Event handlers that are attached to the <xref:System.Windows.UIElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-609">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-609">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-610">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-610">Identifier field</span></span>|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|<span data-ttu-id="84df3-611">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-611">Routing strategy</span></span>|<span data-ttu-id="84df3-612">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-612">Bubbling</span></span>|  
|<span data-ttu-id="84df3-613">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-613">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="84df3-614">沒有任何已定義的對應通道事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-614">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="84df3-615">覆寫<xref:System.Windows.UIElement.OnGotMouseCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-615">Override <xref:System.Windows.UIElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-616">識別 <see cref="E:System.Windows.UIElement.GotMouseCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-616">Identifies the <see cref="E:System.Windows.UIElement.GotMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-617">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-617">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-618">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-618">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-619">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-619">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-620">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-620">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-621">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-621">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-622">此元素擷取手寫筆時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-622">Occurs when this element captures the stylus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-623">元素擷取手寫筆，當它收到手寫筆輸入，即使在指標位於其範圍外也一樣。</span><span class="sxs-lookup"><span data-stu-id="84df3-623">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="84df3-624">手寫筆通常只會在拖放作業期間擷取，並且保持擷取，直到拖放作業的拖放動作發生為止。</span><span class="sxs-lookup"><span data-stu-id="84df3-624">The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="84df3-625">此事件會使用事件反昇的路由，因為已擷取的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-625">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="84df3-626">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷已擷取的實際項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-626">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.</span></span>  
  
 <span data-ttu-id="84df3-627">此事件會建立這個類別的附加事件的別名，讓<xref:System.Windows.UIElement.GotStylusCapture>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-627">This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-628">附加至事件處理常式<xref:System.Windows.UIElement.GotStylusCapture>事件會附加至基礎<xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-628">Event handlers that are attached to the <xref:System.Windows.UIElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-629">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-629">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-630">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-630">Identifier field</span></span>|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|<span data-ttu-id="84df3-631">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-631">Routing strategy</span></span>|<span data-ttu-id="84df3-632">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-632">Bubbling</span></span>|  
|<span data-ttu-id="84df3-633">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-633">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-634">沒有任何已定義的對應通道事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-634">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="84df3-635">覆寫<xref:System.Windows.UIElement.OnGotStylusCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-635">Override <xref:System.Windows.UIElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-636">識別 <see cref="E:System.Windows.UIElement.GotStylusCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-636">Identifies the <see cref="E:System.Windows.UIElement.GotStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-637">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-637">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-638">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-638">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-639">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-639">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-640">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-640">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-641">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-641">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-642">當觸控擷取至這個項目時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-642">Occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-643">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-643">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-644">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-644">Identifier field</span></span>|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|<span data-ttu-id="84df3-645">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-645">Routing strategy</span></span>|<span data-ttu-id="84df3-646">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-646">Bubbling</span></span>|  
|<span data-ttu-id="84df3-647">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-647">Delegate</span></span>|<span data-ttu-id="84df3-648">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-648"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="84df3-649">覆寫<xref:System.Windows.UIElement.OnGotTouchCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-649">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-650">識別 <see cref="E:System.Windows.UIElement.GotTouchCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-650">Identifies the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.UIElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-651">取得值，這個值表示此項目是否有任何動畫屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-651">Gets a value indicating whether this element has any animated properties.</span></span></summary>
        <value><span data-ttu-id="84df3-652">如果這個項目有附加至其任一屬性的動畫則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-652"><see langword="true" /> if this element has animations attached to any of its properties; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-653">這個屬性會傳回`true`持續性 （unclocked，一律執行） 的動畫，或有特定的時間軸的動畫。</span><span class="sxs-lookup"><span data-stu-id="84df3-653">This property returns `true` either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasEffectiveKeyboardFocus : bool" Usage="System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-654">取得值，指出 <see cref="T:System.Windows.UIElement" /> 是否具有焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-654">Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> has focus.</span></span></summary>
        <value><span data-ttu-id="84df3-655">如果 <see cref="T:System.Windows.UIElement" /> 具有焦點，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-655"><see langword="true" /> if the <see cref="T:System.Windows.UIElement" /> has focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-656">子類別可以覆寫這個屬性來指定項目有鍵盤焦點時。</span><span class="sxs-lookup"><span data-stu-id="84df3-656">Subclasses can override this property to specify when the element has keyboard focus.</span></span>  <span data-ttu-id="84df3-657">這很有用，當您<xref:System.Windows.UIElement>包含可以有鍵盤焦點的項目和您希望它具有焦點的報表項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-657">This is useful when your <xref:System.Windows.UIElement> contains elements that can have keyboard focus and you want your element to report that it has focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="84df3-658">實作 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> 以提供基底項目點擊測試行為。</span><span class="sxs-lookup"><span data-stu-id="84df3-658">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.GeometryHitTestParameters -&gt; System.Windows.Media.GeometryHitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters"><span data-ttu-id="84df3-659">描述要執行的點擊測試，包括初始點擊點。</span><span class="sxs-lookup"><span data-stu-id="84df3-659">Describes the hit test to perform, including the initial hit point.</span></span></param>
        <summary><span data-ttu-id="84df3-660">實作 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />以提供基底項目點擊測試行為 (傳回 <see cref="T:System.Windows.Media.GeometryHitTestResult" />)。</span><span class="sxs-lookup"><span data-stu-id="84df3-660">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</span></span></summary>
        <returns><span data-ttu-id="84df3-661">測試的結果，包括已評估的幾何。</span><span class="sxs-lookup"><span data-stu-id="84df3-661">Results of the test, including the evaluated geometry.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-662">請參閱原始虛擬方法<xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType>有關進一步覆寫這個方法在衍生類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-662">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="84df3-663">請注意，數個特定的控制項 (<xref:System.Windows.Controls.TextBlock>，例如) 有不同的實作，覆寫它。</span><span class="sxs-lookup"><span data-stu-id="84df3-663">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override this one.</span></span>  
  
 <span data-ttu-id="84df3-664">這個方法不是從您的應用程式程式碼呼叫。</span><span class="sxs-lookup"><span data-stu-id="84df3-664">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="84df3-665">這個方法支援 （不論項目，例如滑鼠指標位於），由輸入系統的各個層面的內部點擊測試行為。</span><span class="sxs-lookup"><span data-stu-id="84df3-665">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.PointHitTestParameters -&gt; System.Windows.Media.HitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters"><span data-ttu-id="84df3-666">描述要執行的點擊測試，包括初始點擊點。</span><span class="sxs-lookup"><span data-stu-id="84df3-666">Describes the hit test to perform, including the initial hit point.</span></span></param>
        <summary><span data-ttu-id="84df3-667">實作 <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" />以提供基底項目點擊測試行為 (傳回 <see cref="T:System.Windows.Media.HitTestResult" />)。</span><span class="sxs-lookup"><span data-stu-id="84df3-667">Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />).</span></span></summary>
        <returns><span data-ttu-id="84df3-668">測試結果，包括受評估的點。</span><span class="sxs-lookup"><span data-stu-id="84df3-668">Results of the test, including the evaluated point.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-669">請參閱原始虛擬方法<xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType>有關進一步覆寫這個方法在衍生類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-669">See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> for information on overriding this method in further derived classes.</span></span> <span data-ttu-id="84df3-670">請注意，數個特定的控制項 (<xref:System.Windows.Controls.TextBlock>，例如) 有不同的實作，覆寫<xref:System.Windows.UIElement.HitTestCore%2A>所定義<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-670">Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override <xref:System.Windows.UIElement.HitTestCore%2A> as defined by <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-671">這個方法不是從您的應用程式程式碼呼叫。</span><span class="sxs-lookup"><span data-stu-id="84df3-671">This method is not intended to be called from your application code.</span></span> <span data-ttu-id="84df3-672">這個方法支援 （不論項目，例如滑鼠指標位於），由輸入系統的各個層面的內部點擊測試行為。</span><span class="sxs-lookup"><span data-stu-id="84df3-672">This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-673">取得與此元素關聯的輸入繫結集合。</span><span class="sxs-lookup"><span data-stu-id="84df3-673">Gets the collection of input bindings associated with this element.</span></span></summary>
        <value><span data-ttu-id="84df3-674">輸入繫結的集合。</span><span class="sxs-lookup"><span data-stu-id="84df3-674">The collection of input bindings.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-675">輸入繫結支援命令與輸入裝置繫的結。</span><span class="sxs-lookup"><span data-stu-id="84df3-675">Input bindings support the binding of commands to input devices.</span></span> <span data-ttu-id="84df3-676">比方說，<xref:System.Windows.Input.MouseBinding>實作輸入繫結包含滑鼠裝置特定的屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-676">For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.</span></span>  
  
 <span data-ttu-id="84df3-677">輸入繫結的集合會包含屬於此類型的輸入繫結以及宣告執行個體的輸入繫結。</span><span class="sxs-lookup"><span data-stu-id="84df3-677">The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</span></span>  
  
 <span data-ttu-id="84df3-678">相關的屬性， <xref:System.Windows.UIElement.CommandBindings%2A>，維護命令繫結的集合。</span><span class="sxs-lookup"><span data-stu-id="84df3-678">A related property, <xref:System.Windows.UIElement.CommandBindings%2A>, maintains a collection of command bindings.</span></span> <span data-ttu-id="84df3-679">這些不同於輸入繫結，因為它們代表的下一個層級的命令處理動作繫結至已知的命令所示。</span><span class="sxs-lookup"><span data-stu-id="84df3-679">These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</span></span>  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="84df3-680">XAML 屬性項目用法</span><span class="sxs-lookup"><span data-stu-id="84df3-680">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="84df3-681">XAML 值</span><span class="sxs-lookup"><span data-stu-id="84df3-681">XAML Values</span></span>  
 <span data-ttu-id="84df3-682">*oneOrMoreInputBindings*</span><span class="sxs-lookup"><span data-stu-id="84df3-682">*oneOrMoreInputBindings*</span></span>  
 <span data-ttu-id="84df3-683">一或多個<xref:System.Windows.Input.InputBinding>項目 (通常<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>衍生的類別)。</span><span class="sxs-lookup"><span data-stu-id="84df3-683">One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes).</span></span> <span data-ttu-id="84df3-684">每一種應該要有<xref:System.Windows.Input.InputBinding.Command%2A>和<xref:System.Windows.Input.InputBinding.Gesture%2A>屬性設定。</span><span class="sxs-lookup"><span data-stu-id="84df3-684">Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-685">下列範例會填入這個屬性上<xref:System.Windows.Window>，以單一<xref:System.Windows.Input.KeyBinding>。</span><span class="sxs-lookup"><span data-stu-id="84df3-685">The following example populates this property on a <xref:System.Windows.Window>, with a single <xref:System.Windows.Input.KeyBinding>.</span></span>  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="84df3-686">如需詳細資訊[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]語法的集合，請參閱[XAML 語法詳細資料](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-686">For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.InputHitTest : System.Windows.Point -&gt; System.Windows.IInputElement" Usage="uIElement.InputHitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="84df3-687">這個項目內的位移 (Offset) 座標。</span><span class="sxs-lookup"><span data-stu-id="84df3-687">The offset coordinates within this element.</span></span></param>
        <summary><span data-ttu-id="84df3-688">在目前項目範圍中傳回的輸入項目，輸入項目位在相對於目前項目原點的指定座標。</span><span class="sxs-lookup"><span data-stu-id="84df3-688">Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.</span></span></summary>
        <returns><span data-ttu-id="84df3-689">位在指定位置的項目子系。</span><span class="sxs-lookup"><span data-stu-id="84df3-689">The element child that is located at the given position.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-690"><xref:System.Windows.IInputElement> 因為該型別是兩者的通用介面，會將傳回的型別，以傳回<xref:System.Windows.UIElement>和<xref:System.Windows.ContentElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-690"><xref:System.Windows.IInputElement> is returned as the return type, because that type is a common interface for both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>.</span></span> <span data-ttu-id="84df3-691">您可以再適當地轉型傳回型別或用於特定成員所定義的介面執行個體<xref:System.Windows.IInputElement>介面。</span><span class="sxs-lookup"><span data-stu-id="84df3-691">You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <xref:System.Windows.IInputElement> interface.</span></span>  
  
 <span data-ttu-id="84df3-692">呼叫這個方法通常是未從您的應用程式程式碼。</span><span class="sxs-lookup"><span data-stu-id="84df3-692">This method typically is not called from your application code.</span></span> <span data-ttu-id="84df3-693">呼叫這個方法才適用，如果您想要重新實作大量的低層級的輸入功能已存在，例如重新建立滑鼠裝置的邏輯。</span><span class="sxs-lookup"><span data-stu-id="84df3-693">Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.</span></span>  
  
 <span data-ttu-id="84df3-694"><xref:System.Windows.IContentHost> 合約<xref:System.Windows.IContentHost.InputHitTest%2A>具有相同的簽章，某些項目選擇明確實作的方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-694"><xref:System.Windows.IContentHost> contracts an <xref:System.Windows.IContentHost.InputHitTest%2A> method with the same signature, which some elements choose to implement explicitly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberSignature Language="F#" Value="member this.InvalidateArrange : unit -&gt; unit" Usage="uIElement.InvalidateArrange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-695">使項目的排列狀態 (配置) 失效。</span><span class="sxs-lookup"><span data-stu-id="84df3-695">Invalidates the arrange state (layout) for the element.</span></span> <span data-ttu-id="84df3-696">失效之後，項目將更新其配置，而且，除非之後由 <see cref="M:System.Windows.UIElement.UpdateLayout" /> 強制執行，否則這項作業會以非同步方式發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-696">After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <see cref="M:System.Windows.UIElement.UpdateLayout" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-697">經常呼叫<xref:System.Windows.UIElement.InvalidateArrange%2A>或在特定<xref:System.Windows.UIElement.UpdateLayout%2A>有顯著的效能結果。</span><span class="sxs-lookup"><span data-stu-id="84df3-697">Frequent calls to <xref:System.Windows.UIElement.InvalidateArrange%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="84df3-698">因此，除非您絕對需要精確的配置狀態的其他後續呼叫，呼叫這個方法來避免[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]程式碼中。</span><span class="sxs-lookup"><span data-stu-id="84df3-698">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.</span></span> <span data-ttu-id="84df3-699">進階的案例中，您可能會呼叫<xref:System.Windows.UIElement.InvalidateArrange%2A>是如果您要建立<xref:System.Windows.PropertyChangedCallback>相依性屬性不是在<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>衍生類別，可變更時，仍會影響版面配置的排列傳遞。</span><span class="sxs-lookup"><span data-stu-id="84df3-699">An advanced scenario where you might call <xref:System.Windows.UIElement.InvalidateArrange%2A> is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the arrange pass of layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberSignature Language="F#" Value="member this.InvalidateMeasure : unit -&gt; unit" Usage="uIElement.InvalidateMeasure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-700">使項目的測量狀態 (配置) 失效。</span><span class="sxs-lookup"><span data-stu-id="84df3-700">Invalidates the measurement state (layout) for the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-701">呼叫這個方法也呼叫<xref:System.Windows.UIElement.InvalidateArrange%2A>就內部而言，就不需要呼叫<xref:System.Windows.UIElement.InvalidateMeasure%2A>和<xref:System.Windows.UIElement.InvalidateArrange%2A>連續。</span><span class="sxs-lookup"><span data-stu-id="84df3-701">Calling this method also calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally, there is no need to call <xref:System.Windows.UIElement.InvalidateMeasure%2A> and <xref:System.Windows.UIElement.InvalidateArrange%2A> in succession.</span></span> <span data-ttu-id="84df3-702">失效之後的項目會有更新，這會以非同步的方式，除非其配置<xref:System.Windows.UIElement.UpdateLayout%2A>呼叫以強制變更同步的配置。</span><span class="sxs-lookup"><span data-stu-id="84df3-702">After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <xref:System.Windows.UIElement.UpdateLayout%2A> is called to force a synchronous layout change.</span></span>  
  
 <span data-ttu-id="84df3-703">WPF 架構層級配置系統會執行它自己的處理項目的視覺化樹狀結構中的變更，並在最常見的版面配置失效的情況下版面配置系統會呼叫這個方法時所需的對應項。</span><span class="sxs-lookup"><span data-stu-id="84df3-703">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary.</span></span> <span data-ttu-id="84df3-704">如果您要產生完整的版面配置實作，可直接操作或類似的項目樹狀目錄中，進階的案例，才應該呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-704">You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios.</span></span> <span data-ttu-id="84df3-705">這類進階的案例之一是如果您要建立<xref:System.Windows.PropertyChangedCallback>不在相依性屬性<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>衍生類別，可變更時，仍會影響版面配置的測量傳遞。</span><span class="sxs-lookup"><span data-stu-id="84df3-705">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the measure pass of layout when it changes.</span></span>  
  
 <span data-ttu-id="84df3-706">經常呼叫<xref:System.Windows.UIElement.InvalidateMeasure%2A>或在特定<xref:System.Windows.UIElement.UpdateLayout%2A>有顯著的效能結果。</span><span class="sxs-lookup"><span data-stu-id="84df3-706">Frequent calls to <xref:System.Windows.UIElement.InvalidateMeasure%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences.</span></span> <span data-ttu-id="84df3-707">因此，除非您絕對需要精確的配置狀態的其他後續呼叫，呼叫這個方法來避免[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]程式碼中。</span><span class="sxs-lookup"><span data-stu-id="84df3-707">Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberSignature Language="F#" Value="member this.InvalidateVisual : unit -&gt; unit" Usage="uIElement.InvalidateVisual " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-708">讓項目的呈現失效，並強制全新的配置傳遞。</span><span class="sxs-lookup"><span data-stu-id="84df3-708">Invalidates the rendering of the element, and forces a complete new layout pass.</span></span> <span data-ttu-id="84df3-709">完成配置循環之後，會呼叫 <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-709"><see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> is called after the layout cycle is completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-710">這個方法會呼叫<xref:System.Windows.UIElement.InvalidateArrange%2A>內部。</span><span class="sxs-lookup"><span data-stu-id="84df3-710">This method calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally.</span></span>  
  
 <span data-ttu-id="84df3-711">從您的應用程式程式碼不通常呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-711">This method is not generally called from your application code.</span></span> <span data-ttu-id="84df3-712">WPF 架構層級配置系統它自己的變更項目的視覺化樹狀結構中的處理作業，並會呼叫這個方法時所需的對等項目已經。</span><span class="sxs-lookup"><span data-stu-id="84df3-712">The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already.</span></span> <span data-ttu-id="84df3-713">呼叫這個方法就只需要進階的案例。</span><span class="sxs-lookup"><span data-stu-id="84df3-713">Calling this method is necessary only for advanced scenarios.</span></span> <span data-ttu-id="84df3-714">這類進階的案例之一是如果您要建立<xref:System.Windows.PropertyChangedCallback>不在相依性屬性<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>衍生的變更時，仍會影響版面配置的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-714">One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the layout when it changes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArrangeValid : bool" Usage="System.Windows.UIElement.IsArrangeValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-715">取得值，這個值表示在此項目之配置中子項目的計算大小和位置是有效的。</span><span class="sxs-lookup"><span data-stu-id="84df3-715">Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.</span></span></summary>
        <value><span data-ttu-id="84df3-716">如果配置的大小和位置有效則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-716"><see langword="true" /> if the size and position of layout are valid; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-717">您可以強制透過呼叫是即將失效的排列方式<xref:System.Windows.UIElement.InvalidateArrange%2A>這個項目 （或其父代）。</span><span class="sxs-lookup"><span data-stu-id="84df3-717">You can force arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateArrange%2A> on this element (or its parents).</span></span> <span data-ttu-id="84df3-718">At 次例如版面配置系統決定，這會標幟重新撰寫的配置。</span><span class="sxs-lookup"><span data-stu-id="84df3-718">This flags the layout for recomposition at such time as the layout system determines.</span></span> <span data-ttu-id="84df3-719">或者，若要立即呼叫<xref:System.Windows.UIElement.UpdateLayout%2A>無法進行，但這應該只完成當確定任何進一步的失效是暫止 （大量不必要地強制更新會影響效能）。</span><span class="sxs-lookup"><span data-stu-id="84df3-719">Alternatively, an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).</span></span>  
  
 <span data-ttu-id="84df3-720"><xref:System.Windows.UIElement.IsArrangeValid%2A> 不能`true`除非<xref:System.Windows.UIElement.IsMeasureValid%2A>還有`true`（版面配置處理序中的排列方式不能有效而不需要先在 有效的度量單位）。</span><span class="sxs-lookup"><span data-stu-id="84df3-720"><xref:System.Windows.UIElement.IsArrangeValid%2A> cannot be `true` unless <xref:System.Windows.UIElement.IsMeasureValid%2A> is also `true` (in the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-721">取得或設定值，這個值表示 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中是否已啟用這個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-721">Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  <span data-ttu-id="84df3-722">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-722">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-723">如果已啟用該項目則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-723"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-724">預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-724">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-725">請注意這個屬性會受到特定類別的實作<xref:System.Windows.UIElement.IsEnabledCore%2A>上特定的項目，通常在執行階段。</span><span class="sxs-lookup"><span data-stu-id="84df3-725">Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement.IsEnabledCore%2A> on particular elements, often at runtime.</span></span> <span data-ttu-id="84df3-726">因此，此處所列的預設值有時不是有效。</span><span class="sxs-lookup"><span data-stu-id="84df3-726">Therefore, the default value listed here is sometimes not effective.</span></span> <span data-ttu-id="84df3-727">比方說，<xref:System.Windows.Controls.Primitives.ScrollBar>將會<xref:System.Windows.UIElement.IsEnabled%2A>`false`只要確定沒有不需要支援捲軸。</span><span class="sxs-lookup"><span data-stu-id="84df3-727">For instance, a <xref:System.Windows.Controls.Primitives.ScrollBar> will be <xref:System.Windows.UIElement.IsEnabled%2A> `false` whenever it is determined that there is no need to support a scrollbar.</span></span> <span data-ttu-id="84df3-728">嘗試設定這個值會也可能會覆寫所傳回的值<xref:System.Windows.UIElement.IsEnabledCore%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-728">Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement.IsEnabledCore%2A>.</span></span>  
  
 <span data-ttu-id="84df3-729">未啟用的項目不會參與點擊測試或焦點，因此不可能會輸入事件的來源。</span><span class="sxs-lookup"><span data-stu-id="84df3-729">Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</span></span>  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-730">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-730">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-731">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-731">Identifier field</span></span>|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|<span data-ttu-id="84df3-732">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-732">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-733">無</span><span class="sxs-lookup"><span data-stu-id="84df3-733">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-734">下列範例顯示處理常式上一個 按鈕時執行將會設定<xref:System.Windows.UIElement.IsEnabled%2A>`false`另一個具名的按鈕上`b1`。</span><span class="sxs-lookup"><span data-stu-id="84df3-734">The following example shows a handler on one button that when executed will set <xref:System.Windows.UIElement.IsEnabled%2A> `false` on another named button `b1`.</span></span>  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-735">當這個項目的 <see cref="P:System.Windows.UIElement.IsEnabled" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-735">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsEnabled" /> property on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-736">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-736">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-737">取得值，這個值會成為衍生類別中 <see cref="P:System.Windows.UIElement.IsEnabled" /> 的傳回值。</span><span class="sxs-lookup"><span data-stu-id="84df3-737">Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement.IsEnabled" /> in derived classes.</span></span></summary>
        <value><span data-ttu-id="84df3-738">如果已啟用該項目則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-738"><see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-739">這個屬性的預設實作會快取的值，並也會計算這個項目的父項目是否已啟用。</span><span class="sxs-lookup"><span data-stu-id="84df3-739">The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled.</span></span> <span data-ttu-id="84df3-740">(如果未啟用父代，不能在實際有效地啟用的子項目[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]。)如果您選擇覆寫這個實作，請確定您呼叫以保留此行為的基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-740">(If the parent is not enabled, the child element cannot be effectively enabled in practical [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</span></span>  
  
<span data-ttu-id="84df3-741"><see cref="T:System.Windows.Controls.Primitives.ScrollBar" />類別會提供這個屬性的現有覆寫實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-741">The <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> class provides an existing override implementation of this property.</span></span> <span data-ttu-id="84df3-742">此覆寫會決定內容的呈現區域內的內容是否超過可用的區域。</span><span class="sxs-lookup"><span data-stu-id="84df3-742">This override determines whether the content inside the content presentation area exceeds the available area.</span></span> <span data-ttu-id="84df3-743">如果內容未超出區域，已啟用捲軸的部分。</span><span class="sxs-lookup"><span data-stu-id="84df3-743">If the content does exceed the area, the scrollbar portion is enabled.</span></span> <span data-ttu-id="84df3-744">否則，不會啟用捲軸。</span><span class="sxs-lookup"><span data-stu-id="84df3-744">Otherwise, the scrollbar is not enabled.</span></span></para></block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-745">識別 <see cref="P:System.Windows.UIElement.IsEnabled" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-745">Identifies the <see cref="P:System.Windows.UIElement.IsEnabled" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-746">取得值，決定這個項目是否具有邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-746">Gets a value that determines whether this element has logical focus.</span></span>  <span data-ttu-id="84df3-747">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-747">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-748">如果這個項目具有邏輯焦點，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-748"><see langword="true" /> if this element has logical focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-749">如果某個應用程式多個焦點分區，例如功能表內容和應用程式的其餘部分之間，可能會與鍵盤焦點不同邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-749">Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</span></span> <span data-ttu-id="84df3-750">在此案例中，鍵盤焦點都只能有一個應用程式的 UI 項目上，不過，其他焦點分割中的特定項目可能仍會保有邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-750">In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</span></span> <span data-ttu-id="84df3-751">如需有關邏輯焦點的詳細資訊，請參閱 <<c0> [ 焦點概觀](~/docs/framework/wpf/advanced/focus-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-751">For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="84df3-752">您未設定這個屬性 （它是唯讀） 設定焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-752">You do not set focus by setting this property (it is read-only).</span></span> <span data-ttu-id="84df3-753">這個屬性的一般用法是做為相依性屬性<xref:System.Windows.Setter>或<xref:System.Windows.EventTrigger>。</span><span class="sxs-lookup"><span data-stu-id="84df3-753">The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>.</span></span> <span data-ttu-id="84df3-754">若要以程式設計方式設定焦點，呼叫<xref:System.Windows.UIElement.Focus%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-754">To set focus programmatically, call <xref:System.Windows.UIElement.Focus%2A>.</span></span> <span data-ttu-id="84df3-755">由使用者動作或控制項實作，可能會包含滑鼠捕捉的行為，也可以設定焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-755">Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</span></span>  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-756">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-756">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-757">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-757">Identifier field</span></span>|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|<span data-ttu-id="84df3-758">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-758">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-759">無</span><span class="sxs-lookup"><span data-stu-id="84df3-759">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-760">下列範例會變更控制項的背景，當它為焦點時的程式碼處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-760">The following example is a code handler that changes the background of a control when it is focused.</span></span>  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 <span data-ttu-id="84df3-761">若要達成此相同的效果的另一個常見方法是將放<xref:System.Windows.Trigger>在<xref:System.Windows.Style>控制項之這種方法不需要處理程式碼後置的特定事件，而且可讓設計工具的互動式和圖形化性質更大的存取[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="84df3-761">Another common way to achieve this same effect is to place a <xref:System.Windows.Trigger> in the <xref:System.Windows.Style> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="84df3-762">如需範例，請參閱[如何：建立外光暈效果](https://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)。</span><span class="sxs-lookup"><span data-stu-id="84df3-762">For an example, see [How to: Create an Outer Glow Effect](https://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-763">識別 <see cref="P:System.Windows.UIElement.IsFocused" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-763">Identifies the <see cref="P:System.Windows.UIElement.IsFocused" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-764">取得或設定宣告此元素是否可以從其呈現內容的某些部分傳回，作為點擊測試結果的值。</span><span class="sxs-lookup"><span data-stu-id="84df3-764">Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</span></span> <span data-ttu-id="84df3-765">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-765">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-766">如果無法從至少一個點將這個項目作為點擊測試結果傳回，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-766"><see langword="true" /> if this element could be returned as a hit test result from at least one point; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-767">預設值為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-767">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-768">點擊測試的項目邏輯樹狀結構中的相對位置會影響這個屬性的有效值。</span><span class="sxs-lookup"><span data-stu-id="84df3-768">The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</span></span> <span data-ttu-id="84df3-769">比方說，如果某個元素的子元素的項目，不進行點擊測試顯示，有效子系上的屬性值將會維持`false`，即使試圖將該值設為在本機。</span><span class="sxs-lookup"><span data-stu-id="84df3-769">For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally.</span></span> <span data-ttu-id="84df3-770">基於這個理由，是很重要，您未設定<xref:System.Windows.UIElement.IsHitTestVisible%2A>至`false`複合控制項上，除非您不想要的任何輸入或點擊測試的控制項。</span><span class="sxs-lookup"><span data-stu-id="84df3-770">For this reason, it is important that you do not set <xref:System.Windows.UIElement.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control.</span></span> <span data-ttu-id="84df3-771">如需點擊測試的詳細資訊，請參閱[視覺分層中的點擊測試](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-771">For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-772">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-772">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-773">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-773">Identifier field</span></span>|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|<span data-ttu-id="84df3-774">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-774">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-775">無</span><span class="sxs-lookup"><span data-stu-id="84df3-775">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-776">當這個項目的 <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 相依性屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-776">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-777">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-777">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-778">識別 <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-778">Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-779">取得值，指出輸入法系統 (例如 [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]) 是否已為處理這個項目的輸入而啟用。</span><span class="sxs-lookup"><span data-stu-id="84df3-779">Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.</span></span></summary>
        <value><span data-ttu-id="84df3-780">如果輸入法為使用中，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-780"><see langword="true" /> if an input method is active; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-781">基礎附加屬性的預設值為 <see langword="true;" />，不過這會受到輸入法在執行階段的實際狀態所影響。</span><span class="sxs-lookup"><span data-stu-id="84df3-781">The default value of the underlying attached property is <see langword="true;" /> however, this will be influenced by the actual state of input methods at runtime.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-782">這個屬性會傳回值，該附加屬性由<xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType>針對目前已啟用輸入法 （鍵盤、 語音和其他輸入的裝置）。</span><span class="sxs-lookup"><span data-stu-id="84df3-782">This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> for the currently enabled input methods (keyboard, speech, and other input devices).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-783">取得值，指出這個項目是否具有鍵盤焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-783">Gets a value indicating whether this element has keyboard focus.</span></span>  <span data-ttu-id="84df3-784">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-784">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-785">如果這個項目具有鍵盤焦點，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-785"><see langword="true" /> if this element has keyboard focus; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-786">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-786">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-787">決定的值，這個屬性的變更可能會伴隨著焦點相關的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-787">Changes to the determined value of this property may be accompanied by focus-related events.</span></span>  
  
 <span data-ttu-id="84df3-788"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> 和<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>常用類別事件處理常式內的其他輸入相關的事件，例如來判斷項目已經有鍵盤焦點，還是要決定當滑鼠事件和鍵盤事件一起出現。</span><span class="sxs-lookup"><span data-stu-id="84df3-788"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-789">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-789">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-790">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-790">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|<span data-ttu-id="84df3-791">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-791">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-792">無</span><span class="sxs-lookup"><span data-stu-id="84df3-792">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-793">當這個項目的 <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-793">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-794">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-794">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-795">識別 <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-795">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-796">取得值，表示鍵盤焦點是否在項目或其視覺化樹狀結構子項目內的任何位置。</span><span class="sxs-lookup"><span data-stu-id="84df3-796">Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</span></span>  <span data-ttu-id="84df3-797">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-797">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-798">如果鍵盤焦點在項目或其子項目上，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-798"><see langword="true" /> if keyboard focus is on the element or its child elements; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-799">這個屬性值的變更通常會引發<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>事件，除非在衍生的類別已覆寫<xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A>隱藏的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-799">Changes to the value of this property typically raise the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.</span></span>  
  
 <span data-ttu-id="84df3-800">您未設定此屬性直接，但您也可以呼叫的項目設定焦點<xref:System.Windows.UIElement.Focus%2A>，或藉由<xref:System.Windows.UIElement.MoveFocus%2A>要求。</span><span class="sxs-lookup"><span data-stu-id="84df3-800">You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement.Focus%2A>, or by making a <xref:System.Windows.UIElement.MoveFocus%2A> request.</span></span> <span data-ttu-id="84df3-801">這些方法會呼叫其中一種方法可能會變更這個屬性值。</span><span class="sxs-lookup"><span data-stu-id="84df3-801">Either of these method calls might change this property value.</span></span>  
  
 <span data-ttu-id="84df3-802"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> 和<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>通常用於類別事件處理常式內其他輸入相關的事件，例如來判斷項目已經有鍵盤焦點，還是要決定當滑鼠事件和鍵盤事件一起出現。</span><span class="sxs-lookup"><span data-stu-id="84df3-802"><xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-803">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-803">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-804">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-804">Identifier field</span></span>|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|<span data-ttu-id="84df3-805">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-805">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-806">無</span><span class="sxs-lookup"><span data-stu-id="84df3-806">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-807">當這個項目的 <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-807">Occurs when the value of the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-808">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-808">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-809">識別 <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-809">Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsManipulationEnabled : bool with get, set" Usage="System.Windows.UIElement.IsManipulationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-810">取得或設定值，這個值表示是否在此 <see cref="T:System.Windows.UIElement" /> 上啟用操作事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-810">Gets or sets a value that indicates whether manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />.</span></span></summary>
        <value><span data-ttu-id="84df3-811">如果在這個 <see cref="T:System.Windows.UIElement" /> 上啟用操作事件則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-811"><see langword="true" /> if manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-812">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-812">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-813">設定此屬性設定為 true，如果您想<xref:System.Windows.UIElement>接收<xref:System.Windows.UIElement.ManipulationStarting>， <xref:System.Windows.UIElement.ManipulationStarted>， <xref:System.Windows.UIElement.ManipulationDelta>， <xref:System.Windows.UIElement.ManipulationInertiaStarting>， <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>，和<xref:System.Windows.UIElement.ManipulationCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-813">Set this property to true if you want the <xref:System.Windows.UIElement> to receive the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, and <xref:System.Windows.UIElement.ManipulationCompleted> events.</span></span> <span data-ttu-id="84df3-814">如需有關操作的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-814">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="84df3-815">如需回應操作的應用程式的範例，請參閱[逐步解說：建立您的第一個觸控應用程式](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-815">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-816">下列範例會建立具有以紅色矩形的應用程式。</span><span class="sxs-lookup"><span data-stu-id="84df3-816">The following example creates an application that has a red Rectangle.</span></span>  <span data-ttu-id="84df3-817"><xref:System.Windows.UIElement.IsManipulationEnabled%2A>矩形的屬性設定為 true，且應用程式的視窗訂閱<xref:System.Windows.UIElement.ManipulationStarting>， <xref:System.Windows.UIElement.ManipulationDelta>，和<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-817">The <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property of the Rectangle is set to true and the application's window subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events.</span></span> <span data-ttu-id="84df3-818">這個範例是在較大範例的一部分[逐步解說：建立您的第一個觸控應用程式](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-818">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsManipulationEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-819">識別 <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-819">Identifies the <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMeasureValid : bool" Usage="System.Windows.UIElement.IsMeasureValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-820">取得值，這個值表示配置測量所傳回的目前大小是否有效。</span><span class="sxs-lookup"><span data-stu-id="84df3-820">Gets a value indicating whether the current size returned by layout measure is valid.</span></span></summary>
        <value><span data-ttu-id="84df3-821">如果配置的測量傳遞傳回有效的目前值則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-821"><see langword="true" /> if the measure pass of layout returned a valid and current value; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-822">您可以強制測量和排列方式是藉由呼叫即將失效<xref:System.Windows.UIElement.InvalidateMeasure%2A>這個項目 （或在視覺樹狀結構的任何父項目）。</span><span class="sxs-lookup"><span data-stu-id="84df3-822">You can force measurement and arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateMeasure%2A> on this element (or any parent element up the visual tree).</span></span> <span data-ttu-id="84df3-823">這會指定配置重新撰寫以非同步的方式，取決於配置系統一次發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-823">This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system.</span></span> <span data-ttu-id="84df3-824">或者，您可以在這裡進行的立即呼叫<xref:System.Windows.UIElement.UpdateLayout%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-824">Alternatively, you could make an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A>.</span></span> <span data-ttu-id="84df3-825">不過，您應該只呼叫<xref:System.Windows.UIElement.UpdateLayout%2A>如果很可能沒有進一步的失效是暫止 （大量不必要地強制更新會有影響效能）。</span><span class="sxs-lookup"><span data-stu-id="84df3-825">However, you should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).</span></span>  
  
 <span data-ttu-id="84df3-826">如果<xref:System.Windows.UIElement.IsMeasureValid%2A>已`false`，<xref:System.Windows.UIElement.IsArrangeValid%2A>也必須是`false`（版面配置程序，強制執行邏輯，排列方式不能有效而不需要先在 有效的度量單位）。</span><span class="sxs-lookup"><span data-stu-id="84df3-826">If <xref:System.Windows.UIElement.IsMeasureValid%2A> is `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> must also be `false` (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-827">取得值，指出是否將滑鼠擷取至這個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-827">Gets a value indicating whether the mouse is captured to this element.</span></span>  <span data-ttu-id="84df3-828">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-828">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-829">如果項目具有滑鼠擷取，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-829"><see langword="true" /> if the element has mouse capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-830">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-830">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-831">滑鼠捕捉狀態與相關程序中的拖放作業。</span><span class="sxs-lookup"><span data-stu-id="84df3-831">Mouse capture state is related to in-process drag-and-drop operations.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-832">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-832">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-833">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-833">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|<span data-ttu-id="84df3-834">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-834">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-835">無</span><span class="sxs-lookup"><span data-stu-id="84df3-835">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-836">下列範例會根據是否已捕捉滑鼠的項目，開啟或關閉滑鼠捕捉狀態。</span><span class="sxs-lookup"><span data-stu-id="84df3-836">The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.</span></span>  
  
 <span data-ttu-id="84df3-837">如果滑鼠捕捉是其他位置、 滑鼠捕捉設定為該元素。</span><span class="sxs-lookup"><span data-stu-id="84df3-837">If mouse capture is elsewhere, the mouse capture is set to that element.</span></span> <span data-ttu-id="84df3-838">如果項目具有滑鼠捕捉時，會藉由呼叫中清除<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType>null 輸入。</span><span class="sxs-lookup"><span data-stu-id="84df3-838">If the element had mouse capture, it is cleared by calling <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with a null input.</span></span>  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-839">當這個項目的 <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-839">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-840">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-840">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-841">識別 <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-841">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-842">取得值，這個值決定滑鼠擷取是由這個項目持有，還是由其視覺化樹狀中的子項目持有。</span><span class="sxs-lookup"><span data-stu-id="84df3-842">Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</span></span> <span data-ttu-id="84df3-843">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-843">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-844">如果這個項目或包含的項目具有滑鼠擷取，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-844"><see langword="true" /> if this element or a contained element has mouse capture; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-845">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-845">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-846">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-846">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|<span data-ttu-id="84df3-847">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-847">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-848">無</span><span class="sxs-lookup"><span data-stu-id="84df3-848">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-849">當這個項目的 <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> 值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-849">Occurs when the value of the <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-850">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-850">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-851">識別 <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-851">Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-852">取得值，指出滑鼠指標位置是否與點擊測試結果對應，該結果會將複合項目納入考量。</span><span class="sxs-lookup"><span data-stu-id="84df3-852">Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</span></span>  <span data-ttu-id="84df3-853">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-853">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-854">如果滑鼠指標位於與點擊測試相同的項目結果上方，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-854"><see langword="true" /> if the mouse pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-855">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-855">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-856">不同於<xref:System.Windows.UIElement.IsMouseOver%2A>，這個屬性才`true`如果滑鼠指標位在常值的項目-以用於點擊測試。</span><span class="sxs-lookup"><span data-stu-id="84df3-856">Unlike <xref:System.Windows.UIElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element - as it is for a hit test.</span></span> <span data-ttu-id="84df3-857">如果滑鼠指標位於子系項目上方，特別是項目的一部分的項目更深入的範本和複合 （compositing），這個屬性會是`false`。</span><span class="sxs-lookup"><span data-stu-id="84df3-857">If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`.</span></span> <span data-ttu-id="84df3-858">除非您知道控制項的複合 （比方說，您使用這個屬性的自訂控制項範本中的控制項，您所定義），這個屬性可能會傳回非預期的結果。</span><span class="sxs-lookup"><span data-stu-id="84df3-858">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="84df3-859">大部分的情況下，您不撰寫控制項，使用<xref:System.Windows.UIElement.IsMouseOver%2A>改。</span><span class="sxs-lookup"><span data-stu-id="84df3-859">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsMouseOver%2A> instead.</span></span>  
  
 <span data-ttu-id="84df3-860">如果將滑鼠擷取由這個項目，而且這個屬性為`true`次擷取的詳細資訊，此屬性會繼續傳回`true`直到遺失滑鼠捕捉並的指標不是透過其範圍。</span><span class="sxs-lookup"><span data-stu-id="84df3-860">If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-861">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-861">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-862">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-862">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|<span data-ttu-id="84df3-863">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-863">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-864">無</span><span class="sxs-lookup"><span data-stu-id="84df3-864">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-865">當這個項目的 <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-865">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-866">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-866">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-867">識別 <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-867">Identifies the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-868">取得值，指出滑鼠指標是否在這個項目上方 (包括視覺化樹狀中的子項目)。</span><span class="sxs-lookup"><span data-stu-id="84df3-868">Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</span></span>  <span data-ttu-id="84df3-869">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-869">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-870">如果滑鼠指標位在這個項目或其子項目上方，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-870"><see langword="true" /> if mouse pointer is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-871">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-871">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-872">通常，控制項是複合，使得控制項 （視覺化樹狀結構） 內的各種項目都會報告包含控制項的滑鼠狀態。</span><span class="sxs-lookup"><span data-stu-id="84df3-872">Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</span></span> <span data-ttu-id="84df3-873">例如，<xref:System.Windows.Controls.ListBox>樣式控制項將會報告<xref:System.Windows.UIElement.IsMouseOver%2A>作為`true`如果在滑鼠位於任何地方網格的幾何，包括任何<xref:System.Windows.Controls.ListBoxItem>。</span><span class="sxs-lookup"><span data-stu-id="84df3-873">For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.</span></span>  
  
 <span data-ttu-id="84df3-874">雖然類似"IsMouseOverChanged 」 事件不存在，便會執行數個類似的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-874">Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</span></span> <span data-ttu-id="84df3-875">例如，您可以處理<xref:System.Windows.UIElement.MouseEnter>， <xref:System.Windows.UIElement.MouseMove>，和<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>。</span><span class="sxs-lookup"><span data-stu-id="84df3-875">For example, you can handle <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span>  
  
 <span data-ttu-id="84df3-876">如果此元素擷取滑鼠，這個屬性會保持`true`直到遺失滑鼠捕捉並滑鼠指標離開項目範圍。</span><span class="sxs-lookup"><span data-stu-id="84df3-876">If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.</span></span>  
  
 <span data-ttu-id="84df3-877">有些控制項刻意擷取將滑鼠停在特定似乎未直接涉及滑鼠的動作。</span><span class="sxs-lookup"><span data-stu-id="84df3-877">Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</span></span> <span data-ttu-id="84df3-878">這可能會導致<xref:System.Windows.UIElement.IsMouseOver%2A>正在`true`即使滑鼠已移動不明顯。</span><span class="sxs-lookup"><span data-stu-id="84df3-878">This can lead to <xref:System.Windows.UIElement.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-879">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-879">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-880">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-880">Identifier field</span></span>|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|<span data-ttu-id="84df3-881">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-881">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-882">無</span><span class="sxs-lookup"><span data-stu-id="84df3-882">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-883">下列範例會參考這個屬性的屬性型別<xref:System.Windows.Trigger>屬於\<Style.Triggers > 區塊。</span><span class="sxs-lookup"><span data-stu-id="84df3-883">The following example references this property as the property type of a <xref:System.Windows.Trigger>, part of a \<Style.Triggers> block.</span></span> <span data-ttu-id="84df3-884">如果滑鼠停留在控制項中，控制項的文字會變成藍色，游標會變成手的形狀。</span><span class="sxs-lookup"><span data-stu-id="84df3-884">If the mouse is over the control, the control text turns blue and the cursor becomes a hand.</span></span>  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-885">識別 <see cref="P:System.Windows.UIElement.IsMouseOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-885">Identifies the <see cref="P:System.Windows.UIElement.IsMouseOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-886">取得值，指出這個項目是否擷取手寫筆。</span><span class="sxs-lookup"><span data-stu-id="84df3-886">Gets a value indicating whether the stylus is captured by this element.</span></span>  <span data-ttu-id="84df3-887">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-887">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-888">如果項目具有手寫筆擷取，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-888"><see langword="true" /> if the element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-889">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-889">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-890">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-890">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-891">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-891">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-892">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-892">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-893">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-893">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|<span data-ttu-id="84df3-894">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-894">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-895">無</span><span class="sxs-lookup"><span data-stu-id="84df3-895">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-896">當這個項目的 <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-896">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-897">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-897">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-898">識別 <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-898">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-899">取得值，這個值決定手寫筆擷取是由這個項目持有，還是由項目範圍及其視覺化樹狀結構中的項目持有。</span><span class="sxs-lookup"><span data-stu-id="84df3-899">Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</span></span> <span data-ttu-id="84df3-900">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-900">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-901">如果這個項目或包含的項目具有手寫筆擷取，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-901"><see langword="true" /> if this element or a contained element has stylus capture; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-902">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-902">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-903">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-903">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-904">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-904">For more information, see [Touch Input Support in Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-905">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-905">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-906">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-906">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|<span data-ttu-id="84df3-907">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-907">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-908">無</span><span class="sxs-lookup"><span data-stu-id="84df3-908">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-909">當這個項目的 <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-909">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-910">這是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-910">This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-911">識別 <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-911">Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-912">取得值，指出手寫筆位置是否與點擊測試結果相對應，該結果會將複合項目納入考量。</span><span class="sxs-lookup"><span data-stu-id="84df3-912">Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</span></span>  <span data-ttu-id="84df3-913">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-913">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-914">如果手寫筆指標的項目結果與點擊測試相同，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-914"><see langword="true" /> if the stylus pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-915">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-915">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-916">不同於<xref:System.Windows.UIElement.IsStylusOver%2A>，這個屬性才`true`如果手寫筆在元素上方。</span><span class="sxs-lookup"><span data-stu-id="84df3-916">Unlike <xref:System.Windows.UIElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element.</span></span> <span data-ttu-id="84df3-917">如果手寫筆改為透過子項目或項目的更深入的複合 （視覺化樹狀結構） 的一部分的項目，這個屬性會是`false`。</span><span class="sxs-lookup"><span data-stu-id="84df3-917">If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.</span></span>  
  
 <span data-ttu-id="84df3-918">除非您知道控制項的複合 （比方說，您使用這個屬性的自訂控制項範本中的控制項，您所定義），這個屬性可能會傳回非預期的結果。</span><span class="sxs-lookup"><span data-stu-id="84df3-918">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="84df3-919">大部分的情況下，您不撰寫控制項，使用<xref:System.Windows.UIElement.IsStylusOver%2A>改。</span><span class="sxs-lookup"><span data-stu-id="84df3-919">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsStylusOver%2A> instead.</span></span>  
  
 <span data-ttu-id="84df3-920">如果這個項目具有手寫筆擷取，而且這個屬性就`true`擷取時，這個屬性會保持`true`直到手寫筆擷取遺失，且其範圍不是手寫筆。</span><span class="sxs-lookup"><span data-stu-id="84df3-920">If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.</span></span>  
  
 <span data-ttu-id="84df3-921">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-921">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-922">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-922">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-923">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-923">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-924">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-924">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|<span data-ttu-id="84df3-925">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-925">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-926">無</span><span class="sxs-lookup"><span data-stu-id="84df3-926">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-927">當這個項目的 <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-927">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-928">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-928">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-929">識別 <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-929">Identifies the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-930">取得值，指出手寫筆游標是否位在這個項目上方 (包括視覺子項目)。</span><span class="sxs-lookup"><span data-stu-id="84df3-930">Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</span></span>  <span data-ttu-id="84df3-931">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-931">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-932">如果手寫筆游標位在項目或其子項目上方，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-932"><see langword="true" /> if stylus cursor is over the element or its child elements; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-933">預設為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-933">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-934">如果這個項目具有手寫筆擷取，這個屬性會繼續傳回`true`直到遺失手寫筆捕捉並指標超出其範圍。</span><span class="sxs-lookup"><span data-stu-id="84df3-934">If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds.</span></span>  
  
 <span data-ttu-id="84df3-935">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-935">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-936">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-936">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-937">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-937">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-938">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-938">Identifier field</span></span>|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|<span data-ttu-id="84df3-939">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-939">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-940">無</span><span class="sxs-lookup"><span data-stu-id="84df3-940">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-941">識別 <see cref="P:System.Windows.UIElement.IsStylusOver" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-941">Identifies the <see cref="P:System.Windows.UIElement.IsStylusOver" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-942">取得值，表示這個項目在 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中是否可見。</span><span class="sxs-lookup"><span data-stu-id="84df3-942">Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  <span data-ttu-id="84df3-943">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-943">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-944">如果項目可見，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-944"><see langword="true" /> if the element is visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-945">判斷<xref:System.Windows.UIElement.IsVisible%2A>值會將所有版面配置的因素列入考量。</span><span class="sxs-lookup"><span data-stu-id="84df3-945">Determination of the <xref:System.Windows.UIElement.IsVisible%2A> value takes all factors of layout into account.</span></span> <span data-ttu-id="84df3-946">相反地， <xref:System.Windows.UIElement.Visibility%2A>，這是可設定的屬性，只表示可見或不可見，以程式設計的方式讓元素。</span><span class="sxs-lookup"><span data-stu-id="84df3-946">In contrast, <xref:System.Windows.UIElement.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</span></span>  
  
 <span data-ttu-id="84df3-947">項目所在<xref:System.Windows.UIElement.IsVisible%2A>是`false`參與輸入的事件 （或命令），請執行不影響量值或排列傳遞的版面配置、 不是可設定焦點、 不是在索引標籤順序中，和將不會報告在點擊測試。</span><span class="sxs-lookup"><span data-stu-id="84df3-947">Elements where <xref:System.Windows.UIElement.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</span></span> <span data-ttu-id="84df3-948">相較之下，項目所在<xref:System.Windows.UIElement.IsEnabled%2A>是`false`仍要參與的事件和命令，以及點擊測試，但也不是可設定焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-948">In contrast, elements where <xref:System.Windows.UIElement.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.</span></span>  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-949">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-949">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-950">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-950">Identifier field</span></span>|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|<span data-ttu-id="84df3-951">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-951">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-952">無</span><span class="sxs-lookup"><span data-stu-id="84df3-952">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-953">當這個項目的 <see cref="P:System.Windows.UIElement.IsVisible" /> 屬性值變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-953">Occurs when the value of the <see cref="P:System.Windows.UIElement.IsVisible" /> property changes on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-954">如果項目不會呈現由配置系統的值以外的原因，不會引發這個事件<xref:System.Windows.UIElement.IsVisible%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-954">This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <xref:System.Windows.UIElement.IsVisible%2A> property.</span></span> <span data-ttu-id="84df3-955">例如，項目可能沒有相關聯的視覺效果。</span><span class="sxs-lookup"><span data-stu-id="84df3-955">For example, the element might not have an associated visual.</span></span>  
  
 <span data-ttu-id="84df3-956">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-956">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-957">識別 <see cref="P:System.Windows.UIElement.IsVisible" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-957">Identifies the <see cref="P:System.Windows.UIElement.IsVisible" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-958">焦點在這個項目上方且按下按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-958">Occurs when a key is pressed while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-959">索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。</span><span class="sxs-lookup"><span data-stu-id="84df3-959">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="84df3-960"><xref:System.Windows.UIElement.KeyDown>事件是較低層級文字的輸入的事件，可能無法如預期般部分控制項上。</span><span class="sxs-lookup"><span data-stu-id="84df3-960">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="84df3-961">這是文字的因為有些控制項具有複合控制項，或提供較高層級版本的類別處理輸入處理和相關事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-961">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="84df3-962">本項目中建立的別名<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement.KeyDown>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-962">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement.KeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-963">附加至事件處理常式<xref:System.Windows.UIElement.KeyDown>事件會附加至基礎<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-963">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-964">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-964">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-965">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-965">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyDownEvent>|  
|<span data-ttu-id="84df3-966">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-966">Routing strategy</span></span>|<span data-ttu-id="84df3-967">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-967">Bubbling</span></span>|  
|<span data-ttu-id="84df3-968">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-968">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="84df3-969">對應的通道事件是<xref:System.Windows.UIElement.PreviewKeyDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-969">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyDown>.</span></span>  
  
-   <span data-ttu-id="84df3-970">覆寫<xref:System.Windows.UIElement.OnKeyDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-970">Override <xref:System.Windows.UIElement.OnKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-971">識別 <see cref="E:System.Windows.UIElement.KeyDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-971">Identifies the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-972">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-972">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-973">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-973">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-974">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-974">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-975">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-975">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-976">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-976">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-977">焦點在這個項目上方且放開按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-977">Occurs when a key is released while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-978">本項目中建立的別名<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>附加事件，此類別，讓<xref:System.Windows.UIElement.KeyUp>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-978">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event for this class so that  <xref:System.Windows.UIElement.KeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-979">附加至事件處理常式<xref:System.Windows.UIElement.KeyUp>事件會附加至基礎<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-979">Event handlers that are attached to the <xref:System.Windows.UIElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-980">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-980">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-981">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-981">Identifier field</span></span>|<xref:System.Windows.UIElement.KeyUpEvent>|  
|<span data-ttu-id="84df3-982">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-982">Routing strategy</span></span>|<span data-ttu-id="84df3-983">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-983">Bubbling</span></span>|  
|<span data-ttu-id="84df3-984">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-984">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="84df3-985">對應的通道事件是<xref:System.Windows.UIElement.PreviewKeyUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-985">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyUp>.</span></span>  
  
-   <span data-ttu-id="84df3-986">覆寫<xref:System.Windows.UIElement.OnKeyUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-986">Override <xref:System.Windows.UIElement.OnKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-987">識別 <see cref="E:System.Windows.UIElement.KeyUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-987">Identifies the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-988">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-988">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-989">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-989">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-990">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-990">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-991">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-991">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-992">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-992">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberSignature Language="F#" Value="member this.LayoutUpdated : EventHandler " Usage="member this.LayoutUpdated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-993">當目前 <see cref="T:System.Windows.Threading.Dispatcher" /> 的數個關聯視覺化項目的配置變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-993">Occurs when the layout of the various visual elements associated with the current <see cref="T:System.Windows.Threading.Dispatcher" /> changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-994">版面配置更新可能會發生屬性變更、 視窗大小調整或明確的使用者要求的結果。</span><span class="sxs-lookup"><span data-stu-id="84df3-994">A layout update can occur as a result of a property change, a window resize, or an explicit user request.</span></span>  
  
 <span data-ttu-id="84df3-995">這個成員是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]事件，不是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-995">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-996">此元素失去邏輯焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-996">Occurs when this element loses logical focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-997">如果使用方法呼叫刻意強制焦點，但上一個鍵盤焦點存在於不同範圍中，則邏輯焦點會與鍵盤焦點不同。</span><span class="sxs-lookup"><span data-stu-id="84df3-997">Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="84df3-998">在此案例中，鍵盤焦點會維持其所在位置和項目其中<xref:System.Windows.UIElement.Focus%2A>方法呼叫仍取得邏輯焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-998">In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="84df3-999">此事件的更精確地解譯時，就是引發時間的值<xref:System.Windows.UIElement.IsFocused%2A>路由的項目屬性變更時從`true`至`false`。</span><span class="sxs-lookup"><span data-stu-id="84df3-999">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.</span></span>  
  
 <span data-ttu-id="84df3-1000">因為此事件會使用事件反昇的路由，失去焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1000">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="84df3-1001">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際取得焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1001">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1002">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1002">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1003">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1003">Identifier field</span></span>|<xref:System.Windows.UIElement.LostFocusEvent>|  
|<span data-ttu-id="84df3-1004">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1004">Routing strategy</span></span>|<span data-ttu-id="84df3-1005">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1005">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1006">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1006">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="84df3-1007">沒有任何對應的通道事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1007">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="84df3-1008">覆寫<xref:System.Windows.UIElement.OnLostFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1008">Override <xref:System.Windows.UIElement.OnLostFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1009">識別 <see cref="E:System.Windows.UIElement.LostFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1009">Identifies the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1010">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1010">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1011">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1011">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1012">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1012">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1013">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1013">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1014">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1014">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1015">鍵盤不再以此項目為焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1015">Occurs when the keyboard is no longer focused on this element,.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1016">因為此事件會使用事件反昇的路由，失去焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1016">Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="84df3-1017">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1017">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="84df3-1018">此事件建立的別名<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.LostKeyboardFocus>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1018">This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-1019">附加至事件處理常式<xref:System.Windows.UIElement.LostKeyboardFocus>事件會附加至基礎<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-1019">Event handlers that are attached to the <xref:System.Windows.UIElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1020">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1020">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1021">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1021">Identifier field</span></span>|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|<span data-ttu-id="84df3-1022">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1022">Routing strategy</span></span>|<span data-ttu-id="84df3-1023">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1023">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1024">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1024">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="84df3-1025">對應的通道事件是<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1025">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="84df3-1026">覆寫<xref:System.Windows.UIElement.OnLostKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1026">Override <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1027">識別 <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1027">Identifies the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1028">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1028">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1029">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1029">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1030">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1030">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1031">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1031">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1032">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1032">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1033">此元素失去滑鼠擷取時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1033">Occurs when this element loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1034">當項目捕捉到滑鼠時，它收到滑鼠輸入，即使在指標位於其範圍外。</span><span class="sxs-lookup"><span data-stu-id="84df3-1034">When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="84df3-1035">是通常只有在捕捉滑鼠拖放作業。</span><span class="sxs-lookup"><span data-stu-id="84df3-1035">The mouse is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="84df3-1036">因為此事件會使用事件反昇的路由，失去擷取的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1036">Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="84df3-1037">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際遺失擷取的項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1037">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.</span></span>  
  
 <span data-ttu-id="84df3-1038">此事件建立的別名<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.LostMouseCapture>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1038">This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-1039">附加至事件處理常式<xref:System.Windows.UIElement.LostMouseCapture>事件會附加至基礎<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-1039">Event handlers that are attached to the <xref:System.Windows.UIElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1040">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1040">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1041">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1041">Identifier field</span></span>|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|<span data-ttu-id="84df3-1042">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1042">Routing strategy</span></span>|<span data-ttu-id="84df3-1043">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1043">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1044">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1044">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="84df3-1045">沒有任何已定義的對應通道事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1045">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="84df3-1046">覆寫<xref:System.Windows.UIElement.OnLostMouseCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1046">Override <xref:System.Windows.UIElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1047">識別 <see cref="E:System.Windows.UIElement.LostMouseCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1047">Identifies the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1048">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1048">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1049">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1049">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1050">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1050">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1051">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1051">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1052">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1052">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1053">此元素失去手寫筆擷取時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1053">Occurs when this element loses stylus capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1054">元素擷取手寫筆，當它收到手寫筆輸入，即使在指標位於其範圍外也一樣。</span><span class="sxs-lookup"><span data-stu-id="84df3-1054">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="84df3-1055">要捕捉手寫筆通常只會在拖放作業期間。</span><span class="sxs-lookup"><span data-stu-id="84df3-1055">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="84df3-1056">因為此事件會使用事件反昇的路由，失去焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1056">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="84df3-1057">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1057">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="84df3-1058">此事件建立的別名<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.LostStylusCapture>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1058">This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-1059">附加至事件處理常式<xref:System.Windows.UIElement.LostStylusCapture>事件會附加至基礎<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-1059">Event handlers that are attached to the <xref:System.Windows.UIElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1060">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1060">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1061">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1061">Identifier field</span></span>|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|<span data-ttu-id="84df3-1062">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1062">Routing strategy</span></span>|<span data-ttu-id="84df3-1063">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1063">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1064">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1064">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-1065">沒有任何已定義的對應通道事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1065">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="84df3-1066">覆寫<xref:System.Windows.UIElement.OnLostStylusCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1066">Override <xref:System.Windows.UIElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1067">識別 <see cref="E:System.Windows.UIElement.LostStylusCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1067">Identifies the <see cref="E:System.Windows.UIElement.LostStylusCapture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1068">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1068">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1069">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1069">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1070">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1070">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1071">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1071">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1072">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1072">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1073">當這個項目失去觸控擷取時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1073">Occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1074">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1074">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1075">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1075">Identifier field</span></span>|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|<span data-ttu-id="84df3-1076">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1076">Routing strategy</span></span>|<span data-ttu-id="84df3-1077">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1077">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1078">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1078">Delegate</span></span>|<span data-ttu-id="84df3-1079">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1079"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="84df3-1080">覆寫<xref:System.Windows.UIElement.OnLostTouchCapture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1080">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1081">識別 <see cref="E:System.Windows.UIElement.LostTouchCapture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1081">Identifies the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberSignature Language="F#" Value="member this.ManipulationBoundaryFeedback : EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " Usage="member this.ManipulationBoundaryFeedback : System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1082">當操作遇到界限時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1082">Occurs when the manipulation encounters a boundary.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1083">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1083">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1084">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1084">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|<span data-ttu-id="84df3-1085">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1085">Routing strategy</span></span>|<span data-ttu-id="84df3-1086">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1086">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1087">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1087">Delegate</span></span>|<span data-ttu-id="84df3-1088">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1088"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationBoundaryFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1089">識別 <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1089">Identifies the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationCompleted : EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " Usage="member this.ManipulationCompleted : System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1090">當對 <see cref="T:System.Windows.UIElement" /> 物件進行的操作和慣性完成時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1090">Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> object is complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1091">若要取得操作的相關資訊，完成時，您可以使用此事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1091">You can use this event to get information about the manipulation when it completes.</span></span>  <span data-ttu-id="84df3-1092">例如，您可以使用<xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType>屬性來判斷總量操作位置變更。</span><span class="sxs-lookup"><span data-stu-id="84df3-1092">For example, you can use the <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> property to determine the total amount the position of the manipulation changed.</span></span>  
  
 <span data-ttu-id="84df3-1093">如需有關操作的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1093">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="84df3-1094">如需回應操作的應用程式的範例，請參閱[逐步解說：建立您的第一個觸控應用程式](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1094">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1095">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1095">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1096">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1096">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|<span data-ttu-id="84df3-1097">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1097">Routing strategy</span></span>|<span data-ttu-id="84df3-1098">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1098">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1099">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1099">Delegate</span></span>|<span data-ttu-id="84df3-1100">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.ManipulationCompletedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1100"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationCompletedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1101">識別 <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1101">Identifies the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberSignature Language="F#" Value="member this.ManipulationDelta : EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " Usage="member this.ManipulationDelta : System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1102">輸入裝置在操作期間變更位置時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1102">Occurs when the input device changes position during a manipulation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1103"><xref:System.Windows.UIElement.ManipulationDelta>事件會發生多次，當使用者拖曳手指螢幕於操作期間，另一次慣性發生時。</span><span class="sxs-lookup"><span data-stu-id="84df3-1103">The <xref:System.Windows.UIElement.ManipulationDelta> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.</span></span>  <span data-ttu-id="84df3-1104">您可以使用<xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A>來檢查是否在慣性期間發生事件的屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1104">You can use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> property to check whether the event is occurring during inertia.</span></span>  
  
 <span data-ttu-id="84df3-1105">使用的項目<xref:System.Windows.UIElement.ManipulationDelta>發生的事件會在事件發生時不以任何方式影響。</span><span class="sxs-lookup"><span data-stu-id="84df3-1105">The element on with <xref:System.Windows.UIElement.ManipulationDelta> event occurs is not affected in any way when the event occurs.</span></span>  <span data-ttu-id="84df3-1106">您必須提供的邏輯可操作的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1106">You must provide the logic to the element that is to be manipulated.</span></span>  <span data-ttu-id="84df3-1107"><xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>並<xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>屬性，這些型別的屬性<xref:System.Windows.Input.ManipulationDelta>，包含有關如何變更操作的位置資料，而解譯為移動、 調整其大小或旋轉物件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1107">The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> and <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> properties, which are of type <xref:System.Windows.Input.ManipulationDelta>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.</span></span>  <span data-ttu-id="84df3-1108">您會將該資訊套用至可操作的項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1108">You apply that information to the element that is to be manipulated.</span></span>  
  
 <span data-ttu-id="84df3-1109">如需有關操作的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1109">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="84df3-1110">如需回應操作的應用程式的範例，請參閱[逐步解說：建立您的第一個觸控應用程式](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1110">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1111">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1111">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1112">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1112">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|<span data-ttu-id="84df3-1113">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1113">Routing strategy</span></span>|<span data-ttu-id="84df3-1114">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1114">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1115">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1115">Delegate</span></span>|<span data-ttu-id="84df3-1116">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.ManipulationDeltaEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1116"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-1117">下列範例顯示的事件處理常式<xref:System.Windows.UIElement.ManipulationDelta>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1117">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="84df3-1118">此範例會使用<xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>屬性來移動、 調整大小和輪替<xref:System.Windows.Shapes.Rectangle>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1118">The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.</span></span>  <span data-ttu-id="84df3-1119">此範例也會檢查是否<xref:System.Windows.UIElement.ManipulationDelta>慣性和矩形會觸碰視窗邊緣期間發生的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1119">The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window.</span></span>  <span data-ttu-id="84df3-1120">如果這些情況下，則為 true，應用程式會停止操作，若要防止將應用程式的可見區域的矩形。</span><span class="sxs-lookup"><span data-stu-id="84df3-1120">If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</span></span> <span data-ttu-id="84df3-1121">這個範例是在較大範例的一部分[逐步解說：建立您的第一個觸控應用程式](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1121">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationDeltaEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1122">識別 <see cref="E:System.Windows.UIElement.ManipulationDelta" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1122">Identifies the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationInertiaStarting : EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " Usage="member this.ManipulationInertiaStarting : System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1123">當輸入裝置在操作期間失去和 <see cref="T:System.Windows.UIElement" /> 物件的通訊以及慣性開始時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1123">Occurs when the input device loses contact with the <see cref="T:System.Windows.UIElement" /> object during a manipulation and inertia begins.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1124"><xref:System.Windows.UIElement.ManipulationInertiaStarting>使用者拿起所有從畫面的指於操作期間，就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1124">The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user lifts all of the fingers from the screen during a manipulation.</span></span> <span data-ttu-id="84df3-1125">例如，如果使用者 「 擲回 」<xref:System.Windows.UIElement>介面，使用者會觸及<xref:System.Windows.UIElement>若要開始的動作，將手指移過螢幕的一小段距離，並再放開<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1125">For example, if a user "throws" a <xref:System.Windows.UIElement> across a surface, the user will touch the <xref:System.Windows.UIElement> to begin the action, move the finger across the screen for a short distance, and then release the <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="84df3-1126">當使用者放開項目時，會開始慣性和<xref:System.Windows.UIElement.ManipulationInertiaStarting>就會發生事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1126">When the user releases the element, inertia begins and the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs.</span></span>  <span data-ttu-id="84df3-1127"><xref:System.Windows.UIElement>會繼續接收<xref:System.Windows.UIElement.ManipulationDelta>表示慣性的項目上發生的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1127">The <xref:System.Windows.UIElement> continues to receive <xref:System.Windows.UIElement.ManipulationDelta> events to indicate that inertia is occurring on the element.</span></span>  
  
 <span data-ttu-id="84df3-1128">若要指定慣性的行為，您可以使用此事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1128">You can use this event to specify the behavior of the inertia.</span></span>  <span data-ttu-id="84df3-1129">例如，您可以設定慣性開始時使用的初始速度。</span><span class="sxs-lookup"><span data-stu-id="84df3-1129">For example, you can set the initial velocity that is used when inertia begins.</span></span>  <span data-ttu-id="84df3-1130">藉由設定所需的減速程度，或藉由設定所需的位置，您也可以指定慣性的數量。</span><span class="sxs-lookup"><span data-stu-id="84df3-1130">You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.</span></span>  <span data-ttu-id="84df3-1131">您可以分別設定這些值，每種類型的操作 （平移、 擴充或旋轉）。</span><span class="sxs-lookup"><span data-stu-id="84df3-1131">You can set these values for each type of manipulation (translation, expansion, or rotation) independently.</span></span>  <span data-ttu-id="84df3-1132">如需詳細資訊，請參閱<xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1132">For more information, see <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>  
  
 <span data-ttu-id="84df3-1133">如需有關操作的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1133">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="84df3-1134">如需回應操作的應用程式的範例，請參閱[逐步解說：建立您的第一個觸控應用程式](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1134">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1135">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1135">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1136">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1136">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|<span data-ttu-id="84df3-1137">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1137">Routing strategy</span></span>|<span data-ttu-id="84df3-1138">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1138">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1139">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1139">Delegate</span></span>|<span data-ttu-id="84df3-1140">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1140"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-1141">下列範例所示<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件處理常式，並設定為平移、 擴充和旋轉在慣性期間所需的減速程度。</span><span class="sxs-lookup"><span data-stu-id="84df3-1141">The following example shows the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia.</span></span> <span data-ttu-id="84df3-1142">這個範例是在較大範例的一部分[逐步解說：建立您的第一個觸控應用程式](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1142">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationInertiaStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1143">識別 <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1143">Identifies the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarted : EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " Usage="member this.ManipulationStarted : System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1144">當輸入裝置開始對 <see cref="T:System.Windows.UIElement" /> 物件進行操作時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1144">Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1145"><xref:System.Windows.UIElement.ManipulationStarted>事件發生之後<xref:System.Windows.UIElement.ManipulationStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1145">The <xref:System.Windows.UIElement.ManipulationStarted> event occurs after the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span>  <span data-ttu-id="84df3-1146">您可以依下列方式使用<xref:System.Windows.Input.ManipulationStartedEventArgs>:</span><span class="sxs-lookup"><span data-stu-id="84df3-1146">You can do the following with the <xref:System.Windows.Input.ManipulationStartedEventArgs>:</span></span>  
  
-   <span data-ttu-id="84df3-1147">取得操作的位置是相對於使用的項目<xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1147">Get the element that the manipulation's position is relative to by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> property.</span></span>  
  
-   <span data-ttu-id="84df3-1148">使用取得操作的原點<xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1148">Get the origin of the manipulation by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> property.</span></span>  
  
-   <span data-ttu-id="84df3-1149">藉由呼叫取消操作<xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1149">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> method.</span></span>  
  
 <span data-ttu-id="84df3-1150">如需有關操作的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1150">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="84df3-1151">如需回應操作的應用程式的範例，請參閱[逐步解說：建立您的第一個觸控應用程式](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1151">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1152">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1152">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1153">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1153">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|<span data-ttu-id="84df3-1154">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1154">Routing strategy</span></span>|<span data-ttu-id="84df3-1155">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1155">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1156">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1156">Delegate</span></span>|<span data-ttu-id="84df3-1157">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.ManipulationStartedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1157"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1158">識別 <see cref="E:System.Windows.UIElement.ManipulationStarted" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1158">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarting : EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " Usage="member this.ManipulationStarting : System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1159">發生於第一次建立操作處理器時。</span><span class="sxs-lookup"><span data-stu-id="84df3-1159">Occurs when the manipulation processor is first created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1160"><xref:System.Windows.UIElement.ManipulationStarting>具有的項目上發生事件時<xref:System.Windows.UIElement.IsManipulationEnabled%2A>屬性設定為`true`當使用者將手指放在其上。</span><span class="sxs-lookup"><span data-stu-id="84df3-1160">The <xref:System.Windows.UIElement.ManipulationStarting> event occurs on an element that has the <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property set to `true` when the user puts a finger on it.</span></span> <span data-ttu-id="84df3-1161">根據預設，後續的操作事件會報告的位置相對於擁有的項目操作<xref:System.Windows.UIElement.IsManipulationEnabled%2A>設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-1161">By default, subsequent manipulation events report the position of the manipulation relative to the element that has <xref:System.Windows.UIElement.IsManipulationEnabled%2A> set to `true`.</span></span>  <span data-ttu-id="84df3-1162">您可以指定的位置必須是相對於另一個項目，藉由設定<xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1162">You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property.</span></span> <span data-ttu-id="84df3-1163">例如，您可以進行相對於父項目的操作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1163">For example, you can make the manipulation relative to the parent of the element.</span></span>  
  
 <span data-ttu-id="84df3-1164">您也可以執行的事件處理常式中的下列<xref:System.Windows.UIElement.ManipulationStarting>:</span><span class="sxs-lookup"><span data-stu-id="84df3-1164">You can also do the following in an event handler for <xref:System.Windows.UIElement.ManipulationStarting>:</span></span>  
  
-   <span data-ttu-id="84df3-1165">指定使用者是否需要一個以上的手指，藉由設定執行操作<xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1165">Specify whether the user needs more than one finger to perform the manipulations by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="84df3-1166">指定藉由設定啟用何種類型的操作<xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType>屬性設<xref:System.Windows.Input.ManipulationModes>列舉型別。</span><span class="sxs-lookup"><span data-stu-id="84df3-1166">Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> property to a <xref:System.Windows.Input.ManipulationModes> enumeration.</span></span>  
  
-   <span data-ttu-id="84df3-1167">藉由設定指定單指的旋轉中心的<xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1167">Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="84df3-1168">藉由呼叫取消操作<xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1168">Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="84df3-1169">如需有關操作的詳細資訊，請參閱[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1169">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="84df3-1170">如需回應操作的應用程式的範例，請參閱[逐步解說：建立您的第一個觸控應用程式](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1170">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1171">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1171">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1172">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1172">Identifier field</span></span>|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|<span data-ttu-id="84df3-1173">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1173">Routing strategy</span></span>|<span data-ttu-id="84df3-1174">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1174">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1175">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1175">Delegate</span></span>|<span data-ttu-id="84df3-1176">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.ManipulationStartingEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1176"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-1177">下列範例顯示的事件處理常式<xref:System.Windows.UIElement.ManipulationStarting>事件，並將<xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>接收操作事件，讓操作的座標是相對於父項目的父項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1177">The following example shows the event handler for the <xref:System.Windows.UIElement.ManipulationStarting> event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.</span></span>  <span data-ttu-id="84df3-1178">這個範例是在較大範例的一部分[逐步解說：建立您的第一個觸控應用程式](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1178">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1179">識別 <see cref="E:System.Windows.UIElement.ManipulationStarting" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1179">Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="member this.Measure : System.Windows.Size -&gt; unit" Usage="uIElement.Measure availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="84df3-1180">可供父項目用來配置子項目的空間。</span><span class="sxs-lookup"><span data-stu-id="84df3-1180">The available space that a parent element can allocate a child element.</span></span> <span data-ttu-id="84df3-1181">子項目可以要求比可用空間更大的空間；如果在目前項目的內容模型中能夠捲動，就可能容納提供的大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-1181">A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</span></span></param>
        <summary><span data-ttu-id="84df3-1182">更新 <see cref="T:System.Windows.UIElement" /> 的 <see cref="P:System.Windows.UIElement.DesiredSize" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1182">Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />.</span></span> <span data-ttu-id="84df3-1183">父項目從本身的 <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> 實作中呼叫此方法，以形成遞迴配置更新。</span><span class="sxs-lookup"><span data-stu-id="84df3-1183">Parent elements call this method from their own <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> implementations to form a recursive layout update.</span></span> <span data-ttu-id="84df3-1184">呼叫此方法即構成配置更新的第一次傳遞 (「量值」傳遞)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1184">Calling this method constitutes the first pass (the "Measure" pass) of a layout update.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1185">計算版面配置定位[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]組成<xref:System.Windows.UIElement.Measure%2A>呼叫和<xref:System.Windows.UIElement.Arrange%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="84df3-1185">Computation of layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] is comprised of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span> <span data-ttu-id="84df3-1186">期間<xref:System.Windows.UIElement.Measure%2A>呼叫時，項目決定其大小需求使用`availableSize`輸入。</span><span class="sxs-lookup"><span data-stu-id="84df3-1186">During the <xref:System.Windows.UIElement.Measure%2A> call, an element determines its size requirements by using an `availableSize` input.</span></span> <span data-ttu-id="84df3-1187">期間<xref:System.Windows.UIElement.Arrange%2A>完成呼叫時，項目大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-1187">During the <xref:System.Windows.UIElement.Arrange%2A> call, the element size is finalized.</span></span>  
  
 <span data-ttu-id="84df3-1188">`availableSize` 可為任何介於 0 到無限。</span><span class="sxs-lookup"><span data-stu-id="84df3-1188">`availableSize` can be any number from zero to infinite.</span></span> <span data-ttu-id="84df3-1189">參與配置的項目應該會傳回最小<xref:System.Windows.Size>他們需要指定`availableSize`。</span><span class="sxs-lookup"><span data-stu-id="84df3-1189">Elements participating in layout should return the minimum <xref:System.Windows.Size> they require for a given `availableSize`.</span></span>  
  
 <span data-ttu-id="84df3-1190">當第一次執行個體化的版面配置時，它一律會收到<xref:System.Windows.UIElement.Measure%2A>之前，先呼叫<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1190">When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="84df3-1191">不過之後第一次的版面配置傳遞，, 它可能會收到<xref:System.Windows.UIElement.Arrange%2A>呼叫，而不<xref:System.Windows.UIElement.Measure%2A>; 這種情形只會影響的屬性時<xref:System.Windows.UIElement.Arrange%2A>變更 （例如對齊），或是當父系收到<xref:System.Windows.UIElement.Arrange%2A>沒有<xref:System.Windows.UIElement.Measure%2A>.</span><span class="sxs-lookup"><span data-stu-id="84df3-1191">However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>.</span></span> <span data-ttu-id="84df3-1192">A<xref:System.Windows.UIElement.Measure%2A>呼叫會自動失效<xref:System.Windows.UIElement.Arrange%2A>呼叫。</span><span class="sxs-lookup"><span data-stu-id="84df3-1192">A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.</span></span>  
  
 <span data-ttu-id="84df3-1193">如此主執行緒沒有在等待每個可能的配置變更，會以非同步方式發生配置更新。</span><span class="sxs-lookup"><span data-stu-id="84df3-1193">Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change.</span></span> <span data-ttu-id="84df3-1194">查詢透過程式碼後置檢查屬性值的項目可能不會立即反映變更互動的調整大小或版面配置特性的屬性 (<xref:System.Windows.FrameworkElement.Width%2A>內容，例如)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1194">Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <xref:System.Windows.FrameworkElement.Width%2A> property, for example).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="84df3-1195">版面配置更新可以強制使用<xref:System.Windows.UIElement.UpdateLayout%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1195">Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method.</span></span> <span data-ttu-id="84df3-1196">不過，呼叫這個方法通常不需要而且可能會導致效能不佳。</span><span class="sxs-lookup"><span data-stu-id="84df3-1196">However, calling this method is usually unnecessary and can cause poor performance.</span></span>  
  
 <span data-ttu-id="84df3-1197">版面配置系統會保留兩個不同的佇列，不正確的版面配置，一個用於<xref:System.Windows.UIElement.Measure%2A>，另一個用於<xref:System.Windows.UIElement.Arrange%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1197">The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>.</span></span> <span data-ttu-id="84df3-1198">配置的佇列會根據執行配置; 元素的視覺化樹狀結構中的項目順序排序在樹狀結構中較高的項目是佇列的頂端，以避免重複的變更，在父代所造成的備援配置。</span><span class="sxs-lookup"><span data-stu-id="84df3-1198">The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents.</span></span> <span data-ttu-id="84df3-1199">自動從佇列中移除重複的項目，如果他們已驗證配置的項目會自動會從佇列移除。</span><span class="sxs-lookup"><span data-stu-id="84df3-1199">Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.</span></span>  
  
 <span data-ttu-id="84df3-1200">更新配置時<xref:System.Windows.UIElement.Measure%2A>佇列清空第一，後面接著<xref:System.Windows.UIElement.Arrange%2A>佇列。</span><span class="sxs-lookup"><span data-stu-id="84df3-1200">When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue.</span></span> <span data-ttu-id="84df3-1201">中的項目<xref:System.Windows.UIElement.Arrange%2A>中的項目時，就永遠不會排列佇列<xref:System.Windows.UIElement.Measure%2A>佇列。</span><span class="sxs-lookup"><span data-stu-id="84df3-1201">An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureCore : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="uIElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="84df3-1202">父項目可以配置給子項目使用的大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-1202">The available size that the parent element can allocate for the child.</span></span></param>
        <summary><span data-ttu-id="84df3-1203">任一項目在衍生類別中被覆寫時，會提供可以正確調整該項目的度量邏輯，並且也會同時考慮所有子項目內容的大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-1203">When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</span></span></summary>
        <returns><span data-ttu-id="84df3-1204">這個項目在配置中需要的大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-1204">The desired size of this element in layout.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1205">衍生的項目，從較常見<xref:System.Windows.FrameworkElement>而非<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1205">It is more common to derive an element from <xref:System.Windows.FrameworkElement> rather than <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="84df3-1206">如果您衍生自<xref:System.Windows.FrameworkElement>，請注意，覆寫<xref:System.Windows.UIElement.MeasureCore%2A>上<xref:System.Windows.FrameworkElement>標誌<xref:System.Windows.UIElement.MeasureCore%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1206">If you are deriving from <xref:System.Windows.FrameworkElement>, note that an override of <xref:System.Windows.UIElement.MeasureCore%2A> on <xref:System.Windows.FrameworkElement> seals the <xref:System.Windows.UIElement.MeasureCore%2A> method.</span></span> <span data-ttu-id="84df3-1207">因此，您只能覆寫<xref:System.Windows.UIElement.MeasureCore%2A>做為改變配置量值的特性，如果您衍生自<xref:System.Windows.UIElement>透過不包含繼承<xref:System.Windows.FrameworkElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1207">Therefore, you only override <xref:System.Windows.UIElement.MeasureCore%2A> as a means to alter layout measure characteristics if you derive from <xref:System.Windows.UIElement> through an inheritance that does not include <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="84df3-1208">如果您嘗試上建置您自己的實作，這可能是大小寫[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]核心層級。</span><span class="sxs-lookup"><span data-stu-id="84df3-1208">This might be the case if you are attempting to build your own implementation on the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] core-level.</span></span> <span data-ttu-id="84df3-1209">否則，如果您衍生自<xref:System.Windows.FrameworkElement>，則量值的行為的實作範本<xref:System.Windows.FrameworkElement>實作<xref:System.Windows.FrameworkElement.MeasureOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1209">Otherwise, if you are deriving from <xref:System.Windows.FrameworkElement>, then the implementation template for Measure behavior is the <xref:System.Windows.FrameworkElement> implementation of .<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.</span></span>  
  
 <span data-ttu-id="84df3-1210">父項目具有子元素必須呼叫<xref:System.Windows.UIElement.Measure%2A>上每個子系，否則這些子元素不調整大小或排列配置就會有效地消失。</span><span class="sxs-lookup"><span data-stu-id="84df3-1210">A parent element with child elements must call <xref:System.Windows.UIElement.Measure%2A> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-1211">典型的覆寫<xref:System.Windows.UIElement.MeasureCore%2A>遵循這個近似的模式 (沒有內建集合，稱為`VisualChildren`;`VisualChildren`是一個預留位置，表示您的項目會維護任何子系集合)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1211">A typical override of <xref:System.Windows.UIElement.MeasureCore%2A> follows this approximate pattern (there is not a built-in collection called `VisualChildren`; `VisualChildren` is a  placeholder that represents whatever child collection your element maintains).</span></span>  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   <span data-ttu-id="84df3-1212">您必須呼叫<xref:System.Windows.UIElement.Measure%2A>每個子項目上。</span><span class="sxs-lookup"><span data-stu-id="84df3-1212">You must call <xref:System.Windows.UIElement.Measure%2A> on each child element.</span></span>  
  
-   <span data-ttu-id="84df3-1213">一般而言，您的實作應該快取之間的度量資訊<xref:System.Windows.UIElement.MeasureCore%2A>和<xref:System.Windows.UIElement.ArrangeCore%2A>方法會呼叫相同的項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1213">Generally, your implementation should cache measurement information between the <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> method calls in the same element.</span></span>  
  
-   <span data-ttu-id="84df3-1214">呼叫的基底實作<xref:System.Windows.UIElement.MeasureCore%2A>並非必要，但可能適用的基底實作會提供所需的版面配置功能。</span><span class="sxs-lookup"><span data-stu-id="84df3-1214">Calling base implementations of <xref:System.Windows.UIElement.MeasureCore%2A> is not required, but might be appropriate if the base implementation provides a desired layout capability.</span></span>  
  
-   <span data-ttu-id="84df3-1215">呼叫<xref:System.Windows.UIElement.Measure%2A>子系上項目應該傳遞相同`availableSize`身為其父代或區域的子集，根據的配置類型的父項目支援。</span><span class="sxs-lookup"><span data-stu-id="84df3-1215">Calls to <xref:System.Windows.UIElement.Measure%2A> on child elements should pass either the same `availableSize` as the parent, or a subset of the area, depending on the type of layout the parent element supports.</span></span> <span data-ttu-id="84df3-1216">比方說，它會有效移除項目專用框線或邊框距離、 捲軸，或自訂控制項的區域。</span><span class="sxs-lookup"><span data-stu-id="84df3-1216">For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-1217">實作必須能夠處理提供給值<paramref name="availableSize" />，為無限。</span><span class="sxs-lookup"><span data-stu-id="84df3-1217">Implementations must be able to process a value provided for <paramref name="availableSize" /> that is infinite.</span></span> <span data-ttu-id="84df3-1218">無限值表示沒有所要求的條件約束，而實際上會延遲到父項目，透過遞迴呼叫量值的度量選擇。</span><span class="sxs-lookup"><span data-stu-id="84df3-1218">An infinite value indicates no requested constraints, and effectively defers measurement choice to the parent element, through recursive Measure calls.</span></span>  
  
<span data-ttu-id="84df3-1219">實作可以考慮針對提供的值<paramref name="availableSize" />是軟式條件約束。</span><span class="sxs-lookup"><span data-stu-id="84df3-1219">Implementations can consider the value provided for <paramref name="availableSize" /> to be a soft constraint.</span></span> <span data-ttu-id="84df3-1220">子元素可能會指定較大的大小，即使應用程式程式碼的其他層面能夠判斷目前的實際大小的父項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1220">The child element might specify a larger size, even if other aspects of application code were able to determine the current actual size of the parent element.</span></span> <span data-ttu-id="84df3-1221">大型要求是指出子項目會查詢父元素是否可以支援顯示內容區域內的內容捲動的慣例。</span><span class="sxs-lookup"><span data-stu-id="84df3-1221">The large size request is a convention that indicates that the child element is querying whether your parent element can support content scrolling within a content display region.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1222">指標在此元素上方且按下任何滑鼠按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1222">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1223">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.MouseDown>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1223">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-1224">附加至事件處理常式<xref:System.Windows.UIElement.MouseDown>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-1224">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-1225"><xref:System.Windows.UIElement.MouseDown>通常就會引發事件一起<xref:System.Windows.UIElement.MouseLeftButtonDown>或<xref:System.Windows.UIElement.MouseRightButtonDown>，對應到其中的兩個標準的滑鼠按鈕按下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1225">The <xref:System.Windows.UIElement.MouseDown> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="84df3-1226"><xref:System.Windows.UIElement.MouseLeftButtonDown> 並<xref:System.Windows.UIElement.MouseRightButtonDown>也是路由的事件，但它們是直接路由的事件，並適當按鈕特有的事件引發時<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件到達事件路由中的此項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1226"><xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="84df3-1227">請參閱備註<xref:System.Windows.UIElement.MouseLeftButtonDown>或<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1227">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="84df3-1228">某些控制項可能會繼承類別處理滑鼠按鈕的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1228">Some controls might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="84df3-1229">滑鼠左的按鈕向下事件是最可能的事件，讓控制項中的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1229">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="84df3-1230">類別處理，通常會將標示基礎<xref:System.Windows.Input.Mouse>為已處理的類別事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1230">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="84df3-1231">一旦被標示為已處理，通常無法引發另一個執行個體處理常式附加至該項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1231">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="84df3-1232">也不通常會引發任何其他類別或執行個體處理常式附加至事件反昇方向朝向 UI 樹狀目錄中的根項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1232">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="84df3-1233">您可以解決的問題，在上述的重要概述，並仍收到<xref:System.Windows.UIElement.MouseDown>滑鼠左的按鈕向下事件已處理就使用任一這些方案的類別衍生類別上的事件：</span><span class="sxs-lookup"><span data-stu-id="84df3-1233">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="84df3-1234">附加的處理常式<xref:System.Windows.UIElement.PreviewMouseDown>未標示為已由控制項所處理的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1234">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="84df3-1235">請注意，因為這是預覽事件，路由從根目錄開始，並向下控制項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1235">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="84df3-1236">藉由呼叫可循序註冊控制項上的處理常式<xref:System.Windows.UIElement.AddHandler%2A>，然後選擇 [簽章] 選項，可讓處理常式來接聽事件，即使它們已經標示為已處理路由的事件資料中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1236">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1237">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1237">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1238">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1238">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseDownEvent>|  
|<span data-ttu-id="84df3-1239">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1239">Routing strategy</span></span>|<span data-ttu-id="84df3-1240">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1240">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1241">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1241">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-1242">對應的通道事件是<xref:System.Windows.UIElement.PreviewMouseDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1242">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseDown>.</span></span>  
  
-   <span data-ttu-id="84df3-1243">覆寫<xref:System.Windows.UIElement.OnMouseDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1243">Override <xref:System.Windows.UIElement.OnMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1244">識別 <see cref="E:System.Windows.UIElement.MouseDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1244">Identifies the <see cref="E:System.Windows.UIElement.MouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1245">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1245">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1246">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1246">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1247">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1247">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1248">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1248">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1249">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1249">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1250">滑鼠指標進入此元素的邊界時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1250">Occurs when the mouse pointer enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1251"><xref:System.Windows.UIElement.MouseEnter> 是，會使用直接的事件處理路由策略。</span><span class="sxs-lookup"><span data-stu-id="84df3-1251"><xref:System.Windows.UIElement.MouseEnter> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="84df3-1252">直接路由的事件不會引發路由;相反地，它們會以處理相同的項目引發的狀況。</span><span class="sxs-lookup"><span data-stu-id="84df3-1252">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="84df3-1253">不過，它們會啟用路由的事件的行為，例如樣式中的事件觸發程序的其他層面。</span><span class="sxs-lookup"><span data-stu-id="84df3-1253">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="84df3-1254">雖然<xref:System.Windows.UIElement.MouseEnter>播放軌，當滑鼠指標進入範圍的項目，這個事件更多解譯為常值回報<xref:System.Windows.UIElement.IsMouseOver%2A>屬性值已從`false`至`true`這個項目上。</span><span class="sxs-lookup"><span data-stu-id="84df3-1254">Although <xref:System.Windows.UIElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="84df3-1255">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.MouseEnter>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1255">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-1256">附加至事件處理常式<xref:System.Windows.UIElement.MouseEnter>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-1256">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-1257">A <xref:System.Windows.Controls.Button> (或任何<xref:System.Windows.Controls.Primitives.ButtonBase>衍生類別) 可原生處理<xref:System.Windows.UIElement.KeyDown>按鈕具有焦點，並按下的按鍵是空格鍵時的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1257">A <xref:System.Windows.Controls.Button> (or any <xref:System.Windows.Controls.Primitives.ButtonBase> derived class) has native handling for a <xref:System.Windows.UIElement.KeyDown> event when the button has focus, and the pressed key is the space bar.</span></span> <span data-ttu-id="84df3-1258">原生處理引發<xref:System.Windows.Controls.Primitives.ButtonBase.Click>作為來源，按鈕的事件，即使將滑鼠指標似乎未移動，也會擷取滑鼠。</span><span class="sxs-lookup"><span data-stu-id="84df3-1258">The native handling raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move.</span></span> <span data-ttu-id="84df3-1259">因滑鼠捕捉，而<xref:System.Windows.UIElement.MouseEnter>與做為來源按鈕也會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1259">As a result of the mouse capture, a <xref:System.Windows.UIElement.MouseEnter> event is also raised with the button as the source.</span></span> <span data-ttu-id="84df3-1260">一般而言，如果項目捕捉滑鼠，然後<xref:System.Windows.UIElement.MouseEnter>就會引發，以及<xref:System.Windows.UIElement.GotMouseCapture>和可能是其他控制項特定事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1260">In general, if an element captures the mouse, then <xref:System.Windows.UIElement.MouseEnter> is raised, as well as <xref:System.Windows.UIElement.GotMouseCapture> and possibly other control-specific events.</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1261">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1261">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1262">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1262">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|<span data-ttu-id="84df3-1263">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1263">Routing strategy</span></span>|<span data-ttu-id="84df3-1264">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-1264">Direct</span></span>|  
|<span data-ttu-id="84df3-1265">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1265">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="84df3-1266">覆寫<xref:System.Windows.UIElement.OnMouseEnter%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1266">Override <xref:System.Windows.UIElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1267">識別 <see cref="E:System.Windows.UIElement.MouseEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1267">Identifies the <see cref="E:System.Windows.UIElement.MouseEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1268">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1268">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1269">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1269">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1270">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1270">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1271">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1271">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1272">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1272">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1273">滑鼠指標離開此元素的邊界時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1273">Occurs when the mouse pointer leaves the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1274"><xref:System.Windows.UIElement.MouseLeave> 是，會使用直接的事件處理路由策略。</span><span class="sxs-lookup"><span data-stu-id="84df3-1274"><xref:System.Windows.UIElement.MouseLeave> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="84df3-1275">直接路由的事件不會引發路由;相反地，它們會以處理相同的項目引發的狀況。</span><span class="sxs-lookup"><span data-stu-id="84df3-1275">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="84df3-1276">不過，它們會啟用路由的事件的行為，例如樣式中的事件觸發程序的其他層面。</span><span class="sxs-lookup"><span data-stu-id="84df3-1276">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="84df3-1277">雖然<xref:System.Windows.UIElement.MouseLeave>播放軌，當滑鼠離開項目，這個事件更多解譯為常值回報<xref:System.Windows.UIElement.IsMouseOver%2A>屬性值已從`true`至`false`這個項目上。</span><span class="sxs-lookup"><span data-stu-id="84df3-1277">Although <xref:System.Windows.UIElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="84df3-1278">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.MouseLeave>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1278">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-1279">附加至事件處理常式<xref:System.Windows.UIElement.MouseLeave>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-1279">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1280">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1280">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1281">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1281">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|<span data-ttu-id="84df3-1282">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1282">Routing strategy</span></span>|<span data-ttu-id="84df3-1283">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-1283">Direct</span></span>|  
|<span data-ttu-id="84df3-1284">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1284">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="84df3-1285">覆寫<xref:System.Windows.UIElement.OnMouseLeave%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1285">Override <xref:System.Windows.UIElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1286">識別 <see cref="E:System.Windows.UIElement.MouseLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1286">Identifies the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1287">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1287">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1288">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1288">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1289">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1289">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1290">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1290">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1291">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1291">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1292">滑鼠指標在此元素上方且按下滑鼠左按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1292">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1293">雖然這種現象可能會遵循事件反昇路由項目樹狀結構，實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1293">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-1294">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1294">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="84df3-1295">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1295">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="84df3-1296">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1296">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="84df3-1297">如果您將標示<xref:System.Windows.UIElement.MouseLeftButtonDown>處理，您基本上將標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1297">If you mark <xref:System.Windows.UIElement.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="84df3-1298">這可能包含的類別處理常式產生事件這類<xref:System.Windows.Controls.Control.MouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1298">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="84df3-1299">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1299">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="84df3-1300">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1300">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="84df3-1301">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1301">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="84df3-1302">某些控制項類別可能具有固有處理按鈕的滑鼠事件的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-1302">Some control classes might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="84df3-1303">滑鼠左的按鈕向下事件是最可能的事件，讓控制項中的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1303">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="84df3-1304">類別處理，通常會將標示基礎<xref:System.Windows.Input.Mouse>為已處理的類別事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1304">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="84df3-1305">一旦被標示為已處理，通常無法引發另一個執行個體處理常式附加至該項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1305">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="84df3-1306">也不通常會引發任何其他類別或執行個體處理常式附加至事件反昇方向朝向 UI 樹狀目錄中的根項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1306">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="84df3-1307">您可以解決的問題，在上述的重要概述，並仍收到<xref:System.Windows.UIElement.MouseLeftButtonDown>滑鼠左的按鈕向下事件已處理就使用任一這些方案的類別衍生類別上的事件：</span><span class="sxs-lookup"><span data-stu-id="84df3-1307">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="84df3-1308">附加的處理常式<xref:System.Windows.UIElement.PreviewMouseDown>未標示為已由控制項所處理的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1308">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="84df3-1309">請注意，因為這是預覽事件，路由從根目錄開始，並向下控制項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1309">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="84df3-1310">藉由呼叫可循序註冊控制項上的處理常式<xref:System.Windows.UIElement.AddHandler%2A>，然後選擇 [簽章] 選項，可讓處理常式來接聽事件，即使它們已經標示為已處理路由的事件資料中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1310">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1311">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1311">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1312">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1312">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|<span data-ttu-id="84df3-1313">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1313">Routing strategy</span></span>|<span data-ttu-id="84df3-1314">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-1314">Direct</span></span>|  
|<span data-ttu-id="84df3-1315">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1315">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-1316">覆寫<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1316">Override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1317">識別 <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1317">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1318">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1318">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1319">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1319">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1320">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1320">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1321">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1321">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1322">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1322">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1323">滑鼠指標在此元素上方且放開滑鼠左按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1323">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1324">雖然這種現象可能會遵循事件反昇路由項目樹狀結構，實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1324">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-1325">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1325">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="84df3-1326">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1326">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="84df3-1327">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1327">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="84df3-1328">如果您將標示<xref:System.Windows.UIElement.MouseLeftButtonUp>處理，您基本上將標示<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1328">If you mark <xref:System.Windows.UIElement.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="84df3-1329">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1329">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="84df3-1330">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1330">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="84df3-1331">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1331">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1332">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1332">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1333">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1333">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|<span data-ttu-id="84df3-1334">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1334">Routing strategy</span></span>|<span data-ttu-id="84df3-1335">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-1335">Direct</span></span>|  
|<span data-ttu-id="84df3-1336">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1336">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-1337">覆寫<xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1337">Override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1338">識別 <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1338">Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1339">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1339">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1340">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1340">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1341">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1341">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1342">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1342">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1343">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1343">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1344">滑鼠指標在此元素上方移動時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1344">Occurs when the mouse pointer moves while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1345">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.MouseMove>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1345">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-1346">附加至事件處理常式<xref:System.Windows.UIElement.MouseMove>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-1346">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1347">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1347">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1348">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1348">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|<span data-ttu-id="84df3-1349">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1349">Routing strategy</span></span>|<span data-ttu-id="84df3-1350">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1350">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1351">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1351">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="84df3-1352">對應的通道事件是<xref:System.Windows.UIElement.PreviewMouseMove>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1352">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseMove>.</span></span>  
  
-   <span data-ttu-id="84df3-1353">覆寫<xref:System.Windows.UIElement.OnMouseMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1353">Override <xref:System.Windows.UIElement.OnMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1354">識別 <see cref="E:System.Windows.UIElement.MouseMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1354">Identifies the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1355">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1355">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1356">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1356">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1357">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1357">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1358">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1358">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1359">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1359">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1360">滑鼠指標在此元素上方且按下滑鼠右按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1360">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1361">雖然這種現象可能會遵循事件反昇路由項目樹狀結構，實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1361">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-1362">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1362">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="84df3-1363">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1363">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="84df3-1364">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1364">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="84df3-1365">如果您將標示<xref:System.Windows.UIElement.MouseRightButtonDown>處理，您基本上將標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1365">If you mark <xref:System.Windows.UIElement.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="84df3-1366">這可能包含的類別處理常式產生事件這類<xref:System.Windows.Controls.Control.MouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1366">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="84df3-1367">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1367">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="84df3-1368">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1368">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="84df3-1369">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1369">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-1370">向右按鈕的滑鼠事件中通常會有原生處理的應用程式案例。</span><span class="sxs-lookup"><span data-stu-id="84df3-1370">Right button mouse events frequently have native handling in application scenarios.</span></span> <span data-ttu-id="84df3-1371">比方說，向下的滑鼠右按鈕可能會顯示內容功能表。</span><span class="sxs-lookup"><span data-stu-id="84df3-1371">For instance, a right mouse button down might display a context menu.</span></span> <span data-ttu-id="84df3-1372">請參閱[ContextMenu 概觀](~/docs/framework/wpf/controls/contextmenu-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1372">See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1373">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1373">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1374">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1374">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|<span data-ttu-id="84df3-1375">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1375">Routing strategy</span></span>|<span data-ttu-id="84df3-1376">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-1376">Direct</span></span>|  
|<span data-ttu-id="84df3-1377">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1377">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-1378">覆寫<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1378">Override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1379">識別 <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1379">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1380">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1380">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1381">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1381">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1382">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1382">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1383">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1383">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1384">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1384">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1385">滑鼠指標在此元素上方且放開滑鼠右按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1385">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1386">雖然這種現象可能會遵循事件反昇路由項目樹狀結構，實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1386">Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-1387">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1387">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="84df3-1388">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1388">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="84df3-1389">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1389">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="84df3-1390">如果您將標示<xref:System.Windows.UIElement.MouseRightButtonUp>處理，您基本上將標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1390">If you mark <xref:System.Windows.UIElement.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="84df3-1391">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1391">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="84df3-1392">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1392">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="84df3-1393">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1393">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1394">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1394">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1395">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1395">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|<span data-ttu-id="84df3-1396">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1396">Routing strategy</span></span>|<span data-ttu-id="84df3-1397">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-1397">Direct</span></span>|  
|<span data-ttu-id="84df3-1398">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1398">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-1399">覆寫<xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1399">Override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1400">識別 <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1400">Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1401">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1401">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1402">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1402">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1403">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1403">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1404">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1404">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1405">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1405">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1406">在此元素上方放開任何滑鼠按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1406">Occurs when any mouse button is released over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1407">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.MouseUp>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1407">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-1408">附加至事件處理常式<xref:System.Windows.UIElement.MouseUp>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-1408">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-1409"><xref:System.Windows.UIElement.MouseUp>通常就會引發事件一起<xref:System.Windows.UIElement.MouseLeftButtonUp>或<xref:System.Windows.UIElement.MouseRightButtonUp>，對應至其中的兩個標準的滑鼠按鈕的版本。</span><span class="sxs-lookup"><span data-stu-id="84df3-1409">The <xref:System.Windows.UIElement.MouseUp> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons.</span></span> <span data-ttu-id="84df3-1410"><xref:System.Windows.UIElement.MouseLeftButtonUp> 並<xref:System.Windows.UIElement.MouseRightButtonUp>也是路由的事件，但它們是直接路由的事件，並適當按鈕特有的事件引發時<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>事件到達事件路由中的此項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1410"><xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="84df3-1411">請參閱備註<xref:System.Windows.UIElement.MouseLeftButtonUp>或<xref:System.Windows.UIElement.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1411">See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1412">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1412">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1413">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1413">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseUpEvent>|  
|<span data-ttu-id="84df3-1414">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1414">Routing strategy</span></span>|<span data-ttu-id="84df3-1415">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1415">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1416">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1416">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-1417">對應的通道事件是<xref:System.Windows.UIElement.PreviewMouseUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1417">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseUp>.</span></span>  
  
-   <span data-ttu-id="84df3-1418">覆寫<xref:System.Windows.UIElement.OnMouseUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1418">Override <xref:System.Windows.UIElement.OnMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1419">識別 <see cref="E:System.Windows.UIElement.MouseUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1419">Identifies the <see cref="E:System.Windows.UIElement.MouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1420">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1420">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1421">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1421">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1422">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1422">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1423">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1423">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1424">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1424">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1425">滑鼠指標在此元素上方且使用者滾動滑鼠滾輪時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1425">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1426">焦點或滑鼠捕捉會優先於滑鼠指標的所在;因此，如果您收到<xref:System.Windows.UIElement.MouseWheel>焦點或擷取的項目中的事件，將滑鼠指標可能實際上是透過另一個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1426">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="84df3-1427">此事件建立的別名<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.MouseWheel>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1427">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-1428">附加至事件處理常式<xref:System.Windows.UIElement.MouseWheel>事件會附加至基礎<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-1428">Event handlers that are attached to the <xref:System.Windows.UIElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-1429">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-1429">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-1430">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-1430">Identifier field</span></span>|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|<span data-ttu-id="84df3-1431">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-1431">Routing strategy</span></span>|<span data-ttu-id="84df3-1432">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-1432">Bubbling</span></span>|  
|<span data-ttu-id="84df3-1433">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-1433">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="84df3-1434">對應的通道事件是<xref:System.Windows.UIElement.PreviewMouseWheel>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1434">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseWheel>.</span></span>  
  
-   <span data-ttu-id="84df3-1435">覆寫<xref:System.Windows.UIElement.OnMouseWheel%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1435">Override <xref:System.Windows.UIElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-1436">識別 <see cref="E:System.Windows.UIElement.MouseWheel" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1436">Identifies the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1437">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1437">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-1438">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1438">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-1439">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1439">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-1440">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1440">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-1441">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1441">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="84df3-1442">包含屬性的周遊要求，該屬性指出在現有定位順序中周遊的模式，或以視覺化方式移動的方向。</span><span class="sxs-lookup"><span data-stu-id="84df3-1442">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</span></span></param>
        <summary><span data-ttu-id="84df3-1443">嘗試將焦點從這個項目移至另一個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1443">Attempts to move focus from this element to another element.</span></span> <span data-ttu-id="84df3-1444">移動焦點的方向是由指引方向所指定，該指引方向是在這個項目之視覺化父代的組織內解譯。</span><span class="sxs-lookup"><span data-stu-id="84df3-1444">The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</span></span></summary>
        <returns><span data-ttu-id="84df3-1445">如果已執行要求的周遊則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1445"><see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1446">請確定您檢查傳回的值，這個方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1446">Make sure you check the return value of this method.</span></span> <span data-ttu-id="84df3-1447">傳回值為`false`如果周遊時碰到控制項的組合所定義的定位停駐點，並周遊要求並未要求要包裝，可能會傳回。</span><span class="sxs-lookup"><span data-stu-id="84df3-1447">A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1448">便捷鍵事件的事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1448">The event data to the access key event.</span></span> <span data-ttu-id="84df3-1449">該事件資料會報告叫用哪個便捷鍵，並指出控制這些事件之傳送的 <see cref="T:System.Windows.Input.AccessKeyManager" /> 物件，是否也會將這個便捷鍵引動過程傳送至其他項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1449">The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</span></span></param>
        <summary><span data-ttu-id="84df3-1450">當叫用對這個項目有意義的便捷鍵 (Access Key) 時，為其提供類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1450">Provides class handling for when an access key that is meaningful for this element is invoked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1451">在任何實際 AccessKey 事件<xref:System.Windows.UIElement>類別，或其他位置，您可以引發，或附加的處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1451">There is no actual AccessKey event in the <xref:System.Windows.UIElement> class, or elsewhere, which you can raise or attach handlers for.</span></span> <span data-ttu-id="84df3-1452">相反地，透過專用的管理員類別，產生事件<xref:System.Windows.Input.AccessKeyManager>後, 置處理所有的輸入来搜尋適用於整個輸入模型的存取金鑰。</span><span class="sxs-lookup"><span data-stu-id="84df3-1452">Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-1453">在這個方法的預設實作<see cref="T:System.Windows.UIElement" />設定鍵盤焦點設定至這個項目 (藉由呼叫<see cref="M:System.Windows.UIElement.Focus" />)。</span><span class="sxs-lookup"><span data-stu-id="84df3-1453">The default implementation of this method in <see cref="T:System.Windows.UIElement" /> sets keyboard focus to this element (by calling <see cref="M:System.Windows.UIElement.Focus" />).</span></span> <span data-ttu-id="84df3-1454">如果它們是可設定焦點，因為它是針對協助工具案例的預期的行為，實作應永久保存此行為。</span><span class="sxs-lookup"><span data-stu-id="84df3-1454">Implementations should perpetuate this behavior if they are focusable, because it is an expected behavior for accessibility scenarios.</span></span> <span data-ttu-id="84df3-1455">請注意，基底實作不使用傳遞的事件資料執行任何動作，而且會引發任何進一步的事件;它只會將焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-1455">Note that the base implementation does nothing with the passed event data and raises no further event; it just sets the focus.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit&#xA;override this.OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit" Usage="uIElement.OnChildDesiredSizeChanged child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="84df3-1456">正在調整大小的子項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1456">The child element that is being resized.</span></span></param>
        <summary><span data-ttu-id="84df3-1457">會在調整子項目的大小時支援配置行為。</span><span class="sxs-lookup"><span data-stu-id="84df3-1457">Supports layout behavior when a child element is resized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1458">您的應用程式程式碼通常不呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1458">This method is typically not called by your application code.</span></span> <span data-ttu-id="84df3-1459">它會公開讓衍生的類別可以進行進一步的項目檢查其本身可能是無效的配置狀態。</span><span class="sxs-lookup"><span data-stu-id="84df3-1459">It is exposed so that derived element classes can make further checks on their own possibly invalid layout state.</span></span> <span data-ttu-id="84df3-1460">類別可能也會嘗試最佳化，以根據子項目大小變更版面配置階段的處理時間降至最低。</span><span class="sxs-lookup"><span data-stu-id="84df3-1460">Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements.</span></span> <span data-ttu-id="84df3-1461">範例衍生項目類別可實作<xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A>是<xref:System.Windows.Controls.Grid>控制項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1461">An example derived element class that implements <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> is the <xref:System.Windows.Controls.Grid> control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-1462"><see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />方法具有呼叫的預設實作<see cref="M:System.Windows.UIElement.InvalidateMeasure" />本身。</span><span class="sxs-lookup"><span data-stu-id="84df3-1462">The <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> method has the default implementation of calling <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> on itself.</span></span> <span data-ttu-id="84df3-1463">一般實作會是： 執行任何最佳化您自己的項目支援，並接著通常呼叫基底<see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />至少其中一個程式碼分支 （表示 「 中途 」 的狀態，每個快取邏輯自己的量值的一個）。</span><span class="sxs-lookup"><span data-stu-id="84df3-1463">A typical implementation would be: do whatever optimization your own element supports, and then typically call base <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> from at least one of the code branches (the one that indicated "dirty" state per your own measure caching logic).</span></span>  
  
<span data-ttu-id="84df3-1464">這個方法只會呼叫在版面配置，處理時的子系本身發出大小變更。</span><span class="sxs-lookup"><span data-stu-id="84df3-1464">This method is only called in the layout processing if it was the child itself that originated the size changes.</span></span> <span data-ttu-id="84df3-1465">否則，如果父項目會起始<see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />傳遞，版面配置系統規則，根據父代會重新計算版面配置已。</span><span class="sxs-lookup"><span data-stu-id="84df3-1465">Otherwise, if the parent element initiates the <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> pass, according to the layout system rules, the parent is recalculating layout already.</span></span> <span data-ttu-id="84df3-1466">版面配置系統會處理子系的父系，順序的版面配置，因此是必要的子元素的版面配置呼叫沒有傳回父項目調整大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-1466">The layout system processes layout in the order of child-to-parent, so no return to parent element sizing from the child element layout calls is necessary.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-1467">為 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基礎結構傳回類別特定的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1467">Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span></summary>
        <returns><span data-ttu-id="84df3-1468">因型別而異的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1468">The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-1469">此方法的實作會在呼叫特定的建構函式通常是<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />實作，並將它傳回為傳回值。</span><span class="sxs-lookup"><span data-stu-id="84df3-1469">The implementation of this method is typically to call the constructor of a specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation, and return it as the return value.</span></span>  
  
<span data-ttu-id="84df3-1470">所有<see cref="T:System.Windows.UIElement" />衍生的類別應該實作這個方法，以提供自己的特定<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />實作[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]基礎結構。</span><span class="sxs-lookup"><span data-stu-id="84df3-1470">All <see cref="T:System.Windows.UIElement" /> derived classes should implement this method in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations to the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span></span> <span data-ttu-id="84df3-1471">如需實作此模式的詳細資訊，請參閱<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1471">For details on implementing this pattern, see <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1472">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1472">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1473">當未處理的 <see cref="E:System.Windows.DragDrop.DragEnter" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1473">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1474">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1474">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1475">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1475">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1476">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1476">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1477">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1477">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1478">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1478">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1479">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1479">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1480">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1480">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1481">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1481">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1482">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1482">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1483">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1483">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1484">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1484">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1485">當未處理的 <see cref="E:System.Windows.DragDrop.DragLeave" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1485">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1486">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1486">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1487">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1487">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1488">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1488">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1489">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1489">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1490">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1490">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1491">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1491">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1492">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1492">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1493">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1493">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1494">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1494">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1495">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1495">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1496">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1496">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1497">當未處理的 <see cref="E:System.Windows.DragDrop.DragOver" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1497">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1498">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1498">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1499">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1499">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1500">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1500">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1501">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1501">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1502">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1502">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1503">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1503">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1504">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1504">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1505">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1505">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1506">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1506">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1507">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1507">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1508">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1508">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1509">當未處理的 <see cref="E:System.Windows.DragDrop.DragEnter" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1509">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1510">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1510">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1511">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1511">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1512">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1512">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1513">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1513">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1514">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1514">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1515">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1515">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1516">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1516">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1517">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1517">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1518">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1518">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1519">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1519">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1520">包含事件資料的 <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1520">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1521">當未處理的 <see cref="E:System.Windows.DragDrop.GiveFeedback" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1521">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1522">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1522">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1523">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1523">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1524">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1524">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1525">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1525">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1526">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1526">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1527">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1527">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1528">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1528">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1529">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1529">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1530">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1530">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1531">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1531">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1532">包含事件資料的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1532">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="84df3-1533">此事件資料必須包含 <see cref="E:System.Windows.UIElement.GotFocus" /> 事件的識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1533">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="84df3-1534">使用所提供的事件資料引發 <see cref="E:System.Windows.UIElement.GotFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1534">Raises the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event by using the event data provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1535">此方法中，雖然是虛擬的沒有預設實作會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1535">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="84df3-1536">這在 \* 方法實作用來引發事件，這個相同的方法實作是在內部叫用來引發事件時<xref:System.Windows.UIElement.IsFocused%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="84df3-1536">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="84df3-1537"><xref:System.Windows.UIElement.OnGotFocus%2A>實作不同於其他[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]上 \* 只提供便利的方式來加入類別處理該事件的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1537">The <xref:System.Windows.UIElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-1538">除非您有不會引發焦點事件變成故意或不尋常的需要，請確定您的實作會呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1538">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="84df3-1539">否則，<see cref="E:System.Windows.UIElement.GotFocus" />通常將焦點設定至這個項目的一般使用者作業期間將不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1539">Otherwise, the <see cref="E:System.Windows.UIElement.GotFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="84df3-1540">如果您不想要您可設定焦點的項目，您可以防止項目設定成為可設定焦點<see cref="P:System.Windows.UIElement.Focusable" />至<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1540">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1541">包含事件資料的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1541">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1542">當未處理的 <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1542">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1543">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1543">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1544">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1544">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1545">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1545">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1546">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1546">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1547">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1547">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1548">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1548">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1549">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1549">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1550">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1550">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1551">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1551">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1552">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1552">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1553">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1553">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1554">當未處理的 <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1554">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1555">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1555">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1556">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1556">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1557">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1557">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1558">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1558">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1559">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1559">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1560">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1560">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1561">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1561">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1562">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1562">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1563">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1563">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1564">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1564">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1565">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1565">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1566">當未處理的 <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1566">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1567">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1567">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1568">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1568">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1569">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1569">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1570">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1570">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1571">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1571">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1572">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1572">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1573">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1573">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1574">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1574">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1575">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1575">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1576">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1576">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1577"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1577">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1578">提供 <see cref="E:System.Windows.UIElement.GotTouchCapture" /> 路由事件的類別處理，而這個事件會在擷取到對此項目的觸控時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1578">Provides class handling for the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1579"><xref:System.Windows.UIElement.OnGotTouchCapture%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1579">The <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-1580">覆寫<xref:System.Windows.UIElement.OnGotTouchCapture%2A>衍生類別來處理在<xref:System.Windows.UIElement.GotTouchCapture>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1580">Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.GotTouchCapture> event.</span></span> <span data-ttu-id="84df3-1581">請務必呼叫基底類別<xref:System.Windows.UIElement.OnGotTouchCapture%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1581">Be sure to call the base class' <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1582">包含事件資料的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1582">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1583">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1583">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="84df3-1584">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1584">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1585">這個虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsKeyboardFocused%2A>相依性屬性變更。</span><span class="sxs-lookup"><span data-stu-id="84df3-1585">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocused%2A> dependency property changes.</span></span> <span data-ttu-id="84df3-1586">虛擬方法會先引發，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1586">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="84df3-1587">則<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1587">Then the <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="84df3-1588">請注意，<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1588">Notice that the  <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is not a routed event.</span></span> <span data-ttu-id="84df3-1589">因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1589">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="84df3-1590">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1590">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1591">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1591">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-1592">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-1592">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1593"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1593">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1594">在此項目引發 <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> 事件前叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1594">Invoked just before the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> event is raised by this element.</span></span> <span data-ttu-id="84df3-1595">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1595">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1596">這個虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>相依性屬性變更。</span><span class="sxs-lookup"><span data-stu-id="84df3-1596">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> dependency property changes .</span></span> <span data-ttu-id="84df3-1597">虛擬方法會先引發，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1597">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="84df3-1598">則<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1598">Then the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="84df3-1599">請注意，<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1599">Notice that the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is not a routed event.</span></span> <span data-ttu-id="84df3-1600">因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1600">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="84df3-1601">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1601">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1602">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1602">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-1603">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-1603">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1604">包含事件資料的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1604">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1605">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1605">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="84df3-1606">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1606">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1607">這個虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsMouseCaptured%2A>相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="84df3-1607">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="84df3-1608">虛擬方法會先引發，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1608">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="84df3-1609">則<xref:System.Windows.UIElement.IsMouseCapturedChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1609">Then the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="84df3-1610">請注意，<xref:System.Windows.UIElement.IsMouseCapturedChanged>事件就不會是路由的事件。因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1610">Notice that the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="84df3-1611">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1611">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1612">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1612">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-1613">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-1613">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1614"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1614">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1615">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1615">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="84df3-1616">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1616">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-1617">這個虛擬方法，就會引發時的值<see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" />相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="84df3-1617">This virtual method is raised when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property changes its value.</span></span> <span data-ttu-id="84df3-1618">虛擬方法會先引發，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1618">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="84df3-1619">則<see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1619">Then the <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised with that same event data instance.</span></span> <span data-ttu-id="84df3-1620">請注意，事件不是路由的事件。因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1620">Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.</span></span>  
  
<span data-ttu-id="84df3-1621">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1621">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1622">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1622">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-1623">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-1623">You may call base either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1624">包含事件資料的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1624">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1625">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1625">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="84df3-1626">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1626">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1627">這個虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsMouseDirectlyOver%2A>相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="84df3-1627">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="84df3-1628">虛擬方法會先引發，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1628">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="84df3-1629">則<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1629">Then the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="84df3-1630">請注意，<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1630">Notice that the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is not a routed event.</span></span> <span data-ttu-id="84df3-1631">因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1631">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="84df3-1632">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1632">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1633">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1633">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-1634">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-1634">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1635"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1635">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1636">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1636">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> event is raised on this element.</span></span> <span data-ttu-id="84df3-1637">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1637">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1638">這個虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsStylusCaptured%2A>相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="84df3-1638">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="84df3-1639">虛擬方法會先引發，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1639">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="84df3-1640">則<xref:System.Windows.UIElement.IsStylusCapturedChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1640">Then the <xref:System.Windows.UIElement.IsStylusCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="84df3-1641">請注意，事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1641">Notice that the event is not a routed event.</span></span> <span data-ttu-id="84df3-1642">因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1642">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="84df3-1643">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1643">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1644">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1644">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-1645">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-1645">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1646">包含事件資料的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1646">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1647">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1647">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> event is raised on this element.</span></span> <span data-ttu-id="84df3-1648">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1648">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1649">這個虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsStylusCaptureWithin%2A>相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="84df3-1649">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="84df3-1650">虛擬方法會先引發，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1650">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="84df3-1651">則<xref:System.Windows.UIElement.IsStylusCaptureWithinChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1651">Then the <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="84df3-1652">請注意，事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1652">Notice that the event is not a routed event.</span></span> <span data-ttu-id="84df3-1653">因此，您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1653">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="84df3-1654">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1654">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1655">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1655">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-1656">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-1656">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1657">包含事件資料的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1657">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1658">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> 事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1658">Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> event is raised on this element.</span></span> <span data-ttu-id="84df3-1659">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1659">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1660">這個虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsStylusDirectlyOver%2A>相依性屬性變更其值。</span><span class="sxs-lookup"><span data-stu-id="84df3-1660">This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="84df3-1661">虛擬方法會先引發，並可以操作為必要的事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1661">The virtual method is raised first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="84df3-1662">則<xref:System.Windows.UIElement.IsStylusDirectlyOverChanged>與該相同的事件資料執行個體就會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1662">Then the <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="84df3-1663">請注意，事件就不會路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1663">Notice that the event is not a routed event.</span></span> <span data-ttu-id="84df3-1664">因此您無法將它標示為已處理的類別處理常式中。</span><span class="sxs-lookup"><span data-stu-id="84df3-1664">Therefore you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="84df3-1665">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1665">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1666">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1666">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-1667">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-1667">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1668">包含事件資料的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1668">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1669">當未處理的 <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1669">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1670">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1670">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1671">按鍵輸入是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1671">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="84df3-1672">其他可依賴按鍵，例如，輸入和命令繫結的程式設計功能可能會處理按鍵之前它會公開為一般的按鍵輸入。</span><span class="sxs-lookup"><span data-stu-id="84df3-1672">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="84df3-1673">如果這些輸入系統功能將事件標示為已處理，然後<xref:System.Windows.UIElement.OnKeyDown%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1673">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="84df3-1674">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1674">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1675">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1675">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1676">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1676">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1677">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1677">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1678">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1678">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1679">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1679">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1680">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1680">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1681">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1681">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1682">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1682">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1683">包含事件資料的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1683">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1684">當未處理的 <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1684">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1685">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1685">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1686">按鍵輸入是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1686">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="84df3-1687">其他可依賴按鍵，例如，輸入和命令繫結的程式設計功能可能會處理按鍵之前它會公開為一般的按鍵輸入。</span><span class="sxs-lookup"><span data-stu-id="84df3-1687">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="84df3-1688">如果這些輸入系統功能將事件標示為已處理，然後<xref:System.Windows.UIElement.OnKeyUp%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1688">If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="84df3-1689">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1689">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1690">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1690">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1691">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1691">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1692">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1692">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1693">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1693">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1694">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1694">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1695">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1695">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1696">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1696">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1697">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1697">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1698">包含事件資料的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1698">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span></span> <span data-ttu-id="84df3-1699">此事件資料必須包含 <see cref="E:System.Windows.UIElement.LostFocus" /> 事件的識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-1699">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="84df3-1700">使用所提供的事件資料引發 <see cref="E:System.Windows.UIElement.LostFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1700">Raises the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event by using the event data that is provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1701">此方法中，雖然是虛擬的沒有預設實作會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1701">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="84df3-1702">這在 \* 方法實作用來引發事件，這個相同的方法實作是在內部叫用來引發事件時<xref:System.Windows.UIElement.IsFocused%2A>屬性值變更。</span><span class="sxs-lookup"><span data-stu-id="84df3-1702">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="84df3-1703">這項實作不同於其他[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]上 \* 只提供便利的方式來加入類別處理該事件的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1703">This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-1704">除非您有不會引發焦點事件變成故意或不尋常的需要，請確定您的實作會呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1704">Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation.</span></span> <span data-ttu-id="84df3-1705">否則，<see cref="E:System.Windows.UIElement.LostFocus" />通常將焦點設定至這個項目的一般使用者作業期間將不會引發事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1705">Otherwise, the <see cref="E:System.Windows.UIElement.LostFocus" /> event is not raised during typical user operations that ordinarily set focus to this element.</span></span> <span data-ttu-id="84df3-1706">如果您不想要您可設定焦點的項目，您可以防止項目設定成為可設定焦點<see cref="P:System.Windows.UIElement.Focusable" />至<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1706">If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement.Focusable" /> to <see langword="false" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1707">包含事件資料的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1707">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1708">當未處理的 <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1708">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1709">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1709">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1710">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1710">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1711">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1711">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1712">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1712">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1713">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1713">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1714">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1714">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1715">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1715">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1716">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1716">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1717">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1717">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1718">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1718">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1719">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1719">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1720">當未處理的 <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1720">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1721">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1721">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1722">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1722">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1723">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1723">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1724">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1724">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1725">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1725">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1726">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1726">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1727">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1727">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1728">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1728">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1729">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1729">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1730">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1730">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1731">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1731">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1732">當未處理的 <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1732">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1733">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1733">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1734">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1734">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1735">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1735">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1736">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1736">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1737">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1737">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1738">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1738">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1739">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1739">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1740">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1740">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1741">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1741">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1742">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1742">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1743"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1743">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1744">提供 <see cref="E:System.Windows.UIElement.LostTouchCapture" /> 路由事件的類別處理，而這個事件會在此項目失去觸控擷取時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-1744">Provides class handling for the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1745"><xref:System.Windows.UIElement.OnLostTouchCapture%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1745">The <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-1746">覆寫<xref:System.Windows.UIElement.OnLostTouchCapture%2A>衍生類別來處理在<xref:System.Windows.UIElement.LostTouchCapture>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1746">Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.LostTouchCapture> event.</span></span> <span data-ttu-id="84df3-1747">請務必呼叫基底類別<xref:System.Windows.UIElement.OnLostTouchCapture%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1747">Be sure to call the base class' <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit&#xA;override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="uIElement.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1748">事件的資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1748">The data for the event.</span></span></param>
        <summary><span data-ttu-id="84df3-1749">當 <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> 事件發生時呼叫。</span><span class="sxs-lookup"><span data-stu-id="84df3-1749">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1750"><xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1750">The <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-1751">覆寫<xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>衍生類別來處理在<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1751">Override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event.</span></span> <span data-ttu-id="84df3-1752">請務必呼叫<xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A>方法，因此，基底類別的基底類別的接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1752">Be sure to call the <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit&#xA;override this.OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit" Usage="uIElement.OnManipulationCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1753">事件的資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1753">The data for the event.</span></span></param>
        <summary><span data-ttu-id="84df3-1754">當 <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> 事件發生時呼叫。</span><span class="sxs-lookup"><span data-stu-id="84df3-1754">Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1755"><xref:System.Windows.UIElement.OnManipulationCompleted%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1755">The <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-1756">覆寫<xref:System.Windows.UIElement.OnManipulationCompleted%2A>衍生類別來處理在<xref:System.Windows.UIElement.ManipulationCompleted>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1756">Override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationCompleted> event.</span></span> <span data-ttu-id="84df3-1757">請務必呼叫<xref:System.Windows.UIElement.OnManipulationCompleted%2A>方法，因此，基底類別的基底類別的接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1757">Be sure to call the <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit&#xA;override this.OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit" Usage="uIElement.OnManipulationDelta e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1758">事件的資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1758">The data for the event.</span></span></param>
        <summary><span data-ttu-id="84df3-1759">當 <see cref="E:System.Windows.UIElement.ManipulationDelta" /> 事件發生時呼叫。</span><span class="sxs-lookup"><span data-stu-id="84df3-1759">Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1760"><xref:System.Windows.UIElement.OnManipulationDelta%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1760">The <xref:System.Windows.UIElement.OnManipulationDelta%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-1761">覆寫<xref:System.Windows.UIElement.OnManipulationDelta%2A>衍生類別來處理在<xref:System.Windows.UIElement.ManipulationDelta>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1761">Override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="84df3-1762">請務必呼叫<xref:System.Windows.UIElement.OnManipulationDelta%2A>方法，因此，基底類別的基底類別的接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1762">Be sure to call the <xref:System.Windows.UIElement.OnManipulationDelta%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit&#xA;override this.OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationInertiaStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1763">事件的資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1763">The data for the event.</span></span></param>
        <summary><span data-ttu-id="84df3-1764">當 <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> 事件發生時呼叫。</span><span class="sxs-lookup"><span data-stu-id="84df3-1764">Called when the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1765"><xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1765">The <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-1766">覆寫<xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>衍生類別來處理在<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1766">Override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event.</span></span> <span data-ttu-id="84df3-1767">請務必呼叫<xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A>方法，因此，基底類別的基底類別的接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1767">Be sure to call the <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit&#xA;override this.OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1768">事件的資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1768">The data for the event.</span></span></param>
        <summary><span data-ttu-id="84df3-1769">當 <see cref="E:System.Windows.UIElement.ManipulationStarted" /> 事件發生時呼叫。</span><span class="sxs-lookup"><span data-stu-id="84df3-1769">Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1770"><xref:System.Windows.UIElement.OnManipulationStarted%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1770">The <xref:System.Windows.UIElement.OnManipulationStarted%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-1771">覆寫<xref:System.Windows.UIElement.OnManipulationStarted%2A>衍生類別來處理在<xref:System.Windows.UIElement.ManipulationStarted>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1771">Override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarted> event.</span></span> <span data-ttu-id="84df3-1772">請務必呼叫<xref:System.Windows.UIElement.OnManipulationStarted%2A>方法，因此，基底類別的基底類別的接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1772">Be sure to call the <xref:System.Windows.UIElement.OnManipulationStarted%2A> method of the base class so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit&#xA;override this.OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1773"><see cref="T:System.Windows.Input.ManipulationStartingEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-1773">A <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1774">提供當第一次建立操作處理器時，所發生 <see cref="E:System.Windows.UIElement.ManipulationStarting" /> 路由事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1774">Provides class handling for the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event that occurs when the manipulation processor is first created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1775"><xref:System.Windows.UIElement.OnManipulationStarting%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1775">The <xref:System.Windows.UIElement.OnManipulationStarting%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-1776">覆寫<xref:System.Windows.UIElement.OnManipulationStarting%2A>衍生類別來處理在<xref:System.Windows.UIElement.ManipulationStarting>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1776">Override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarting> event.</span></span> <span data-ttu-id="84df3-1777">請務必呼叫基底類別<xref:System.Windows.UIElement.OnManipulationStarting%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1777">Be sure to call the base class' <xref:System.Windows.UIElement.OnManipulationStarting%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1778">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1778">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-1779">此事件資料會報告有關按下的滑鼠按鈕以及已處理狀態的詳細資訊。</span><span class="sxs-lookup"><span data-stu-id="84df3-1779">This event data reports details about the mouse button that was pressed and the handled state.</span></span></param>
        <summary><span data-ttu-id="84df3-1780">當未處理的 <see cref="E:System.Windows.Input.Mouse.MouseDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1780">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1781">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1781">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1782">滑鼠按鈕的動作也是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1782">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="84df3-1783">其他可依賴滑鼠按鈕的動作，例如輸入和命令繫結的程式設計功能可能會叫用動作的處理常式之前它會公開為一般的滑鼠按鈕動作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1783">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="84df3-1784">如果這些輸入系統功能 mark<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>為已處理的事件<xref:System.Windows.UIElement.OnMouseDown%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1784">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="84df3-1785">如果您使用這個類別處理常式將事件標示為已處理時，可能會影響下列事件：<xref:System.Windows.UIElement.MouseLeftButtonDown>和<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1785">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="84df3-1786">其中一個這些事件可能會發生在接收端的項目上時<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="84df3-1786">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="84df3-1787">如果您將標示為已處理的類別中處理這個事件時，仍然會引發子;不過，它們會傳遞事件資料中的處理的狀態。</span><span class="sxs-lookup"><span data-stu-id="84df3-1787">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="84df3-1788">如果類別處理在處理事件，副的執行個體處理常式不會叫用除非您明確地使用<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有`handledEventsToo``true`才能附加處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1788">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="84df3-1789">類別處理常式也不會叫用除非那些類別處理常式向<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-1789">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="84df3-1790">藉由處理<xref:System.Windows.UIElement.OnMouseDown%2A>，當其中隱含類別處理負責動作下的所有可能的滑鼠按鈕。</span><span class="sxs-lookup"><span data-stu-id="84df3-1790">By handling <xref:System.Windows.UIElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="84df3-1791">此行為可能會不必要的;因此，小心時將事件標記為已處理的情況下，您在使用這個虛擬方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1791">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="84df3-1792">每個特定按鈕的直接事件也有虛擬機器 \* 方法;請考慮是否覆寫這些特定按鈕的類別處理常式可能更適合。</span><span class="sxs-lookup"><span data-stu-id="84df3-1792">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="84df3-1793">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1793">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1794">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1794">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1795">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1795">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1796">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1796">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1797">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1797">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1798">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1798">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1799">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1799">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1800">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1800">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1801">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1801">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1802">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1802">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1803">當這個項目上引發未處理的 <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 附加事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1803">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element.</span></span> <span data-ttu-id="84df3-1804">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1804">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1805">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1805">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1806">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1806">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-1807">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-1807">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="84df3-1808">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1808">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1809">在此情況下，符合的事件是路由的事件，提供直接的路由策略。</span><span class="sxs-lookup"><span data-stu-id="84df3-1809">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="84df3-1810">將事件標示為已處理時仍適用於防止一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1810">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1811">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1811">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1812">當這個項目上引發未處理的 <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 附加事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1812">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element.</span></span> <span data-ttu-id="84df3-1813">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1813">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1814">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1814">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1815">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1815">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-1816">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-1816">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="84df3-1817">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1817">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1818">在此情況下，符合的事件是路由的事件，提供直接的路由策略。</span><span class="sxs-lookup"><span data-stu-id="84df3-1818">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="84df3-1819">將事件標示為已處理時仍適用於防止一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1819">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1820">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1820">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-1821">事件資料會報告滑鼠左鍵已按下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1821">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="84df3-1822">當這個項目上引發未處理的 <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> 路由事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1822">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element.</span></span> <span data-ttu-id="84df3-1823">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1823">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1824"><xref:System.Windows.UIElement.MouseLeftButtonDown>似乎事件反昇路由事件，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="84df3-1824">The <xref:System.Windows.UIElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="84df3-1825"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 是路由傳送，泡泡圖的基礎事件和每個<xref:System.Windows.UIElement>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement.MouseLeftButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1825"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonDown>.</span></span> <span data-ttu-id="84df3-1826">雖然您可以將標記<xref:System.Windows.UIElement.MouseLeftButtonDown>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1826">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="84df3-1827">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1827">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="84df3-1828">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1828">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="84df3-1829">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-1829">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="84df3-1830">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1830">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="84df3-1831">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1831">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="84df3-1832">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1832">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="84df3-1833">不論您選擇呼叫的基底實作，取決於您的案例。</span><span class="sxs-lookup"><span data-stu-id="84df3-1833">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="84df3-1834">無法呼叫基底會停用該也預期要叫用的上階類別上的滑鼠事件的預設輸入的處理<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1834">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="84df3-1835">例如，您可以從衍生<xref:System.Windows.Controls.Button>，並覆寫<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>在您的衍生類別，而不需要呼叫基底實作中，不過，這會覆寫停用<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1835">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1836">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1836">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-1837">事件資料會報告已放開滑鼠左鍵。</span><span class="sxs-lookup"><span data-stu-id="84df3-1837">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="84df3-1838">當未處理的 <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1838">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1839">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1839">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1840"><xref:System.Windows.UIElement.MouseLeftButtonUp>似乎事件反昇路由事件，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="84df3-1840">The <xref:System.Windows.UIElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="84df3-1841"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 是路由傳送，泡泡圖的基礎事件和每個<xref:System.Windows.UIElement>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement.MouseLeftButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1841"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonUp>.</span></span> <span data-ttu-id="84df3-1842">雖然您可以將標記<xref:System.Windows.UIElement.MouseLeftButtonUp>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1842">Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="84df3-1843">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1843">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="84df3-1844">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1844">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="84df3-1845">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-1845">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="84df3-1846">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1846">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="84df3-1847">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫<xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1847">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1848">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1848">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1849">當未處理的 <see cref="E:System.Windows.Input.Mouse.MouseMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1849">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1850">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1850">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1851">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1851">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1852">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1852">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1853">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1853">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1854">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1854">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1855">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1855">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1856">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1856">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1857">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1857">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1858">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1858">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1859">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1859">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1860">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1860">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-1861">事件資料會報告滑鼠右鍵已按下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1861">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="84df3-1862">當未處理的 <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1862">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1863">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1863">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1864"><xref:System.Windows.UIElement.MouseRightButtonDown>似乎事件反昇路由事件，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="84df3-1864">The <xref:System.Windows.UIElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="84df3-1865"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 是路由傳送，泡泡圖的基礎事件和每個<xref:System.Windows.UIElement>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1865"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="84df3-1866">雖然您可以將標記<xref:System.Windows.UIElement.MouseRightButtonDown>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1866">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="84df3-1867">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1867">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="84df3-1868">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1868">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="84df3-1869">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-1869">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="84df3-1870">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1870">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="84df3-1871">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1871">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="84df3-1872">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1872">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="84df3-1873">不論您選擇呼叫的基底實作，取決於您的案例。</span><span class="sxs-lookup"><span data-stu-id="84df3-1873">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="84df3-1874">無法呼叫基底會停用該也預期要叫用的上階類別上的滑鼠事件的預設輸入的處理<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1874">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="84df3-1875">例如，您可以從衍生<xref:System.Windows.Controls.Control>，並覆寫<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>在您的衍生類別，而不需要呼叫基底; 不過，此覆寫會停用內容功能表上的服務您的控制項，也就是組件的<xref:System.Windows.Controls.Control>預設行為。</span><span class="sxs-lookup"><span data-stu-id="84df3-1875">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1876">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1876">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-1877">事件資料會報告已放開滑鼠右鍵。</span><span class="sxs-lookup"><span data-stu-id="84df3-1877">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="84df3-1878">當未處理的 <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1878">Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1879">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1879">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1880"><xref:System.Windows.UIElement.MouseRightButtonUp>似乎事件反昇路由事件，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="84df3-1880">The <xref:System.Windows.UIElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="84df3-1881"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 是路由傳送，泡泡圖的基礎事件和每個<xref:System.Windows.UIElement>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1881"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="84df3-1882">雖然您可以將標記<xref:System.Windows.UIElement.MouseRightButtonUp>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1882">Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="84df3-1883">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1883">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="84df3-1884">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1884">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="84df3-1885">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-1885">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="84df3-1886">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1886">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="84df3-1887">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫<xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1887">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1888">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1888">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-1889">事件資料會報告滑鼠按鈕已釋放。</span><span class="sxs-lookup"><span data-stu-id="84df3-1889">The event data reports that the mouse button was released.</span></span></param>
        <summary><span data-ttu-id="84df3-1890">當未處理的 <see cref="E:System.Windows.Input.Mouse.MouseUp" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1890">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1891">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1891">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1892">滑鼠按鈕的動作也是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1892">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="84df3-1893">其他可依賴滑鼠按鈕的動作，例如輸入和命令繫結的程式設計功能可能會叫用動作的處理常式之前它會公開為一般的滑鼠按鈕動作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1893">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="84df3-1894">如果這些輸入系統功能 mark<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>為已處理的事件<xref:System.Windows.UIElement.OnMouseUp%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1894">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="84df3-1895">如果您使用這個類別處理常式將事件標示為已處理時，可能會影響下列事件：<xref:System.Windows.UIElement.MouseLeftButtonUp>和<xref:System.Windows.UIElement.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-1895">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="84df3-1896">其中一個這些事件可能會接收的項目上引發時<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="84df3-1896">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="84df3-1897">如果您將標示為已處理的類別中處理這個事件時，仍然會引發子;不過，它們會傳遞事件資料中的處理的狀態。</span><span class="sxs-lookup"><span data-stu-id="84df3-1897">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="84df3-1898">如果類別處理在處理事件，副的執行個體處理常式不會叫用除非您明確地使用<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有`handledEventsToo``true`才能附加處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1898">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="84df3-1899">類別處理常式也不會叫用除非那些類別處理常式向<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-1899">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="84df3-1900">藉由處理<xref:System.Windows.UIElement.OnMouseUp%2A>，當其中隱含類別處理負責處理動作的所有可能的滑鼠按鈕。</span><span class="sxs-lookup"><span data-stu-id="84df3-1900">By handling <xref:System.Windows.UIElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="84df3-1901">此行為可能會不必要的;因此，小心時將事件標記為已處理的情況下，您在使用這個虛擬方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1901">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="84df3-1902">每個特定按鈕的直接事件也有虛擬機器 \* 方法;請考慮是否覆寫這些特定按鈕的類別處理常式可能更適合。</span><span class="sxs-lookup"><span data-stu-id="84df3-1902">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="84df3-1903">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1903">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1904">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1904">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1905">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1905">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1906">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1906">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1907">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1907">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1908">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1908">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1909">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1909">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1910">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1910">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1911">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1911">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1912">包含事件資料的 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1912">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1913">當未處理的 <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1913">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1914">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1914">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1915">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1915">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1916">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1916">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1917">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1917">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1918">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1918">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1919">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1919">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1920">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1920">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1921">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1921">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1922">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1922">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1923">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1923">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1924">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1924">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1925">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1925">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1926">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1926">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1927">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1927">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1928">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1928">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1929">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1929">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1930">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1930">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1931">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1931">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1932">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1932">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1933">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1933">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1934">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1934">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1935">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1935">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-1936">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-1936">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1937">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1937">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1938">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1938">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1939">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1939">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1940">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1940">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1941">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1941">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1942">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1942">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1943">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1943">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1944">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1944">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1945">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1945">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1946">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1946">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1947">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1947">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1948">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1948">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-1949">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-1949">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1950">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1950">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1951">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1951">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1952">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1952">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1953">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1953">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1954">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1954">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1955">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1955">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1956">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1956">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1957">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1957">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1958">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1958">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1959">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1959">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1960">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1960">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1961">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1961">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-1962">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-1962">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1963">包含事件資料的 <see cref="T:System.Windows.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1963">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1964">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewDrop" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1964">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1965">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1965">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1966">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1966">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1967">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1967">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1968">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1968">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1969">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1969">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1970">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1970">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1971">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1971">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1972">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1972">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1973">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1973">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1974">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1974">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-1975">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-1975">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1976">包含事件資料的 <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1976">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1977">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1977">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1978">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1978">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1979">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1979">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1980">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1980">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1981">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1981">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1982">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1982">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1983">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1983">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1984">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1984">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1985">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1985">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1986">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1986">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-1987">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1987">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-1988">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-1988">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-1989">包含事件資料的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-1989">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-1990">當未處理的 <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-1990">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-1991">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-1991">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-1992">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1992">This method has no default implementation.</span></span> <span data-ttu-id="84df3-1993">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-1993">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-1994">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-1994">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-1995">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-1995">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-1996">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-1996">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-1997">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-1997">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-1998">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-1998">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-1999">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-1999">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2000">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2000">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2001">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2001">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2002">包含事件資料的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2002">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2003">當未處理的 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2003">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2004">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2004">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2005">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2005">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2006">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2006">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2007">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2007">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2008">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2008">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2009">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2009">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2010">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2010">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2011">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2011">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2012">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2012">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2013">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2013">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2014">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2014">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2015">包含事件資料的 <see cref="T:System.Windows.Input.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2015">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2016">當未處理的 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2016">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2017">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2017">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2018">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2018">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2019">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2019">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2020">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2020">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2021">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2021">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2022">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2022">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2023">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2023">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2024">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2024">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2025">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2025">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2026">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2026">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2027">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2027">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2028">包含事件資料的 <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2028">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2029">當未處理的 <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2029">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2030">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2030">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2031">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2031">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2032">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2032">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2033">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2033">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2034">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2034">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2035">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2035">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2036">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2036">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2037">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2037">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2038">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2038">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2039">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2039">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2040">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2040">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2041">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2041">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-2042">事件資料會報告一個或多個滑鼠按鈕已按下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2042">The event data reports that one or more mouse buttons were pressed.</span></span></param>
        <summary><span data-ttu-id="84df3-2043">當未處理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 附加路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2043">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2044">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2044">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2045">滑鼠按鈕的動作也是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2045">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="84df3-2046">其他可依賴滑鼠按鈕的動作，例如輸入和命令繫結的程式設計功能可能會叫用動作的處理常式之前它會公開為一般的滑鼠按鈕動作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2046">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="84df3-2047">如果這些輸入系統功能 mark<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>為已處理的事件<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2047">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="84df3-2048">如果您使用這個類別處理常式將事件標示為已處理時，可能會影響下列事件：<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>和<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2048">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="84df3-2049">其中一個這些事件可能會發生在接收端的項目上時<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="84df3-2049">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="84df3-2050">如果您將標示為已處理的類別中處理這個事件時，仍然會引發子;不過，它們會傳遞事件資料中的處理的狀態。</span><span class="sxs-lookup"><span data-stu-id="84df3-2050">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="84df3-2051">如果類別處理在處理事件，副的執行個體處理常式不會叫用除非您明確地使用<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有`handledEventsToo``true`才能附加處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2051">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="84df3-2052">類別處理常式也不會叫用除非那些類別處理常式向<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-2052">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="84df3-2053">藉由處理<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>，當其中隱含類別處理負責動作下的所有可能的滑鼠按鈕。</span><span class="sxs-lookup"><span data-stu-id="84df3-2053">By handling <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="84df3-2054">此行為可能會不必要的;因此，小心時將事件標記為已處理的情況下，您在使用這個虛擬方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2054">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="84df3-2055">每個特定按鈕的直接事件也有虛擬機器 \* 方法;請考慮是否覆寫這些特定按鈕的類別處理常式可能更適合。</span><span class="sxs-lookup"><span data-stu-id="84df3-2055">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="84df3-2056">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2056">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2057">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2057">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2058">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2058">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2059">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2059">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2060">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2060">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2061">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2061">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2062">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2062">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2063">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2063">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2064">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2064">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2065">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2065">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2066">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2066">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-2067">事件資料會報告滑鼠左鍵已按下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2067">The event data reports that the left mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="84df3-2068">當未處理的 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2068">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2069">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2069">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2070"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>事件似乎旅遊通道的路由，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="84df3-2070">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="84df3-2071"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 為基礎的事件通道路由傳送，且每個<xref:System.Windows.UIElement>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2071"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>.</span></span> <span data-ttu-id="84df3-2072">雖然您可以將標記<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2072">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="84df3-2073">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2073">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="84df3-2074">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2074">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="84df3-2075">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-2075">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="84df3-2076">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2076">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="84df3-2077">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2077">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="84df3-2078">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2078">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="84df3-2079">不論您選擇呼叫的基底實作，取決於您的案例。</span><span class="sxs-lookup"><span data-stu-id="84df3-2079">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="84df3-2080">無法呼叫基底會停用該也預期要叫用的上階類別上的滑鼠事件的預設輸入的處理<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2080">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="84df3-2081">例如，您可以從衍生<xref:System.Windows.Controls.Button>，並覆寫<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>在您的衍生類別，而不需要呼叫基底實作中，不過，這會覆寫停用<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2081">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2082">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2082">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-2083">事件資料會報告已放開滑鼠左鍵。</span><span class="sxs-lookup"><span data-stu-id="84df3-2083">The event data reports that the left mouse button was released.</span></span></param>
        <summary><span data-ttu-id="84df3-2084">當未處理的 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2084">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2085">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2085">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2086"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>事件似乎旅遊通道的路由，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="84df3-2086">The <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="84df3-2087"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 為基礎的事件通道路由傳送，且每個<xref:System.Windows.UIElement>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2087"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>.</span></span> <span data-ttu-id="84df3-2088">雖然您可以將標記<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2088">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="84df3-2089">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2089">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="84df3-2090">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2090">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="84df3-2091">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-2091">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="84df3-2092">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2092">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="84df3-2093">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2093">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2094">包含事件資料的 <see cref="T:System.Windows.Input.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2094">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2095">當未處理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2095">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2096">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2096">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2097">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2097">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2098">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2098">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2099">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2099">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2100">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2100">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2101">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2101">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2102">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2102">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2103">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2103">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2104">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2104">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2105">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2105">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2106">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2106">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2107">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2107">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-2108">事件資料會報告滑鼠右鍵已按下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2108">The event data reports that the right mouse button was pressed.</span></span></param>
        <summary><span data-ttu-id="84df3-2109">當未處理的 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2109">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2110">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2110">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2111"><xref:System.Windows.UIElement.PreviewMouseRightButtonDown>事件似乎旅遊通道的路由，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="84df3-2111">The <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="84df3-2112"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 為基礎的事件通道路由傳送，且每個<xref:System.Windows.UIElement>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2112"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="84df3-2113">雖然您可以將標記<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2113">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="84df3-2114">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2114">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="84df3-2115">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2115">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="84df3-2116">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-2116">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="84df3-2117">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2117">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="84df3-2118">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2118">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="84df3-2119">或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2119">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="84df3-2120">不論您選擇呼叫的基底實作，取決於您的案例。</span><span class="sxs-lookup"><span data-stu-id="84df3-2120">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="84df3-2121">無法呼叫基底會停用該也預期要叫用的上階類別上的滑鼠事件的預設輸入的處理<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2121">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="84df3-2122">例如，您可以從衍生<xref:System.Windows.Controls.Control>，並覆寫<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>在您的衍生類別，而不需要呼叫基底; 不過，此覆寫會停用內容功能表上的服務您的控制項，也就是組件的<xref:System.Windows.Controls.Control>預設行為。</span><span class="sxs-lookup"><span data-stu-id="84df3-2122">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2123">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2123">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-2124">事件資料會報告已放開滑鼠右鍵。</span><span class="sxs-lookup"><span data-stu-id="84df3-2124">The event data reports that the right mouse button was released.</span></span></param>
        <summary><span data-ttu-id="84df3-2125">當未處理的 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> 路由事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2125">Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2126">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2126">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2127"><xref:System.Windows.UIElement.PreviewMouseRightButtonUp>事件似乎旅遊通道的路由，但實際上會以間接方式傳送。</span><span class="sxs-lookup"><span data-stu-id="84df3-2127">The <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="84df3-2128"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 為基礎的事件通道路由傳送，且每個<xref:System.Windows.UIElement>沿著事件路由會使用相同的處理結果來引發直接路由的事件<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2128"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="84df3-2129">雖然您可以將標記<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>事件為已處理的這個項目的用途，已處理的狀態不保存事件路由中的其他項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2129">Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="84df3-2130">不過，您可能想要將事件標示為已處理，以避免一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2130">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="84df3-2131">一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>並將它轉換成適當的本機事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2131">The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="84df3-2132">如果您想要覆寫此邏輯，您必須建立衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-2132">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="84df3-2133">在衍生類別的靜態建構函式中註冊替代的類別處理常式<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2133">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="84df3-2134">您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫<xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2134">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2135">包含事件資料的 <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2135">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span></span> <span data-ttu-id="84df3-2136">事件資料會報告一個或多個滑鼠按鈕已釋放。</span><span class="sxs-lookup"><span data-stu-id="84df3-2136">The event data reports that one or more mouse buttons were released.</span></span></param>
        <summary><span data-ttu-id="84df3-2137">當未處理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2137">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2138">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2138">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2139">滑鼠按鈕的動作也是由專用的輸入管理員處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2139">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="84df3-2140">其他可依賴滑鼠按鈕的動作，例如輸入和命令繫結的程式設計功能可能會叫用動作的處理常式之前它會公開為一般的滑鼠按鈕動作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2140">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="84df3-2141">如果這些輸入系統功能 mark<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>為已處理的事件<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>不會叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2141">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="84df3-2142">如果您使用這個類別處理常式將事件標示為已處理時，可能會影響下列事件：<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>和<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2142">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="84df3-2143">其中一個這些事件可能會接收的項目上引發時<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>收到。</span><span class="sxs-lookup"><span data-stu-id="84df3-2143">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="84df3-2144">如果您將標示為已處理的類別中處理這個事件時，仍然會引發子;不過，它們會傳遞事件資料中的處理的狀態。</span><span class="sxs-lookup"><span data-stu-id="84df3-2144">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="84df3-2145">如果類別處理在處理事件，副的執行個體處理常式不會叫用除非您明確地使用<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>具有`handledEventsToo``true`才能附加處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2145">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="84df3-2146">類別處理常式也不會叫用除非那些類別處理常式向<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章`handledEventsToo` `true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-2146">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="84df3-2147">藉由處理<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>，當其中隱含類別處理負責處理動作的所有可能的滑鼠按鈕。</span><span class="sxs-lookup"><span data-stu-id="84df3-2147">By handling <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="84df3-2148">此行為可能會不必要的;因此，小心時將事件標記為已處理的情況下，您在使用這個虛擬方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2148">This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="84df3-2149">每個特定按鈕的直接事件也有虛擬機器 \* 方法;請考慮是否覆寫這些特定按鈕的類別處理常式可能更適合。</span><span class="sxs-lookup"><span data-stu-id="84df3-2149">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="84df3-2150">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2150">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2151">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2151">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2152">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2152">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2153">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2153">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2154">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2154">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2155">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2155">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2156">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2156">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2157">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2157">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2158">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2158">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2159">包含事件資料的 <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2159">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2160">當未處理的 <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2160">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2161">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2161">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2162">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2162">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2163">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2163">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2164">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2164">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2165">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2165">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2166">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2166">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2167">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2167">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2168">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2168">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2169">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2169">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2170">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2170">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2171">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2171">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2172">包含事件資料的 <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2172">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2173">當未處理的 <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2173">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2174">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2174">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2175">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2175">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2176">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2176">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2177">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2177">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2178">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2178">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2179">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2179">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2180">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2180">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2181">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2181">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2182">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2182">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2183">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2183">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2184">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2184">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2185">包含事件資料的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2185">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2186">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2186">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2187">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2187">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2188">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2188">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2189">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2189">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2190">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2190">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2191">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2191">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2192">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2192">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2193">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2193">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2194">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2194">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2195">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2195">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2196">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2196">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2197">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2197">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2198">包含事件資料的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2198">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2199">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2199">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2200">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2200">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2201">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2201">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2202">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2202">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2203">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2203">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2204">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2204">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2205">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2205">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2206">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2206">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2207">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2207">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2208">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2208">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2209">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2209">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2210">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2210">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2211">包含事件資料的 <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2211">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2212">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2212">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2213">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2213">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2214">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2214">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2215">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2215">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2216">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2216">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2217">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2217">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2218">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2218">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2219">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2219">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2220">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2220">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2221">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2221">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2222">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2222">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2223">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2223">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2224">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2224">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2225">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2225">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2226">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2226">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2227">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2227">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2228">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2228">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2229">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2229">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2230">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2230">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2231">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2231">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2232">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2232">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2233">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2233">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2234">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2234">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2235">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2235">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2236">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2236">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2237">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2237">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2238">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2238">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2239">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2239">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2240">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2240">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2241">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2241">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2242">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2242">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2243">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2243">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2244">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2244">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2245">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2245">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2246">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2246">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2247">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2247">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2248">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2248">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2249">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2249">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2250">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2250">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2251">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2251">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2252">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2252">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2253">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2253">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2254">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2254">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2255">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2255">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2256">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2256">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2257">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2257">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2258">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2258">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2259">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2259">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2260">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2260">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2261">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2261">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2262">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2262">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2263">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2263">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2264">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2264">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2265">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2265">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2266">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2266">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2267">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2267">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2268">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2268">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2269">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2269">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2270">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2270">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2271">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2271">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2272">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2272">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2273">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2273">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2274">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2274">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2275">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2275">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2276">包含事件資料的 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2276">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2277">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2277">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2278">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2278">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2279">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2279">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2280">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2280">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2281">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2281">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2282">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2282">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2283">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2283">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2284">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2284">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2285">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2285">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2286">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2286">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2287">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2287">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2288">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2288">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2289">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2289">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2290">當未處理的 <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2290">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2291">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2291">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2292">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2292">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2293">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2293">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2294">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2294">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2295">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2295">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2296">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2296">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2297">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2297">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2298">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2298">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2299">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2299">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2300">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2300">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2301">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2301">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2302">包含事件資料的 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2302">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2303">當未處理的 <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2303">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2304">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2304">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2305">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2305">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2306">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2306">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2307">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2307">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2308">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2308">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2309">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2309">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2310">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2310">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2311">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2311">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2312">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2312">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2313">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2313">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="84df3-2314">是專門針對預覽事件的另一個案例是將它們加以處理，因此不會叫用比對的事件反昇類別處理常式標示。</span><span class="sxs-lookup"><span data-stu-id="84df3-2314">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2315"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-2315">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2316">提供 <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> 路由事件的類別處理，而這個事件會在觸控按下此項目時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2316">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2317"><xref:System.Windows.UIElement.OnPreviewTouchDown%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2317">The <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-2318">覆寫<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>衍生類別來處理在<xref:System.Windows.UIElement.PreviewTouchDown>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2318">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchDown> event.</span></span> <span data-ttu-id="84df3-2319">請務必呼叫基底類別<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2319">Be sure to call the base class' <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2320"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-2320">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2321">提供 <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> 路由事件的類別處理，而這個事件會在觸控尚處於此項目內並有所移動時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2321">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2322"><xref:System.Windows.UIElement.OnPreviewTouchMove%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2322">The <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-2323">覆寫<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>衍生類別來處理在<xref:System.Windows.UIElement.PreviewTouchMove>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2323">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchMove> event.</span></span> <span data-ttu-id="84df3-2324">請務必呼叫基底類別<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2324">Be sure to call the base class' <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2325"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-2325">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2326">提供 <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> 路由事件的類別處理，而這個事件會在觸控於此項目內放開時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2326">Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2327"><xref:System.Windows.UIElement.OnPreviewTouchUp%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2327">The <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-2328">覆寫<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>衍生類別來處理在<xref:System.Windows.UIElement.PreviewTouchUp>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2328">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchUp> event.</span></span> <span data-ttu-id="84df3-2329">請務必呼叫基底類別<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2329">Be sure to call the base class' <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2330">包含事件資料的 <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2330">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2331">當未處理的 <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2331">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2332">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2332">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2333">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2333">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2334">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2334">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2335">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2335">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2336">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2336">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2337">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2337">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2338">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2338">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2339">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2339">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2340">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2340">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2341">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2341">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2342">包含事件資料的 <see cref="T:System.Windows.Input.QueryCursorEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2342">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2343">當未處理的 <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2343">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2344">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2344">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2345">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2345">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2346">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2346">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2347">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2347">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2348">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2348">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2349">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2349">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2350">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2350">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2351">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2351">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2352">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2352">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2353">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2353">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberSignature Language="F#" Value="abstract member OnRender : System.Windows.Media.DrawingContext -&gt; unit&#xA;override this.OnRender : System.Windows.Media.DrawingContext -&gt; unit" Usage="uIElement.OnRender drawingContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext"><span data-ttu-id="84df3-2354">特定項目的繪圖指令。</span><span class="sxs-lookup"><span data-stu-id="84df3-2354">The drawing instructions for a specific element.</span></span> <span data-ttu-id="84df3-2355">此內容會提供給配置系統。</span><span class="sxs-lookup"><span data-stu-id="84df3-2355">This context is provided to the layout system.</span></span></param>
        <summary><span data-ttu-id="84df3-2356">在衍生類別中覆寫時，參與由配置系統導向的呈現作業。</span><span class="sxs-lookup"><span data-stu-id="84df3-2356">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span></span> <span data-ttu-id="84df3-2357">這個項目的呈現指令不會在叫用此方法時直接使用，而是會加以保留，以便稍後由配置和繪圖做非同步使用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2357">The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2358">這個方法有預設的實作<xref:System.Windows.UIElement>類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-2358">This method has no default implementation in the <xref:System.Windows.UIElement> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-2359">下列程式碼範例顯示的面板衍生類別可能的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2359">The following code example shows a possible implementation for a panel derived class.</span></span>  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-2360"><see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />方法可以覆寫上新增更多 （先前未定義邏輯樹狀結構中） 的圖形化元素要呈現的項目，例如效果或裝飾項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2360">The <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> method can be overridden to add further graphical elements (not previously defined in a logical tree) to a rendered element, such as effects or adorners.</span></span> <span data-ttu-id="84df3-2361">A<see cref="T:System.Windows.Media.DrawingContext" />物件會傳遞做為引數會提供方法來繪製圖形、 文字、 影像或影片。</span><span class="sxs-lookup"><span data-stu-id="84df3-2361">A <see cref="T:System.Windows.Media.DrawingContext" /> object is passed as an argument, which provides methods for drawing shapes, text, images or videos.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberSignature Language="F#" Value="abstract member OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit&#xA;override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="uIElement.OnRenderSizeChanged info" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="84df3-2362">封裝的參數 (<see cref="T:System.Windows.SizeChangedInfo" />)，其中包含舊和新的大小，而且其中的維度實際上會變更。</span><span class="sxs-lookup"><span data-stu-id="84df3-2362">The packaged parameters (<see cref="T:System.Windows.SizeChangedInfo" />), which includes old and new sizes, and which dimension actually changes.</span></span></param>
        <summary><span data-ttu-id="84df3-2363">在衍生類別中覆寫時，參與由配置系統導向的呈現作業。</span><span class="sxs-lookup"><span data-stu-id="84df3-2363">When overridden in a derived class, participates in rendering operations that are directed by the layout system.</span></span> <span data-ttu-id="84df3-2364">如果項目的 <see cref="P:System.Windows.UIElement.RenderSize" /> 因配置更新而改變，則會在版面配置更新之後，並在呈現前叫用這個方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2364">This method is invoked after layout update, and before rendering, if the element's <see cref="P:System.Windows.UIElement.RenderSize" /> has changed as a result of layout update.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2365">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2365">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2366">典型的 WPF 架構層級項目會使用從覆寫實作<xref:System.Windows.FrameworkElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2366">A typical WPF framework-level element uses the override implementation from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="84df3-2367"><xref:System.Windows.FrameworkElement>實作失效<xref:System.Windows.FrameworkElement.Width%2A>和<xref:System.Windows.FrameworkElement.Height%2A>屬性和控制代碼的改造版面配置的基本概念。</span><span class="sxs-lookup"><span data-stu-id="84df3-2367">The <xref:System.Windows.FrameworkElement> implementation invalidates the <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.Height%2A> properties and handles the basics of remaking the layout.</span></span> <span data-ttu-id="84df3-2368">覆寫<xref:System.Windows.UIElement.OnRenderSizeChanged%2A>在<xref:System.Windows.UIElement>層級意味著，您的項目實作故意不使用的 WPF 架構層級實作，因此您的項目必須配置邏輯更直接處理，通常是藉由撰寫替代版面配置系統。</span><span class="sxs-lookup"><span data-stu-id="84df3-2368">Overriding <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> at the <xref:System.Windows.UIElement> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2369">包含事件資料的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2369">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2370">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2370">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2371">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2371">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2372">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2372">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2373">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2373">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2374">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2374">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2375">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2375">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2376">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2376">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2377">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2377">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2378">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2378">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2379">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2379">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2380">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2380">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2381">包含事件資料的 <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2381">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2382">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2382">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2383">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2383">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2384">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2384">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2385">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2385">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2386">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2386">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2387">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2387">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2388">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2388">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2389">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2389">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2390">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2390">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2391">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2391">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2392">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2392">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2393">包含事件資料的 <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2393">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2394">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusDown" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2394">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2395">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2395">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2396">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2396">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2397">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2397">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2398">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2398">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2399">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2399">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2400">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2400">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2401">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2401">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2402">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2402">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2403">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2403">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2404">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2404">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2405">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2405">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2406">當這個項目引發未處理的 <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 附加事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2406">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element.</span></span> <span data-ttu-id="84df3-2407">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2407">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2408">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2408">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2409">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2409">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-2410">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-2410">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="84df3-2411">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2411">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2412">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2412">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2413">將事件標示為已處理時仍適用於防止一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2413">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2414">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2414">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2415">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2415">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2416">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2416">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2417">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2417">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2418">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2418">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2419">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2419">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2420">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2420">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2421">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2421">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2422">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2422">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2423">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2423">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2424">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2424">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2425">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2425">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2426">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2426">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2427">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2427">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2428">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2428">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2429">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2429">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2430">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2430">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2431">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2431">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2432">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2432">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2433">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2433">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2434">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2434">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2435">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2435">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2436">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2436">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2437">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2437">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2438">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2438">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2439">當這個項目引發未處理的 <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 附加事件時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2439">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element.</span></span> <span data-ttu-id="84df3-2440">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2440">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2441">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2441">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2442">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2442">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="84df3-2443">您可能會呼叫基底之前或之後您的特殊處理，根據您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-2443">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="84df3-2444">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2444">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2445">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2445">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2446">將事件標示為已處理時仍適用於防止一般的執行個體處理常式 (未指定的指`handledEventsToo`) 叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2446">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2447">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2447">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2448">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusMove" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2448">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2449">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2449">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2450">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2450">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2451">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2451">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2452">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2452">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2453">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2453">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2454">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2454">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2455">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2455">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2456">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2456">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2457">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2457">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2458">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2458">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2459">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2459">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2460">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2460">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2461">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2461">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2462">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2462">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2463">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2463">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2464">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2464">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2465">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2465">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2466">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2466">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2467">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2467">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2468">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2468">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2469">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2469">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2470">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2470">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2471">包含事件資料的 <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2471">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2472">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2472">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2473">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2473">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2474">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2474">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2475">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2475">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2476">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2476">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2477">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2477">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2478">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2478">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2479">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2479">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2480">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2480">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2481">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2481">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2482">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2482">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2483">包含事件資料的 <see cref="T:System.Windows.Input.StylusEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2483">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2484">當未處理的 <see cref="E:System.Windows.Input.Stylus.StylusUp" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2484">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2485">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2485">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2486">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2486">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2487">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2487">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2488">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2488">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2489">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2489">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2490">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2490">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2491">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2491">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2492">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2492">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2493">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2493">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2494">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2494">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2495">包含事件資料的 <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2495">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2496">當未處理的 <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> 附加事件到達其路由中衍生自此類別的項目時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2496">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class.</span></span> <span data-ttu-id="84df3-2497">實作這個方法可為此事件加入類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2497">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2498">這個方法沒有任何預設實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2498">This method has no default implementation.</span></span> <span data-ttu-id="84df3-2499">因為中繼類別繼承中的可能會實作這個方法，我們建議您在實作中呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2499">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="84df3-2500">這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]上的事件模式 \* 方法： 這個方法會提供方法來處理從衍生類別相符的事件所建立的類別處理常式，而不是執行個體處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2500">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="84df3-2501">在此情況下，符合的事件是路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2501">In this case the matching event is a routed event.</span></span> <span data-ttu-id="84df3-2502">On \* 方法的實作模式是不同的路由事件，因為路由的事件可以引發由子項目，不一定會叫用處理常式的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2502">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="84df3-2503">因此，您的實作必須檢查的事件資料的來源屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2503">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="84df3-2504">它不應該嘗試重新引發此事件，在大部分情況下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2504">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="84df3-2505">藉由覆寫這個方法，或藉由註冊類別處理常式<xref:System.Windows.EventManager.RegisterClassHandler%2A>，衍生的類別<xref:System.Windows.UIElement>收到此事件路由事件時，可以呼叫私用類別處理常式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2505">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="84df3-2506">其中的類別處理是適當的一個案例是操作事件資料，並將路由的事件標示為已處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2506">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2507"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-2507">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2508">提供 <see cref="E:System.Windows.UIElement.TouchDown" /> 路由事件的類別處理，而這個事件會在觸控按下此項目內部時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2508">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2509"><xref:System.Windows.UIElement.OnTouchDown%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2509">The <xref:System.Windows.UIElement.OnTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-2510">覆寫<xref:System.Windows.UIElement.OnTouchDown%2A>衍生類別來處理在<xref:System.Windows.UIElement.TouchDown>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2510">Override <xref:System.Windows.UIElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchDown> event.</span></span> <span data-ttu-id="84df3-2511">請務必呼叫基底類別<xref:System.Windows.UIElement.OnTouchDown%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2511">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2512"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-2512">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2513">提供 <see cref="E:System.Windows.UIElement.TouchEnter" /> 路由事件的類別處理，而這個事件會在觸控從外面移至此項目範圍內時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2513">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2514"><xref:System.Windows.UIElement.OnTouchEnter%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2514">The <xref:System.Windows.UIElement.OnTouchEnter%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-2515">覆寫<xref:System.Windows.UIElement.OnTouchEnter%2A>衍生類別來處理在<xref:System.Windows.UIElement.TouchEnter>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2515">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchEnter> event.</span></span> <span data-ttu-id="84df3-2516">請務必呼叫基底類別<xref:System.Windows.UIElement.OnTouchEnter%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2516">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchEnter%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2517"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-2517">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2518">提供 <see cref="E:System.Windows.UIElement.TouchLeave" /> 路由事件的類別處理，而這個事件會在觸控輸入從此 <see cref="T:System.Windows.UIElement" /> 內移至其範圍外時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2518">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this <see cref="T:System.Windows.UIElement" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2519"><xref:System.Windows.UIElement.OnTouchLeave%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2519">The <xref:System.Windows.UIElement.OnTouchLeave%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-2520">覆寫<xref:System.Windows.UIElement.OnTouchLeave%2A>衍生類別來處理在<xref:System.Windows.UIElement.TouchLeave>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2520">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchLeave> event.</span></span> <span data-ttu-id="84df3-2521">請務必呼叫基底類別<xref:System.Windows.UIElement.OnTouchLeave%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2521">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchLeave%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2522"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-2522">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2523">提供 <see cref="E:System.Windows.UIElement.TouchMove" /> 路由事件的類別處理，而這個事件會在觸控尚處於此項目內並有所移動時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2523">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2524"><xref:System.Windows.UIElement.OnTouchMove%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2524">The <xref:System.Windows.UIElement.OnTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-2525">覆寫<xref:System.Windows.UIElement.OnTouchMove%2A>衍生類別來處理在<xref:System.Windows.UIElement.TouchMove>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2525">Override <xref:System.Windows.UIElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchMove> event.</span></span> <span data-ttu-id="84df3-2526">請務必呼叫基底類別<xref:System.Windows.UIElement.OnTouchMove%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2526">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-2527"><see cref="T:System.Windows.Input.TouchEventArgs" />，其中包含事件資料。</span><span class="sxs-lookup"><span data-stu-id="84df3-2527">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="84df3-2528">提供 <see cref="E:System.Windows.UIElement.TouchUp" /> 路由事件的類別處理，而這個事件會在觸控於此項目內放開時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2528">Provides class handling for the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2529"><xref:System.Windows.UIElement.OnTouchUp%2A>方法有沒有預設的實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2529">The <xref:System.Windows.UIElement.OnTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="84df3-2530">覆寫<xref:System.Windows.UIElement.OnTouchUp%2A>衍生類別來處理在<xref:System.Windows.UIElement.TouchUp>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2530">Override <xref:System.Windows.UIElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchUp> event.</span></span> <span data-ttu-id="84df3-2531">請務必呼叫基底類別<xref:System.Windows.UIElement.OnTouchUp%2A>方法的基底類別，因此可接收事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2531">Be sure to call the base class' <xref:System.Windows.UIElement.OnTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="84df3-2532">先前的父代。</span><span class="sxs-lookup"><span data-stu-id="84df3-2532">The previous parent.</span></span> <span data-ttu-id="84df3-2533">如果 <see cref="T:System.Windows.DependencyObject" /> 先前沒有父項目，這可提供為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2533">This may be provided as <see langword="null" /> if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</span></span></param>
        <summary><span data-ttu-id="84df3-2534">當這個 <see cref="T:System.Windows.UIElement" /> 的父項目報告其基礎視覺化父項目的變更時叫用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2534">Invoked when the parent element of this <see cref="T:System.Windows.UIElement" /> reports a change to its underlying visual parent.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="84df3-2535">如果您覆寫這個方法，請務必呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-2535">If you override this method, always call the base implementation.</span></span> <span data-ttu-id="84df3-2536">預設的基底實作會執行反向繼承的屬性狀態的某些內部維護。</span><span class="sxs-lookup"><span data-stu-id="84df3-2536">The default base implementation performs some internal maintenance of reverse-inherited property state.</span></span> <span data-ttu-id="84df3-2537">無法呼叫基底實作，會導致無效此狀態。</span><span class="sxs-lookup"><span data-stu-id="84df3-2537">Failing to call the base implementation will invalidate this state.</span></span>  
  
<span data-ttu-id="84df3-2538">這個方法覆寫 <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-2538">This method overrides <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span> <span data-ttu-id="84df3-2539"><see cref="T:System.Windows.FrameworkElement" /> 並<see cref="T:System.Windows.Window" />同時也會覆寫<see cref="T:System.Windows.UIElement" />實作<see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />，和<see cref="T:System.Windows.Window" />密封它。</span><span class="sxs-lookup"><span data-stu-id="84df3-2539"><see cref="T:System.Windows.FrameworkElement" /> and <see cref="T:System.Windows.Window" /> both also override the <see cref="T:System.Windows.UIElement" /> implementation of <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, and <see cref="T:System.Windows.Window" /> seals it.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Opacity : double with get, set" Usage="System.Windows.UIElement.Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2540">取得或設定套用至整個 <see cref="T:System.Windows.UIElement" /> (在 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中呈現時) 的不透明度因數。</span><span class="sxs-lookup"><span data-stu-id="84df3-2540">Gets or sets the opacity factor applied to the entire <see cref="T:System.Windows.UIElement" /> when it is rendered in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  <span data-ttu-id="84df3-2541">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2541">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-2542">不透明度因素。</span><span class="sxs-lookup"><span data-stu-id="84df3-2542">The opacity factor.</span></span> <span data-ttu-id="84df3-2543">預設不透明度為 1.0。</span><span class="sxs-lookup"><span data-stu-id="84df3-2543">Default opacity is 1.0.</span></span> <span data-ttu-id="84df3-2544">值必須介於 0.0 到 1.0 之間。</span><span class="sxs-lookup"><span data-stu-id="84df3-2544">Expected values are between 0.0 and 1.0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2545">1.0 的預設值是提供初始的中繼資料，在此相依性屬性的預設值<xref:System.Windows.UIElement>類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-2545">The 1.0 default value is the default provided by the initial metadata of this dependency property on the <xref:System.Windows.UIElement> class.</span></span> <span data-ttu-id="84df3-2546">其他衍生的類別可能可以藉由覆寫其類別建構函式內的中繼資料變更此預設值。</span><span class="sxs-lookup"><span data-stu-id="84df3-2546">Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.</span></span>  
  
 <span data-ttu-id="84df3-2547">值<xref:System.Windows.UIElement.Opacity%2A>不會套用至實際的配置中，除非也是可見的項目 (<xref:System.Windows.UIElement.IsVisible%2A>是`true`)。</span><span class="sxs-lookup"><span data-stu-id="84df3-2547">The value of <xref:System.Windows.UIElement.Opacity%2A> won't be applied to actual layout unless the element is also visible (<xref:System.Windows.UIElement.IsVisible%2A> is `true`).</span></span>  
  
 <span data-ttu-id="84df3-2548"><xref:System.Windows.UIElement.Opacity%2A> 會套用至從父項目在元素樹狀結構子項目，但巢狀的不透明度設定並不表示在個別的子元素的屬性值的顯示效果。</span><span class="sxs-lookup"><span data-stu-id="84df3-2548"><xref:System.Windows.UIElement.Opacity%2A> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements.</span></span> <span data-ttu-id="84df3-2549">比方說，如果清單有 50%(0.5) 的不透明度，其中一個清單項目有其本身設為 20%(0.2) 的不透明度，net 可見的不透明度，該清單項目將呈現如同它是 10%(0.1)，但屬性值的清單項目<xref:System.Windows.UIElement.Opacity%2A>屬性仍會是 0.2 查詢時。</span><span class="sxs-lookup"><span data-stu-id="84df3-2549">For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <xref:System.Windows.UIElement.Opacity%2A> property would still be 0.2 when queried.</span></span>  
  
 <span data-ttu-id="84df3-2550">即使宣告或評估的不透明度為 0，項目仍參與輸入的事件和命令，並可能可設定焦點。</span><span class="sxs-lookup"><span data-stu-id="84df3-2550">Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable.</span></span> <span data-ttu-id="84df3-2551">這方面很有用，例如您可以使用不透明度為零的物件 （例如圖形），加上遮罩時以透明的項目基礎物件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2551">This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements.</span></span> <span data-ttu-id="84df3-2552">不透明度為零的物件，然後可處理所有輸入的事件處理基礎的區域。</span><span class="sxs-lookup"><span data-stu-id="84df3-2552">The opacity-zero object can then handle all the input event processing for an underlying area.</span></span> <span data-ttu-id="84df3-2553">不過，`Background`或是`Fill`之物件的圖形應該設定為值，即使它是<xref:System.Windows.Media.Brushes.Transparent%2A>，否則為未啟用點擊測試，並沒收到任何事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2553">However, the `Background` or `Fill` of the object or shape should be set to a value, even if it is <xref:System.Windows.Media.Brushes.Transparent%2A>, otherwise hit testing is not enabled, and no events are received.</span></span>  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-2554">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2554">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2555">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2555">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityProperty>|  
|<span data-ttu-id="84df3-2556">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-2556">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-2557">無</span><span class="sxs-lookup"><span data-stu-id="84df3-2557">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OpacityMask : System.Windows.Media.Brush with get, set" Usage="System.Windows.UIElement.OpacityMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2558">取得或設定套用至任何 Alpha 色板遮罩 (用來遮住此項目的呈現內容) 時實作 <see cref="T:System.Windows.Media.Brush" /> 的不透明度遮罩。</span><span class="sxs-lookup"><span data-stu-id="84df3-2558">Gets or sets an opacity mask, as a <see cref="T:System.Windows.Media.Brush" /> implementation that is applied to any alpha-channel masking for the rendered content of this element.</span></span>  <span data-ttu-id="84df3-2559">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2559">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-2560">用於不透明度遮罩的筆刷。</span><span class="sxs-lookup"><span data-stu-id="84df3-2560">The brush to use for opacity masking.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2561">這個屬性只會使用 alpha 色頻值會提供任何<xref:System.Windows.Media.Brush>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2561">This property only uses whatever the alpha channel value is for the supplied <xref:System.Windows.Media.Brush>.</span></span> <span data-ttu-id="84df3-2562">其他通道的<xref:System.Windows.Media.Brush>的呈現的內容 （紅色、 綠色或藍色） 會被忽略。</span><span class="sxs-lookup"><span data-stu-id="84df3-2562">The other channels of the <xref:System.Windows.Media.Brush>'s rendered content (Red, Green, or Blue) are ignored.</span></span>  
  
 <span data-ttu-id="84df3-2563">最常見<xref:System.Windows.Media.Brush>針對此目的，是<xref:System.Windows.Media.ImageBrush>，它可以用於各種不同的遮罩的技術，例如插文的相片。</span><span class="sxs-lookup"><span data-stu-id="84df3-2563">The most typical <xref:System.Windows.Media.Brush> for this purpose is an <xref:System.Windows.Media.ImageBrush>, which can be used for a variety of photo masking techniques such as a vignette.</span></span> <span data-ttu-id="84df3-2564">但任何已定義<xref:System.Windows.Media.Brush>(例如<xref:System.Windows.Media.LinearGradientBrush>) 可用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2564">But any defined <xref:System.Windows.Media.Brush> (such as <xref:System.Windows.Media.LinearGradientBrush>) can be used.</span></span>  
  
 <span data-ttu-id="84df3-2565">在  [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]，這個屬性值可以使用的每個實作特有的內嵌語法<xref:System.Windows.Media.Brush>抽象類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-2565">In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property value can use an inline syntax that is specific to each implementation of the <xref:System.Windows.Media.Brush> abstract class.</span></span> <span data-ttu-id="84df3-2566">如需詳細資訊，請參閱 <<c0> [ 使用純色和漸層概觀繪製](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-2566">For more information, see [Painting with Solid Colors and Gradients Overview](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).</span></span>  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-2567">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2567">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2568">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2568">Identifier field</span></span>|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|<span data-ttu-id="84df3-2569">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-2569">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-2570">無</span><span class="sxs-lookup"><span data-stu-id="84df3-2570">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-2571">下列標記範例示範<xref:System.Windows.Media.ImageBrush>套用至另一個的不透明度遮罩<xref:System.Windows.Controls.Image>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2571">The following markup example shows an <xref:System.Windows.Media.ImageBrush> opacity mask applied to another <xref:System.Windows.Controls.Image>.</span></span>  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityMaskProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityMaskProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2572">識別 <see cref="P:System.Windows.UIElement.OpacityMask" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2572">Identifies the <see cref="P:System.Windows.UIElement.OpacityMask" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2573">識別 <see cref="P:System.Windows.UIElement.Opacity" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2573">Identifies the <see cref="P:System.Windows.UIElement.Opacity" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PersistId : int" Usage="System.Windows.UIElement.PersistId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2574">取得值，這個值可唯一識別此項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2574">Gets a value that uniquely identifies this element.</span></span></summary>
        <value><span data-ttu-id="84df3-2575">這個項目的唯一識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2575">The unique identifier for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2576"><xref:System.Windows.UIElement.PersistId%2A> 可唯一識別每個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2576"><xref:System.Windows.UIElement.PersistId%2A> uniquely identifies each element.</span></span> <span data-ttu-id="84df3-2577">項目不會改變<xref:System.Windows.UIElement.PersistId%2A>每次相同[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]載入 （包括二進位表示法）。</span><span class="sxs-lookup"><span data-stu-id="84df3-2577">An element keeps the same <xref:System.Windows.UIElement.PersistId%2A> every time the same [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] is loaded (including binary representations).</span></span> <span data-ttu-id="84df3-2578">這個識別碼用於內部的載入、 剖析和序列化需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-2578">This identifier is used for internal loading, parsing and serialization requirements.</span></span> <span data-ttu-id="84df3-2579">它不是可供您的應用程式程式碼。</span><span class="sxs-lookup"><span data-stu-id="84df3-2579">It is not intended to be used by your application code.</span></span>  
  
 <span data-ttu-id="84df3-2580">這個屬性沒有任何關聯性<xref:System.Object.GetHashCode%2A>任何給定的執行個體的結果。</span><span class="sxs-lookup"><span data-stu-id="84df3-2580">This property has no relationship to the <xref:System.Object.GetHashCode%2A> result for any given instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="84df3-2581">要求的焦點周遊方向。</span><span class="sxs-lookup"><span data-stu-id="84df3-2581">The direction of the requested focus traversal.</span></span></param>
        <summary><span data-ttu-id="84df3-2582">在衍生類別中覆寫時，傳回會針對指定之焦點周遊方向接收焦點的項目，而不用實際將焦點移至該項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2582">When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</span></span></summary>
        <returns><span data-ttu-id="84df3-2583">如果實際上有叫用 <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />，就會取得焦點的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2583">The element that would have received focus if <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2584">這個類別中，這個方法的預設實作不完整，且一律會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="84df3-2584">The default implementation of this method in this class is incomplete, and always returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2585">輸入系統報告其下以此項目作為拖曳目標的拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2585">Occurs when the input system reports an underlying drag event with this element as the drag target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2586">此事件建立的別名<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewDragEnter>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2586">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2587">附加至事件處理常式<xref:System.Windows.UIElement.PreviewDragEnter>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2587">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2588">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2588">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2589">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2589">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|<span data-ttu-id="84df3-2590">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2590">Routing strategy</span></span>|<span data-ttu-id="84df3-2591">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2591">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2592">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2592">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="84df3-2593">對應的事件反昇事件是<xref:System.Windows.UIElement.DragEnter>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2593">The corresponding bubbling event is <xref:System.Windows.UIElement.DragEnter>.</span></span>  
  
-   <span data-ttu-id="84df3-2594">覆寫<xref:System.Windows.UIElement.OnPreviewDragEnter%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2594">Override <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2595">識別 <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2595">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2596">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2596">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2597">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2597">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2598">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2598">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2599">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2599">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2600">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2600">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2601">輸入系統報告其下以此項目作為拖曳來源的拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2601">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2602">此事件建立的別名<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewDragLeave>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2602">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2603">附加至事件處理常式<xref:System.Windows.UIElement.PreviewDragLeave>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2603">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2604">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2604">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2605">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2605">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|<span data-ttu-id="84df3-2606">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2606">Routing strategy</span></span>|<span data-ttu-id="84df3-2607">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2607">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2608">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2608">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="84df3-2609">對應的事件反昇事件是<xref:System.Windows.UIElement.DragLeave>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2609">The corresponding bubbling event is <xref:System.Windows.UIElement.DragLeave>.</span></span>  
  
-   <span data-ttu-id="84df3-2610">覆寫<xref:System.Windows.UIElement.OnPreviewDragLeave%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2610">Override <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2611">識別 <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2611">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2612">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2612">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2613">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2613">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2614">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2614">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2615">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2615">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2616">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2616">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2617">在輸入系統回報以此項目作為可能置放目標的基礎拖曳事件時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2617">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2618">此事件建立的別名<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewDragOver>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2618">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2619">附加至事件處理常式<xref:System.Windows.UIElement.PreviewDragOver>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2619">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2620">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2620">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2621">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2621">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|<span data-ttu-id="84df3-2622">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2622">Routing strategy</span></span>|<span data-ttu-id="84df3-2623">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2623">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2624">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2624">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="84df3-2625">對應的事件反昇事件是<xref:System.Windows.UIElement.DragOver>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2625">The corresponding bubbling event is <xref:System.Windows.UIElement.DragOver>.</span></span>  
  
-   <span data-ttu-id="84df3-2626">覆寫<xref:System.Windows.UIElement.OnPreviewDragOver%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2626">Override <xref:System.Windows.UIElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2627">識別 <see cref="E:System.Windows.UIElement.PreviewDragOver" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2627">Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2628">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2628">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2629">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2629">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2630">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2630">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2631">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2631">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2632">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2632">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2633">輸入系統報告其下以這個項目作為置放目標的置放事件時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2633">Occurs when the input system reports an underlying drop event with this element as the drop target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2634">此事件建立的別名<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewDrop>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2634">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2635">附加至事件處理常式<xref:System.Windows.UIElement.PreviewDrop>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2635">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2636">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2636">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2637">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2637">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|<span data-ttu-id="84df3-2638">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2638">Routing strategy</span></span>|<span data-ttu-id="84df3-2639">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2639">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2640">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2640">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="84df3-2641">對應的事件反昇事件是<xref:System.Windows.UIElement.Drop>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2641">The corresponding bubbling event is <xref:System.Windows.UIElement.Drop>.</span></span>  
  
-   <span data-ttu-id="84df3-2642">覆寫<xref:System.Windows.UIElement.OnPreviewDrop%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2642">Override <xref:System.Windows.UIElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2643">識別 <see cref="E:System.Windows.UIElement.PreviewDrop" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2643">Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2644">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2644">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2645">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2645">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2646">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2646">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2647">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2647">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2648">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2648">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2649">拖放操作開始時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2649">Occurs when a drag-and-drop operation is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2650"><xref:System.Windows.UIElement.PreviewGiveFeedback>事件可讓使用者視覺化回饋提供拖放作業期間修改滑鼠指標的外觀的拖曳事件的來源。</span><span class="sxs-lookup"><span data-stu-id="84df3-2650">The <xref:System.Windows.UIElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="84df3-2651">此事件建立的別名<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewGiveFeedback>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2651">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2652">附加至事件處理常式<xref:System.Windows.UIElement.PreviewGiveFeedback>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2652">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2653">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2653">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2654">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2654">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|<span data-ttu-id="84df3-2655">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2655">Routing strategy</span></span>|<span data-ttu-id="84df3-2656">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2656">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2657">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2657">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="84df3-2658">對應的事件反昇事件是<xref:System.Windows.UIElement.GiveFeedback>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2658">The corresponding bubbling event is <xref:System.Windows.UIElement.GiveFeedback>.</span></span>  
  
-   <span data-ttu-id="84df3-2659">覆寫<xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2659">Override <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2660">識別 <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2660">Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2661">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2661">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2662">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2662">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2663">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2663">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2664">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2664">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2665">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2665">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2666">鍵盤以此元素為焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2666">Occurs when the keyboard is focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2667">這個事件會使用通道路由，因為具有焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2667">Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="84df3-2668">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際擁有焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-2668">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="84df3-2669">此事件建立的別名<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2669">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2670">附加至事件處理常式<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>事件會附加至基礎<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2670">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2671">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2671">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2672">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2672">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="84df3-2673">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2673">Routing strategy</span></span>|<span data-ttu-id="84df3-2674">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2674">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2675">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2675">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="84df3-2676">對應的事件反昇事件是<xref:System.Windows.UIElement.GotKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2676">The corresponding bubbling event is <xref:System.Windows.UIElement.GotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="84df3-2677">覆寫<xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2677">Override <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2678">識別 <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2678">Identifies the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2679">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2679">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2680">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2680">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2681">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2681">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2682">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2682">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2683">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2683">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2684">焦點在這個項目上方且按下按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2684">Occurs when a key is pressed while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2685">索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。</span><span class="sxs-lookup"><span data-stu-id="84df3-2685">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="84df3-2686"><xref:System.Windows.UIElement.KeyDown>事件是較低層級文字的輸入的事件，可能無法如預期般部分控制項上。</span><span class="sxs-lookup"><span data-stu-id="84df3-2686">The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="84df3-2687">這是文字的因為有些控制項具有複合控制項，或提供較高層級版本的類別處理輸入處理和相關事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2687">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span>  
  
 <span data-ttu-id="84df3-2688">此事件建立的別名<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewKeyDown>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2688">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2689">附加至事件處理常式<xref:System.Windows.UIElement.PreviewKeyDown>事件會附加至基礎<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2689">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2690">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2690">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2691">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2691">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|<span data-ttu-id="84df3-2692">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2692">Routing strategy</span></span>|<span data-ttu-id="84df3-2693">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2693">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2694">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2694">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="84df3-2695">對應的事件反昇事件是<xref:System.Windows.UIElement.KeyDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2695">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyDown>.</span></span>  
  
-   <span data-ttu-id="84df3-2696">覆寫<xref:System.Windows.UIElement.OnPreviewKeyDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2696">Override <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2697">識別 <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2697">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2698">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2698">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2699">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2699">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2700">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2700">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2701">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2701">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2702">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2702">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2703">焦點在這個項目上方且放開按鍵時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2703">Occurs when a key is released while focus is on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2704">索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。</span><span class="sxs-lookup"><span data-stu-id="84df3-2704">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="84df3-2705"><xref:System.Windows.UIElement.KeyUp>事件是較低層級文字的輸入的事件，可能無法如預期般部分控制項上。</span><span class="sxs-lookup"><span data-stu-id="84df3-2705">The <xref:System.Windows.UIElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls.</span></span> <span data-ttu-id="84df3-2706">這是文字的因為有些控制項具有複合控制項，或提供較高層級版本的類別處理輸入處理和相關事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2706">This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</span></span> <span data-ttu-id="84df3-2707">如需詳細資訊，請檢查個別控制項的文件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2707">For details, check the documentation for individual controls.</span></span>  
  
 <span data-ttu-id="84df3-2708">此事件建立的別名<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewKeyUp>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2708">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2709">附加至事件處理常式<xref:System.Windows.UIElement.PreviewKeyUp>事件會附加至基礎<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2709">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2710">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2710">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2711">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2711">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|<span data-ttu-id="84df3-2712">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2712">Routing strategy</span></span>|<span data-ttu-id="84df3-2713">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2713">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2714">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2714">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="84df3-2715">對應的事件反昇事件是<xref:System.Windows.UIElement.KeyUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2715">The corresponding bubbling event is <xref:System.Windows.UIElement.KeyUp>.</span></span>  
  
-   <span data-ttu-id="84df3-2716">覆寫<xref:System.Windows.UIElement.OnPreviewKeyUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2716">Override <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2717">識別 <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2717">Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2718">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2718">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2719">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2719">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2720">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2720">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2721">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2721">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2722">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2722">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2723">鍵盤不再以此元素為焦點時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2723">Occurs when the keyboard is no longer focused on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2724">由於這個事件會使用通道路由，失去焦點的項目可能的子項目，而非項目實際附加事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2724">Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="84df3-2725">檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</span><span class="sxs-lookup"><span data-stu-id="84df3-2725">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="84df3-2726">此事件建立的別名<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2726">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2727">附加至事件處理常式<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>事件會附加至基礎<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2727">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2728">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2728">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2729">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2729">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="84df3-2730">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2730">Routing strategy</span></span>|<span data-ttu-id="84df3-2731">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2731">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2732">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2732">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="84df3-2733">對應的事件反昇事件是<xref:System.Windows.UIElement.LostKeyboardFocus>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2733">The corresponding bubbling event is <xref:System.Windows.UIElement.LostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="84df3-2734">覆寫<xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2734">Override <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2735">識別 <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2735">Identifies the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2736">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2736">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2737">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2737">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2738">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2738">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2739">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2739">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2740">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2740">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2741">指標在此元素上方且按下任何滑鼠按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2741">Occurs when any mouse button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2742">此事件建立的別名<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewMouseDown>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2742">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2743">附加至事件處理常式<xref:System.Windows.UIElement.PreviewMouseDown>事件會附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2743">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-2744"><xref:System.Windows.UIElement.PreviewMouseDown>通常就會引發事件一起<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>，對應到其中的兩個標準的滑鼠按鈕按下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2744">The <xref:System.Windows.UIElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="84df3-2745"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 並<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>也是路由的事件，但它們是直接路由的事件，並適當按鈕特有的事件引發時<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件到達事件路由中的此項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2745"><xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="84df3-2746">請參閱備註<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2746">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2747">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2747">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2748">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2748">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|<span data-ttu-id="84df3-2749">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2749">Routing strategy</span></span>|<span data-ttu-id="84df3-2750">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2750">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2751">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2751">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-2752">對應的事件反昇事件是<xref:System.Windows.UIElement.MouseDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2752">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseDown>.</span></span>  
  
-   <span data-ttu-id="84df3-2753">覆寫<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2753">Override <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2754">識別 <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2754">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2755">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2755">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2756">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2756">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2757">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2757">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2758">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2758">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2759">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2759">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2760">滑鼠指標在此元素上方且按下滑鼠左按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2760">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2761">雖然這種現象可能遵循通道的路由項目樹狀結構，實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2761">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-2762">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2762">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="84df3-2763">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2763">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="84df3-2764">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2764">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="84df3-2765">如果您將標示<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>處理，您基本上將標示<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2765">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="84df3-2766">這可能包含的類別處理常式產生事件這類<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2766">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="84df3-2767">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="84df3-2767">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="84df3-2768">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2768">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="84df3-2769">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2769">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2770">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2770">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2771">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2771">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|<span data-ttu-id="84df3-2772">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2772">Routing strategy</span></span>|<span data-ttu-id="84df3-2773">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-2773">Direct</span></span>|  
|<span data-ttu-id="84df3-2774">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2774">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-2775">覆寫<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2775">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2776">識別 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2776">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2777">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2777">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2778">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2778">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2779">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2779">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2780">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2780">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2781">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2781">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2782">滑鼠指標在此元素上方且放開滑鼠左按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2782">Occurs when the left mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2783">雖然這種現象可能遵循通道的路由項目樹狀結構，實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2783">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-2784">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2784">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="84df3-2785">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2785">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="84df3-2786">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2786">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="84df3-2787">如果您將標示<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>處理，您基本上將標示<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2787">If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="84df3-2788">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="84df3-2788">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="84df3-2789">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2789">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="84df3-2790">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2790">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2791">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2791">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2792">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2792">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|<span data-ttu-id="84df3-2793">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2793">Routing strategy</span></span>|<span data-ttu-id="84df3-2794">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-2794">Direct</span></span>|  
|<span data-ttu-id="84df3-2795">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2795">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-2796">覆寫<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2796">Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2797">識別 <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2797">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2798">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2798">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2799">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2799">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2800">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2800">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2801">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2801">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2802">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2802">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2803">滑鼠指標在此元素上方且移動滑鼠指標時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2803">Occurs when the mouse pointer moves while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2804">當發生這個事件都將滑鼠指標第一次進入項目的範圍中，也當滑鼠指標移動同時仍保有的項目範圍內。</span><span class="sxs-lookup"><span data-stu-id="84df3-2804">This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</span></span>  
  
 <span data-ttu-id="84df3-2805">此事件建立的別名<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewMouseMove>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2805">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2806">附加至事件處理常式<xref:System.Windows.UIElement.PreviewMouseMove>事件會附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2806">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2807">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2807">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2808">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2808">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|<span data-ttu-id="84df3-2809">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2809">Routing strategy</span></span>|<span data-ttu-id="84df3-2810">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2810">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2811">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2811">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="84df3-2812">對應的事件反昇事件是<xref:System.Windows.UIElement.MouseMove>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2812">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseMove>.</span></span>  
  
-   <span data-ttu-id="84df3-2813">覆寫<xref:System.Windows.UIElement.OnPreviewMouseMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2813">Override <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2814">識別 <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2814">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2815">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2815">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2816">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2816">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2817">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2817">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2818">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2818">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2819">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2819">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2820">滑鼠指標在此元素上方且按下滑鼠右按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2820">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2821">雖然這種現象可能遵循通道的路由項目樹狀結構，實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2821">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-2822">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2822">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="84df3-2823">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2823">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="84df3-2824">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2824">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="84df3-2825">如果您將標示<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>處理，您基本上將標示<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2825">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="84df3-2826">這可能包含的類別處理常式產生事件這類<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2826">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="84df3-2827">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="84df3-2827">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="84df3-2828">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2828">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="84df3-2829">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2829">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2830">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2830">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2831">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2831">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|<span data-ttu-id="84df3-2832">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2832">Routing strategy</span></span>|<span data-ttu-id="84df3-2833">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-2833">Direct</span></span>|  
|<span data-ttu-id="84df3-2834">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2834">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-2835">覆寫<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2835">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2836">識別 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2836">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2837">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2837">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2838">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2838">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2839">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2839">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2840">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2840">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2841">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2841">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2842">滑鼠指標在此元素上方且放開滑鼠右按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2842">Occurs when the right mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2843">雖然這種現象可能遵循通道的路由項目樹狀結構，實際上是直接路由的事件的引發並由每個項目樹狀結構中沿著 reraised <xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2843">Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-2844">此事件會報告滑鼠按鈕的細節有基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件，這是附加的事件處理的事件路由的每個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2844">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="84df3-2845">此事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2845">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="84df3-2846">如果該事件標示為已處理此事件路由，仍然會引發滑鼠按鈕的特定事件;不過，必須新增的滑鼠按鈕的特定事件的處理常式藉由明確呼叫<xref:System.Windows.UIElement.AddHandler%2A>，選項來處理已標示為已處理的事件、 事件接聽程式，才能使用。</span><span class="sxs-lookup"><span data-stu-id="84df3-2846">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="84df3-2847">如果您將標示<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>處理，您基本上將標示<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>處理路由中的所有進一步的接聽程式和所有相關事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2847">If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="84df3-2848">就概念而言，將此事件 (和其他的滑鼠按鍵事件，對於<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (使用所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</span><span class="sxs-lookup"><span data-stu-id="84df3-2848">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="84df3-2849">事件會新增不需要檢查原始的滑鼠事件，事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2849">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="84df3-2850">針對更進階的案例，例如檢查狀態的標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上<xref:System.Windows.Input.Mouse>類別，而這些非上<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2850">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2851">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2851">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2852">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2852">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|<span data-ttu-id="84df3-2853">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2853">Routing strategy</span></span>|<span data-ttu-id="84df3-2854">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-2854">Direct</span></span>|  
|<span data-ttu-id="84df3-2855">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2855">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-2856">覆寫<xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2856">Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2857">識別 <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2857">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2858">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2858">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2859">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2859">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2860">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2860">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2861">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2861">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2862">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2862">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2863">滑鼠指標在此元素上方且放開任何滑鼠按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2863">Occurs when any mouse button is released while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2864">此事件建立的別名<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewMouseUp>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2864">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2865">附加至事件處理常式<xref:System.Windows.UIElement.PreviewMouseUp>事件會附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2865">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-2866"><xref:System.Windows.UIElement.PreviewMouseUp>通常就會引發事件一起<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>，對應到其中的兩個標準的滑鼠按鈕按下。</span><span class="sxs-lookup"><span data-stu-id="84df3-2866">The <xref:System.Windows.UIElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="84df3-2867"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 並<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>也是路由的事件，但它們是直接路由的事件，並適當按鈕特有的事件引發時<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>事件到達事件路由中的此項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2867"><xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="84df3-2868">請參閱備註<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2868">See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span>  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2869">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2869">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2870">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2870">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|<span data-ttu-id="84df3-2871">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2871">Routing strategy</span></span>|<span data-ttu-id="84df3-2872">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2872">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2873">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2873">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-2874">對應的事件反昇事件是<xref:System.Windows.UIElement.MouseUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2874">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseUp>.</span></span>  
  
-   <span data-ttu-id="84df3-2875">覆寫<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2875">Override <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2876">識別 <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2876">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2877">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2877">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2878">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2878">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2879">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2879">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2880">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2880">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2881">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2881">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2882">滑鼠指標在此元素上方且使用者滾動滑鼠滾輪時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2882">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2883">焦點或滑鼠捕捉會優先於滑鼠指標的所在;因此，如果您接收這個事件的焦點或擷取的項目時，滑鼠指標實際上可能是透過另一個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2883">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="84df3-2884">此事件建立的別名<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewMouseMove>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2884">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2885">附加至事件處理常式<xref:System.Windows.UIElement.PreviewMouseMove>事件會附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2885">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2886">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2886">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2887">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2887">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|<span data-ttu-id="84df3-2888">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2888">Routing strategy</span></span>|<span data-ttu-id="84df3-2889">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2889">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2890">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2890">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="84df3-2891">對應的事件反昇事件是<xref:System.Windows.UIElement.MouseWheel>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2891">The corresponding bubbling event is <xref:System.Windows.UIElement.MouseWheel>.</span></span>  
  
-   <span data-ttu-id="84df3-2892">覆寫<xref:System.Windows.UIElement.OnPreviewMouseWheel%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2892">Override <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2893">識別 <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2893">Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2894">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2894">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2895">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2895">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2896">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2896">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2897">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2897">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2898">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2898">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2899">拖放操作期間，鍵盤或滑鼠按鈕狀態變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2899">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2900"><xref:System.Windows.UIElement.PreviewQueryContinueDrag>事件可讓拖曳來源，來宣告是否應取消拖放作業。</span><span class="sxs-lookup"><span data-stu-id="84df3-2900">The <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="84df3-2901">此事件建立的別名<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewQueryContinueDrag>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2901">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2902">附加至事件處理常式<xref:System.Windows.UIElement.PreviewQueryContinueDrag>事件會附加至基礎<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2902">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2903">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2903">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2904">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2904">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|<span data-ttu-id="84df3-2905">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2905">Routing strategy</span></span>|<span data-ttu-id="84df3-2906">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2906">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2907">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2907">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="84df3-2908">對應的事件反昇事件是<xref:System.Windows.UIElement.QueryContinueDrag>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2908">The corresponding bubbling event is <xref:System.Windows.UIElement.QueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="84df3-2909">覆寫<xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2909">Override <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2910">識別 <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2910">Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2911">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2911">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2912">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2912">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2913">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2913">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2914">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2914">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2915">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2915">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2916">手寫筆指標在此元素上方且按下手寫筆按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2916">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2917">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewStylusButtonDown>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2917">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2918">附加至事件處理常式<xref:System.Windows.UIElement.PreviewStylusButtonDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2918">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-2919">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2919">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-2920">如需詳細資訊，請參閱 <<c0> [ 觸控輸入支援在 Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-2920">For more information, see [Touch Input Support in Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2921">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2921">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2922">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2922">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|<span data-ttu-id="84df3-2923">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2923">Routing strategy</span></span>|<span data-ttu-id="84df3-2924">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2924">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2925">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2925">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-2926">對應的事件反昇事件是<xref:System.Windows.UIElement.StylusButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2926">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="84df3-2927">覆寫<xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2927">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2928">識別 <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2928">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2929">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2929">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2930">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2930">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2931">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2931">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2932">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2932">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2933">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2933">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2934">手寫筆指標在此元素上方且放開手寫筆按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2934">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2935">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewStylusButtonUp>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2935">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2936">附加至事件處理常式<xref:System.Windows.UIElement.PreviewStylusButtonUp>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2936">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-2937">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2937">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-2938">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-2938">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2939">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2939">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2940">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2940">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|<span data-ttu-id="84df3-2941">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2941">Routing strategy</span></span>|<span data-ttu-id="84df3-2942">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2942">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2943">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2943">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-2944">對應的事件反昇事件是<xref:System.Windows.UIElement.StylusButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2944">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="84df3-2945">覆寫<xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2945">Override <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2946">識別 <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2946">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2947">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2947">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2948">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2948">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2949">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2949">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2950">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2950">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2951">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2951">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2952">手寫筆在此項目上方且碰觸數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2952">Occurs when the stylus touches the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2953">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewStylusDown>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2953">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2954">附加至事件處理常式<xref:System.Windows.UIElement.PreviewStylusDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2954">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-2955">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2955">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-2956">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-2956">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2957">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2957">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2958">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2958">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|<span data-ttu-id="84df3-2959">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2959">Routing strategy</span></span>|<span data-ttu-id="84df3-2960">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2960">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2961">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2961">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="84df3-2962">對應的事件反昇事件是<xref:System.Windows.UIElement.StylusDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2962">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusDown>.</span></span>  
  
-   <span data-ttu-id="84df3-2963">覆寫<xref:System.Windows.UIElement.OnPreviewStylusDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2963">Override <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2964">識別 <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2964">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2965">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2965">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2966">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2966">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2967">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2967">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2968">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2968">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2969">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2969">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2970">手寫筆在項目上方移動，但沒有真正碰觸數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2970">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2971">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewStylusInAirMove>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2971">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2972">附加至事件處理常式<xref:System.Windows.UIElement.PreviewStylusInAirMove>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2972">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-2973">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2973">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-2974">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-2974">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2975">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2975">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2976">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2976">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|<span data-ttu-id="84df3-2977">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2977">Routing strategy</span></span>|<span data-ttu-id="84df3-2978">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2978">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2979">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2979">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-2980">對應的事件反昇事件是<xref:System.Windows.UIElement.StylusInAirMove>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2980">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="84df3-2981">覆寫<xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2981">Override <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2982">識別 <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-2982">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2983">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-2983">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-2984">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-2984">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-2985">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-2985">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-2986">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2986">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-2987">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2987">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-2988">手寫筆在此項目上方，且夠靠近數位板而被偵測到時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-2988">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-2989">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewStylusInRange>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-2989">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-2990">附加至事件處理常式<xref:System.Windows.UIElement.PreviewStylusInRange>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-2990">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-2991">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-2991">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-2992">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-2992">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-2993">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-2993">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-2994">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-2994">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|<span data-ttu-id="84df3-2995">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-2995">Routing strategy</span></span>|<span data-ttu-id="84df3-2996">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-2996">Tunneling</span></span>|  
|<span data-ttu-id="84df3-2997">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-2997">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-2998">對應的事件反昇事件是<xref:System.Windows.UIElement.StylusInRange>。</span><span class="sxs-lookup"><span data-stu-id="84df3-2998">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInRange>.</span></span>  
  
-   <span data-ttu-id="84df3-2999">覆寫<xref:System.Windows.UIElement.OnPreviewStylusInRange%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-2999">Override <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3000">識別 <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3000">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3001">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3001">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3002">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3002">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3003">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3003">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3004">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3004">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3005">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3005">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3006">手寫筆在項目上方移動時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3006">Occurs when the stylus moves while over the element.</span></span> <span data-ttu-id="84df3-3007">手寫筆必須在受到數位板偵測時移動才能引發此事件，否則會改為引發 <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-3007">The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3008">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewStylusMove>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3008">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3009">附加至事件處理常式<xref:System.Windows.UIElement.PreviewStylusMove>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3009">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3010">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3010">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3011">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3011">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3012">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3012">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3013">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3013">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|<span data-ttu-id="84df3-3014">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3014">Routing strategy</span></span>|<span data-ttu-id="84df3-3015">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-3015">Tunneling</span></span>|  
|<span data-ttu-id="84df3-3016">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3016">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-3017">對應的事件反昇事件是<xref:System.Windows.UIElement.StylusMove>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3017">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusMove>.</span></span>  
  
-   <span data-ttu-id="84df3-3018">覆寫<xref:System.Windows.UIElement.OnPreviewStylusMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3018">Override <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3019">識別 <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3019">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3020">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3020">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3021">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3021">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3022">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3022">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3023">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3023">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3024">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3024">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3025">手寫筆遠離數位板而無法被偵測到時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3025">Occurs when the stylus is too far from the digitizer to be detected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3026">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewStylusOutOfRange>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3026">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3027">附加至事件處理常式<xref:System.Windows.UIElement.PreviewStylusOutOfRange>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3027">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3028">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3028">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3029">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3029">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3030">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3030">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3031">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3031">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|<span data-ttu-id="84df3-3032">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3032">Routing strategy</span></span>|<span data-ttu-id="84df3-3033">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-3033">Tunneling</span></span>|  
|<span data-ttu-id="84df3-3034">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3034">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-3035">對應的事件反昇事件是<xref:System.Windows.UIElement.StylusOutOfRange>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3035">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="84df3-3036">覆寫<xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3036">Override <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3037">識別 <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3037">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3038">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3038">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3039">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3039">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3040">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3040">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3041">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3041">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3042">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3042">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3043">使用者執行其中一種手寫筆筆勢時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3043">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3044">手寫筆筆勢的相關資訊，請參閱<xref:System.Windows.Input.SystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3044">For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="84df3-3045">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewStylusSystemGesture>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3045">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3046">附加至事件處理常式<xref:System.Windows.UIElement.PreviewStylusSystemGesture>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3046">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3047">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3047">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3048">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3048">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3049">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3049">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3050">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3050">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|<span data-ttu-id="84df3-3051">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3051">Routing strategy</span></span>|<span data-ttu-id="84df3-3052">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-3052">Tunneling</span></span>|  
|<span data-ttu-id="84df3-3053">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3053">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="84df3-3054">對應的事件反昇事件是<xref:System.Windows.UIElement.StylusSystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3054">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="84df3-3055">覆寫<xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3055">Override <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3056">識別 <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3056">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3057">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3057">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3058">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3058">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3059">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3059">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3060">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3060">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3061">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3061">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3062">手寫筆在此項目上方，且使用者將手寫筆舉起離開數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3062">Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3063">此事件建立的別名<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewStylusDown>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3063">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3064">附加至事件處理常式<xref:System.Windows.UIElement.PreviewStylusDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3064">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3065">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3065">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3066">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3066">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3067">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3067">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3068">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3068">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|<span data-ttu-id="84df3-3069">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3069">Routing strategy</span></span>|<span data-ttu-id="84df3-3070">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-3070">Tunneling</span></span>|  
|<span data-ttu-id="84df3-3071">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3071">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-3072">對應的事件反昇事件是<xref:System.Windows.UIElement.StylusUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3072">The corresponding bubbling event is <xref:System.Windows.UIElement.StylusUp>.</span></span>  
  
-   <span data-ttu-id="84df3-3073">覆寫<xref:System.Windows.UIElement.OnPreviewStylusUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3073">Override <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3074">識別 <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3074">Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3075">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3075">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3076">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3076">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3077">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3077">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3078">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3078">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3079">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3079">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3080">此元素以一種與裝置無關的方式取得文字時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3080">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3081"><xref:System.Windows.UIElement.PreviewTextInput>事件可讓元件或應用程式以與裝置無關的方式接聽文字輸入。</span><span class="sxs-lookup"><span data-stu-id="84df3-3081">The <xref:System.Windows.UIElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="84df3-3082">鍵盤是主要的方法<xref:System.Windows.UIElement.PreviewTextInput>; 不過也可以產生語音、 手寫和其他輸入的裝置<xref:System.Windows.UIElement.PreviewTextInput>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3082">The keyboard is the primary means of <xref:System.Windows.UIElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
 <span data-ttu-id="84df3-3083">因為索引鍵組合-在預設鍵盤或輸入的法編輯器-透過多個索引鍵的事件可能會引發一個文字輸入的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3083">Because of key combinations - either in default keyboards or through input method editors - multiple key events may raise just one text input event.</span></span>  
  
 <span data-ttu-id="84df3-3084">此事件建立的別名<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.PreviewTextInput>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3084">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3085">附加至事件處理常式<xref:System.Windows.UIElement.PreviewTextInput>事件會附加至基礎<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3085">Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3086">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3086">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3087">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3087">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|<span data-ttu-id="84df3-3088">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3088">Routing strategy</span></span>|<span data-ttu-id="84df3-3089">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-3089">Tunneling</span></span>|  
|<span data-ttu-id="84df3-3090">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3090">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="84df3-3091">對應的事件反昇事件是<xref:System.Windows.UIElement.TextInput>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3091">The corresponding bubbling event is <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
-   <span data-ttu-id="84df3-3092">覆寫<xref:System.Windows.UIElement.OnPreviewTextInput%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3092">Override <xref:System.Windows.UIElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3093">識別 <see cref="E:System.Windows.UIElement.PreviewTextInput" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3093">Identifies the <see cref="E:System.Windows.UIElement.PreviewTextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3094">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3094">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3095">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3095">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3096">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3096">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3097">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3097">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3098">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3098">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3099">手指在這個項目上方且在螢幕上觸控時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3099">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3100">根據預設，<xref:System.Windows.UIElement.PreviewTouchDown>和<xref:System.Windows.UIElement.TouchDown>手指觸控螢幕，並移動之前不會發生的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3100">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="84df3-3101">手指在螢幕上按住卻不必移動它會使用按下並按住行為<xref:System.Windows.Input.Stylus>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3101">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="84df3-3102">按住不放的行為相當於按一下滑鼠右鍵。</span><span class="sxs-lookup"><span data-stu-id="84df3-3102">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="84df3-3103">會造成<xref:System.Windows.UIElement.PreviewTouchDown>並<xref:System.Windows.UIElement.TouchDown>事件發生在手指觸控螢幕，如設定<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>; 附加屬性`false`此元素。</span><span class="sxs-lookup"><span data-stu-id="84df3-3103">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3104">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3104">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3105">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3105">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|<span data-ttu-id="84df3-3106">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3106">Routing strategy</span></span>|<span data-ttu-id="84df3-3107">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-3107">Tunneling</span></span>|  
|<span data-ttu-id="84df3-3108">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3108">Delegate</span></span>|<span data-ttu-id="84df3-3109">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3109"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="84df3-3110">對應的事件反昇事件是<xref:System.Windows.UIElement.TouchDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3110">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchDown>.</span></span>  
  
-   <span data-ttu-id="84df3-3111">覆寫<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3111">Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3112">識別 <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3112">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3113">手指在這個項目上方且在螢幕上移動時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3113">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3114">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3114">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3115">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3115">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|<span data-ttu-id="84df3-3116">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3116">Routing strategy</span></span>|<span data-ttu-id="84df3-3117">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-3117">Tunneling</span></span>|  
|<span data-ttu-id="84df3-3118">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3118">Delegate</span></span>|<span data-ttu-id="84df3-3119">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3119"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="84df3-3120">對應的事件反昇事件是<xref:System.Windows.UIElement.TouchMove>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3120">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchMove>.</span></span>  
  
-   <span data-ttu-id="84df3-3121">覆寫<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3121">Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3122">識別 <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3122">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3123">手指在這個項目上方且離開螢幕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3123">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3124">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3124">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3125">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3125">Identifier field</span></span>|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|<span data-ttu-id="84df3-3126">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3126">Routing strategy</span></span>|<span data-ttu-id="84df3-3127">通道</span><span class="sxs-lookup"><span data-stu-id="84df3-3127">Tunneling</span></span>|  
|<span data-ttu-id="84df3-3128">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3128">Delegate</span></span>|<span data-ttu-id="84df3-3129">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3129"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="84df3-3130">對應的事件反昇事件是<xref:System.Windows.UIElement.TouchUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3130">The corresponding bubbling event is <xref:System.Windows.UIElement.TouchUp>.</span></span>  
  
-   <span data-ttu-id="84df3-3131">覆寫<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3131">Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3132">識別 <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3132">Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3133">拖放操作期間，鍵盤或滑鼠按鈕狀態變更時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3133">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3134"><xref:System.Windows.UIElement.QueryContinueDrag>事件可讓拖曳來源能夠決定是否應取消拖放作業。</span><span class="sxs-lookup"><span data-stu-id="84df3-3134">The <xref:System.Windows.UIElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="84df3-3135">此事件建立的別名<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.QueryContinueDrag>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3135">This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3136">附加至事件處理常式<xref:System.Windows.UIElement.QueryContinueDrag>事件會附加至基礎<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3136">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3137">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3137">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3138">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3138">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|<span data-ttu-id="84df3-3139">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3139">Routing strategy</span></span>|<span data-ttu-id="84df3-3140">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3140">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3141">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3141">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="84df3-3142">對應的通道事件是<xref:System.Windows.UIElement.PreviewQueryContinueDrag>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3142">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="84df3-3143">覆寫<xref:System.Windows.UIElement.OnQueryContinueDrag%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3143">Override <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3144">識別 <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3144">Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3145">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3145">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3146">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3146">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3147">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3147">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3148">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3148">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3149">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3149">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3150">要求顯示游標時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3150">Occurs when the cursor is requested to display.</span></span> <span data-ttu-id="84df3-3151">每當滑鼠指標移動至新位置時，都會引發此事件，這意謂游標物件可能會根據其新位置而變更。</span><span class="sxs-lookup"><span data-stu-id="84df3-3151">This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3152">此事件建立的別名<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.QueryCursor>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3152">This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3153">附加至事件處理常式<xref:System.Windows.UIElement.QueryCursor>事件會附加至基礎<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3153">Event handlers that are attached to the <xref:System.Windows.UIElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3154">此事件名稱所參考的資料指標不一定是文字游標 （有時稱為插入點）。</span><span class="sxs-lookup"><span data-stu-id="84df3-3154">The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</span></span> <span data-ttu-id="84df3-3155">相反地，此內容中的資料指標是宣告螢幕上的圖形化顯示數個可能的輸入相關的裝置或在 Windows 程式設計的概念相關的物件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3155">Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</span></span> <span data-ttu-id="84df3-3156">該物件由<xref:System.Windows.Input.Cursor>在 WPF 中的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-3156">That object is represented by the <xref:System.Windows.Input.Cursor> class in WPF.</span></span> <span data-ttu-id="84df3-3157">WPF 輸入的系統可讓您變更這個資料指標，當它表示滑鼠指標的螢幕上的位置。</span><span class="sxs-lookup"><span data-stu-id="84df3-3157">The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</span></span> <span data-ttu-id="84df3-3158">您可以使用預先定義的值從<xref:System.Windows.Input.Cursors>列舉型別，或者您可以宣告為影像檔的自訂游標。</span><span class="sxs-lookup"><span data-stu-id="84df3-3158">You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.</span></span>  
  
 <span data-ttu-id="84df3-3159">接聽<xref:System.Windows.UIElement.QueryCursor>事件就不會針對資料指標管理而有效率的技術。</span><span class="sxs-lookup"><span data-stu-id="84df3-3159">Listening for the <xref:System.Windows.UIElement.QueryCursor> event is not an efficient technique for cursor management.</span></span> <span data-ttu-id="84df3-3160">相反地，每個項目應該定義自己的資料指標行為<xref:System.Windows.FrameworkContentElement.Cursor%2A>和<xref:System.Windows.FrameworkContentElement.ForceCursor%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3160">Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</span></span> <span data-ttu-id="84df3-3161">您只應依賴<xref:System.Windows.UIElement.QueryCursor>如果您不使用 WPF 架構層級基底項目，或在異常的情況下，其中定義每個項目為基礎的資料指標的行為不符合您的需求。</span><span class="sxs-lookup"><span data-stu-id="84df3-3161">You should only rely on <xref:System.Windows.UIElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</span></span> <span data-ttu-id="84df3-3162">如需有關實作資料指標行為，以回應<xref:System.Windows.UIElement.QueryCursor>，請參閱<xref:System.Windows.Input.QueryCursorEventHandler>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3162">For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.</span></span>  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3163">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3163">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3164">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3164">Identifier field</span></span>|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|<span data-ttu-id="84df3-3165">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3165">Routing strategy</span></span>|<span data-ttu-id="84df3-3166">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3166">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3167">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3167">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   <span data-ttu-id="84df3-3168">沒有任何已定義的對應通道事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3168">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="84df3-3169">覆寫<xref:System.Windows.UIElement.OnQueryCursor%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3169">Override <xref:System.Windows.UIElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3170">識別 <see cref="E:System.Windows.UIElement.QueryCursor" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3170">Identifies the <see cref="E:System.Windows.UIElement.QueryCursor" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3171">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3171">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3172">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3172">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3173">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3173">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3174">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3174">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3175">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3175">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="84df3-3176"><see cref="T:System.Windows.RoutedEventArgs" />，包含事件資料，也會識別要引發的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3176">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</span></span></param>
        <summary><span data-ttu-id="84df3-3177">引發特定路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3177">Raises a specific routed event.</span></span> <span data-ttu-id="84df3-3178">要引發的 <see cref="T:System.Windows.RoutedEvent" /> 是在所提供的 <see cref="T:System.Windows.RoutedEventArgs" /> 執行個體內識別 (作為該事件資料的 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 屬性)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3178">The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3179">`e`參數的型別為路由的事件的所有資料的通用基底類型; 不過，事件資料應該被授與為最特定的事件資料類型，可供所引發的事件，因為<xref:System.Windows.RoutedEventArgs>衍生的類別包含實際的特定資料是針對特定的事件時，會引發這個事件的屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3179">The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</span></span>  
  
 <span data-ttu-id="84df3-3180"><xref:System.Windows.RoutedEventArgs> 不是狀態屬性事件;它也會識別要引發哪個路由的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3180"><xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise.</span></span> <span data-ttu-id="84df3-3181">此事件引發的模式和路由的事件資料，同時與不同[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件和資料類別，通常只包含事件相關的屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3181">This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-3182">下列範例會建立事件資料、 將事件識別碼附加至資料，然後引發自訂的路由的事件使用事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3182">The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.</span></span>  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-3183">從這個項目釋放所有擷取到的觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="84df3-3183">Releases all captured touch devices from this element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-3184">如果這個項目保有滑鼠捕捉，則釋放捕捉。</span><span class="sxs-lookup"><span data-stu-id="84df3-3184">Releases the mouse capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3185">如果這個項目未存放擷取，呼叫這個方法沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="84df3-3185">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="84df3-3186">請考慮檢查值<xref:System.Windows.UIElement.IsMouseCaptured%2A>之前先呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3186">Consider checking the value of <xref:System.Windows.UIElement.IsMouseCaptured%2A> before you call this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-3187">下列範例是範例給平行<xref:System.Windows.UIElement.CaptureMouse%2A>： 它會處理版本滑鼠捕捉到滑鼠按鈕，然後再重新啟用 移動滑鼠。</span><span class="sxs-lookup"><span data-stu-id="84df3-3187">The following example is the parallel to the example given for <xref:System.Windows.UIElement.CaptureMouse%2A>: it handles mouse button up to release mouse capture and re-enable moving the mouse.</span></span>  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-3188">如果這個項目保有手寫筆裝置捕捉，則釋放捕捉。</span><span class="sxs-lookup"><span data-stu-id="84df3-3188">Releases the stylus device capture, if this element held the capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3189">如果這個項目未存放擷取，呼叫這個方法沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="84df3-3189">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="84df3-3190">請考慮檢查值<xref:System.Windows.UIElement.IsStylusCaptured%2A>之前先呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3190">Consider checking the value of <xref:System.Windows.UIElement.IsStylusCaptured%2A> before you call this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice"><span data-ttu-id="84df3-3191">要釋放的裝置。</span><span class="sxs-lookup"><span data-stu-id="84df3-3191">The device to release.</span></span></param>
        <summary><span data-ttu-id="84df3-3192">嘗試從這個項目中釋放指定的觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="84df3-3192">Attempts to release the specified touch device from this element.</span></span></summary>
        <returns><span data-ttu-id="84df3-3193">如果已釋放觸控裝置則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-3193"><see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="84df3-3194"><paramref name="touchDevice" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-3194"><paramref name="touchDevice" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><span data-ttu-id="84df3-3195">要附加處理常式之路由事件的識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3195">The identifier of the routed event for which the handler is attached.</span></span></param>
        <param name="handler"><span data-ttu-id="84df3-3196">要從這個項目上的事件處理常式集合中移除的特定處理常式實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-3196">The specific handler implementation to remove from the event handler collection on this element.</span></span></param>
        <summary><span data-ttu-id="84df3-3197">從這個項目中移除指定的路由事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3197">Removes the specified routed event handler from this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3198">最常見的案例，使用這[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]是您實作時會[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]自訂路由事件，特別是當您實作在處理常式的 「 移除 」 邏輯時相關聯的 「 包裝函式 」 事件[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]層級。</span><span class="sxs-lookup"><span data-stu-id="84df3-3198">The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level.</span></span> <span data-ttu-id="84df3-3199">這個接下來的範例 < 備註 > 一節將說明此案例。</span><span class="sxs-lookup"><span data-stu-id="84df3-3199">The example that follows this remarks section illustrates this scenario.</span></span>  
  
 <span data-ttu-id="84df3-3200">如果沒有任何處理常式註冊以比對方法呼叫的輸入的參數的準則，則呼叫這個方法任何作用。</span><span class="sxs-lookup"><span data-stu-id="84df3-3200">Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.</span></span>  
  
 <span data-ttu-id="84df3-3201">如果多個處理常式已連結的事件處理常式存放區中，比對準則，也就是第一個處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3201">If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</span></span> <span data-ttu-id="84df3-3202">此行為是配合[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]行為`-=`運算子。</span><span class="sxs-lookup"><span data-stu-id="84df3-3202">This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.</span></span>  
  
 <span data-ttu-id="84df3-3203">既不`routedEvent`也`handler`可能是`null`。</span><span class="sxs-lookup"><span data-stu-id="84df3-3203">Neither `routedEvent` nor `handler` may be `null`.</span></span> <span data-ttu-id="84df3-3204">嘗試提供其中一個值做為`null`會引發例外狀況。</span><span class="sxs-lookup"><span data-stu-id="84df3-3204">Attempting to provide either value as `null` will raise an exception.</span></span>  
  
 <span data-ttu-id="84df3-3205">這個方法會忽略`handledEventsToo`加上第一個處理常式是否提供的參數資訊<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章，可讓已處理事件的處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3205">This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events.</span></span> <span data-ttu-id="84df3-3206">任一種類型的處理常式會移除。</span><span class="sxs-lookup"><span data-stu-id="84df3-3206">Either type of handler is removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-3207">下列範例會使用<xref:System.Windows.UIElement.RemoveHandler%2A>事件包裝函式定義的一部分。</span><span class="sxs-lookup"><span data-stu-id="84df3-3207">The following example uses <xref:System.Windows.UIElement.RemoveHandler%2A> as part of an event wrapper definition.</span></span>  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.RenderSize : System.Windows.Size with get, set" Usage="System.Windows.UIElement.RenderSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3208">取得 (或設定) 這個項目的最終呈現大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-3208">Gets (or sets) the final render size of this element.</span></span></summary>
        <value><span data-ttu-id="84df3-3209">這個項目的呈現大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-3209">The rendered size for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="84df3-3210">請勿嘗試設定這個屬性，在[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]或在程式碼，如果使用 WPF 架構層級配置系統。</span><span class="sxs-lookup"><span data-stu-id="84df3-3210">Do not attempt to set this property, either in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or in code, if using the WPF framework-level layout system.</span></span> <span data-ttu-id="84df3-3211">幾乎所有的一般應用程式案例會使用此版面配置系統。</span><span class="sxs-lookup"><span data-stu-id="84df3-3211">Nearly all typical application scenarios will use this layout system.</span></span> <span data-ttu-id="84df3-3212">版面配置系統將不會使用在設定的大小<xref:System.Windows.UIElement.RenderSize%2A>直接屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3212">The layout system will not respect sizes set in the <xref:System.Windows.UIElement.RenderSize%2A> property directly.</span></span> <span data-ttu-id="84df3-3213"><xref:System.Windows.UIElement.RenderSize%2A>屬性宣告為可寫入才能啟用特定 WPF 核心層級的橋接刻意避免一般版面配置通訊協定，例如支援的情況下<xref:System.Windows.Documents.Adorner>類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-3213">The <xref:System.Windows.UIElement.RenderSize%2A> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <xref:System.Windows.Documents.Adorner> class.</span></span>  
  
 <span data-ttu-id="84df3-3214">這個屬性可以用來檢查版面配置系統內適用的呈現大小會覆寫這類<xref:System.Windows.UIElement.OnRender%2A>或<xref:System.Windows.UIElement.GetLayoutClip%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3214">This property can be used for checking the applicable render size within layout system overrides such as <xref:System.Windows.UIElement.OnRender%2A> or <xref:System.Windows.UIElement.GetLayoutClip%2A>.</span></span>  
  
 <span data-ttu-id="84df3-3215">更常見的案例處理<xref:System.Windows.FrameworkElement.SizeChanged>事件的類別處理常式覆寫或<xref:System.Windows.UIElement.OnRenderSizeChanged%2A>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3215">A more common scenario is handling the <xref:System.Windows.FrameworkElement.SizeChanged> event with the class handler override or the <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> event.</span></span>  
  
## Examples  
 <span data-ttu-id="84df3-3216">下列範例示範如何使用自訂裝飾項<xref:System.Windows.UIElement.RenderSize%2A>值，以便建立及調整大小的矩形圖形一部分中定義的裝飾項，其<xref:System.Windows.UIElement.OnRender%2A>實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-3216">The following example shows how a custom adorner uses the <xref:System.Windows.UIElement.RenderSize%2A> value in order to create and size the rectangle graphic that defines the adorner, as part of its <xref:System.Windows.UIElement.OnRender%2A> implementation.</span></span>  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.UIElement.RenderTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3217">取得或設定影響這個項目呈現位置的轉換資訊。</span><span class="sxs-lookup"><span data-stu-id="84df3-3217">Gets or sets transform information that affects the rendering position of this element.</span></span>  <span data-ttu-id="84df3-3218">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3218">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-3219">描述所需呈現轉換的特性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3219">Describes the specifics of the desired render transform.</span></span> <span data-ttu-id="84df3-3220">預設為 <see cref="P:System.Windows.Media.Transform.Identity" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-3220">The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3221">呈現轉換不會重新產生配置大小或呈現大小資訊。</span><span class="sxs-lookup"><span data-stu-id="84df3-3221">A render transform does not regenerate layout size or render size information.</span></span> <span data-ttu-id="84df3-3222">呈現轉換通常是針對顯示動畫，或套用暫時效果的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3222">Render transforms are typically intended for animating or applying a temporary effect to an element.</span></span> <span data-ttu-id="84df3-3223">例如，項目可能會縮放已取得焦點或移轉，將滑鼠指標放或可能會在載入繪製該部分的眼睛抖動時[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="84df3-3223">For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-3224">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3224">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3225">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3225">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|<span data-ttu-id="84df3-3226">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-3226">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-3227">無</span><span class="sxs-lookup"><span data-stu-id="84df3-3227">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransformOrigin : System.Windows.Point with get, set" Usage="System.Windows.UIElement.RenderTransformOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3228">取得或設定 <see cref="P:System.Windows.UIElement.RenderTransform" /> (相對於項目邊界) 宣告任何可能呈現轉換的中心點。</span><span class="sxs-lookup"><span data-stu-id="84df3-3228">Gets or sets the center point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the element.</span></span>  <span data-ttu-id="84df3-3229">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3229">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-3230">宣告呈現轉換的值。</span><span class="sxs-lookup"><span data-stu-id="84df3-3230">The value that declares the render transform.</span></span> <span data-ttu-id="84df3-3231">預設值是 <see cref="T:System.Windows.Point" /> 且座標為 (0,0)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3231">The default value is a <see cref="T:System.Windows.Point" /> with coordinates (0,0).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3232"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> 有多少非標準方式使用<xref:System.Windows.Point>結構中的值，<xref:System.Windows.Point>不代表座標系統中的絕對位置。</span><span class="sxs-lookup"><span data-stu-id="84df3-3232"><xref:System.Windows.UIElement.RenderTransformOrigin%2A> has a somewhat nonstandard use of the <xref:System.Windows.Point> structure value, in that the <xref:System.Windows.Point> does not represent an absolute location in a coordinate system.</span></span> <span data-ttu-id="84df3-3233">相反地，介於 0 和 1 之間的值會解譯為目前的項目，在每個 x，y 軸範圍的因素。</span><span class="sxs-lookup"><span data-stu-id="84df3-3233">Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis.</span></span> <span data-ttu-id="84df3-3234">例如，(0.5，0.5) 會呈現轉換至元素上置中或 (1，1) 會將呈現轉換底端右下角的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3234">For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element.</span></span> <span data-ttu-id="84df3-3235"><xref:System.Double.NaN> 不是可接受的值。</span><span class="sxs-lookup"><span data-stu-id="84df3-3235"><xref:System.Double.NaN> is not an accepted value.</span></span>  
  
 <span data-ttu-id="84df3-3236">0 和 1 以外的值也已被接受，並會導致更多的非傳統的轉換效果。</span><span class="sxs-lookup"><span data-stu-id="84df3-3236">Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects.</span></span> <span data-ttu-id="84df3-3237">比方說，如果您設定<xref:System.Windows.UIElement.RenderTransformOrigin%2A>(5,5)，並接著套用<xref:System.Windows.Media.RotateTransform>，項目本身的範圍之外，也會旋轉的點。</span><span class="sxs-lookup"><span data-stu-id="84df3-3237">For instance, if you set <xref:System.Windows.UIElement.RenderTransformOrigin%2A> to be (5,5), and then apply a <xref:System.Windows.Media.RotateTransform>, the rotation point will be well outside the bounds of the element itself.</span></span> <span data-ttu-id="84df3-3238">轉換會旋轉您的項目源自右下角之外的大圓形。</span><span class="sxs-lookup"><span data-stu-id="84df3-3238">The transform will spin your element around in a big circle that originates beyond bottom right.</span></span> <span data-ttu-id="84df3-3239">來源可能會在其父項目內的某處，並可能超出範圍或檢視表可能是。</span><span class="sxs-lookup"><span data-stu-id="84df3-3239">The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view.</span></span> <span data-ttu-id="84df3-3240">負數的點值類似，會產生超出左上方的界限。</span><span class="sxs-lookup"><span data-stu-id="84df3-3240">Negative point values are similar, these will go beyond the top left bounds.</span></span>  
  
 <span data-ttu-id="84df3-3241">呈現轉換不會影響版面配置，且通常用於動畫，或將暫存的效果套用至項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3241">Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.</span></span>  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="84df3-3242">XAML Attribute Usage</span><span class="sxs-lookup"><span data-stu-id="84df3-3242">XAML Attribute Usage</span></span>  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="84df3-3243">XAML 屬性項目用法</span><span class="sxs-lookup"><span data-stu-id="84df3-3243">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a><span data-ttu-id="84df3-3244">XAML 值</span><span class="sxs-lookup"><span data-stu-id="84df3-3244">XAML Values</span></span>  
 <span data-ttu-id="84df3-3245">*xOrigin*</span><span class="sxs-lookup"><span data-stu-id="84df3-3245">*xOrigin*</span></span>  
 <span data-ttu-id="84df3-3246">水平的原始比例。</span><span class="sxs-lookup"><span data-stu-id="84df3-3246">The horizontal origin factor.</span></span> <span data-ttu-id="84df3-3247">這通常是指定為介於 0 和 1 之間的值。</span><span class="sxs-lookup"><span data-stu-id="84df3-3247">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="84df3-3248">請參閱＜備註＞。</span><span class="sxs-lookup"><span data-stu-id="84df3-3248">See Remarks.</span></span>  
  
 <span data-ttu-id="84df3-3249">*yOrigin*</span><span class="sxs-lookup"><span data-stu-id="84df3-3249">*yOrigin*</span></span>  
 <span data-ttu-id="84df3-3250">垂直的原始比例。</span><span class="sxs-lookup"><span data-stu-id="84df3-3250">The vertical origin factor.</span></span> <span data-ttu-id="84df3-3251">這通常是指定為介於 0 和 1 之間的值。</span><span class="sxs-lookup"><span data-stu-id="84df3-3251">This is typically given as a value between 0 and 1.</span></span> <span data-ttu-id="84df3-3252">請參閱＜備註＞。</span><span class="sxs-lookup"><span data-stu-id="84df3-3252">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-3253">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3253">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3254">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3254">Identifier field</span></span>|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|<span data-ttu-id="84df3-3255">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-3255">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-3256">無</span><span class="sxs-lookup"><span data-stu-id="84df3-3256">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-3257">下列範例會建立在程式碼中的項目，適用於<xref:System.Windows.UIElement.RenderTransformOrigin%2A>，然後再套用<xref:System.Windows.UIElement.RenderTransform%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3257">The following example builds up elements in code, applies a <xref:System.Windows.UIElement.RenderTransformOrigin%2A>, and then applies a  <xref:System.Windows.UIElement.RenderTransform%2A>.</span></span>  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformOriginProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3258">識別 <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3258">Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3259">識別 <see cref="P:System.Windows.UIElement.RenderTransform" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3259">Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-3260">傳回序列化 (Serialization) 處理序是否應該在這個類別的執行個體上，將 <see cref="P:System.Windows.UIElement.CommandBindings" /> 屬性的內容序列化。</span><span class="sxs-lookup"><span data-stu-id="84df3-3260">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.CommandBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="84df3-3261">如果應序列化 <see cref="P:System.Windows.UIElement.CommandBindings" /> 屬性值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-3261"><see langword="true" /> if the <see cref="P:System.Windows.UIElement.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3262">這會傳回`true`如果<xref:System.Windows.UIElement.CommandBindings%2A>本機設定。</span><span class="sxs-lookup"><span data-stu-id="84df3-3262">This will return `true` if <xref:System.Windows.UIElement.CommandBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="84df3-3263">這`ShouldSerialize`提供方法，因為<xref:System.Windows.UIElement.CommandBindings%2A>屬性並沒有簡單的預設值。</span><span class="sxs-lookup"><span data-stu-id="84df3-3263">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="84df3-3264">這個方法會指出屬性是否已變更其預設值。</span><span class="sxs-lookup"><span data-stu-id="84df3-3264">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="84df3-3265">您通常叫用這個方法如果在開發設計工具或開發您自己的控制項併入<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3265">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-3266">如需詳細資訊，請參閱 <<c0> [ 定義預設值使用 ShouldSerialize 和重設方法](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3266">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-3267">傳回序列化 (Serialization) 處理序是否應該在這個類別的執行個體上，將 <see cref="P:System.Windows.UIElement.InputBindings" /> 屬性的內容序列化。</span><span class="sxs-lookup"><span data-stu-id="84df3-3267">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.InputBindings" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="84df3-3268">如果應序列化 <see cref="P:System.Windows.UIElement.InputBindings" /> 屬性值，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-3268"><see langword="true" /> if the <see cref="P:System.Windows.UIElement.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3269">這會傳回`true`如果<xref:System.Windows.UIElement.InputBindings%2A>本機設定。</span><span class="sxs-lookup"><span data-stu-id="84df3-3269">This will return `true` if <xref:System.Windows.UIElement.InputBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="84df3-3270">這`ShouldSerialize`提供方法，因為<xref:System.Windows.UIElement.InputBindings%2A>屬性並沒有簡單的預設值。</span><span class="sxs-lookup"><span data-stu-id="84df3-3270">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="84df3-3271">這個方法會指出屬性是否已變更其預設值。</span><span class="sxs-lookup"><span data-stu-id="84df3-3271">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="84df3-3272">您通常叫用這個方法如果在開發設計工具或開發您自己的控制項併入<xref:System.Windows.UIElement>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3272">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.</span></span>  
  
 <span data-ttu-id="84df3-3273">如需詳細資訊，請參閱 <<c0> [ 定義預設值使用 ShouldSerialize 和重設方法](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3273">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SnapsToDevicePixels : bool with get, set" Usage="System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3274">取得或設定值，該值判斷這個項目的呈現在呈現期間是否該使用裝置特定像素的設定。</span><span class="sxs-lookup"><span data-stu-id="84df3-3274">Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.</span></span>  <span data-ttu-id="84df3-3275">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3275">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-3276">如果此項目應該根據裝置像素來呈現，則為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-3276"><see langword="true" /> if the element should render in accordance to device pixels; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="84df3-3277">如 <see cref="T:System.Windows.UIElement" /> 上所宣告的預設值是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-3277">The default as declared on <see cref="T:System.Windows.UIElement" /> is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3278">您可以將此屬性設定為`true`在您的根項目，若要啟用像素貼齊呈現整個 UI。</span><span class="sxs-lookup"><span data-stu-id="84df3-3278">You can set this property to `true` on your root element to enable pixel snap rendering throughout the UI.</span></span> <span data-ttu-id="84df3-3279">適用於裝置以大於 96 操作[!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]，像素貼齊呈現可以最小化元件單一單位實線附近的消除鋸齒視覺成品。</span><span class="sxs-lookup"><span data-stu-id="84df3-3279">For devices operating at greater than 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.</span></span>  
  
 <span data-ttu-id="84df3-3280">當繼承<xref:System.Windows.FrameworkElement>任何可能衍生的類別，或<xref:System.Windows.FrameworkElement>覆寫來設定此相依性屬性的中繼資料<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>中繼資料屬性來`true`。</span><span class="sxs-lookup"><span data-stu-id="84df3-3280">When inherited by <xref:System.Windows.FrameworkElement> or any possible derived classes, <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property to set the <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> metadata property to `true`.</span></span> <span data-ttu-id="84df3-3281">這種做法是只最外層項目的子樹狀目錄中的必須指定<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>做為`true`，然後將會報告該樹狀子目錄的所有子項目<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>作為`true`，而且必須<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>視覺效果。</span><span class="sxs-lookup"><span data-stu-id="84df3-3281">What this achieves is that only the outermost element in a subtree needs to specify <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true`, and all child elements of that subtree will then report <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true` and will have the <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> visual effect.</span></span>  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-3282">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3282">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3283">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3283">Identifier field</span></span>|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|<span data-ttu-id="84df3-3284">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-3284">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-3285">無</span><span class="sxs-lookup"><span data-stu-id="84df3-3285">None</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/aa970908(v=vs.90)"><span data-ttu-id="84df3-3286">WPF 應用程式中貼齊像素</span><span class="sxs-lookup"><span data-stu-id="84df3-3286">Pixel Snapping in WPF Applications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SnapsToDevicePixelsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3287">識別 <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3287">Identifies the <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3288">手寫筆指標在此元素上方且按下手寫筆按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3288">Occurs when the stylus button is pressed while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3289">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.StylusButtonDown>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3289">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3290">附加至事件處理常式<xref:System.Windows.UIElement.StylusButtonDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3290">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3291">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3291">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3292">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3292">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3293">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3293">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3294">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3294">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|<span data-ttu-id="84df3-3295">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3295">Routing strategy</span></span>|<span data-ttu-id="84df3-3296">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3296">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3297">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3297">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-3298">對應的通道事件是<xref:System.Windows.UIElement.PreviewStylusButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3298">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="84df3-3299">覆寫<xref:System.Windows.UIElement.OnStylusButtonDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3299">Override <xref:System.Windows.UIElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3300">識別 <see cref="E:System.Windows.UIElement.StylusButtonDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3300">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3301">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3301">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3302">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3302">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3303">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3303">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3304">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3304">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3305">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3305">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3306">手寫筆指標在此元素上方且放開手寫筆按鈕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3306">Occurs when the stylus button is released while the pointer is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3307">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.StylusButtonUp>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3307">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3308">附加至事件處理常式<xref:System.Windows.UIElement.StylusButtonUp>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3308">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3309">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3309">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3310">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3310">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3311">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3311">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3312">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3312">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|<span data-ttu-id="84df3-3313">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3313">Routing strategy</span></span>|<span data-ttu-id="84df3-3314">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3314">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3315">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3315">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="84df3-3316">對應的通道事件是<xref:System.Windows.UIElement.PreviewStylusButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3316">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="84df3-3317">覆寫<xref:System.Windows.UIElement.OnStylusButtonUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3317">Override <xref:System.Windows.UIElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3318">識別 <see cref="E:System.Windows.UIElement.StylusButtonUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3318">Identifies the <see cref="E:System.Windows.UIElement.StylusButtonUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3319">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3319">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3320">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3320">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3321">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3321">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3322">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3322">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3323">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3323">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3324">手寫筆在此項目上方且碰觸數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3324">Occurs when the stylus touches the digitizer while the stylus is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3325">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.StylusDown>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3325">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3326">附加至事件處理常式<xref:System.Windows.UIElement.StylusDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3326">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3327">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3327">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3328">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3328">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3329">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3329">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3330">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3330">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusDownEvent>|  
|<span data-ttu-id="84df3-3331">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3331">Routing strategy</span></span>|<span data-ttu-id="84df3-3332">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3332">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3333">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3333">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="84df3-3334">對應的通道事件是<xref:System.Windows.UIElement.PreviewStylusDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3334">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusDown>.</span></span>  
  
-   <span data-ttu-id="84df3-3335">覆寫<xref:System.Windows.UIElement.OnStylusDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3335">Override <xref:System.Windows.UIElement.OnStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3336">識別 <see cref="E:System.Windows.UIElement.StylusDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3336">Identifies the <see cref="E:System.Windows.UIElement.StylusDown" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3337">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3337">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3338">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3338">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3339">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3339">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3340">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3340">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3341">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3341">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3342">手寫筆進入此元素的邊界時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3342">Occurs when the stylus enters the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3343"><xref:System.Windows.UIElement.StylusEnter> 是，會使用直接的事件處理路由策略。</span><span class="sxs-lookup"><span data-stu-id="84df3-3343"><xref:System.Windows.UIElement.StylusEnter> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="84df3-3344">直接路由的事件不會引發路由;相反地，它們會以處理相同的項目引發的狀況。</span><span class="sxs-lookup"><span data-stu-id="84df3-3344">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="84df3-3345">不過，它們會啟用路由的事件的行為，例如樣式中的事件觸發程序的其他層面。</span><span class="sxs-lookup"><span data-stu-id="84df3-3345">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="84df3-3346">雖然<xref:System.Windows.UIElement.StylusEnter>手寫筆輸入的項目，這個事件更多的界限時的追蹤記錄解譯為常值回報<xref:System.Windows.UIElement.IsStylusOver%2A>屬性值已從`false`至`true`這個項目上。</span><span class="sxs-lookup"><span data-stu-id="84df3-3346">Although <xref:System.Windows.UIElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="84df3-3347">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.StylusEnter>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3347">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3348">附加至事件處理常式<xref:System.Windows.UIElement.StylusEnter>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3348">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3349">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3349">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3350">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3350">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3351">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3351">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3352">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3352">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|<span data-ttu-id="84df3-3353">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3353">Routing strategy</span></span>|<span data-ttu-id="84df3-3354">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-3354">Direct</span></span>|  
|<span data-ttu-id="84df3-3355">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3355">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-3356">覆寫<xref:System.Windows.UIElement.OnStylusEnter%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3356">Override <xref:System.Windows.UIElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3357">識別 <see cref="E:System.Windows.UIElement.StylusEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3357">Identifies the <see cref="E:System.Windows.UIElement.StylusEnter" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3358">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3358">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3359">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3359">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3360">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3360">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3361">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3361">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3362">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3362">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3363">手寫筆在項目上方移動，但沒有真正碰觸數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3363">Occurs when the stylus moves over an element without actually touching the digitizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3364">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.StylusInAirMove>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3364">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3365">附加至事件處理常式<xref:System.Windows.UIElement.StylusInAirMove>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3365">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3366">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3366">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3367">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3367">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3368">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3368">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3369">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3369">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|<span data-ttu-id="84df3-3370">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3370">Routing strategy</span></span>|<span data-ttu-id="84df3-3371">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3371">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3372">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3372">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-3373">對應的通道事件是<xref:System.Windows.UIElement.PreviewStylusInAirMove>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3373">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="84df3-3374">覆寫<xref:System.Windows.UIElement.OnStylusInAirMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3374">Override <xref:System.Windows.UIElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3375">識別 <see cref="E:System.Windows.UIElement.StylusInAirMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3375">Identifies the <see cref="E:System.Windows.UIElement.StylusInAirMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3376">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3376">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3377">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3377">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3378">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3378">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3379">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3379">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3380">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3380">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3381">手寫筆在此項目上方，且夠靠近數位板而被偵測到時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3381">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3382">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.StylusInRange>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3382">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3383">附加至事件處理常式<xref:System.Windows.UIElement.StylusInRange>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3383">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3384">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3384">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3385">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3385">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3386">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3386">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3387">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3387">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|<span data-ttu-id="84df3-3388">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3388">Routing strategy</span></span>|<span data-ttu-id="84df3-3389">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3389">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3390">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3390">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-3391">對應的通道事件是<xref:System.Windows.UIElement.PreviewStylusInRange>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3391">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInRange>.</span></span>  
  
-   <span data-ttu-id="84df3-3392">覆寫<xref:System.Windows.UIElement.OnStylusInRange%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3392">Override <xref:System.Windows.UIElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3393">識別 <see cref="E:System.Windows.UIElement.StylusInRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3393">Identifies the <see cref="E:System.Windows.UIElement.StylusInRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3394">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3394">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3395">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3395">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3396">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3396">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3397">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3397">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3398">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3398">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3399">手寫筆離開元素的邊界時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3399">Occurs when the stylus leaves the bounds of the element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3400"><xref:System.Windows.UIElement.StylusLeave> 是，會使用直接的事件處理路由策略。</span><span class="sxs-lookup"><span data-stu-id="84df3-3400"><xref:System.Windows.UIElement.StylusLeave> is a  that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="84df3-3401">直接路由的事件不會引發路由;相反地，它們會以處理相同的項目引發的狀況。</span><span class="sxs-lookup"><span data-stu-id="84df3-3401">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="84df3-3402">不過，它們會啟用路由的事件的行為，例如樣式中的事件觸發程序的其他層面。</span><span class="sxs-lookup"><span data-stu-id="84df3-3402">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="84df3-3403">雖然<xref:System.Windows.UIElement.StylusLeave>追蹤何時手寫筆離開元素，此事件的邊界更多解譯為常值回報<xref:System.Windows.UIElement.IsStylusOver%2A>屬性值已從`true`至`false`這個項目上。</span><span class="sxs-lookup"><span data-stu-id="84df3-3403">Although <xref:System.Windows.UIElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="84df3-3404">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.StylusLeave>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3404">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3405">附加至事件處理常式<xref:System.Windows.UIElement.StylusLeave>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3405">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3406">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3406">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3407">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3407">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3408">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3408">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3409">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3409">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|<span data-ttu-id="84df3-3410">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3410">Routing strategy</span></span>|<span data-ttu-id="84df3-3411">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-3411">Direct</span></span>|  
|<span data-ttu-id="84df3-3412">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3412">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-3413">覆寫<xref:System.Windows.UIElement.OnStylusLeave%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3413">Override <xref:System.Windows.UIElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3414">識別 <see cref="E:System.Windows.UIElement.StylusLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3414">Identifies the <see cref="E:System.Windows.UIElement.StylusLeave" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3415">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3415">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3416">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3416">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3417">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3417">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3418">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3418">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3419">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3419">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3420">當手寫筆移至此項目上方時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3420">Occurs when the stylus moves over this element.</span></span> <span data-ttu-id="84df3-3421">手寫筆在數位板上必須移動才會引發這個事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3421">The stylus must move while on the digitizer to raise this event.</span></span> <span data-ttu-id="84df3-3422">否則，會改為引發 <see cref="E:System.Windows.UIElement.StylusInAirMove" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-3422">Otherwise, <see cref="E:System.Windows.UIElement.StylusInAirMove" /> is raised instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3423">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.StylusMove>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3423">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3424">附加至事件處理常式<xref:System.Windows.UIElement.StylusMove>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3424">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3425">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3425">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3426">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3426">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3427">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3427">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3428">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3428">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|<span data-ttu-id="84df3-3429">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3429">Routing strategy</span></span>|<span data-ttu-id="84df3-3430">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3430">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3431">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3431">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-3432">對應的通道事件是<xref:System.Windows.UIElement.PreviewStylusMove>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3432">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusMove>.</span></span>  
  
-   <span data-ttu-id="84df3-3433">覆寫<xref:System.Windows.UIElement.OnStylusMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3433">Override <xref:System.Windows.UIElement.OnStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3434">識別 <see cref="E:System.Windows.UIElement.StylusMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3434">Identifies the <see cref="E:System.Windows.UIElement.StylusMove" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3435">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3435">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3436">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3436">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3437">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3437">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3438">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3438">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3439">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3439">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3440">手寫筆在此項目上方，且遠離數位板而無法被偵測到時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3440">Occurs when the stylus is too far from the digitizer to be detected, while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3441">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.StylusOutOfRange>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3441">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3442">附加至事件處理常式<xref:System.Windows.UIElement.StylusOutOfRange>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3442">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3443">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3443">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3444">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3444">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3445">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3445">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3446">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3446">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|<span data-ttu-id="84df3-3447">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3447">Routing strategy</span></span>|<span data-ttu-id="84df3-3448">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3448">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3449">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3449">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-3450">對應的通道事件是<xref:System.Windows.UIElement.PreviewStylusOutOfRange>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3450">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="84df3-3451">覆寫<xref:System.Windows.UIElement.OnStylusOutOfRange%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3451">Override <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3452">識別 <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3452">Identifies the <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3453">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3453">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3454">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3454">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3455">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3455">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3456">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3456">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3457">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3457">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StylusPlugIns : System.Windows.Input.StylusPlugIns.StylusPlugInCollection" Usage="System.Windows.UIElement.StylusPlugIns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3458">取得與這個項目關聯的所有手寫筆外掛程式 (自訂) 物件集合。</span><span class="sxs-lookup"><span data-stu-id="84df3-3458">Gets a collection of all stylus plug-in (customization) objects associated with this element.</span></span></summary>
        <value><span data-ttu-id="84df3-3459">手寫筆外掛程式集合，做為特定的集合。</span><span class="sxs-lookup"><span data-stu-id="84df3-3459">The collection of stylus plug-ins, as a specialized collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3460">會填入這個集合的控制項範例是<xref:System.Windows.Controls.InkCanvas>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3460">An example of a control that populates this collection is <xref:System.Windows.Controls.InkCanvas>.</span></span> <span data-ttu-id="84df3-3461"><xref:System.Windows.Controls.InkCanvas> 新增<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>做為集合項目，可讓<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>手寫筆輸入與互動，並產生唯一的呈現方式，以驅動事件的手寫筆的回應。</span><span class="sxs-lookup"><span data-stu-id="84df3-3461"><xref:System.Windows.Controls.InkCanvas> adds the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as a collection item, which enables the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> to interact with stylus input and produce the unique rendering in response to stylus driven events.</span></span>  
  
 <span data-ttu-id="84df3-3462">如需建立自訂外掛程式，可以接收及解譯手寫筆輸入，請參閱 <<c0> [ 自手寫筆的 輸入攔截](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3462">For information on creating custom plug-ins that can receive and interpret stylus input, see [Intercepting Input from the Stylus](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="84df3-3463">下列範例會建立<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>執行個體，並將它加入至<xref:System.Windows.UIElement.StylusPlugIns%2A>處理控制項的自訂筆墨的集合。</span><span class="sxs-lookup"><span data-stu-id="84df3-3463">The following example creates a <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> instance and adds it to the <xref:System.Windows.UIElement.StylusPlugIns%2A> collection for a custom ink handling control.</span></span>  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3464">使用者執行其中一種手寫筆筆勢時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3464">Occurs when a user performs one of several stylus gestures.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3465">手寫筆筆勢的相關資訊的詳細資訊，請參閱<xref:System.Windows.Input.SystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3465">For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="84df3-3466">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.StylusSystemGesture>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3466">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3467">附加至事件處理常式<xref:System.Windows.UIElement.StylusSystemGesture>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3467">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3468">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3468">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3469">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3469">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3470">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3470">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3471">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3471">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|<span data-ttu-id="84df3-3472">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3472">Routing strategy</span></span>|<span data-ttu-id="84df3-3473">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3473">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3474">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3474">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="84df3-3475">對應的通道事件是<xref:System.Windows.UIElement.PreviewStylusSystemGesture>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3475">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="84df3-3476">覆寫<xref:System.Windows.UIElement.OnStylusSystemGesture%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3476">Override <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3477">識別 <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3477">Identifies the <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3478">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3478">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3479">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3479">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3480">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3480">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3481">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3481">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3482">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3482">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3483">手寫筆在此項目上方，且使用者將手寫筆舉起離開數位板時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3483">Occurs when the user raises the stylus off the digitizer while it is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3484">此事件建立的別名<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.StylusUp>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3484">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.StylusUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3485">附加至事件處理常式<xref:System.Windows.UIElement.StylusUp>事件會附加至基礎<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3485">Event handlers that are attached to the <xref:System.Windows.UIElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="84df3-3486">觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3486">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="84df3-3487">如需詳細資訊，請參閱 <<c0> [ 輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3487">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3488">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3488">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3489">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3489">Identifier field</span></span>|<xref:System.Windows.UIElement.StylusUpEvent>|  
|<span data-ttu-id="84df3-3490">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3490">Routing strategy</span></span>|<span data-ttu-id="84df3-3491">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3491">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3492">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3492">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="84df3-3493">對應的通道事件是<xref:System.Windows.UIElement.PreviewStylusUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3493">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusUp>.</span></span>  
  
-   <span data-ttu-id="84df3-3494">覆寫<xref:System.Windows.UIElement.OnStylusUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3494">Override <xref:System.Windows.UIElement.OnStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3495">識別 <see cref="E:System.Windows.UIElement.StylusUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3495">Identifies the <see cref="E:System.Windows.UIElement.StylusUp" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3496">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3496">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3497">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3497">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3498">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3498">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3499">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3499">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3500">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3500">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3501">此元素以一種與裝置無關的方式取得文字時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3501">Occurs when this element gets text in a device-independent manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="84df3-3502">此事件可能已被標示為已處理的複合控制項的內部實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-3502">This event might already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="84df3-3503">請參閱下方的備註。</span><span class="sxs-lookup"><span data-stu-id="84df3-3503">See Remark below.</span></span>  
  
 <span data-ttu-id="84df3-3504"><xref:System.Windows.UIElement.TextInput>事件可能已被標示為已處理的複合控制項的內部實作。</span><span class="sxs-lookup"><span data-stu-id="84df3-3504">The <xref:System.Windows.UIElement.TextInput> event may already be marked as handled by the internal implementations of composited controls.</span></span> <span data-ttu-id="84df3-3505">例如，<xref:System.Windows.Controls.TextBox>是複合控制項，<xref:System.Windows.UIElement.TextInput>事件已標示為已處理，其複合 （compositing） 內。</span><span class="sxs-lookup"><span data-stu-id="84df3-3505">For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.UIElement.TextInput> event is already marked as handled; within its compositing.</span></span> <span data-ttu-id="84df3-3506">控制項執行這項操作，因為控制項必須解譯某些類型的輸入，例如方向鍵，該控制項的特殊意義。</span><span class="sxs-lookup"><span data-stu-id="84df3-3506">Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</span></span> <span data-ttu-id="84df3-3507">如果您使用<xref:System.Windows.UIElement.PreviewTextInput>做為您用來附加文字輸入的處理常式的事件，您可能會收到更好的結果。</span><span class="sxs-lookup"><span data-stu-id="84df3-3507">If you use <xref:System.Windows.UIElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results.</span></span> <span data-ttu-id="84df3-3508">這項技術會規避大部分的情況下，其中已將這個事件標記為已處理控制項組合，而收到此事件路由事件時，防止您的處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3508">This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</span></span>  
  
 <span data-ttu-id="84df3-3509"><xref:System.Windows.UIElement.TextInput>事件可讓元件或應用程式以與裝置無關的方式接聽文字輸入。</span><span class="sxs-lookup"><span data-stu-id="84df3-3509">The <xref:System.Windows.UIElement.TextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="84df3-3510">鍵盤是主要的方法<xref:System.Windows.UIElement.TextInput>，但也可以將語音、 手寫和其他輸入的裝置<xref:System.Windows.UIElement.TextInput>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3510">The keyboard is the primary means of <xref:System.Windows.UIElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement.TextInput>.</span></span>  
  
 <span data-ttu-id="84df3-3511">因為索引鍵組合-在預設鍵盤或輸入的法編輯器-透過多個索引鍵的事件可能會引發一個文字輸入的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3511">Because of key combinations - either in default keyboards or through input method editors - multiple key events might raise just one text input event.</span></span>  
  
 <span data-ttu-id="84df3-3512">此事件建立的別名<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>附加事件，此類別中，以便<xref:System.Windows.UIElement.TextInput>屬於類別的成員清單時<xref:System.Windows.UIElement>繼承為基底的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3512">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement.TextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element.</span></span> <span data-ttu-id="84df3-3513">附加至事件處理常式<xref:System.Windows.UIElement.TextInput>事件會附加至基礎<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>附加事件，並接收相同的事件資料執行個體。</span><span class="sxs-lookup"><span data-stu-id="84df3-3513">Event handlers that are attached to the <xref:System.Windows.UIElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3514">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3514">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3515">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3515">Identifier field</span></span>|<xref:System.Windows.UIElement.TextInputEvent>|  
|<span data-ttu-id="84df3-3516">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3516">Routing strategy</span></span>|<span data-ttu-id="84df3-3517">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3517">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3518">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3518">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="84df3-3519">對應的通道事件是<xref:System.Windows.UIElement.PreviewTextInput>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3519">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTextInput>.</span></span>  
  
-   <span data-ttu-id="84df3-3520">覆寫<xref:System.Windows.UIElement.OnTextInput%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3520">Override <xref:System.Windows.UIElement.OnTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3521">識別 <see cref="E:System.Windows.UIElement.TextInput" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3521">Identifies the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3522">註冊路由事件時，會建立路由事件識別項。</span><span class="sxs-lookup"><span data-stu-id="84df3-3522">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="84df3-3523">這些識別項包含用於加入事件擁有者的識別名稱、擁有者類型、處理常式類型、路由策略和公用程式方法。</span><span class="sxs-lookup"><span data-stu-id="84df3-3523">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="84df3-3524">您可以使用這些識別項來加入類別處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3524">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="84df3-3525">如需註冊路由事件的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3525">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="84df3-3526">如需使用路由事件識別項來加入類別處理常式的詳細資訊，請參閱 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3526">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3527">手指在這個項目上方且在螢幕上觸控時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3527">Occurs when a finger touches the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3528">根據預設，<xref:System.Windows.UIElement.PreviewTouchDown>和<xref:System.Windows.UIElement.TouchDown>手指觸控螢幕，並移動之前不會發生的事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3528">By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="84df3-3529">手指在螢幕上按住卻不必移動它會使用按下並按住行為<xref:System.Windows.Input.Stylus>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3529">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="84df3-3530">按住不放的行為相當於按一下滑鼠右鍵。</span><span class="sxs-lookup"><span data-stu-id="84df3-3530">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="84df3-3531">會造成<xref:System.Windows.UIElement.PreviewTouchDown>並<xref:System.Windows.UIElement.TouchDown>事件發生在手指觸控螢幕，如設定<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>; 附加屬性`false`此元素。</span><span class="sxs-lookup"><span data-stu-id="84df3-3531">To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3532">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3532">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3533">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3533">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchDownEvent>|  
|<span data-ttu-id="84df3-3534">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3534">Routing strategy</span></span>|<span data-ttu-id="84df3-3535">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3535">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3536">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3536">Delegate</span></span>|<span data-ttu-id="84df3-3537">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3537"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="84df3-3538">對應的通道事件是<xref:System.Windows.UIElement.PreviewTouchDown>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3538">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchDown>.</span></span>  
  
-   <span data-ttu-id="84df3-3539">覆寫<xref:System.Windows.UIElement.OnTouchDown%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3539">Override <xref:System.Windows.UIElement.OnTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3540">識別 <see cref="E:System.Windows.UIElement.TouchDown" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3540">Identifies the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3541">當觸控從這個項目的界限外部移至內部時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3541">Occurs when a touch moves from outside to inside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3542">一律引發這個事件，或有觸控式裝置擷取至這個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3542">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3543">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3543">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3544">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3544">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|<span data-ttu-id="84df3-3545">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3545">Routing strategy</span></span>|<span data-ttu-id="84df3-3546">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-3546">Direct</span></span>|  
|<span data-ttu-id="84df3-3547">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3547">Delegate</span></span>|<span data-ttu-id="84df3-3548">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3548"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="84df3-3549">覆寫<xref:System.Windows.UIElement.OnTouchEnter%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3549">Override <xref:System.Windows.UIElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3550">識別 <see cref="E:System.Windows.UIElement.TouchEnter" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3550">Identifies the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3551">取得已擷取至這個項目的所有觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="84df3-3551">Gets all touch devices that are captured to this element.</span></span></summary>
        <value><span data-ttu-id="84df3-3552">已擷取至這個項目之 <see cref="T:System.Windows.Input.TouchDevice" /> 物件的列舉。</span><span class="sxs-lookup"><span data-stu-id="84df3-3552">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3553">取得已擷取至這個項目或其視覺化樹狀結構中之任何子項目的所有觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="84df3-3553">Gets all touch devices that are captured to this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="84df3-3554">已擷取至這個項目或其視覺化樹狀結構中之任何子項目的 <see cref="T:System.Windows.Input.TouchDevice" /> 物件列舉。</span><span class="sxs-lookup"><span data-stu-id="84df3-3554">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3555">取得在這個項目上停留的所有觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="84df3-3555">Gets all touch devices that are over this element.</span></span></summary>
        <value><span data-ttu-id="84df3-3556">在這個項目之上的 <see cref="T:System.Windows.Input.TouchDevice" /> 物件列舉。</span><span class="sxs-lookup"><span data-stu-id="84df3-3556">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3557">取得在這個項目或其視覺化樹狀結構中之任何子項目上停留的所有觸控裝置。</span><span class="sxs-lookup"><span data-stu-id="84df3-3557">Gets all touch devices that are over this element or any child elements in its visual tree.</span></span></summary>
        <value><span data-ttu-id="84df3-3558">在這個項目或其視覺化樹狀結構中之任何子項目上停留的 <see cref="T:System.Windows.Input.TouchDevice" /> 物件列舉。</span><span class="sxs-lookup"><span data-stu-id="84df3-3558">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3559">當觸控從這個項目的界限內部移至外部時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3559">Occurs when a touch moves from inside to outside the bounds of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3560">一律引發這個事件，或有觸控式裝置擷取至這個項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3560">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3561">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3561">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3562">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3562">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|<span data-ttu-id="84df3-3563">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3563">Routing strategy</span></span>|<span data-ttu-id="84df3-3564">直接</span><span class="sxs-lookup"><span data-stu-id="84df3-3564">Direct</span></span>|  
|<span data-ttu-id="84df3-3565">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3565">Delegate</span></span>|<span data-ttu-id="84df3-3566">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3566"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="84df3-3567">覆寫<xref:System.Windows.UIElement.OnTouchLeave%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3567">Override <xref:System.Windows.UIElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3568">識別 <see cref="E:System.Windows.UIElement.TouchLeave" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3568">Identifies the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3569">手指在這個項目上方且在螢幕上移動時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3569">Occurs when a finger moves on the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3570">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3570">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3571">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3571">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|<span data-ttu-id="84df3-3572">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3572">Routing strategy</span></span>|<span data-ttu-id="84df3-3573">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3573">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3574">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3574">Delegate</span></span>|<span data-ttu-id="84df3-3575">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3575"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="84df3-3576">對應的通道事件是<xref:System.Windows.UIElement.PreviewTouchMove>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3576">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchMove>.</span></span>  
  
-   <span data-ttu-id="84df3-3577">覆寫<xref:System.Windows.UIElement.OnTouchMove%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3577">Override <xref:System.Windows.UIElement.OnTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3578">識別 <see cref="E:System.Windows.UIElement.TouchMove" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3578">Identifies the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3579">手指在這個項目上方且離開螢幕時發生。</span><span class="sxs-lookup"><span data-stu-id="84df3-3579">Occurs when a finger is raised off of the screen while the finger is over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="84df3-3580">路由事件資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3580">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3581">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3581">Identifier field</span></span>|<xref:System.Windows.UIElement.TouchUpEvent>|  
|<span data-ttu-id="84df3-3582">路由策略</span><span class="sxs-lookup"><span data-stu-id="84df3-3582">Routing strategy</span></span>|<span data-ttu-id="84df3-3583">事件反昇</span><span class="sxs-lookup"><span data-stu-id="84df3-3583">Bubbling</span></span>|  
|<span data-ttu-id="84df3-3584">Delegate - 委派</span><span class="sxs-lookup"><span data-stu-id="84df3-3584">Delegate</span></span>|<span data-ttu-id="84df3-3585">型別 <xref:System.EventHandler%601> 的 <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3585"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="84df3-3586">對應的通道事件是<xref:System.Windows.UIElement.PreviewTouchUp>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3586">The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchUp>.</span></span>  
  
-   <span data-ttu-id="84df3-3587">覆寫<xref:System.Windows.UIElement.OnTouchUp%2A>實作在衍生類別中這個事件的類別處理。</span><span class="sxs-lookup"><span data-stu-id="84df3-3587">Override <xref:System.Windows.UIElement.OnTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3588">識別 <see cref="E:System.Windows.UIElement.TouchUp" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3588">Identifies the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.TranslatePoint : System.Windows.Point * System.Windows.UIElement -&gt; System.Windows.Point" Usage="uIElement.TranslatePoint (point, relativeTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="84df3-3589">相對於這個項目的點值。</span><span class="sxs-lookup"><span data-stu-id="84df3-3589">The point value, as relative to this element.</span></span></param>
        <param name="relativeTo"><span data-ttu-id="84df3-3590">指定的點要轉換成的項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3590">The element to translate the given point into.</span></span></param>
        <summary><span data-ttu-id="84df3-3591">將相對於這個項目的點轉換成相對於指定項目的座標。</span><span class="sxs-lookup"><span data-stu-id="84df3-3591">Translates a point relative to this element to coordinates that are relative to the specified element.</span></span></summary>
        <returns><span data-ttu-id="84df3-3592">點值，現在會相對於目標項目，而不是這個來源項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3592">A point value, now relative to the target element rather than this source element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3593">傳遞`null`針對`relativeTo`允許，而且表示座標應該相對於這個項目所屬的邏輯樹狀結構中的根項目。</span><span class="sxs-lookup"><span data-stu-id="84df3-3593">Passing `null` for `relativeTo` is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.</span></span>  
  
 <span data-ttu-id="84df3-3594">這個方法用於將轉譯點擊測試點值。</span><span class="sxs-lookup"><span data-stu-id="84df3-3594">This method is used for translating hit test point values.</span></span> <span data-ttu-id="84df3-3595">如果您正在撰寫的控制項，而且需要處理較低層級的輸入，則呼叫這個方法就大致上是相關。</span><span class="sxs-lookup"><span data-stu-id="84df3-3595">Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level.</span></span> <span data-ttu-id="84df3-3596">如果您使用現有的控制項，您通常可以假設已完成的控制項將報表正確轉譯的點擊的測試結果。</span><span class="sxs-lookup"><span data-stu-id="84df3-3596">If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Uid : string with get, set" Usage="System.Windows.UIElement.Uid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3597">取得或設定這個項目的唯一識別項 (適用於當地語系化)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3597">Gets or sets the unique identifier (for localization) for this element.</span></span> <span data-ttu-id="84df3-3598">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3598">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-3599">這個項目之唯一識別項的字串。</span><span class="sxs-lookup"><span data-stu-id="84df3-3599">A string that is the unique identifier for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3600">設計工具用來取得`x:Uid`值 (請參閱 < [WPF 全球化和當地語系化概觀](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)如需詳細資訊)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3600">Used by designers to get the `x:Uid` value (see [WPF Globalization and Localization Overview](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) for more information).</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-3601">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3601">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3602">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3602">Identifier field</span></span>|<xref:System.Windows.UIElement.UidProperty>|  
|<span data-ttu-id="84df3-3603">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-3603">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-3604">無</span><span class="sxs-lookup"><span data-stu-id="84df3-3604">None</span></span>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/81defade-483b-4a89-b76d-9b25bba34010"><span data-ttu-id="84df3-3605">X:uid 屬性</span><span class="sxs-lookup"><span data-stu-id="84df3-3605">x:Uid Attribute</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UidProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.UidProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3606">識別 <see cref="P:System.Windows.UIElement.Uid" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3606">Identifies the <see cref="P:System.Windows.UIElement.Uid" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberSignature Language="F#" Value="member this.UpdateLayout : unit -&gt; unit" Usage="uIElement.UpdateLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="84df3-3607">確認這個項目的所有視覺化子項目都已正確為配置而更新。</span><span class="sxs-lookup"><span data-stu-id="84df3-3607">Ensures that all visual child elements of this element are properly updated for layout.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3608">當您呼叫此方法中，使用的項目<xref:System.Windows.UIElement.IsMeasureValid%2A>`false`或是<xref:System.Windows.UIElement.IsArrangeValid%2A>`false`會呼叫項目專用<xref:System.Windows.UIElement.MeasureCore%2A>和<xref:System.Windows.UIElement.ArrangeCore%2A>方法，這會強制版面配置更新，且會驗證所有的計算的大小。</span><span class="sxs-lookup"><span data-stu-id="84df3-3608">When you call this method, elements with <xref:System.Windows.UIElement.IsMeasureValid%2A>`false` or <xref:System.Windows.UIElement.IsArrangeValid%2A>`false` will call element-specific <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> methods, which forces layout update, and all computed sizes will be validated.</span></span>  
  
 <span data-ttu-id="84df3-3609">如果配置並未變更，或配置的排列或測量都不狀態無效，則呼叫這個方法沒有任何作用。</span><span class="sxs-lookup"><span data-stu-id="84df3-3609">Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid.</span></span> <span data-ttu-id="84df3-3610">不過，如果在任一方面的配置無效<xref:System.Windows.UIElement.UpdateLayout%2A>呼叫將會取消復原整個版面配置。</span><span class="sxs-lookup"><span data-stu-id="84df3-3610">However, if layout is invalid in either respect, the <xref:System.Windows.UIElement.UpdateLayout%2A> call will redo the entire layout.</span></span> <span data-ttu-id="84df3-3611">因此，您應該避免呼叫<xref:System.Windows.UIElement.UpdateLayout%2A>項目樹狀結構中的每個增量和次要變更後。</span><span class="sxs-lookup"><span data-stu-id="84df3-3611">Therefore, you should avoid calling <xref:System.Windows.UIElement.UpdateLayout%2A> after each incremental and minor change in the element tree.</span></span> <span data-ttu-id="84df3-3612">版面配置系統會執行項目配置，以延遲方式，使用的演算法來平衡效能與貨幣，並延後到根物件的變更，直到所有的子元素都是有效的加權策略。</span><span class="sxs-lookup"><span data-stu-id="84df3-3612">The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid.</span></span> <span data-ttu-id="84df3-3613">您應該只呼叫<xref:System.Windows.UIElement.UpdateLayout%2A>如果一定需要更新的大小和位置，並只確定之後完成控制以及您可能會影響版面配置屬性的所有變更。</span><span class="sxs-lookup"><span data-stu-id="84df3-3613">You should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3614">取得或設定這個項目的 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 可見性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3614">Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.</span></span>  <span data-ttu-id="84df3-3615">這是相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3615">This is a dependency property.</span></span></summary>
        <value><span data-ttu-id="84df3-3616">列舉值。</span><span class="sxs-lookup"><span data-stu-id="84df3-3616">A value of the enumeration.</span></span> <span data-ttu-id="84df3-3617">預設值為 <see cref="F:System.Windows.Visibility.Visible" />。</span><span class="sxs-lookup"><span data-stu-id="84df3-3617">The default value is <see cref="F:System.Windows.Visibility.Visible" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="84df3-3618">設定這個屬性會影響的值影響<xref:System.Windows.UIElement.IsVisible%2A>，其接著可能會引發<xref:System.Windows.UIElement.IsVisibleChanged>事件。</span><span class="sxs-lookup"><span data-stu-id="84df3-3618">Setting this property affects the value of <xref:System.Windows.UIElement.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement.IsVisibleChanged> event.</span></span> <span data-ttu-id="84df3-3619">不過，<xref:System.Windows.UIElement.IsVisible%2A>有影響其他因素，例如包含它的父代的可見性設定。</span><span class="sxs-lookup"><span data-stu-id="84df3-3619">However, <xref:System.Windows.UIElement.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.</span></span>  
  
 <span data-ttu-id="84df3-3620">項目所在<xref:System.Windows.UIElement.Visibility%2A>不是<xref:System.Windows.Visibility.Visible>不會參與輸入事件 （或命令） 不會影響版面配置的測量或排列傳遞，是不 索引標籤順序，將不會報告在點擊測試。</span><span class="sxs-lookup"><span data-stu-id="84df3-3620">Elements where <xref:System.Windows.UIElement.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.</span></span>  
  
 <span data-ttu-id="84df3-3621">當繼承<xref:System.Windows.Window>或其衍生的類別，<xref:System.Windows.Window>重新定義預設值，這個屬性是<xref:System.Windows.Visibility.Collapsed>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3621">When inherited by <xref:System.Windows.Window> or its derived classes, <xref:System.Windows.Window> redefines the default value of this property to be <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="84df3-3622">這有不執行上一開始建立的 版面配置的測量傳遞的效果<xref:System.Windows.Window>，和<xref:System.Windows.UIElement.RenderSize%2A>傳回 (0，0)。</span><span class="sxs-lookup"><span data-stu-id="84df3-3622">This has the effect of not running the Measure pass of layout on an initially created <xref:System.Windows.Window>, and <xref:System.Windows.UIElement.RenderSize%2A> returns (0,0).</span></span> <span data-ttu-id="84df3-3623">如需詳細資訊，請參閱 <xref:System.Windows.Window>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3623">For details, see <xref:System.Windows.Window>.</span></span> <span data-ttu-id="84df3-3624"><xref:System.Windows.Controls.Primitives.Popup> 也會重新定義預設值是<xref:System.Windows.Visibility.Collapsed>，具有類似的結果行為，如<xref:System.Windows.Controls.Primitives.Popup>和其衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="84df3-3624"><xref:System.Windows.Controls.Primitives.Popup> also redefines the default value to be <xref:System.Windows.Visibility.Collapsed>, with similar resulting behavior for <xref:System.Windows.Controls.Primitives.Popup> and its derived classes.</span></span>  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="84df3-3625">相依性屬性資訊</span><span class="sxs-lookup"><span data-stu-id="84df3-3625">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="84df3-3626">識別項欄位</span><span class="sxs-lookup"><span data-stu-id="84df3-3626">Identifier field</span></span>|<xref:System.Windows.UIElement.VisibilityProperty>|  
|<span data-ttu-id="84df3-3627">若要設定的中繼資料屬性 `true`</span><span class="sxs-lookup"><span data-stu-id="84df3-3627">Metadata properties set to `true`</span></span>|<span data-ttu-id="84df3-3628">無</span><span class="sxs-lookup"><span data-stu-id="84df3-3628">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="84df3-3629">下列範例會實作參考兩個不同的具名的按鈕要會互斥的配對，使用者介面中的處理常式。</span><span class="sxs-lookup"><span data-stu-id="84df3-3629">The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface.</span></span> <span data-ttu-id="84df3-3630">在執行之前與按鈕關聯的實際程式邏輯，在按鈕本身設定為<xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>，而組配對中的 [其他] 按鈕會設定為<xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="84df3-3630">Prior to running the actual program logic associated with the button, the button itself is set to be <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, and the other button in the pair is set to <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="84df3-3631">識別 <see cref="P:System.Windows.UIElement.Visibility" /> 相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="84df3-3631">Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>