<Type Name="DataTemplate" FullName="System.Windows.DataTemplate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cffbeb8fcc8f02b552d5ae620f2af8c77273c146" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30678652" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DataTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplate : System::Windows::FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("DataTemplateKey")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>說明資料物件的視覺化結構。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您使用<xref:System.Windows.DataTemplate>來指定您的資料物件的視覺效果。 <xref:System.Windows.DataTemplate> 當您要繫結時，物件就特別有用<xref:System.Windows.Controls.ItemsControl>例如<xref:System.Windows.Controls.ListBox>至整個集合。 沒有特定指示，<xref:System.Windows.Controls.ListBox>顯示集合中物件的字串表示法。 在此情況下，您可以使用<xref:System.Windows.DataTemplate>定義的資料物件的外觀。 內容程式<xref:System.Windows.DataTemplate>會變成您的資料物件的視覺化結構。  
  
 如需深入的討論，請參閱[資料範本化概觀](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
   
  
## Examples  
 下列範例示範如何建立<xref:System.Windows.DataTemplate>內嵌。 <xref:System.Windows.DataTemplate>指定每個資料項目會顯示為三個<xref:System.Windows.Controls.TextBlock>內的項目<xref:System.Windows.Controls.StackPanel>。 在此範例中，資料物件是一種類別稱為`Task`。 請注意，每個<xref:System.Windows.Controls.TextBlock>此範本中的元素所繫結的屬性，`Task`類別。  
  
 [!code-xaml[DataTemplatingIntro_snip#Inline](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#inline)]  
  
 若要定義常見的方法是<xref:System.Windows.DataTemplate>中的資源區段，所以您可能會重複使用的物件，如下列範例所示：  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#AsResource](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#asresource)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 現在您可以使用 `myTaskTemplate` 做為資源，如下列範例所示︰  
  
 [!code-xaml[DataTemplatingIntro_snip#MyTaskTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#mytasktemplate)]  
  
 如需完整範例，請參閱[資料範本化範例簡介](http://go.microsoft.com/fwlink/?LinkID=160009)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.Binding" />
    <altmember cref="T:System.Windows.Controls.DataTemplateSelector" />
    <altmember cref="T:System.Windows.HierarchicalDataTemplate" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.DataTemplate" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.DataTemplate" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate (object dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataType As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate(System::Object ^ dataType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataType">如果樣板是要用於物件資料，則這是資料物件的型別名稱。</param>
        <summary>使用指定的 <see cref="T:System.Windows.DataTemplate" /> 屬性，初始化 <see cref="P:System.Windows.DataTemplate.DataType" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要參考類別的型別名稱，使用[X:type 標記延伸](~/docs/framework/xaml-services/x-type-markup-extension.md)。 如果範本用於[!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)]資料，這是代表資料的標記名稱的字串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataTemplateKey">
      <MemberSignature Language="C#" Value="public object DataTemplateKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataTemplateKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataTemplateKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataTemplateKey As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataTemplateKey { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Windows.DataTemplate" /> 的預設金鑰。</summary>
        <value>
          <see cref="T:System.Windows.DataTemplate" /> 的預設金鑰。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您未設定[X:key 指示詞](~/docs/framework/xaml-services/x-key-directive.md)上<xref:System.Windows.DataTemplate>位於<xref:System.Windows.ResourceDictionary>、<xref:System.Windows.DataTemplate.DataTemplateKey%2A>做為索引鍵。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public object DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataType { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>為預期為 <see cref="T:System.Windows.DataTemplate" /> 的項目取得或設定類型。</summary>
        <value>預設值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性是非常類似於<xref:System.Windows.Style.TargetType%2A>屬性<xref:System.Windows.Style>類別。 當您設定此屬性的資料類型而不指定`x:Key`、<xref:System.Windows.DataTemplate>取得自動套用到該類型的資料物件。 請注意，當您這麼做`x:Key`隱含設定。 因此，如果您指派這個<xref:System.Windows.DataTemplate>`x:Key`值，您會覆寫的隱含`x:Key`和<xref:System.Windows.DataTemplate>不會自動套用。  
  
 也請注意，如果您要繫結<xref:System.Windows.Controls.ContentControl>集合的`Task`物件<xref:System.Windows.Controls.ContentControl>不會使用<xref:System.Windows.DataTemplate>自動。 這是因為在繫結<xref:System.Windows.Controls.ContentControl>需要區別您是否想要繫結至整個集合或個別物件的詳細資訊。 如果您<xref:System.Windows.Controls.ContentControl>正在追蹤的選取項目<xref:System.Windows.Controls.ItemsControl>類型，您可以設定<xref:System.Windows.Data.Binding.Path%2A>屬性<xref:System.Windows.Controls.ContentControl>繫結至 「`/`"，表示您感興趣的目前項目。 如需範例，請參閱[How to： 繫結至集合並顯示選取項目基礎資訊](~/docs/framework/wpf/data/how-to-bind-to-a-collection-and-display-information-based-on-selection.md)。 否則，您需要指定<xref:System.Windows.DataTemplate>明確地設定<xref:System.Windows.Controls.ContentControl.ContentTemplate%2A>屬性。  
  
 <xref:System.Windows.DataTemplate.DataType%2A>屬性是特別有用，當您有<xref:System.Windows.Data.CompositeCollection>不同類型的資料物件。  
  
 如果這個屬性的目標不在預設命名空間的 XML 項目，您必須在命名空間或命名空間指示項的項目名稱。 對於透過 LINQ 公開 XML 的 XML，命名空間會出現在大括號，加上括號逸出序列：  
  
```xaml  
<DataTemplate DataType="{}{http://myNamespace}Details">  
```  
  
 對於公開會透過 XPath 的 XML，項目名稱前面會有一個執行個體所建立的命名空間指示項<xref:System.Windows.Data.XmlNamespaceMapping>:  
  
```xaml  
<DataTemplate DataType="mn:Details">  
```  
  
<a name="xamlAttributeUsage_DataType"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object DataType="typeName"/>  
```  
  
<a name="xamlValues_DataType"></a>   
## <a name="xaml-values"></a>XAML 值  
 *typeName*  
 如果範本用於物件資料，此屬性會包含資料物件的型別名稱 （做為字串）。 若要參考類別的型別名稱，使用[X:type 標記延伸](~/docs/framework/xaml-services/x-type-markup-extension.md)。 如果範本用於[!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)]資料，這個屬性包含 XML 項目名稱。 請參閱文件註解如需詳細資訊，關於指定非預設命名空間的 XML 項目。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得觸發程序的集合，這些觸發程序會根據一個或多個條件來套用屬性值或執行動作。</summary>
        <value>觸發程序物件的集合。 預設值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您要建立資料範本中的觸發程序，觸發程序 setter 應該設定資料範本的範圍內的屬性。 否則，它可能是更適合用來建立觸發程序使用包含資料的類型為目標的樣式。 例如，如果您要繫結<xref:System.Windows.Controls.ListBox>控制項，容器是<xref:System.Windows.Controls.ListBoxItem>物件。 如果您使用觸發程序來設定屬性的範圍內<xref:System.Windows.DataTemplate>，則可能是更適合用來建立<xref:System.Windows.Controls.ListBoxItem>樣式，並建立該樣式中的觸發程序。 如需詳細資訊，請參閱 < 什麼所屬 DataTemplate 中？在[資料範本化概觀](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
> [!NOTE]
>  這個屬性只能在設定[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]集合語法所示，透過或存取的集合物件和使用的各種方法，例如 Add。 用來存取集合物件本身屬性是唯讀，集合本身為讀寫。  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```  
<object>  
  <object.Triggers>  
    OneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>XAML 值  
 *OneOrMoreTriggers*  
 零或多個<xref:System.Windows.TriggerBase>物件。  
  
   
  
## Examples  
 下列<xref:System.Windows.DataTemplate>示範如何使用<xref:System.Windows.DataTemplate.Triggers%2A>屬性。  
  
 [!code-xaml[DataBindingLab#AuctionItemDataTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemdatatemplate)]  
  
 如需完整範例，請參閱[資料繫結示範](http://go.microsoft.com/fwlink/?LinkID=163703)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.MultiDataTrigger" />
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">這個樣板要套用的項目。</param>
        <summary>請依一組規則來檢查樣版化父代 (Parent)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法會使用下列規則：  
  
-   `templatedParent`必須為非 null <xref:System.Windows.FrameworkElement>。  
  
-   <xref:System.Windows.DataTemplate>必須套用至<xref:System.Windows.Controls.ContentPresenter>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>