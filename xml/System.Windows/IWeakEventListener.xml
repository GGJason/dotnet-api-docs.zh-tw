<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3ebfdb9ce19336f783b2dfdfa69984aebd3d731d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37492167" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>為透過 WeakEvent 模式和 <see cref="T:System.Windows.WeakEventManager" /> 接收事件的類別提供事件接聽支援。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.WeakEventManager> (Dispatcher) 將事件轉寄藉由呼叫<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>類別來實作此介面，並已加入的接聽程式呼叫的方法<xref:System.Windows.WeakEventManager>事先方法。  
  
 下列 WeakEvent 模式的主要原因時，事件來源的物件存留期可能無關的事件接聽程式。 使用的中央事件分派<xref:System.Windows.WeakEventManager>啟用接聽程式要進行記憶體回收的處理常式收集 （或以手動方式清除） 即使來源的物件存留期超出接聽程式。 相較之下，使用一般事件連結`+=`或對等語言特有的事件語法會導致可能仍然連接的來源，以保存處理常式的強式參考。 這可防止進行記憶體回收 neodpověděl včas 的接聽程式參考。  
  
 來源與接聽程式之間的關聯性，建議使用此模式的一個常見情況是來自資料繫結來源更新事件的處理。  
  
 您可以使用 WeakEvent 模式來接聽您的應用程式外部的事件。 您只需要定義<xref:System.Windows.WeakEventManager>，提供在接聽行為<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>，並使用<xref:System.Windows.WeakEventManager>若要附加的處理常式參考而非`+=`。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">呼叫這個方法的 <see cref="T:System.Windows.WeakEventManager" /> 型別。</param>
        <param name="sender">發出事件的物件。</param>
        <param name="e">事件資料。</param>
        <summary>從集中式事件管理員接收事件。</summary>
        <returns>如果接聽程式已處理事件則為 <see langword="true" />。 在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 中處理的 <see cref="T:System.Windows.WeakEventManager" /> 會將其視為錯誤，以註冊接聽程式未處理之事件的接聽程式。 如果方法接收到無法辨識或處理的事件，不論如何都該傳回 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會實作<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>以 WeakEvent 模式支援兩個假設事件`ClockwiseSpin`並`CounterclockwiseSpin`各有專用的<xref:System.Windows.WeakEventManager>（未顯示）。 這個實作會呼叫類別處理常式 stub，針對每個支援的事件，將事件資料轉換 (在此情況下的兩個事件共用事件資料型別`SpinEventArgs`)。 實作會傳回`false`如果接收的事件不預期的其中一個。  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>這個方法被要接收的所有可能的事件接收者接聽程式清單中的所在。尤其接聽多個事件類別的實作，您必須檢查傳入的型別<paramref name="managerType" />才能知道哪個事件呼叫的參數對應至。這就是為什麼是模式的部分是每個事件都有專用<see cref="T:System.Windows.WeakEventManager" />。此外，<paramref name="e" />參數的型別為一般<see cref="T:System.EventArgs" />。因此，為了取得事件資料的任何特定屬性，您的實作必須轉型為特定的事件資料型別。一般而言之後根據事件的身分識別檢查,<see cref="T:System.Windows.WeakEventManager" />類型，您的實作應該呼叫的私用類別處理常式。您的類別處理常式應該被視為完全相同的類別處理常式用來處理該事件接聽程式加入透過傳統的事件模式，透過新增<see langword="+=" />上寄件者的事件。下列的 「 範例 」 一節會提供概略的實作範本。</para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>