<Type Name="Style" FullName="System.Windows.Style">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8a1121d73905393a90403f74db8e044229988c06" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36456915" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Style : System.Windows.Threading.DispatcherObject, System.Windows.ISealable, System.Windows.Markup.IAddChild, System.Windows.Markup.INameScope, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Style extends System.Windows.Threading.DispatcherObject implements class System.Windows.ISealable, class System.Windows.Markup.IAddChild, class System.Windows.Markup.INameScope, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Style" />
  <TypeSignature Language="VB.NET" Value="Public Class Style&#xA;Inherits DispatcherObject&#xA;Implements IAddChild, INameScope, IQueryAmbient, ISealable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Style : System::Windows::Threading::DispatcherObject, System::Windows::ISealable, System::Windows::Markup::IAddChild, System::Windows::Markup::INameScope, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type Style = class&#xA;    inherit DispatcherObject&#xA;    interface INameScope&#xA;    interface IAddChild&#xA;    interface ISealable&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.ISealable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.INameScope</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="43801-101">在某型別的各執行個體間啟用屬性、資源與事件處理常式的共用。</span>
      <span class="sxs-lookup">
        <span data-stu-id="43801-101">Enables the sharing of properties, resources, and event handlers between instances of a type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43801-102">您可以設定<xref:System.Windows.Style>的任何項目衍生自<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>。</span><span class="sxs-lookup"><span data-stu-id="43801-102">You can set a <xref:System.Windows.Style> on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="43801-103">樣式最常宣告內的資源為<xref:System.Windows.Application.Resources%2A>> 一節。</span><span class="sxs-lookup"><span data-stu-id="43801-103">A style is most commonly declared as a resource inside the <xref:System.Windows.Application.Resources%2A> section.</span></span> <span data-ttu-id="43801-104">樣式是資源，因為它們會遵循相同範圍規則套用至所有資源，所以您可以套用它會影響宣告的樣式。</span><span class="sxs-lookup"><span data-stu-id="43801-104">Because styles are resources, they obey the same scoping rules that apply to all resources, so where you declare a style affects where it can be applied.</span></span> <span data-ttu-id="43801-105">如果您執行個體，宣告您的應用程式定義的根項目中的樣式[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]檔案，樣式可以隨處使用應用程式中。</span><span class="sxs-lookup"><span data-stu-id="43801-105">If, for instance, you declare the style in the root element of your application definition [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file, the style can be used anywhere in your application.</span></span> <span data-ttu-id="43801-106">如果您要建立瀏覽應用程式中的應用程式的其中一個宣告樣式[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]樣式的檔案可用於只，[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]檔案。</span><span class="sxs-lookup"><span data-stu-id="43801-106">If you are creating a navigation application and declare the style in one of the application's [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] files, the style can be used only in that [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file.</span></span> <span data-ttu-id="43801-107">如需有關如何設定資源的規則的範圍的詳細資訊，請參閱[XAML 資源](~/docs/framework/wpf/advanced/xaml-resources.md)。</span><span class="sxs-lookup"><span data-stu-id="43801-107">For more information on scoping rules for resources, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
 <span data-ttu-id="43801-108">樣式宣告包含<xref:System.Windows.Style>物件，其中包含一或多個集合<xref:System.Windows.Setter>物件。</span><span class="sxs-lookup"><span data-stu-id="43801-108">The style declaration consists of a <xref:System.Windows.Style> object that contains a collection of one or more <xref:System.Windows.Setter> objects.</span></span> <span data-ttu-id="43801-109">每個<xref:System.Windows.Setter>組成<xref:System.Windows.Setter.Property%2A>和<xref:System.Windows.Setter.Value%2A>。</span><span class="sxs-lookup"><span data-stu-id="43801-109">Each <xref:System.Windows.Setter> consists of a <xref:System.Windows.Setter.Property%2A> and a <xref:System.Windows.Setter.Value%2A>.</span></span> <span data-ttu-id="43801-110">屬性是，將套用至項目的樣式屬性名稱。</span><span class="sxs-lookup"><span data-stu-id="43801-110">The property is the name of the property of the element the style is to apply to.</span></span> <span data-ttu-id="43801-111">樣式宣告為資源之後，然後就像任何其他資源參考它。</span><span class="sxs-lookup"><span data-stu-id="43801-111">After the style is declared as a resource, it can then be referenced just like any other resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43801-112">是否有一個以上的 setter setter 集合中具有相同<xref:System.Windows.Setter.Property%2A>上次使用屬性值，宣告的 setter。</span><span class="sxs-lookup"><span data-stu-id="43801-112">If there is more than one setter in the setter collection with the same <xref:System.Windows.Setter.Property%2A> property value, the setter that is declared last is used.</span></span> <span data-ttu-id="43801-113">同樣地，如果針對相同的屬性值在樣式中，項目上直接設定，直接在元素上設定的值優先。</span><span class="sxs-lookup"><span data-stu-id="43801-113">Similarly, if you set a value for the same property in a style and on an element directly, the value set on the element directly takes precedence.</span></span>  
  
 <span data-ttu-id="43801-114">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]設定樣式和範本的模型可讓維護和共用的外觀，以及展示檔和邏輯分離。</span><span class="sxs-lookup"><span data-stu-id="43801-114">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] styling and templating model allows maintenance and sharing of a look as well as the separation of presentation and logic.</span></span> <span data-ttu-id="43801-115">設定樣式和範本模型中包含一組功能，可讓您自訂您[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="43801-115">The styling and templating model includes a suite of features that enable you to customize your [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="43801-116">此套件的功能包括<xref:System.Windows.Style>以及下列類別：</span><span class="sxs-lookup"><span data-stu-id="43801-116">This suite of features includes the <xref:System.Windows.Style> class as well as the following:</span></span>  
  
-   <xref:System.Windows.Trigger>  
  
-   <span data-ttu-id="43801-117"><xref:System.Windows.EventTrigger> 和 <xref:System.Windows.Media.Animation.Storyboard></span><span class="sxs-lookup"><span data-stu-id="43801-117"><xref:System.Windows.EventTrigger> and <xref:System.Windows.Media.Animation.Storyboard></span></span>  
  
-   <xref:System.Windows.Controls.ControlTemplate>  
  
-   <xref:System.Windows.DataTemplate>  
  
 <span data-ttu-id="43801-118">如需詳細資訊，請參閱 [設定樣式和範本](~/docs/framework/wpf/controls/styling-and-templating.md)。</span><span class="sxs-lookup"><span data-stu-id="43801-118">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43801-119">下列範例顯示會影響樣式宣告<xref:System.Windows.Controls.Control.Background%2A>屬性<xref:System.Windows.Controls.Control>。</span><span class="sxs-lookup"><span data-stu-id="43801-119">The following example shows a style declaration that will affect the <xref:System.Windows.Controls.Control.Background%2A> property of a <xref:System.Windows.Controls.Control>.</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimple](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimple)]   
  
 <span data-ttu-id="43801-120">若要套用上述的樣式，執行下列作業：</span><span class="sxs-lookup"><span data-stu-id="43801-120">To apply the above style, do the following:</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimpleApplied](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimpleapplied)]
  
 <span data-ttu-id="43801-121">您也可以套用至特定類型的所有項目樣式，使用<xref:System.Windows.Style.TargetType%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="43801-121">You can also apply styles to all elements of a given type by using the <xref:System.Windows.Style.TargetType%2A> property.</span></span> <span data-ttu-id="43801-122">將目標類型加入至樣式表示您不再需要完整限定您要設定與屬性`ClassName.PropertyName`語法。</span><span class="sxs-lookup"><span data-stu-id="43801-122">Adding the target type to the style means that you no longer have to fully qualify the property you are setting with the `ClassName.PropertyName` syntax.</span></span> <span data-ttu-id="43801-123">下列範例會定義將會套用至每個樣式<xref:System.Windows.Controls.TextBlock>項目。</span><span class="sxs-lookup"><span data-stu-id="43801-123">The following example defines a style that will be applied to every <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
> [!NOTE]
>  <span data-ttu-id="43801-124">許多[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控制項包含的其他組合[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控制項，以便建立樣式套用至所有類型的控制項可以有廣泛的影響。</span><span class="sxs-lookup"><span data-stu-id="43801-124">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="43801-125">比方說，如果您建立目標的樣式<xref:System.Windows.Controls.TextBlock>控制項<xref:System.Windows.Controls.Canvas>，樣式套用至所有<xref:System.Windows.Controls.TextBlock>控制項在畫布上，即使<xref:System.Windows.Controls.TextBlock>屬於另一個控制項，例如<xref:System.Windows.Controls.ListBox>。</span><span class="sxs-lookup"><span data-stu-id="43801-125">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBlock> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBlock> controls in the canvas, even if the <xref:System.Windows.Controls.TextBlock> is part of another control, such as a <xref:System.Windows.Controls.ListBox>.</span></span>  
  
 <span data-ttu-id="43801-126">如需如何擴充或繼承自定義的樣式資訊，請參閱<xref:System.Windows.Style.BasedOn%2A>頁面。</span><span class="sxs-lookup"><span data-stu-id="43801-126">For information on how to extend or inherit from a defined style, see the <xref:System.Windows.Style.BasedOn%2A> page.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="43801-127">初始化 <see cref="T:System.Windows.Style" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-127">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="43801-128">初始化 <see cref="T:System.Windows.Style" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-128">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43801-129">這個建構函式呼叫需要延遲的驗證<xref:System.Windows.Style.TargetType%2A>和<xref:System.Windows.Style.BasedOn%2A>樣式型別。</span><span class="sxs-lookup"><span data-stu-id="43801-129">This constructor call requires delayed validation of <xref:System.Windows.Style.TargetType%2A> and <xref:System.Windows.Style.BasedOn%2A> style type.</span></span> <span data-ttu-id="43801-130">如果這使用剖析器的內容之外，則行為是未定義。</span><span class="sxs-lookup"><span data-stu-id="43801-130">If this is used outside the context of the parser, behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Style : Type -&gt; System.Windows.Style" Usage="new System.Windows.Style targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">
          <span data-ttu-id="43801-131">將套用樣式的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-131">The type to which the style will apply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43801-132">初始化 <see cref="T:System.Windows.Style" /> 類別的新執行個體，以用於指定的 <see cref="T:System.Type" /> 上。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-132">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType, System.Windows.Style basedOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType, class System.Windows.Style basedOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type, basedOn As Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType, System::Windows::Style ^ basedOn);" />
      <MemberSignature Language="F#" Value="new System.Windows.Style : Type * System.Windows.Style -&gt; System.Windows.Style" Usage="new System.Windows.Style (targetType, basedOn)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="basedOn" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="targetType">
          <span data-ttu-id="43801-133">將套用樣式的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-133">The type to which the style will apply.</span>
          </span>
        </param>
        <param name="basedOn">
          <span data-ttu-id="43801-134">供此樣式做為基礎的樣式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-134">The style to base this style on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43801-135">根據指定的 <see cref="T:System.Windows.Style" /> 初始化 <see cref="T:System.Type" /> 類別的新執行個體，以用於指定的 <see cref="T:System.Windows.Style" /> 上。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-135">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" /> and based on the specified <see cref="T:System.Windows.Style" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BasedOn">
      <MemberSignature Language="C#" Value="public System.Windows.Style BasedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style BasedOn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.BasedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property BasedOn As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ BasedOn { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BasedOn : System.Windows.Style with get, set" Usage="System.Windows.Style.BasedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43801-136">取得或設定做為目前樣式之基礎的已定義樣式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-136">Gets or sets a defined style that is the basis of the current style.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="43801-137">做為目前樣式之基礎的已定義樣式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-137">A defined style that is the basis of the current style.</span>
          </span>
          <span data-ttu-id="43801-138">預設值是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-138">The default value is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43801-139">每個樣式只支援一個<xref:System.Windows.Style.BasedOn%2A>值。</span><span class="sxs-lookup"><span data-stu-id="43801-139">Each style only supports one <xref:System.Windows.Style.BasedOn%2A> value.</span></span>  
  
<a name="xamlAttributeUsage_BasedOn"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="43801-140">XAML Attribute Usage</span><span class="sxs-lookup"><span data-stu-id="43801-140">XAML Attribute Usage</span></span>  
  
```  
<object BasedOn="myStyle" .../>  
```  
  
<a name="xamlValues_BasedOn"></a>   
## <a name="xaml-values"></a><span data-ttu-id="43801-141">XAML 值</span><span class="sxs-lookup"><span data-stu-id="43801-141">XAML Values</span></span>  
 <span data-ttu-id="43801-142">*myStyle*</span><span class="sxs-lookup"><span data-stu-id="43801-142">*myStyle*</span></span>  
 <span data-ttu-id="43801-143">現有的樣式。</span><span class="sxs-lookup"><span data-stu-id="43801-143">An existing style.</span></span> <span data-ttu-id="43801-144">通常，您會使用[標記延伸和 WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)來參考現有的樣式。</span><span class="sxs-lookup"><span data-stu-id="43801-144">Typically, you use the [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md) to refer to an existing style.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43801-145">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 中的樣式有幾種方法可以擴展或繼承。</span><span class="sxs-lookup"><span data-stu-id="43801-145">There are several ways that styles in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] can be extended or inherited.</span></span> <span data-ttu-id="43801-146">樣式可以根據透過這個屬性的其他樣式。</span><span class="sxs-lookup"><span data-stu-id="43801-146">Styles can be based on other styles through this property.</span></span> <span data-ttu-id="43801-147">當您使用這個屬性時，新的樣式會繼承原始樣式的不明確地重新定義新的樣式中的值。</span><span class="sxs-lookup"><span data-stu-id="43801-147">When you use this property, the new style will inherit the values of the original style that are not explicitly redefined in the new style.</span></span> <span data-ttu-id="43801-148">在下列範例中，`Style2`繼承<xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType>值`Yellow`，並將<xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType>值`Blue`。</span><span class="sxs-lookup"><span data-stu-id="43801-148">In the following example, `Style2` inherits the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> value of `Yellow`, and adds a <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType> value of `Blue`.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyle](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyle)]   
  
 <span data-ttu-id="43801-149">樣式同樣地，根據現有的樣式[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]項目，如下列的範例，其中新的樣式為基礎的樣式<xref:System.Windows.Controls.TextBlock>項目。</span><span class="sxs-lookup"><span data-stu-id="43801-149">Similarly, styles can be based on the style of an existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] element, as in the following example where the new style is based on the style of a <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#2)]   
  
> [!NOTE]
>  <span data-ttu-id="43801-150">如果您建立的樣式<xref:System.Windows.Style.TargetType%2A>屬性和它的其他樣式的基底也會定義<xref:System.Windows.Style.TargetType%2A>屬性衍生的樣式的目標類型必須相同，或衍生自基底樣式的類型。</span><span class="sxs-lookup"><span data-stu-id="43801-150">If you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the type of the base style.</span></span>  
  
 <span data-ttu-id="43801-151">針對特定類型所定義的樣式也可以根據其他樣式，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="43801-151">Styles defined for specific types can also be based on other styles, as in the following example.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyleTargetType](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyletargettype)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : unit -&gt; int&#xA;override this.GetHashCode : unit -&gt; int" Usage="style.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="43801-152">傳回這個 <see cref="T:System.Windows.Style" /> 的雜湊程式碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-152">Returns the hash code for this <see cref="T:System.Windows.Style" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="43801-153">這個 <see cref="T:System.Windows.Style" /> 的雜湊碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-153">The hash code for this <see cref="T:System.Windows.Style" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.Style.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43801-154">取得值，這個值表示樣式是否為唯讀而無法加以變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-154">Gets a value that indicates whether the style is read-only and cannot be changed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="43801-155">如果樣式已密封則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-155">
              <see langword="true" /> if the style is sealed; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43801-156">當另一個樣式根據或套用第一次時，樣式是密封格式。</span><span class="sxs-lookup"><span data-stu-id="43801-156">A style is sealed when another style is based on it or when it is applied for the first time.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Style.BasedOn" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit&#xA;override this.RegisterName : string * obj -&gt; unit" Usage="style.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="43801-157">要註冊的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-157">The name to register.</span>
          </span>
        </param>
        <param name="scopedElement">
          <span data-ttu-id="43801-158">要對應至指定之 <c>name</c> 的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-158">The object to map to the specified <c>name</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43801-159">在目前的名稱範圍中註冊新的「名稱-物件」組。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-159">Registers a new name-object pair in the current namescope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.Style.Resources" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43801-160">取得或設定可在這個樣式的範圍內使用的資源集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-160">Gets or sets the collection of resources that can be used within the scope of this style.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="43801-161">可在這個樣式的範圍內使用的資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-161">The resources that can be used within the scope of this style.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="43801-162">XAML 屬性項目用法</span><span class="sxs-lookup"><span data-stu-id="43801-162">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
- or -   
<object>  
  <object.Resources>  
    <ResourceDictionary Source="externalDictionarySource"/>  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="43801-163">XAML 值</span><span class="sxs-lookup"><span data-stu-id="43801-163">XAML Values</span></span>  
 <span data-ttu-id="43801-164">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="43801-164">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="43801-165">一或多個資源項目。</span><span class="sxs-lookup"><span data-stu-id="43801-165">One or more resource elements.</span></span> <span data-ttu-id="43801-166">在更新版本中受到參照[StaticResource 標記延伸](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)或[DynamicResource 標記延伸](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)中的語法[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，資源項目必須具有`x:Key`屬性。</span><span class="sxs-lookup"><span data-stu-id="43801-166">To be referenced later in either [StaticResource Markup Extension](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) or [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) syntax in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], a resource element must have an `x:Key` attribute.</span></span>  
  
 <span data-ttu-id="43801-167">\<ResourceDictionary 來源 =" *externalDictionarySource*"/ ></span><span class="sxs-lookup"><span data-stu-id="43801-167">\<ResourceDictionary Source=" *externalDictionarySource*"/></span></span>  
 <span data-ttu-id="43801-168">外部字典來源。</span><span class="sxs-lookup"><span data-stu-id="43801-168">An external dictionary source.</span></span> <span data-ttu-id="43801-169">如需詳細資訊，請參閱[合併資源字典](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)。</span><span class="sxs-lookup"><span data-stu-id="43801-169">For details, see [Merged Resource Dictionaries](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seal">
      <MemberSignature Language="C#" Value="public void Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.Seal" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seal ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seal();" />
      <MemberSignature Language="F#" Value="member this.Seal : unit -&gt; unit" Usage="style.Seal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="43801-170">鎖定這個樣式以及所有 Factory 與觸發程序，使其無法變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-170">Locks this style and all factories and triggers so they cannot be changed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Setters : System.Windows.SetterBaseCollection" Usage="System.Windows.Style.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43801-171">取得 <see cref="T:System.Windows.Setter" /> 與 <see cref="T:System.Windows.EventSetter" /> 物件的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-171">Gets a collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="43801-172">
            <see cref="T:System.Windows.Setter" /> 與 <see cref="T:System.Windows.EventSetter" /> 物件的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-172">A collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span>
          </span>
          <span data-ttu-id="43801-173">預設為空集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-173">The default is an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43801-174"><xref:System.Windows.Style.Setters%2A>屬性<xref:System.Windows.Style>物件只可包含指派給物件<xref:System.Windows.SetterBase>。</span><span class="sxs-lookup"><span data-stu-id="43801-174">The <xref:System.Windows.Style.Setters%2A> property of a <xref:System.Windows.Style> object can consist only of objects assignable to <xref:System.Windows.SetterBase>.</span></span> <span data-ttu-id="43801-175">加入<xref:System.Windows.SetterBase>子系<xref:System.Windows.Style>物件隱含地將它加入至<xref:System.Windows.SetterBaseCollection>如<xref:System.Windows.Style>物件。</span><span class="sxs-lookup"><span data-stu-id="43801-175">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span>  
  
 <span data-ttu-id="43801-176">明確的屬性項目使用方式<xref:System.Windows.Style.Setters%2A>也是相當常見。</span><span class="sxs-lookup"><span data-stu-id="43801-176">An explicit property element usage  for <xref:System.Windows.Style.Setters%2A> is also relatively common.</span></span> <span data-ttu-id="43801-177">這是有時候可以幫助區分的標記樣式決策<xref:System.Windows.Style.Setters%2A>從<xref:System.Windows.Style.Resources%2A>和<xref:System.Windows.Style.Triggers%2A>複雜樣式中的項目。</span><span class="sxs-lookup"><span data-stu-id="43801-177">This is a markup style decision that can sometimes help distinguish <xref:System.Windows.Style.Setters%2A> from <xref:System.Windows.Style.Resources%2A> and <xref:System.Windows.Style.Triggers%2A> items in a complex style.</span></span> <span data-ttu-id="43801-178">例如: </span><span class="sxs-lookup"><span data-stu-id="43801-178">For example:</span></span>  
  
```  
<Style>  
  <Style.Setters>  
    <!--one or more SetterBase derived object elements here-->  
  </Style.Setters>  
</Style>  
```  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="43801-179">XAML 屬性項目用法</span><span class="sxs-lookup"><span data-stu-id="43801-179">XAML Property Element Usage</span></span>  
  
```  
<object>  
  oneOrMoreSetters  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a><span data-ttu-id="43801-180">XAML 值</span><span class="sxs-lookup"><span data-stu-id="43801-180">XAML Values</span></span>  
 <span data-ttu-id="43801-181">*oneOrMoreSetters*</span><span class="sxs-lookup"><span data-stu-id="43801-181">*oneOrMoreSetters*</span></span>  
 <span data-ttu-id="43801-182">一或多個<xref:System.Windows.Setter>或<xref:System.Windows.EventSetter>物件。</span><span class="sxs-lookup"><span data-stu-id="43801-182">One or more <xref:System.Windows.Setter> or <xref:System.Windows.EventSetter> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43801-183">下列範例會示範如何使用這個屬性。</span><span class="sxs-lookup"><span data-stu-id="43801-183">The following example shows how to use this property.</span></span>  
  
 [!code-csharp[listboxitemstyle#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ListBoxItemStyle/CSharp/Pane1.xaml.cs#1)]
 [!code-vb[listboxitemstyle#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListBoxItemStyle/VisualBasic/Pane1.xaml.vb#1)]  
  
 <span data-ttu-id="43801-184">加入<xref:System.Windows.SetterBase>子系<xref:System.Windows.Style>物件隱含地將它加入至<xref:System.Windows.SetterBaseCollection>如<xref:System.Windows.Style>物件。</span><span class="sxs-lookup"><span data-stu-id="43801-184">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span> <span data-ttu-id="43801-185">下列<xref:System.Windows.EventSetter>隱含地加入<xref:System.Windows.SetterBaseCollection>的樣式：</span><span class="sxs-lookup"><span data-stu-id="43801-185">The following <xref:System.Windows.EventSetter> is implicitly added to the <xref:System.Windows.SetterBaseCollection> of the style:</span></span>  
  
 [!code-xaml[eventovwsupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Setter" />
        <altmember cref="T:System.Windows.EventSetter" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.CanSeal">
      <MemberSignature Language="C#" Value="bool System.Windows.ISealable.CanSeal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Windows.ISealable.CanSeal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.System#Windows#ISealable#CanSeal" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CanSeal As Boolean Implements ISealable.CanSeal" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Windows.ISealable.CanSeal { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Style.System.Windows.ISealable.CanSeal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.IsSealed">
      <MemberSignature Language="C#" Value="bool System.Windows.ISealable.IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Windows.ISealable.IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.System#Windows#ISealable#IsSealed" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSealed As Boolean Implements ISealable.IsSealed" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Windows.ISealable.IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Style.System.Windows.ISealable.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.ISealable.Seal">
      <MemberSignature Language="C#" Value="void ISealable.Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.ISealable.Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#ISealable#Seal" />
      <MemberSignature Language="VB.NET" Value="Sub Seal () Implements ISealable.Seal" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.ISealable.Seal() = System::Windows::ISealable::Seal;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="43801-186">要加入的子物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-186">The child object to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43801-187">加入子物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-187">Adds a child object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43801-188">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="43801-188">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43801-189">只有在 <xref:System.Windows.Style> 執行個體轉換成 <xref:System.Windows.Markup.IAddChild> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="43801-189">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="43801-190">要加入物件中的文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-190">The text to add to the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43801-191">將節點的文字內容加入物件中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-191">Adds the text content of a node to the object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43801-192">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="43801-192">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43801-193">只有在 <xref:System.Windows.Style> 執行個體轉換成 <xref:System.Windows.Markup.IAddChild> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="43801-193">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.INameScope.FindName">
      <MemberSignature Language="C#" Value="object INameScope.FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Windows.Markup.INameScope.FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function FindName (name As String) As Object Implements INameScope.FindName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Windows.Markup.INameScope.FindName(System::String ^ name) = System::Windows::Markup::INameScope::FindName;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.FindName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="43801-194">所要求之物件的名稱識別項。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-194">The name identifier for the object being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43801-195">傳回具有所提供之識別名稱的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-195">Returns an object that has the provided identifying name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="43801-196">物件，如果找到的話。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-196">The object, if found.</span>
          </span>
          <span data-ttu-id="43801-197">如果找不到該名稱的物件，則傳回 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-197">Returns <see langword="null" /> if no object of that name was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43801-198">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="43801-198">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="43801-199">只有在 <xref:System.Windows.Style> 執行個體轉換成 <xref:System.Windows.Markup.INameScope> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="43801-199">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.INameScope> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">
          <span data-ttu-id="43801-200">要求之環境屬性 (Ambient Property) 的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-200">The name of the requested ambient property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43801-201">查詢指定的環境屬性 (Ambient Property) 是否可用於目前的範圍。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-201">Queries whether a specified ambient property is available in the current scope.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="43801-202">如果可使用要求的環境屬性則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-202">
              <see langword="true" /> if the requested ambient property is available; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Markup.IQueryAmbient" />
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Style.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43801-203">取得或設定適用此樣式的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-203">Gets or sets the type for which this style is intended.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="43801-204">這個樣式的目標型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-204">The target type for this style.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43801-205">您可以從衍生的任何項目設定樣式<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>。</span><span class="sxs-lookup"><span data-stu-id="43801-205">You can set a style on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="43801-206">因此，您的目標類型可以是任何這些項目。</span><span class="sxs-lookup"><span data-stu-id="43801-206">Therefore, your target type can be any of those elements.</span></span> <span data-ttu-id="43801-207">不過，如果您建立的樣式<xref:System.Windows.Style.TargetType%2A>屬性和它的其他樣式的基底也會定義<xref:System.Windows.Style.TargetType%2A>屬性衍生的樣式的目標類型必須相同，或衍生自的基底樣式的目標類型。</span><span class="sxs-lookup"><span data-stu-id="43801-207">However, if you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the target type of the base style.</span></span>  
  
 <span data-ttu-id="43801-208">如果您未指定<xref:System.Windows.Style.TargetType%2A>，接著，您必須指定`x:Key`如您<xref:System.Windows.Style>也允許您的風格的類別名稱中的屬性。</span><span class="sxs-lookup"><span data-stu-id="43801-208">If you do not specify a <xref:System.Windows.Style.TargetType%2A>, then you must specify an `x:Key` for your <xref:System.Windows.Style> and also qualify the properties in your style with a class name.</span></span>  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="43801-209">XAML Attribute Usage</span><span class="sxs-lookup"><span data-stu-id="43801-209">XAML Attribute Usage</span></span>  
  
```  
<object  TargetType="{x:Type typeName}"/>  
-or-  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a><span data-ttu-id="43801-210">XAML 值</span><span class="sxs-lookup"><span data-stu-id="43801-210">XAML Values</span></span>  
 `{x:Type ...}`  
 <span data-ttu-id="43801-211">[X:type 標記延伸](~/docs/framework/xaml-services/x-type-markup-extension.md)標記延伸使用方式。</span><span class="sxs-lookup"><span data-stu-id="43801-211">An [x:Type Markup Extension](~/docs/framework/xaml-services/x-type-markup-extension.md) markup extension usage.</span></span>  
  
 <span data-ttu-id="43801-212">*typeName*</span><span class="sxs-lookup"><span data-stu-id="43801-212">*typeName*</span></span>  
 <span data-ttu-id="43801-213">類別的型別名稱。</span><span class="sxs-lookup"><span data-stu-id="43801-213">The type name of the class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43801-214">下列範例會定義將套用的所有執行個體的樣式<xref:System.Windows.Controls.TextBlock>項目。</span><span class="sxs-lookup"><span data-stu-id="43801-214">The following example defines a style that will be applied to all instances of the <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
 <span data-ttu-id="43801-215">設定<xref:System.Windows.Style.TargetType%2A>屬性<xref:System.Windows.Controls.TextBlock>類型未設定`x:Key`會隱含地設定`x:Key`至`{x:Type TextBlock}`。</span><span class="sxs-lookup"><span data-stu-id="43801-215">Setting the <xref:System.Windows.Style.TargetType%2A> property to the <xref:System.Windows.Controls.TextBlock> type without setting an `x:Key` implicitly sets the `x:Key` to `{x:Type TextBlock}`.</span></span> <span data-ttu-id="43801-216">這也表示，如果您提供上述<xref:System.Windows.Style>`x:Key`值以外的任何項目`{x:Type TextBlock}`、<xref:System.Windows.Style>不會套用至所有<xref:System.Windows.Controls.TextBlock>項目自動。</span><span class="sxs-lookup"><span data-stu-id="43801-216">This also means that if you give the above <xref:System.Windows.Style> an `x:Key` value of anything other than `{x:Type TextBlock}`, the <xref:System.Windows.Style> would not be applied to all <xref:System.Windows.Controls.TextBlock> elements automatically.</span></span> <span data-ttu-id="43801-217">相反地，您需要套用樣式<xref:System.Windows.Controls.TextBlock>元素明確。</span><span class="sxs-lookup"><span data-stu-id="43801-217">Instead, you need to apply the style to the <xref:System.Windows.Controls.TextBlock> elements explicitly.</span></span>  
  
 <span data-ttu-id="43801-218">許多[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控制項包含的其他組合[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控制項，以便建立樣式套用至所有類型的控制項可以有廣泛的影響。</span><span class="sxs-lookup"><span data-stu-id="43801-218">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="43801-219">比方說，如果您建立目標的樣式<xref:System.Windows.Controls.TextBox>控制項<xref:System.Windows.Controls.Canvas>，樣式套用至所有<xref:System.Windows.Controls.TextBox>控制項在畫布上，即使<xref:System.Windows.Controls.TextBox>屬於另一個控制項，例如<xref:System.Windows.Controls.ComboBox>。</span><span class="sxs-lookup"><span data-stu-id="43801-219">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBox> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBox> controls in the canvas, even if the <xref:System.Windows.Controls.TextBox> is part of another control, such as a <xref:System.Windows.Controls.ComboBox>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Style.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43801-220">取得 <see cref="T:System.Windows.TriggerBase" /> 物件的集合，該物件集合會根據指定的條件套用屬性值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-220">Gets a collection of <see cref="T:System.Windows.TriggerBase" /> objects that apply property values based on specified conditions.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="43801-221">
            <see cref="T:System.Windows.TriggerBase" /> 物件的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-221">A collection of <see cref="T:System.Windows.TriggerBase" /> objects.</span>
          </span>
          <span data-ttu-id="43801-222">預設為空集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-222">The default is an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43801-223">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]設定樣式和範本的模型可讓您指定觸發程序內您<xref:System.Windows.Style>。</span><span class="sxs-lookup"><span data-stu-id="43801-223">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] styling and templating model enables you to specify triggers within your <xref:System.Windows.Style>.</span></span> <span data-ttu-id="43801-224">基本上，觸發程序是物件，可讓您套用變更，當特定條件 (例如在某個屬性值時`true`，或事件發生時) 感到滿意。</span><span class="sxs-lookup"><span data-stu-id="43801-224">Essentially, triggers are objects that enable you to apply changes when certain conditions (such as when a certain property value becomes `true`, or when an event occurs) are satisfied.</span></span>  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="43801-225">XAML 屬性項目用法</span><span class="sxs-lookup"><span data-stu-id="43801-225">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a><span data-ttu-id="43801-226">XAML 值</span><span class="sxs-lookup"><span data-stu-id="43801-226">XAML Values</span></span>  
 <span data-ttu-id="43801-227">*oneOrMoreTriggers*</span><span class="sxs-lookup"><span data-stu-id="43801-227">*oneOrMoreTriggers*</span></span>  
 <span data-ttu-id="43801-228">是衍生自類別的零或多個物件項目<xref:System.Windows.TriggerBase>。</span><span class="sxs-lookup"><span data-stu-id="43801-228">Zero or more object elements that are classes deriving from <xref:System.Windows.TriggerBase>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43801-229">下列範例顯示具名<xref:System.Windows.Style>可<xref:System.Windows.Controls.Button>控制項。</span><span class="sxs-lookup"><span data-stu-id="43801-229">The following example shows a named <xref:System.Windows.Style> available to <xref:System.Windows.Controls.Button> controls.</span></span> <span data-ttu-id="43801-230"><xref:System.Windows.Style>定義<xref:System.Windows.Trigger>變更的項目<xref:System.Windows.Controls.Control.Foreground%2A>按鈕的屬性時<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>屬性是`true`。</span><span class="sxs-lookup"><span data-stu-id="43801-230">The <xref:System.Windows.Style> defines a <xref:System.Windows.Trigger> element that changes the <xref:System.Windows.Controls.Control.Foreground%2A> property of a button when the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property is `true`.</span></span>  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit&#xA;override this.UnregisterName : string -&gt; unit" Usage="style.UnregisterName name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.UnregisterName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="43801-231">要移除之對應的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-231">The name of the mapping to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43801-232">從名稱範圍中移除「名稱-物件」對應。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43801-232">Removes a name-object mapping from the namescope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>