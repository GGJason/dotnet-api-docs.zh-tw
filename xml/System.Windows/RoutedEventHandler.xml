<Type Name="RoutedEventHandler" FullName="System.Windows.RoutedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7b5f3549c198dd578dd928a5bc7b4f2e8ca6d4f6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36457393" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void RoutedEventHandler(object sender, RoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub RoutedEventHandler(sender As Object, e As RoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void RoutedEventHandler(System::Object ^ sender, RoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type RoutedEventHandler = delegate of obj * RoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">附加事件處理常式的物件。</param>
    <param name="e">事件資料。</param>
    <summary>表示方法，這個方法會針對其特定事件資料不超過所有路由事件共通資料範圍的各種路由事件進行處理。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.RoutedEventHandler>委派會使用任何不會報告事件資料中的事件特定資訊的路由事件。 有許多這類路由的事件。明顯的例子包括<xref:System.Windows.Controls.Primitives.ButtonBase.Click>和<xref:System.Windows.FrameworkElement.Loaded>。  
  
 撰寫路由而不是一般事件處理常式最值得注意的差異[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件是`sender`（項目所在的處理常式已連接，並叫用） 的事件不會被視為一定來源事件。 來源報告中的事件資料的屬性 (<xref:System.Windows.RoutedEventArgs.Source%2A>)。 之間的差異`sender`和<xref:System.Windows.RoutedEventArgs.Source%2A>是事件路由傳送到不同的項目，項目樹狀結構的路由事件的周遊期間的結果。  
  
 您可以使用`sender`或<xref:System.Windows.RoutedEventArgs.Source%2A>物件參考，如果您刻意不感興趣的直接或反昇的路由事件的路由行為，而且您只想要處理路由事件，會先引發的項目。 在此情況下，`sender`和<xref:System.Windows.RoutedEventArgs.Source%2A>是相同的物件。  
  
 如果您想要利用路由事件的固有功能，並據以撰寫處理常式，撰寫事件處理常式時將使用的事件資料的兩個最重要屬性是<xref:System.Windows.RoutedEventArgs.Source%2A>和<xref:System.Windows.RoutedEventArgs.Handled%2A>。  
  
 針對特定的輸入事件的組合和[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控制項類別，會引發事件的項目不會有機會處理它的第一個項目。 如果輸入的事件的預覽版的事件，然後項目樹狀結構的根目錄具有第一個機會，可以設定<xref:System.Windows.RoutedEventArgs.Handled%2A>至`true`中共用的事件資料，並可能會影響輸入的事件如何報告其事件路由中的剩餘項目。 如預期般引發的預覽處理行為可提供不是特定路由的事件的外觀。 如需詳細資訊，請參閱[預覽事件](~/docs/framework/wpf/advanced/preview-events.md)和[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>