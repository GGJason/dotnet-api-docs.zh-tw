<Type Name="RoutedEventHandler" FullName="System.Windows.RoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f037eff3257aa909616e955a85ec3f875a97652" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37490685" /></Metadata><TypeSignature Language="C#" Value="public delegate void RoutedEventHandler(object sender, RoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub RoutedEventHandler(sender As Object, e As RoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void RoutedEventHandler(System::Object ^ sender, RoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type RoutedEventHandler = delegate of obj * RoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">附加事件處理常式的物件。</param>
    <param name="e">事件資料。</param>
    <summary>表示方法，這個方法會針對其特定事件資料不超過所有路由事件共通資料範圍的各種路由事件進行處理。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.RoutedEventHandler>委派會使用任何不會報告事件資料中的事件特定資訊的路由事件。 有許多這類路由的事件;重要的範例包括<xref:System.Windows.Controls.Primitives.ButtonBase.Click>和<xref:System.Windows.FrameworkElement.Loaded>。  
  
 撰寫而不是一般的路由事件處理常式最值得注意的差異[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]事件是`sender`（項目處理常式會附加並叫用其中） 的事件不會被視為一定來源事件。 來源會報告為事件資料中的屬性 (<xref:System.Windows.RoutedEventArgs.Source%2A>)。 之間的差異`sender`和<xref:System.Windows.RoutedEventArgs.Source%2A>是路由事件的項目樹狀結構周遊期間路由傳送至不同的項目，事件的結果。  
  
 您可以使用`sender`或<xref:System.Windows.RoutedEventArgs.Source%2A>物件參考，如果您故意不感興趣的直接或事件反昇路由事件路由的行為，而且您只想要處理路由事件，其第一次引發的項目上。 在此情況下，`sender`和<xref:System.Windows.RoutedEventArgs.Source%2A>是相同的物件。  
  
 如果您想要利用路由事件的固有功能，並據以撰寫處理常式，撰寫事件處理常式時，您將處理的事件資料的兩個最重要屬性是<xref:System.Windows.RoutedEventArgs.Source%2A>和<xref:System.Windows.RoutedEventArgs.Handled%2A>。  
  
 針對特定的輸入事件的組合和[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]控制項類別，會引發事件的項目不會有機會先處理它的第一個元素。 如果輸入的事件有預覽版本的事件，然後在元素樹狀結構的根目錄有第一個機會，可以設定<xref:System.Windows.RoutedEventArgs.Handled%2A>至`true`中共用的事件資料，並可能會影響如何輸入的事件會回報給其事件路由中的其餘項目。 處理行為可以提供特定路由的事件不是外觀的預覽會引發如預期般運作。 如需詳細資訊，請參閱 <<c0> [ 預覽事件](~/docs/framework/wpf/advanced/preview-events.md)並[輸入概觀](~/docs/framework/wpf/advanced/input-overview.md)。  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>