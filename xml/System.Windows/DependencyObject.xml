<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="93e067f8bf97d79f7e4525a57db08a4a8d5109c2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30680312" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表參與相依性屬性系統的物件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyObject>類別可讓[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]屬性系統服務在其許多衍生的類別。  
  
 對屬性系統的主要功能是以計算屬性值，並提供系統通知有關已變更的值。 參與屬性系統的另一個索引鍵類別是<xref:System.Windows.DependencyProperty>。 <xref:System.Windows.DependencyProperty> 進入屬性系統，可讓相依性屬性的註冊，並提供識別與每個相依性屬性的相關資訊，而<xref:System.Windows.DependencyObject>為基底類別可讓使用相依性屬性的物件。  
  
 <xref:System.Windows.DependencyObject> 服務和特性包括：  
  
-   裝載支援的相依性屬性。 您藉由呼叫註冊相依性屬性<xref:System.Windows.DependencyProperty.Register%2A>方法，並將方法的傳回值儲存為您的類別中的公用靜態欄位。  
  
-   裝載支援的附加的屬性。 您藉由呼叫註冊附加的屬性<xref:System.Windows.DependencyProperty.RegisterAttached%2A>方法，並將方法的傳回值儲存為的公用靜態唯讀欄位在您的類別。 (另外還有其他成員需求; 請注意，這代表[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]為附加屬性的特定實作。 如需詳細資訊，請參閱[附加屬性概觀](~/docs/framework/wpf/advanced/attached-properties-overview.md)。)附加的屬性可以設定任何衍生自的類別上<xref:System.Windows.DependencyObject>。  
  
-   Get、 set、，然後清除存在於任何相依性屬性的值的公用程式方法<xref:System.Windows.DependencyObject>。  
  
-   中繼資料值支援、 屬性變更通知，以及相依性屬性的覆寫回呼強制轉型，或附加屬性。 此外，<xref:System.Windows.DependencyObject>類別有助於相依性屬性的每個擁有者屬性中繼資料。  
  
-   類別的通用基底類別衍生自<xref:System.Windows.ContentElement>， <xref:System.Windows.Freezable>，或<xref:System.Windows.Media.Visual>。 (<xref:System.Windows.UIElement>，另一個基底項目類別，已包含的類別階層<xref:System.Windows.Media.Visual>。)  
  
   
  
## Examples  
 下列範例衍生自<xref:System.Windows.DependencyObject>來建立新的抽象類別。 然後，此類別註冊附加的屬性，與包含該附加屬性的支援成員。  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.DependencyObject" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>清除屬性的區域數值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">要清除的相依性屬性，該屬性是由 <see cref="T:System.Windows.DependencyProperty" /> 物件參考所識別。</param>
        <summary>清除屬性的區域數值。 要清除的屬性是由 <see cref="T:System.Windows.DependencyProperty" /> 識別項所指定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 清除屬性值，方法是呼叫<xref:System.Windows.DependencyObject.ClearValue%2A>並不一定表示賦予相依性屬性的相依性屬性中繼資料中指定的預設值。 清除此屬性只會特別清除可能已套用的任何區域數值。 如需詳細資訊，請參閱[相依性屬性值優先順序](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。  
  
   
  
## Examples  
 下列範例會逐一查看所有屬性已設定物件上的本機值然後呼叫<xref:System.Windows.DependencyObject.ClearValue%2A>清除每個這類屬性的值。  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">嘗試在密封的 <see cref="T:System.Windows.DependencyObject" /> 上呼叫 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。</exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key">要清除之相依性屬性的索引鍵。</param>
        <summary>清除唯讀屬性的區域數值。 要清除的屬性是由 <see cref="T:System.Windows.DependencyPropertyKey" /> 所指定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.DependencyPropertyKey>識別唯讀相依性屬性的屬性系統作業。 定義唯讀相依性屬性的類別不應該公開公用存取此金鑰。 如果公開索引鍵會提供公用程式碼路徑，會否定唯讀字元屬性的方法，如<xref:System.Windows.DependencyObject.ClearValue%2A>或<xref:System.Windows.DependencyObject.SetValue%2A>可能呼叫外部組件中，參考索引鍵的類別。  
  
 清除屬性值，方法是呼叫<xref:System.Windows.DependencyObject.ClearValue%2A>並不一定表示賦予相依性屬性的相依性屬性中繼資料中指定的預設值。 清除值只會特別清除可能已套用的任何區域數值。 如需詳細資訊，請參閱[相依性屬性值優先順序](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">嘗試在密封的 <see cref="T:System.Windows.DependencyObject" /> 上呼叫 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。</exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">要強制轉型之相依性屬性的識別項。</param>
        <summary>強制轉型所指定相依性屬性的值。 叫用存在於呼叫 <see cref="T:System.Windows.CoerceValueCallback" /> 上相依性屬性之屬性中繼資料內所指定的任何 <see cref="T:System.Windows.DependencyObject" /> 函式，就可以達到這一點。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除了明確叫用透過呼叫<xref:System.Windows.DependencyObject.CoerceValue%2A>、<xref:System.Windows.CoerceValueCallback>相依性屬性也會叫用內部相依性屬性值會被重新評估每當[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]屬性系統。  
  
 當您叫用<xref:System.Windows.DependencyObject.CoerceValue%2A>方法，您最後叫用強制值回呼，您指定的屬性。 您通常會叫用<xref:System.Windows.DependencyObject.CoerceValue%2A>唯一，如果您知道強制值回呼的存在，而且您知道此回呼之準則的強制型轉。  
  
 最常見的案例，用於呼叫<xref:System.Windows.DependencyObject.CoerceValue%2A>內其他的值影響相依的方式的相關屬性的類別處理或為屬性變更回呼。 如需詳細資訊，請參閱[相依性屬性回呼和驗證](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.Windows.DependencyObject.CoerceValue%2A>內<xref:System.Windows.PropertyChangedCallback>做為實作<xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A>相同類別上不同的相依性屬性。 這是常見的簡介，則為 true 的值之間相依性屬性的相依性模式。  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定的 <paramref name="dp" /> 或其值無效或不存在。</exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得包裝此執行個體之 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 型別的 <see cref="T:System.Windows.DependencyObjectType" />。</summary>
        <value>包裝此執行個體之 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 型別的 <see cref="T:System.Windows.DependencyObjectType" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果從方法傳回的物件有傳回值類型的這個屬性很有用<xref:System.Windows.DependencyObject>而且您想要執行屬性系統特定作業在其上的根據其類型。 比方說是更有效率的方式呼叫<xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29>使用<xref:System.Windows.DependencyObjectType>而不是[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]型別。 <xref:System.Windows.DependencyObjectType> 有助於更快的查閱。  
  
   
  
## Examples  
 在下列虛擬程式碼範例中，`MySubClass`會預測其他的衍生的類別可能會變更的預設值`MyCustom`相依性屬性。 類別會實作可以透過運用多型判斷實際的衍生的類別的預設建構函式<xref:System.Windows.DependencyObjectType>值做為衍生的類別 instantiator 使用該建構函式時。  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要與目前執行個體相比較的 <see cref="T:System.Windows.DependencyObject" />。</param>
        <summary>判斷提供的 <see cref="T:System.Windows.DependencyObject" /> 和目前的 <see cref="T:System.Windows.DependencyObject" /> 是否相等。</summary>
        <returns>
          如果兩個執行個體相等，就是 <see langword="true" />，否則就是 <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個實作只參考相等且不會評估包含屬性的值相等。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Windows.DependencyObject" /> 覆寫，然後根據兩個 basic<see cref="T:System.Object" />方法：<see cref="M:System.Windows.DependencyObject.Equals(System.Object)" />和<see cref="M:System.Windows.DependencyObject.GetHashCode" />。 覆寫呼叫<see cref="T:System.Object" />實作中，因而導致物件是否相等的行為。 這些審慎的覆寫的目的是為了防止衍生的類別來定義值是否相等<see cref="T:System.Windows.DependencyObject" />。 值的等式<see cref="T:System.Windows.DependencyObject" />絕對不會精確由於固有的屬性值變更的功能<see cref="T:System.Windows.DependencyObject" />和其相依性屬性。 這包括基本[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]功能，例如資料繫結和[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]屬性系統。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得這個 <see cref="T:System.Windows.DependencyObject" /> 的雜湊碼。</summary>
        <returns>帶正負號 32 位元整數雜湊碼。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Windows.DependencyObject" /> 覆寫，然後根據兩個<see cref="T:System.Object" />方法：<see cref="M:System.Windows.DependencyObject.Equals(System.Object)" />和<see cref="M:System.Windows.DependencyObject.GetHashCode" />。 覆寫呼叫<see cref="T:System.Object" />實作中，因而導致物件是否相等的行為。 這些審慎的覆寫的目的是為了防止衍生的類別來定義值是否相等<see cref="T:System.Windows.DependencyObject" />。 值的等式<see cref="T:System.Windows.DependencyObject" />絕對不會精確由於固有的屬性值變更的功能<see cref="T:System.Windows.DependencyObject" />和其相依性屬性。 這包括基本[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]功能，例如資料繫結和[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]屬性系統。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立特定的列舉值，以判斷哪些相依性屬性在此 <see cref="T:System.Windows.DependencyObject" /> 上具有本機設定的值。</summary>
        <returns>特定的區域數值列舉值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A*區域數值*是設定的任何相依性屬性值<xref:System.Windows.DependencyObject.SetValue%2A>，與對屬性系統的其他層面。  
  
 <xref:System.Windows.LocalValueEnumerator>藉由呼叫取得<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>可以用來列舉具有本機設定的屬性值上<xref:System.Windows.DependencyObject>執行個體。 每一個這類屬性會以列舉值所表示<xref:System.Windows.LocalValueEntry>物件，其中包含的屬性參考特定<xref:System.Windows.DependencyProperty>和其值。 這項技術的上本機設定列舉值可用於最佳化或其他處理的區域數值，例如判斷哪一個屬性值<xref:System.Windows.DependencyObject>會變更，如果它們已被清除。  
  
> [!IMPORTANT]
>  傳回<xref:System.Windows.LocalValueEnumerator>可能包含<xref:System.Windows.LocalValueEntry>記錄的相依性屬性是唯讀的或會計算值的屬性系統的相依性屬性。 例如，透過配置建立的寬度的視覺化架構項目會報告的本機值<xref:System.Windows.FrameworkElement.ActualWidth%2A>。 如果您要取得區域數值，才能重設它們，請檢查<xref:System.Windows.DependencyProperty.ReadOnly%2A>上每個屬性的識別項值<xref:System.Windows.LocalValueEntry>可讓您確認<xref:System.Windows.DependencyProperty>問題不是唯讀狀態。  
  
   
  
## Examples  
 下列範例會逐一查看所有屬性已設定物件上的本機值然後呼叫<xref:System.Windows.DependencyObject.ClearValue%2A>清除每個這類屬性的值。  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">要為其擷取值之屬性的 <see cref="T:System.Windows.DependencyProperty" /> 識別項。</param>
        <summary>傳回 <see cref="T:System.Windows.DependencyObject" /> 的這個執行個體上之相依性屬性的目前有效值。</summary>
        <returns>傳回目前有效值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *有效值*屬性系統回到要求值的任何呼叫端之屬性的值。 有效的值是在評估屬性的系統值優先順序所參與的所有可能輸入的屬性系統的結果。 這包括強制型轉和動畫。 如需詳細資訊，請參閱[相依性屬性值優先順序](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。  
  
 這個方法永遠不會傳回<xref:System.Windows.DependencyProperty.UnsetValue>。 <xref:System.Windows.DependencyProperty.UnsetValue>是 sentinel 值的屬性系統，用於透過強制型轉回在內部，偶爾會也公開各種容量。  
  
 如果您不確定屬性的型別應該是什麼，您可以查詢要判斷是否有更特定之要求的相依性屬性的識別項<xref:System.Windows.DependencyProperty.PropertyType%2A>傳回值可以轉換成。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定的 <paramref name="dp" /> 或其值無效，或是指定的 <paramref name="dp" /> 不存在。</exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">要使其失效之屬性的 <see cref="T:System.Windows.DependencyProperty" /> 識別項。</param>
        <summary>重新評估指定之相依性屬性的有效值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您呼叫<xref:System.Windows.DependencyObject.InvalidateProperty%2A>、 任何相關和適用<xref:System.Windows.CoerceValueCallback>或<xref:System.Windows.PropertyChangedCallback>函式註冊可能叫用該相依性屬性。  
  
 呼叫<xref:System.Windows.DependencyObject.InvalidateProperty%2A>設定其本機值的屬性上會有任何作用，因為本機值優先於其他屬性系統輸入動畫除外。 不過，您可以呼叫<xref:System.Windows.DependencyObject.ClearValue%2A>，然後呼叫<xref:System.Windows.DependencyObject.InvalidateProperty%2A>。 如需詳細資訊，請參閱[相依性屬性值優先順序](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。  
  
 呼叫<xref:System.Windows.DependencyObject.InvalidateProperty%2A>不一定適用於許多相依性屬性。 如果因為任何項目中的值變更而失效相依性屬性，對屬性系統失效，並重新評估自動相依性屬性。 不過，仍有某些適當的情況下其中<xref:System.Windows.DependencyObject.InvalidateProperty%2A>很有用。 特別是，您可以使用<xref:System.Windows.DependencyObject.InvalidateProperty%2A>強制轉型值或屬性內變更為不同的相依性屬性的回呼。 您也可以使用<xref:System.Windows.DependencyObject.InvalidateProperty%2A>強制對不能實作建議的資料來源繫結的重新評估<xref:System.ComponentModel.INotifyPropertyChanged>通知機制 (或許是如果使用，不能衍生自，或其中資料是靜態的資料類別成員）。  
  
   
  
## Examples  
 下列範例會呼叫<xref:System.Windows.DependencyObject.InvalidateProperty%2A>自訂屬性，只要涉及失效的屬性的計算中的屬性變更。 這是替代方法來呼叫<xref:System.Windows.DependencyObject.CoerceValue%2A>方法，因為無效的屬性會同時也呼叫任何註冊<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>。  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示此執行個體目前是否已密封 (唯讀)。</summary>
        <value>
          如果這個執行個體已密封則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個值是在內部設定。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">將包含重要相依性屬性的識別項、類型之屬性中繼資料，以及新舊值的事件資料。</param>
        <summary>每當 <see cref="T:System.Windows.DependencyObject" /> 上任何相依性屬性的有效值已更新時叫用。 已變更的特定相依性屬性會在事件資料中報告。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不是通常偵測個別的屬性變更，或執行每個案例為基礎的屬性的失效。 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 改為僅供修改的一般失效模式中，如果已知廣泛分類屬性的特定資訊。 例如，在變更<xref:System.Windows.Freezable>的實值類型中的變更可能要<xref:System.Windows.Freezable>，或可能是子屬性，而所做的變更都在其他<xref:System.Windows.Freezable>參考。 <xref:System.Windows.Freezable>覆寫的實作<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>以判斷屬性是否是子屬性，並提供適當的基底類別邏輯以兩種情況下會使用內部的資訊。  
  
 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 物件的存留期間可能呼叫多次。 因此，達到更佳整體屬性系統的效能，如果您覆寫特定屬性的中繼資料，然後將附加<xref:System.Windows.CoerceValueCallback>或<xref:System.Windows.PropertyChangedCallback>個別屬性的函式。 不過，您會使用這個方法如果<xref:System.Windows.DependencyObject>包含大量的值相互關聯的相依性屬性，或如果它包含邏輯，例如轉譯行為，必須重新執行的幾個相關的屬性失效的情況。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>請務必呼叫基底實作。 如果沒有這樣做將會大幅停用整個[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]屬性系統，造成不正確地回報的值。</para>
        </block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">要為其擷取值之屬性的 <see cref="T:System.Windows.DependencyProperty" /> 識別項。</param>
        <summary>傳回相依性屬性的區域數值 (如果存在)。</summary>
        <returns>傳回區域數值，若區域數值並未設定，則傳回 Sentinel 值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您應該使用<xref:System.Windows.DependencyObject.GetValue%2A>相依性屬性的最常見 「 取得 」 作業。 <xref:System.Windows.DependencyObject.ReadLocalValue%2A> 不會傳回有效的值不同的情況下，未在本機設定值。  
  
 值所設定的樣式、 佈景主題、 範本，從中繼資料或屬性值繼承預設值是不被視為區域數值。 不過，繫結和其他運算式會被視為區域數值之後已經進行評估。  
  
 當未不設定任何本機的值時，這個方法會傳回<xref:System.Windows.DependencyProperty.UnsetValue>。  
  
 如果傳回的值不是<xref:System.Windows.DependencyProperty.UnsetValue>，您可以查詢來判斷是否有更特定的類型傳回值可以轉換成要求的相依性屬性的中繼資料。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">要設定之相依性屬性的識別項。</param>
        <param name="value">新的本機值。</param>
        <summary>設定相依性屬性的值，而不需要變更其值來源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法是由一種元件，以程式設計方式設定的其中一個它自己的屬性值，而不停用應用程式的宣告的屬性的用法。 <xref:System.Windows.DependencyObject.SetCurrentValue%2A>方法變更的屬性，但是現有的觸發程序，資料繫結，有效的值和樣式，將會繼續運作。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">嘗試修改唯讀的相依性屬性，或密封的 <see cref="T:System.Windows.DependencyObject" /> 上的屬性。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> 不是如同為 <paramref name="dp" /> 屬性所註冊的正確型別。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定相依性屬性的區域數值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">要設定之相依性屬性的識別項。</param>
        <param name="value">新的本機值。</param>
        <summary>設定相依性屬性的本機值 (由相依性屬性的識別項所指定)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果提供的類型不符合與原先註冊之相依性屬性宣告的型別，會擲回例外狀況。 `value`參數應該提供適當的型別。  
  
 例外狀況可能會受到<xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>存在於所設定之相依性屬性的相依性屬性的識別項的回呼。 否則，提供的值可能會失敗 （例如，將字串傳遞時的原生類型為 Double） 的一般型別檢查條件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">嘗試修改唯讀的相依性屬性，或密封的 <see cref="T:System.Windows.DependencyObject" /> 上的屬性。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> 不是如同為 <paramref name="dp" /> 屬性所註冊的正確型別。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">要設定之屬性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 識別項。</param>
        <param name="value">新的本機值。</param>
        <summary>設定唯讀相依性屬性的區域數值 (由相依性屬性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 識別項所指定)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常在您設定自訂類別所定義的唯讀相依性屬性的值時，會使用此簽章。 一般而言，<xref:System.Windows.DependencyObject.SetValue%2A>只會從已註冊的實作內部邏輯可決定的值的相依性屬性的相依性屬性的型別呼叫。 如需詳細資訊，請參閱[唯讀相依性屬性](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)。  
  
 如果提供的類型不符合與原先註冊之相依性屬性宣告的型別，會擲回例外狀況。 `value`參數應該提供適當的型別。 例外狀況可能會受到<xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>存在於所設定之相依性屬性的相依性屬性的識別項的回呼。  
  
   
  
## Examples  
 下列範例會定義唯讀相依性屬性，連同`public static readonly`<xref:System.Windows.DependencyProperty>提供必要的唯讀暴露於屬性的取用者，而且 get 存取子的[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]包裝函式。  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">應該序列化之相依性屬性的識別項。</param>
        <summary>傳回值，這個值表示序列化程序是否應該序列化所提供相依性屬性的值。</summary>
        <returns>
          如果提供之相依性屬性的值應該序列化則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設實作會傳回`true`相依性屬性必須為區域數值上建立的所有案例<xref:System.Windows.DependencyObject>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>覆寫這個方法可能會以不同方式處理特定的相依性屬性。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>