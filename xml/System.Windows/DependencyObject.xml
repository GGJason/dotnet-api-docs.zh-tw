<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="62d0c6b5a93fa38d970f0445e7a629dacdae551c" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48699222" /></Metadata><TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f652d-101">表示參與相依性屬性系統的物件。</span><span class="sxs-lookup"><span data-stu-id="f652d-101">Represents an object that participates in the dependency property system.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-102"><xref:System.Windows.DependencyObject>類別可讓[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]屬性系統服務在其許多的衍生類別。</span><span class="sxs-lookup"><span data-stu-id="f652d-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="f652d-103">屬性系統的主要功能是以計算屬性的值，並提供系統通知有關已變更的值。</span><span class="sxs-lookup"><span data-stu-id="f652d-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="f652d-104">參與屬性系統的另一個索引鍵類別是<xref:System.Windows.DependencyProperty>。</span><span class="sxs-lookup"><span data-stu-id="f652d-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="f652d-105"><xref:System.Windows.DependencyProperty> 屬性系統，讓相依性屬性的註冊，並提供識別與每個相依性屬性的相關資訊，而<xref:System.Windows.DependencyObject>因為基底類別可讓使用相依性屬性的物件。</span><span class="sxs-lookup"><span data-stu-id="f652d-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="f652d-106"><xref:System.Windows.DependencyObject> 服務和特性包括：</span><span class="sxs-lookup"><span data-stu-id="f652d-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="f652d-107">裝載支援的相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f652d-107">Dependency property hosting support.</span></span> <span data-ttu-id="f652d-108">藉由呼叫註冊相依性屬性<xref:System.Windows.DependencyProperty.Register%2A>方法，並將方法的傳回值儲存為您的類別中公用靜態欄位。</span><span class="sxs-lookup"><span data-stu-id="f652d-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="f652d-109">裝載支援的附加的屬性。</span><span class="sxs-lookup"><span data-stu-id="f652d-109">Attached property hosting support.</span></span> <span data-ttu-id="f652d-110">藉由呼叫註冊附加的屬性<xref:System.Windows.DependencyProperty.RegisterAttached%2A>方法，並將方法的傳回值儲存為公用靜態唯讀欄位在您的類別。</span><span class="sxs-lookup"><span data-stu-id="f652d-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="f652d-111">(另外還有其他成員的需求，請注意，這代表[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]附加屬性的特定實作。</span><span class="sxs-lookup"><span data-stu-id="f652d-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="f652d-112">如需詳細資訊，請參閱 <<c0> [ 附加屬性概觀](~/docs/framework/wpf/advanced/attached-properties-overview.md)。)然後可以將附加的屬性設定任何衍生自的類別上<xref:System.Windows.DependencyObject>。</span><span class="sxs-lookup"><span data-stu-id="f652d-112">For details, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="f652d-113">Get、 set 和清除公用程式方法存在於任何相依性屬性的值， <xref:System.Windows.DependencyObject>。</span><span class="sxs-lookup"><span data-stu-id="f652d-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="f652d-114">中繼資料，強制轉型值支援、 屬性變更通知，以及覆寫相依性屬性回呼，或附加的屬性。</span><span class="sxs-lookup"><span data-stu-id="f652d-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="f652d-115">此外，<xref:System.Windows.DependencyObject>類別有助於相依性屬性的每個擁有者屬性中繼資料。</span><span class="sxs-lookup"><span data-stu-id="f652d-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="f652d-116">類別的通用基底類別衍生自<xref:System.Windows.ContentElement>， <xref:System.Windows.Freezable>，或<xref:System.Windows.Media.Visual>。</span><span class="sxs-lookup"><span data-stu-id="f652d-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="f652d-117">(<xref:System.Windows.UIElement>，另一個基底項目類別，已包含的類別階層<xref:System.Windows.Media.Visual>。)</span><span class="sxs-lookup"><span data-stu-id="f652d-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f652d-118">下列範例衍生自<xref:System.Windows.DependencyObject>來建立新的抽象類別。</span><span class="sxs-lookup"><span data-stu-id="f652d-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="f652d-119">然後，此類別註冊附加的屬性，而且包含該附加屬性的支援成員。</span><span class="sxs-lookup"><span data-stu-id="f652d-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f652d-120">初始化 <see cref="T:System.Windows.DependencyObject" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="f652d-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f652d-121">清除屬性的區域數值。</span><span class="sxs-lookup"><span data-stu-id="f652d-121">Clears the local value of a property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f652d-122">要清除的相依性屬性，由 <see cref="T:System.Windows.DependencyProperty" /> 物件參考所識別。</span><span class="sxs-lookup"><span data-stu-id="f652d-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span></span></param>
        <summary><span data-ttu-id="f652d-123">清除屬性的區域數值。</span><span class="sxs-lookup"><span data-stu-id="f652d-123">Clears the local value of a property.</span></span> <span data-ttu-id="f652d-124">要清除的屬性是由 <see cref="T:System.Windows.DependencyProperty" /> 識別項所指定。</span><span class="sxs-lookup"><span data-stu-id="f652d-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-125">清除屬性值，藉由呼叫<xref:System.Windows.DependencyObject.ClearValue%2A>並不一定會提供相依性屬性所指定相依性屬性中繼資料中的預設值。</span><span class="sxs-lookup"><span data-stu-id="f652d-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="f652d-126">清除此屬性只會特別清除已套用本機的任何值。</span><span class="sxs-lookup"><span data-stu-id="f652d-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="f652d-127">如需詳細資訊，請參閱[相依性屬性值優先順序](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="f652d-127">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f652d-128">下列範例會逐一查看所有已在物件上設定的區域數值屬性接著會呼叫<xref:System.Windows.DependencyObject.ClearValue%2A>清除每個這類屬性的值。</span><span class="sxs-lookup"><span data-stu-id="f652d-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f652d-129">嘗試在密封的 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> 上呼叫 <see cref="T:System.Windows.DependencyObject" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="f652d-130">要清除的相依性屬性之索引鍵。</span><span class="sxs-lookup"><span data-stu-id="f652d-130">The key for the dependency property to be cleared.</span></span></param>
        <summary><span data-ttu-id="f652d-131">清除唯讀屬性的區域數值。</span><span class="sxs-lookup"><span data-stu-id="f652d-131">Clears the local value of a read-only property.</span></span> <span data-ttu-id="f652d-132">要清除的屬性是由 <see cref="T:System.Windows.DependencyPropertyKey" /> 所指定。</span><span class="sxs-lookup"><span data-stu-id="f652d-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-133">A<xref:System.Windows.DependencyPropertyKey>識別唯讀相依性屬性的屬性系統作業。</span><span class="sxs-lookup"><span data-stu-id="f652d-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="f652d-134">定義唯讀的相依性屬性的類別不應該公開公用存取此金鑰。</span><span class="sxs-lookup"><span data-stu-id="f652d-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="f652d-135">公開的索引鍵會提供公用程式碼路徑，會變為負值的唯寫的字元; 屬性，如果這類方法<xref:System.Windows.DependencyObject.ClearValue%2A>或<xref:System.Windows.DependencyObject.SetValue%2A>可能呼叫外部組件參考的索引鍵的類別。</span><span class="sxs-lookup"><span data-stu-id="f652d-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="f652d-136">清除屬性值，藉由呼叫<xref:System.Windows.DependencyObject.ClearValue%2A>並不一定會提供相依性屬性所指定相依性屬性中繼資料中的預設值。</span><span class="sxs-lookup"><span data-stu-id="f652d-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="f652d-137">清除值只會特別清除已套用本機的任何值。</span><span class="sxs-lookup"><span data-stu-id="f652d-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="f652d-138">如需詳細資訊，請參閱[相依性屬性值優先順序](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="f652d-138">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f652d-139">嘗試在密封的 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> 上呼叫 <see cref="T:System.Windows.DependencyObject" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f652d-140">要強制轉型之相依性屬性的識別項。</span><span class="sxs-lookup"><span data-stu-id="f652d-140">The identifier for the dependency property to coerce.</span></span></param>
        <summary><span data-ttu-id="f652d-141">強制轉型所指定相依性屬性的值。</span><span class="sxs-lookup"><span data-stu-id="f652d-141">Coerces the value of the specified dependency property.</span></span> <span data-ttu-id="f652d-142">叫用存在於呼叫 <see cref="T:System.Windows.CoerceValueCallback" /> 上相依性屬性之屬性中繼資料內所指定的任何 <see cref="T:System.Windows.DependencyObject" /> 函式，就可以達到這一點。</span><span class="sxs-lookup"><span data-stu-id="f652d-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-143">除了明確叫用透過呼叫<xref:System.Windows.DependencyObject.CoerceValue%2A>，則<xref:System.Windows.CoerceValueCallback>相依性屬性也會叫用內部每當相依性屬性值重新評估[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]屬性系統。</span><span class="sxs-lookup"><span data-stu-id="f652d-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="f652d-144">當您叫用<xref:System.Windows.DependencyObject.CoerceValue%2A>方法中，您最終叫用您指定之屬性的強制轉型值回撥。</span><span class="sxs-lookup"><span data-stu-id="f652d-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="f652d-145">通常您會叫用<xref:System.Windows.DependencyObject.CoerceValue%2A>唯有如果您知道的強制轉型值回呼的存在，而且如果您知道回呼的強制型轉的準則。</span><span class="sxs-lookup"><span data-stu-id="f652d-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="f652d-146">最常見的案例呼叫<xref:System.Windows.DependencyObject.CoerceValue%2A>內的相依的方式會影響其他的值的相關屬性的類別處理或屬性變更回呼。</span><span class="sxs-lookup"><span data-stu-id="f652d-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="f652d-147">如需詳細資訊，請參閱[相依性屬性回呼和驗證](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)。</span><span class="sxs-lookup"><span data-stu-id="f652d-147">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f652d-148">下列範例會呼叫<xref:System.Windows.DependencyObject.CoerceValue%2A>內<xref:System.Windows.PropertyChangedCallback>實作，做為<xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A>相同類別上不同的相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f652d-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="f652d-149">這是導入，則為 true 的值相依性屬性之間的相依性的常見模式。</span><span class="sxs-lookup"><span data-stu-id="f652d-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f652d-150">指定的 <paramref name="dp" /> 或其值無效或不存在。</span><span class="sxs-lookup"><span data-stu-id="f652d-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span></span></exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f652d-151">取得包裝此執行個體之 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 型別的 <see cref="T:System.Windows.DependencyObjectType" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></summary>
        <value><span data-ttu-id="f652d-152">包裝此執行個體之 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 型別的 <see cref="T:System.Windows.DependencyObjectType" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-153">此屬性相當實用，如果從方法傳回的物件具有傳回值類型的<xref:System.Windows.DependencyObject>而且您想要執行屬性系統特定作業在其上的根據其類型。</span><span class="sxs-lookup"><span data-stu-id="f652d-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="f652d-154">比方說它是更有效率的方式呼叫<xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29>使用<xref:System.Windows.DependencyObjectType>而非[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]型別。</span><span class="sxs-lookup"><span data-stu-id="f652d-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="f652d-155"><xref:System.Windows.DependencyObjectType> 幫助您更快的查閱。</span><span class="sxs-lookup"><span data-stu-id="f652d-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f652d-156">在下列虛擬程式碼範例中，`MySubClass`預期額外衍生的類別可能會變更的預設值`MyCustom`相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f652d-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="f652d-157">此類別會實作預設建構函式可用來決定實際的衍生的類別，藉由運用多型<xref:System.Windows.DependencyObjectType>每當該建構函式做為衍生的類別 instantiator 值。</span><span class="sxs-lookup"><span data-stu-id="f652d-157">The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f652d-158">要與目前執行個體相比較的 <see cref="T:System.Windows.DependencyObject" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span></span></param>
        <summary><span data-ttu-id="f652d-159">判斷提供的 <see cref="T:System.Windows.DependencyObject" /> 和目前的 <see cref="T:System.Windows.DependencyObject" /> 是否相等。</span><span class="sxs-lookup"><span data-stu-id="f652d-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f652d-160">如果兩個執行個體相等，就是 <see langword="true" />，否則就是 <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f652d-160"><see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-161">此實作是參考相等，並不會嘗試評估包含屬性的值相等。</span><span class="sxs-lookup"><span data-stu-id="f652d-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f652d-162">
            <see cref="T:System.Windows.DependencyObject" /> 覆寫，並接著密封兩個基本<see cref="T:System.Object" />方法：<see cref="M:System.Windows.DependencyObject.Equals(System.Object)" />和<see cref="M:System.Windows.DependencyObject.GetHashCode" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-162">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="f652d-163">覆寫呼叫<see cref="T:System.Object" />實作，導致物件是否相等的行為。</span><span class="sxs-lookup"><span data-stu-id="f652d-163">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="f652d-164">這些精心覆寫目的是要防止衍生的類別定義的實值相等<see cref="T:System.Windows.DependencyObject" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-164">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="f652d-165">值的等式<see cref="T:System.Windows.DependencyObject" />因為無比的屬性值變更的功能絕對不會精確<see cref="T:System.Windows.DependencyObject" />和其相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f652d-165">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="f652d-166">這包括基本[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]功能，例如資料繫結和[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]屬性系統。</span><span class="sxs-lookup"><span data-stu-id="f652d-166">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f652d-167">取得這個 <see cref="T:System.Windows.DependencyObject" /> 的雜湊程式碼。</span><span class="sxs-lookup"><span data-stu-id="f652d-167">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f652d-168">帶正負號的 32 位元整數雜湊程式碼。</span><span class="sxs-lookup"><span data-stu-id="f652d-168">A signed 32-bit integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f652d-169">
            <see cref="T:System.Windows.DependencyObject" /> 會覆寫並再將兩個密封<see cref="T:System.Object" />方法：<see cref="M:System.Windows.DependencyObject.Equals(System.Object)" />和<see cref="M:System.Windows.DependencyObject.GetHashCode" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-169">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="f652d-170">覆寫呼叫<see cref="T:System.Object" />實作，導致物件是否相等的行為。</span><span class="sxs-lookup"><span data-stu-id="f652d-170">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="f652d-171">這些精心覆寫目的是要防止衍生的類別定義的實值相等<see cref="T:System.Windows.DependencyObject" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-171">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="f652d-172">值的等式<see cref="T:System.Windows.DependencyObject" />因為無比的屬性值變更的功能絕對不會精確<see cref="T:System.Windows.DependencyObject" />和其相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f652d-172">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="f652d-173">這包括基本[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]功能，例如資料繫結和[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]屬性系統。</span><span class="sxs-lookup"><span data-stu-id="f652d-173">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f652d-174">建立特定的列舉值，以判斷哪些相依性屬性在此 <see cref="T:System.Windows.DependencyObject" /> 上具有本機設定的值。</span><span class="sxs-lookup"><span data-stu-id="f652d-174">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f652d-175">特定的區域數值列舉值。</span><span class="sxs-lookup"><span data-stu-id="f652d-175">A specialized local value enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-176">A*區域數值*是所設定的任何相依性屬性值<xref:System.Windows.DependencyObject.SetValue%2A>，而不是屬性系統的其他層面。</span><span class="sxs-lookup"><span data-stu-id="f652d-176">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="f652d-177"><xref:System.Windows.LocalValueEnumerator>藉由呼叫取得<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>可用來列舉具有本機設定的屬性值<xref:System.Windows.DependencyObject>執行個體。</span><span class="sxs-lookup"><span data-stu-id="f652d-177">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="f652d-178">每個這類屬性的列舉值中表示<xref:System.Windows.LocalValueEntry>物件，其中包含參考特定的屬性<xref:System.Windows.DependencyProperty>及其值。</span><span class="sxs-lookup"><span data-stu-id="f652d-178">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="f652d-179">這項技術會透過本機設定列舉值可用的最佳化或其他處理的區域數值，例如若要判斷哪一個屬性值<xref:System.Windows.DependencyObject>會變更，如果它們已被清除。</span><span class="sxs-lookup"><span data-stu-id="f652d-179">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f652d-180">傳回<xref:System.Windows.LocalValueEnumerator>可能包含<xref:System.Windows.LocalValueEntry>相依性屬性是唯讀的或其中值的計算方式是屬性系統的相依性屬性的記錄。</span><span class="sxs-lookup"><span data-stu-id="f652d-180">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="f652d-181">比方說，透過版面配置建立的寬度的視覺化架構項目會報告本機值<xref:System.Windows.FrameworkElement.ActualWidth%2A>。</span><span class="sxs-lookup"><span data-stu-id="f652d-181">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="f652d-182">如果您要取得本機值以重設密碼，請檢查<xref:System.Windows.DependencyProperty.ReadOnly%2A>在每個屬性的屬性識別碼的值<xref:System.Windows.LocalValueEntry>，確認<xref:System.Windows.DependencyProperty>問題不是唯讀狀態。</span><span class="sxs-lookup"><span data-stu-id="f652d-182">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f652d-183">下列範例會逐一查看所有已在物件上設定的區域數值屬性接著會呼叫<xref:System.Windows.DependencyObject.ClearValue%2A>清除每個這類屬性的值。</span><span class="sxs-lookup"><span data-stu-id="f652d-183">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f652d-184">要為其擷取值之屬性的 <see cref="T:System.Windows.DependencyProperty" /> 識別項。</span><span class="sxs-lookup"><span data-stu-id="f652d-184">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="f652d-185">傳回 <see cref="T:System.Windows.DependencyObject" /> 的這個執行個體上之相依性屬性的目前有效值。</span><span class="sxs-lookup"><span data-stu-id="f652d-185">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f652d-186">傳回目前的有效值。</span><span class="sxs-lookup"><span data-stu-id="f652d-186">Returns the current effective value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-187">*有效值*要求值的任何呼叫屬性系統所傳回之屬性的值。</span><span class="sxs-lookup"><span data-stu-id="f652d-187">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="f652d-188">有效的值是屬性系統在評估所有可能的輸入屬性的系統值優先順序中，參與的結果。</span><span class="sxs-lookup"><span data-stu-id="f652d-188">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="f652d-189">這包括強制型轉和動畫。</span><span class="sxs-lookup"><span data-stu-id="f652d-189">This includes coercion and animation.</span></span> <span data-ttu-id="f652d-190">如需詳細資訊，請參閱[相依性屬性值優先順序](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="f652d-190">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="f652d-191">這個方法永遠不會傳回<xref:System.Windows.DependencyProperty.UnsetValue>。</span><span class="sxs-lookup"><span data-stu-id="f652d-191">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="f652d-192"><xref:System.Windows.DependencyProperty.UnsetValue>是屬性系統，用於在內部，偶爾會也強制型轉回撥透過公開的各種容量的 sentinel 值。</span><span class="sxs-lookup"><span data-stu-id="f652d-192">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="f652d-193">如果您不確定屬性的類型應該是什麼，您可以查詢以判斷是否有更多的特定要求的相依性屬性的識別項<xref:System.Windows.DependencyProperty.PropertyType%2A>傳回的值可以轉換成。</span><span class="sxs-lookup"><span data-stu-id="f652d-193">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f652d-194">指定的 <paramref name="dp" /> 或其值無效，或是指定的 <paramref name="dp" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="f652d-194">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f652d-195">要使其失效之屬性的 <see cref="T:System.Windows.DependencyProperty" /> 識別項。</span><span class="sxs-lookup"><span data-stu-id="f652d-195">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span></span></param>
        <summary><span data-ttu-id="f652d-196">重新評估指定之相依性屬性的有效值。</span><span class="sxs-lookup"><span data-stu-id="f652d-196">Re-evaluates the effective value for the specified dependency property</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-197">當您呼叫<xref:System.Windows.DependencyObject.InvalidateProperty%2A>、 任何相關和適用<xref:System.Windows.CoerceValueCallback>或<xref:System.Windows.PropertyChangedCallback>函式註冊該相依性屬性可能會叫用。</span><span class="sxs-lookup"><span data-stu-id="f652d-197">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="f652d-198">呼叫<xref:System.Windows.DependencyObject.InvalidateProperty%2A>設定其本機值在屬性上會有任何作用，因為本機的值會優先於其他屬性系統輸入，除了動畫。</span><span class="sxs-lookup"><span data-stu-id="f652d-198">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="f652d-199">不過，您可以呼叫<xref:System.Windows.DependencyObject.ClearValue%2A>，然後呼叫<xref:System.Windows.DependencyObject.InvalidateProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="f652d-199">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="f652d-200">如需詳細資訊，請參閱[相依性屬性值優先順序](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)。</span><span class="sxs-lookup"><span data-stu-id="f652d-200">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="f652d-201">呼叫<xref:System.Windows.DependencyObject.InvalidateProperty%2A>不一定適用於許多相依性屬性案例。</span><span class="sxs-lookup"><span data-stu-id="f652d-201">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="f652d-202">如果由於任何構成項目中的值變更失效的相依性屬性，屬性系統失效，並重新評估自動相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f652d-202">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="f652d-203">不過，仍有某些適當的情況下，<xref:System.Windows.DependencyObject.InvalidateProperty%2A>很有用。</span><span class="sxs-lookup"><span data-stu-id="f652d-203">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="f652d-204">特別是，您可以使用<xref:System.Windows.DependencyObject.InvalidateProperty%2A>內屬性的強制轉型值變更為不同的相依性屬性回呼。</span><span class="sxs-lookup"><span data-stu-id="f652d-204">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="f652d-205">您也可以使用<xref:System.Windows.DependencyObject.InvalidateProperty%2A>強制對無法實作建議的資料來源繫結的重新評估<xref:System.ComponentModel.INotifyPropertyChanged>通知機制 (或許是否有使用，不能衍生自，或其中的資料是靜態的資料類別成員）。</span><span class="sxs-lookup"><span data-stu-id="f652d-205">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f652d-206">下列範例會呼叫<xref:System.Windows.DependencyObject.InvalidateProperty%2A>自訂屬性，只要涉及失效之屬性的計算中的屬性變更。</span><span class="sxs-lookup"><span data-stu-id="f652d-206">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="f652d-207">這是一個替代的方法來呼叫<xref:System.Windows.DependencyObject.CoerceValue%2A>方法，因為失效屬性也稱之為任何註冊<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>。</span><span class="sxs-lookup"><span data-stu-id="f652d-207">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f652d-208">取得值，這個值表示此執行個體目前是否已密封 (唯讀)。</span><span class="sxs-lookup"><span data-stu-id="f652d-208">Gets a value that indicates whether this instance is currently sealed (read-only).</span></span></summary>
        <value><span data-ttu-id="f652d-209">如果這個執行個體已密封則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-209"><see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-210">這個值是在內部設定。</span><span class="sxs-lookup"><span data-stu-id="f652d-210">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="f652d-211">事件資料，其中包含相關的相依性屬性識別項、型別的屬性中繼資料，以及舊值和新值。</span><span class="sxs-lookup"><span data-stu-id="f652d-211">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span></span></param>
        <summary><span data-ttu-id="f652d-212">每當 <see cref="T:System.Windows.DependencyObject" /> 上任何相依性屬性的有效值已更新時叫用。</span><span class="sxs-lookup"><span data-stu-id="f652d-212">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span></span> <span data-ttu-id="f652d-213">已變更的特定相依性屬性會在事件資料中報告。</span><span class="sxs-lookup"><span data-stu-id="f652d-213">The specific dependency property that changed is reported in the event data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-214">這個方法不是偵測一般的個別屬性的變更，或執行每個案例為基礎的屬性的失效。</span><span class="sxs-lookup"><span data-stu-id="f652d-214">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="f652d-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 而被適用於修改一般失效模式中，如果已知廣泛分類屬性的特定資訊。</span><span class="sxs-lookup"><span data-stu-id="f652d-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="f652d-216">例如，變更<xref:System.Windows.Freezable>可能會變更中的實值類型<xref:System.Windows.Freezable>，或可能是子屬性，而所做的變更都在其他<xref:System.Windows.Freezable>參考。</span><span class="sxs-lookup"><span data-stu-id="f652d-216">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="f652d-217"><xref:System.Windows.Freezable>覆寫的實作<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>，判斷是否屬性是子屬性，並提供適當的基底類別的邏輯以任一種情況下會使用內部的資訊。</span><span class="sxs-lookup"><span data-stu-id="f652d-217">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="f652d-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 是可能叫用次數的物件存留期間。</span><span class="sxs-lookup"><span data-stu-id="f652d-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="f652d-219">因此，達到更佳的效能，整體的屬性系統，如果您覆寫特定屬性的中繼資料，然後將附加<xref:System.Windows.CoerceValueCallback>或<xref:System.Windows.PropertyChangedCallback>個別屬性的函式。</span><span class="sxs-lookup"><span data-stu-id="f652d-219">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="f652d-220">不過，您會使用這個方法如果<xref:System.Windows.DependencyObject>包含大量的值相互關聯的相依性屬性，或者如果它包含邏輯，例如轉譯行為，必須重新執行的許多相關的屬性失效的情況。</span><span class="sxs-lookup"><span data-stu-id="f652d-220">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f652d-221">請務必呼叫基底實作。</span><span class="sxs-lookup"><span data-stu-id="f652d-221">Always call the base implementation.</span></span> <span data-ttu-id="f652d-222">如果沒有這樣做會大幅停用整個[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]屬性系統中，導致報告不正確的值。</span><span class="sxs-lookup"><span data-stu-id="f652d-222">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</span></span></para></block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f652d-223">要為其擷取值之屬性的 <see cref="T:System.Windows.DependencyProperty" /> 識別項。</span><span class="sxs-lookup"><span data-stu-id="f652d-223">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="f652d-224">傳回相依性屬性的區域數值 (如果存在)。</span><span class="sxs-lookup"><span data-stu-id="f652d-224">Returns the local value of a dependency property, if it exists.</span></span></summary>
        <returns><span data-ttu-id="f652d-225">傳回區域數值，若區域數值並未設定，則傳回 Sentinel 值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-225">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-226">您應該使用<xref:System.Windows.DependencyObject.GetValue%2A>相依性屬性的最常見 「 取得 」 作業。</span><span class="sxs-lookup"><span data-stu-id="f652d-226">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="f652d-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> 不會傳回有效的值，如在許多情況下，未在本機設定值。</span><span class="sxs-lookup"><span data-stu-id="f652d-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="f652d-228">值所設定的樣式、 佈景主題、 範本，中繼資料或屬性值繼承的預設值會不被視為區域數值。</span><span class="sxs-lookup"><span data-stu-id="f652d-228">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="f652d-229">不過，繫結和其他運算式會被視為區域數值之後經過評估。</span><span class="sxs-lookup"><span data-stu-id="f652d-229">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="f652d-230">當未不設定任何本機的值時，這個方法會傳回<xref:System.Windows.DependencyProperty.UnsetValue>。</span><span class="sxs-lookup"><span data-stu-id="f652d-230">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="f652d-231">如果傳回的值不是<xref:System.Windows.DependencyProperty.UnsetValue>，您可以查詢以判斷是否有更明確的類型傳回的值可以轉換成要求的相依性屬性的中繼資料。</span><span class="sxs-lookup"><span data-stu-id="f652d-231">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f652d-232">要設定之相依性屬性的識別項。</span><span class="sxs-lookup"><span data-stu-id="f652d-232">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="f652d-233">新區域數值。</span><span class="sxs-lookup"><span data-stu-id="f652d-233">The new local value.</span></span></param>
        <summary><span data-ttu-id="f652d-234">設定相依性屬性的值，而不需要變更其值來源。</span><span class="sxs-lookup"><span data-stu-id="f652d-234">Sets the value of a dependency property without changing its value source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-235">以程式設計方式設定其中一個自己的屬性的值，而不停用應用程式的宣告的使用屬性的元件會使用此方法。</span><span class="sxs-lookup"><span data-stu-id="f652d-235">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="f652d-236"><xref:System.Windows.DependencyObject.SetCurrentValue%2A>方法會變更的屬性，但現有的觸發程序，資料繫結，有效的值和樣式會繼續運作。</span><span class="sxs-lookup"><span data-stu-id="f652d-236">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f652d-237">嘗試修改唯讀的相依性屬性，或密封的 <see cref="T:System.Windows.DependencyObject" /> 上的屬性。</span><span class="sxs-lookup"><span data-stu-id="f652d-237">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f652d-238"><paramref name="value" /> 不是如同為 <paramref name="dp" /> 屬性所註冊的正確型別。</span><span class="sxs-lookup"><span data-stu-id="f652d-238"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f652d-239">設定相依性屬性的區域數值。</span><span class="sxs-lookup"><span data-stu-id="f652d-239">Sets the local value of a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f652d-240">要設定之相依性屬性的識別項。</span><span class="sxs-lookup"><span data-stu-id="f652d-240">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="f652d-241">新區域數值。</span><span class="sxs-lookup"><span data-stu-id="f652d-241">The new local value.</span></span></param>
        <summary><span data-ttu-id="f652d-242">設定相依性屬性的本機值 (由相依性屬性的識別項所指定)。</span><span class="sxs-lookup"><span data-stu-id="f652d-242">Sets the local value of a dependency property, specified by its dependency property identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-243">如果提供的型別不符合宣告相依性屬性為最初註冊的型別，則會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f652d-243">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="f652d-244">`value`參數應該一律提供適當的型別。</span><span class="sxs-lookup"><span data-stu-id="f652d-244">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="f652d-245">例外狀況可能會受到<xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>存在於所設定之相依性屬性的相依性屬性識別碼的回呼。</span><span class="sxs-lookup"><span data-stu-id="f652d-245">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="f652d-246">否則，所提供的值可能會失敗 （例如，將字串傳遞時的原生型別是雙精度浮點數） 的一般型別檢查條件。</span><span class="sxs-lookup"><span data-stu-id="f652d-246">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f652d-247">嘗試修改唯讀的相依性屬性，或密封的 <see cref="T:System.Windows.DependencyObject" /> 上的屬性。</span><span class="sxs-lookup"><span data-stu-id="f652d-247">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f652d-248"><paramref name="value" /> 不是如同為 <paramref name="dp" /> 屬性所註冊的正確型別。</span><span class="sxs-lookup"><span data-stu-id="f652d-248"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="f652d-249">要設定之屬性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 識別項。</span><span class="sxs-lookup"><span data-stu-id="f652d-249">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span></span></param>
        <param name="value"><span data-ttu-id="f652d-250">新區域數值。</span><span class="sxs-lookup"><span data-stu-id="f652d-250">The new local value.</span></span></param>
        <summary><span data-ttu-id="f652d-251">設定唯讀相依性屬性的區域數值 (由相依性屬性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 識別項所指定)。</span><span class="sxs-lookup"><span data-stu-id="f652d-251">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-252">當您設定您的自訂類別所定義的唯讀相依性屬性的值，通常使用此簽章。</span><span class="sxs-lookup"><span data-stu-id="f652d-252">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="f652d-253">一般而言，<xref:System.Windows.DependencyObject.SetValue%2A>只會從已註冊該相依性屬性，它會實作內部邏輯可決定的值相依性屬性的型別呼叫。</span><span class="sxs-lookup"><span data-stu-id="f652d-253">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="f652d-254">如需詳細資訊，請參閱[唯讀相依性屬性](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)。</span><span class="sxs-lookup"><span data-stu-id="f652d-254">For more information, see [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="f652d-255">如果提供的型別不符合宣告相依性屬性為最初註冊的型別，則會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="f652d-255">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="f652d-256">`value`參數應該一律提供適當的型別。</span><span class="sxs-lookup"><span data-stu-id="f652d-256">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="f652d-257">例外狀況可能會受到<xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>存在於所設定之相依性屬性的相依性屬性識別碼的回呼。</span><span class="sxs-lookup"><span data-stu-id="f652d-257">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f652d-258">下列範例會定義唯讀的相依性屬性，連同`public static readonly` <xref:System.Windows.DependencyProperty> ，提供必要的唯讀曝光的 get 存取子屬性取用者，來[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]包裝函式。</span><span class="sxs-lookup"><span data-stu-id="f652d-258">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f652d-259">應序列化之相依性屬性的識別項。</span><span class="sxs-lookup"><span data-stu-id="f652d-259">The identifier for the dependency property that should be serialized.</span></span></param>
        <summary><span data-ttu-id="f652d-260">傳回值，這個值表示序列化程序是否應該序列化所提供相依性屬性的值。</span><span class="sxs-lookup"><span data-stu-id="f652d-260">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span></span></summary>
        <returns><span data-ttu-id="f652d-261">如果提供之相依性屬性的值應該序列化則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f652d-261"><see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f652d-262">預設實作會傳回`true`所在的相依性屬性具有本機值上建立的所有案例<xref:System.Windows.DependencyObject>。</span><span class="sxs-lookup"><span data-stu-id="f652d-262">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f652d-263">覆寫這個方法可能會以不同方式處理特定的相依性屬性。</span><span class="sxs-lookup"><span data-stu-id="f652d-263">Overrides for this method might handle specific dependency properties differently.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>