<Type Name="DataTrigger" FullName="System.Windows.DataTrigger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a9417fbf4320e40681c9bffd10182ab7052d847a" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53470754" /></Metadata><TypeSignature Language="C#" Value="public class DataTrigger : System.Windows.TriggerBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTrigger extends System.Windows.TriggerBase implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DataTrigger" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTrigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTrigger : System::Windows::TriggerBase, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type DataTrigger = class&#xA;    inherit TriggerBase&#xA;    interface IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.XamlSetMarkupExtension("ReceiveMarkupExtension")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示觸發程序 (Trigger)，這個觸發程序會在繫結資料符合特定條件時套用屬性值或執行動作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Style><xref:System.Windows.Controls.ControlTemplate>，和<xref:System.Windows.DataTemplate>都有一個觸發程序集合。 A<xref:System.Windows.DataTrigger>可讓您設定屬性值，當資料物件的屬性值符合指定之<xref:System.Windows.Condition.Value%2A>。 例如，如果您要顯示一份`Employee`物件，您可能想要不同的前景色彩根據每個`Employee's`目前的出席人數。 (例如`Employees`誰正在度假會以紫色前景的方式來顯示。)在某些情況下可能是建立轉換子，或使用更適合<xref:System.Windows.Controls.DataTemplateSelector>。 如需詳細資訊，請參閱 <<c0> [ 資料範本化概觀](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
 請注意，您必須同時指定<xref:System.Windows.DataTrigger.Binding%2A>並<xref:System.Windows.DataTrigger.Value%2A>上的屬性<xref:System.Windows.DataTrigger>為有意義的資料觸發程序。 如果未指定一或兩個屬性，則會擲回例外狀況。  
  
 <xref:System.Windows.DataTrigger.Setters%2A>的屬性<xref:System.Windows.DataTrigger>物件只能包含數<xref:System.Windows.Setter>物件。 新增<xref:System.Windows.Setter>子系<xref:System.Windows.DataTrigger>物件會隱含地將它加入至<xref:System.Windows.SetterBaseCollection>如<xref:System.Windows.DataTrigger>物件。 <xref:System.Windows.EventSetter> 不支援物件;只有<xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType>支援<xref:System.Windows.EventSetter>物件。  
  
   
  
## Examples  
 在下列範例中，<xref:System.Windows.Controls.ItemsControl.ItemsSource%2A>的<xref:System.Windows.Controls.ListBox>繫結至*上的芳鄰*，則<xref:System.Collections.ObjectModel.ObservableCollection%601>的*位置*物件。 *地方*物件具有屬性*名稱*並*狀態*。  
  
 每個<xref:System.Windows.Controls.ListBoxItem>的<xref:System.Windows.Controls.ListBox>會顯示*地方*物件。 <xref:System.Windows.Style>在此範例會套用至每個<xref:System.Windows.Controls.ListBoxItem>。  
  
 <xref:System.Windows.DataTrigger>指定，如果*狀態*的*位置*資料項目是"WA"則對應前景<xref:System.Windows.Controls.ListBoxItem>設為紅色。  
  
 [!code-xaml[DataTrigger#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTrigger/CSharp/Window1.xaml#1)]  
  
 下列範例示範如何使用<xref:System.Windows.DataTrigger>，則<xref:System.Windows.Media.Animation.BeginStoryboard>動作，和<xref:System.Windows.Media.Animation.Storyboard>以動畫顯示屬性，繫結的資料符合指定的條件時。 此範例會顯示在的清查資訊<xref:System.Windows.Controls.ListBox>控制項。 它會使用<xref:System.Windows.DataTrigger>來建立動畫<xref:System.Windows.UIElement.Opacity%2A>的每個<xref:System.Windows.Controls.ListBoxItem>，其中包含外的庫存書籍。  
  
 [!code-xaml[AnimatePropertyStoryboards#GraphicsMMDataTriggerStoryboardWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/AnimatePropertyStoryboards/XAML/DataTriggerStoryboardExample.xaml#graphicsmmdatatriggerstoryboardwholepage)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Trigger" />
    <altmember cref="T:System.Windows.MultiDataTrigger" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">資料範本化範例簡介</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTrigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTrigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.DataTrigger" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingBase Binding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingBase Binding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTrigger.Binding" />
      <MemberSignature Language="VB.NET" Value="Public Property Binding As BindingBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingBase ^ Binding { System::Windows::Data::BindingBase ^ get(); void set(System::Windows::Data::BindingBase ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Binding : System.Windows.Data.BindingBase with get, set" Usage="System.Windows.DataTrigger.Binding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定產生資料物件屬性值的繫結。</summary>
        <value>預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個繫結所產生的屬性值會與所指定的值相比<xref:System.Windows.DataTrigger.Value%2A>屬性。 繫結 （如果可能的話） 的值的型別值是第一個轉換，然後使用比較的兩個值`Object.Equals`方法。 如果兩個值相等，則相關聯的動作或 setter 會套用。  
  
 您建立的繫結，並使用<xref:System.Windows.Data.Binding.Path%2A>屬性繫結至特定的物件 （繫結來源物件） 的屬性。 例如，您可以繫結，來*優先權*屬性*工作*。 如需詳細資訊，請參閱 [資料繫結概觀](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
 請注意，您必須同時指定<xref:System.Windows.DataTrigger.Binding%2A>並<xref:System.Windows.DataTrigger.Value%2A>上的屬性<xref:System.Windows.DataTrigger>為有意義的資料觸發程序。 如果未設定一或兩個屬性，則會擲回例外狀況。  
  
<a name="xamlAttributeUsage_PriorityBinding"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object property="{Binding  declaration}"/>  
```  
  
<a name="xamlPropertyElementUsage_Binding"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```  
<object>  
  <object.Binding>  
    <Binding …/>  
  </object.Binding>  
</object>  
```  
  
<a name="xamlValues_PriorityBinding"></a>   
## <a name="xaml-values"></a>XAML 值  
 *declaration*  
 零個或多個屬性指派子句，以逗號 （，） 分隔。 請參閱[Binding 標記延伸模組](~/docs/framework/wpf/advanced/binding-markup-extension.md)如需詳細資訊。  
  
   
  
## Examples  
 在下列範例中，<xref:System.Windows.DataTrigger>設定<xref:System.Windows.Controls.Border.BorderBrush%2A>名為的項目`border`要`Yellow`如果`TaskType`屬性是`TaskType.Home`。  
  
 [!code-xaml[DataTemplatingIntro#DT](~/samples/snippets/xaml/VS_Snippets_Wpf/DataTemplatingIntro/xaml/window1.xaml#dt)]  
[!code-xaml[DataTemplatingIntro#DataTrigger](~/samples/snippets/xaml/VS_Snippets_Wpf/DataTemplatingIntro/xaml/window1.xaml#datatrigger)]  
[!code-xaml[DataTemplatingIntro#AddingMore2](~/samples/snippets/xaml/VS_Snippets_Wpf/DataTemplatingIntro/xaml/window1.xaml#addingmore2)]  
  
 如本範例的詳細討論，請參閱 <<c0> [ 資料範本化概觀](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DataTrigger.Value" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">資料範本化範例簡介</related>
      </Docs>
    </Member>
    <Member MemberName="ReceiveMarkupExtension">
      <MemberSignature Language="C#" Value="public static void ReceiveMarkupExtension (object targetObject, System.Windows.Markup.XamlSetMarkupExtensionEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReceiveMarkupExtension(object targetObject, class System.Windows.Markup.XamlSetMarkupExtensionEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.ReceiveMarkupExtension(System.Object,System.Windows.Markup.XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReceiveMarkupExtension (targetObject As Object, eventArgs As XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReceiveMarkupExtension(System::Object ^ targetObject, System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="static member ReceiveMarkupExtension : obj * System.Windows.Markup.XamlSetMarkupExtensionEventArgs -&gt; unit" Usage="System.Windows.DataTrigger.ReceiveMarkupExtension (targetObject, eventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetObject">標記延伸會在此設定值的物件。</param>
        <param name="eventArgs">與標記延伸處理相關的資料。</param>
        <summary>處理標記延伸對 <see cref="T:System.Windows.DataTrigger" /> 物件的屬性提供值的情況。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是套用所參考的方法<xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>在類別層級，這表示這個方法會處理所有嘗試設定值的屬性<xref:System.Windows.DataTrigger>與標記延伸。 您不通常直接呼叫這個方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" />
        <altmember cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTrigger.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Setters : System.Windows.SetterBaseCollection" Usage="System.Windows.DataTrigger.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Windows.Setter" /> 物件的集合，這些物件描述當資料項目符合指定的條件時要套用的屬性值。</summary>
        <value>預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```  
<object>  
  <object.Setters>  
    ZeroOrMoreSetters  
  </object.Setters>  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a>XAML 值  
 *ZeroOrMoreSetters*  
 零或多個<xref:System.Windows.Setter>物件。  
  
 A<xref:System.Windows.DataTrigger>可讓您啟動動作，或使用<xref:System.Windows.Setter>來套用屬性值，當資料項目符合指定的條件。  
  
 如果有多個相同的 setter 集合中設定相同屬性的 setter，宣告的 setter 最後使用。  
  
 <xref:System.Windows.DataTrigger.Setters%2A>的屬性<xref:System.Windows.DataTrigger>物件只能包含數<xref:System.Windows.Setter>物件。 新增<xref:System.Windows.Setter>子系<xref:System.Windows.DataTrigger>物件會隱含地將它加入至<xref:System.Windows.SetterBaseCollection>如<xref:System.Windows.DataTrigger>物件。 <xref:System.Windows.EventSetter> 不支援物件;只有<xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType>支援<xref:System.Windows.EventSetter>物件。  
  
   
  
## Examples  
 下列範例示範兩個<xref:System.Windows.DataTrigger>中所定義的物件<xref:System.Windows.DataTemplate>。 <xref:System.Windows.DataTemplate>套用至*AuctionItem*資料物件 （在此範例中未顯示），具有屬性*Auctionitem*。  
  
 第一個<xref:System.Windows.DataTrigger>指定，如果資料物件都有*Auctionitem*的值*色彩*，然後使用顯示的項目`DodgerBlue`海軍藍的標題的背景。 如果資料物件具有*Auctionitem*的值*反白顯示*，然後第二個<xref:System.Windows.DataTrigger>會是作用中，導致與星狀橘色框線和一起顯示的項目。  
  
 如需完整的範例，請參閱[資料繫結示範](https://go.microsoft.com/fwlink/?LinkID=163703)。  
  
 [!code-xaml[DataBindingLab#AuctionItemsDataTriggers](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemsdatatriggers)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">資料範本化範例簡介</related>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要加入的子物件。</param>
        <summary>加入子物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Windows.DataTrigger> 執行個體轉換成 <xref:System.Windows.Markup.IAddChild> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要加入物件中的文字。</param>
        <summary>將節點的文字內容加入物件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Windows.DataTrigger> 執行個體轉換成 <xref:System.Windows.Markup.IAddChild> 介面時，才能使用這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTrigger.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Windows.DataTrigger.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DependsOn("Binding")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要與資料物件之屬性值比較的值。</summary>
        <value>預設值為 <see langword="null" />。 請參閱「例外狀況」一節。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Value"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```  
<object>  
  <object.Value>  
    Value  
  </object.Value>  
</object>  
```  
  
 這個值會與所產生的屬性值相比<xref:System.Windows.DataTrigger.Binding%2A>屬性<xref:System.Windows.DataTrigger>。 這個比較是參考相等檢查。 如果兩個值相等，則相關聯的動作或 setter 會套用。  
  
 請注意，您必須同時指定<xref:System.Windows.DataTrigger.Binding%2A>並<xref:System.Windows.DataTrigger.Value%2A>上的屬性<xref:System.Windows.DataTrigger>為有意義的資料觸發程序。 如果未設定一或兩個屬性，將會擲回例外狀況。  
  
   
  
## Examples  
 在下列範例中，<xref:System.Windows.Controls.ItemsControl.ItemsSource%2A>的<xref:System.Windows.Controls.ListBox>繫結至*上的芳鄰*，則<xref:System.Collections.ObjectModel.ObservableCollection%601>的*位置*物件。 *地方*物件具有屬性*名稱*並*狀態*。  
  
 每個<xref:System.Windows.Controls.ListBoxItem>的<xref:System.Windows.Controls.ListBox>會顯示*地方*物件。 <xref:System.Windows.Style>在此範例會套用至每個<xref:System.Windows.Controls.ListBoxItem>。  
  
 <xref:System.Windows.DataTrigger>指定，如果*狀態*的*位置*資料項目是"WA"則對應前景<xref:System.Windows.Controls.ListBoxItem>設為紅色。  
  
 [!code-xaml[DataTrigger#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTrigger/CSharp/Window1.xaml#1)]  
  
 下列範例示範兩個<xref:System.Windows.DataTrigger>中所定義的 s <xref:System.Windows.DataTemplate>。 <xref:System.Windows.DataTemplate>套用至*AuctionItem*資料物件 （在此範例中未顯示），具有屬性*Auctionitem*。 請參閱[資料繫結示範](https://go.microsoft.com/fwlink/?LinkID=163703)如完整的範例。  
  
 第一個<xref:System.Windows.DataTrigger>指定，如果資料物件都有*Auctionitem*的值*色彩*，則海軍藍的標題以 DodgerBlue 背景顯示的項目。 如果資料物件具有*Auctionitem*的值*反白顯示*，然後第二個<xref:System.Windows.DataTrigger>會是作用中，導致與星狀橘色框線和一起顯示的項目。  
  
 [!code-xaml[DataBindingLab#AuctionItemsDataTriggers](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemsdatatriggers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">不支援運算式。 不支援繫結。</exception>
        <altmember cref="P:System.Windows.DataTrigger.Binding" />
        <altmember cref="P:System.Windows.DataTrigger.Setters" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">資料範本化範例簡介</related>
      </Docs>
    </Member>
  </Members>
</Type>