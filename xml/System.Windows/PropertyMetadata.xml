<Type Name="PropertyMetadata" FullName="System.Windows.PropertyMetadata">
  <Metadata><Meta Name="ms.openlocfilehash" Value="423f853a60d99a5767f47d8a9e4d3ef0dce3cb15" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39845054" /></Metadata><TypeSignature Language="C#" Value="public class PropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyMetadata extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyMetadata" />
  <TypeSignature Language="F#" Value="type PropertyMetadata = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>在特定行為方面定義相依性屬性，因為它會套用到特定的類型，包括註冊時所用的條件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性中繼資料可以定義和呼叫時，相依性屬性註冊期間使用<xref:System.Windows.DependencyProperty.Register%2A>方法 （或附加的屬性或唯讀相依性屬性的變化），或之後呼叫時的原始擁有者註冊<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>方法。 <xref:System.Windows.DependencyProperty.AddOwner%2A> 也會考慮屬性的中繼資料。  
  
 這個類別是可用於每個這些呼叫的具象基底類別。 不過，是很常見，指定中繼資料使用的其中一個衍生的類別例如<xref:System.Windows.FrameworkPropertyMetadata>。 這些衍生的類別支援更詳細的中繼資料當做布林值屬性值，可用來偵測，或啟用只會在實作某些屬性系統和版面配置行為[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]架構層級。  
  
 這個類別的數個屬性是讀寫物件模型中，但只能在例如使用中的屬性系統作業的執行個體之前寫入<xref:System.Windows.DependencyProperty.Register%2A>或<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>。 每個屬性可能也已設定的建構函式，但會公開讓<xref:System.Windows.PropertyMetadata.Merge%2A>方法實作可以設定它們。  
  
<a name="xamlTextUsage_PropertyMetadata"></a>   
## <a name="xaml-text-usage"></a>XAML 文字使用方式  
 此型別和成員，這種不通常會以[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.PropertyMetadata" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.PropertyMetadata" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue">指定相依性屬性的預設值，通常做為某些特定型別的值提供。</param>
        <summary>使用要套用這個中繼資料之相依性屬性的指定預設值，初始化 <see cref="T:System.Windows.PropertyMetadata" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 提供值的型別`defaultValue`必須相符或相關相依性屬性，此中繼資料將會套用到原始的註冊中指定的型別。 很難偵錯時，中繼資料預設值的類型與套用至相依性屬性的型別之間的不符，因為 （不符會引發執行階段例外狀況） 的編譯期間無法偵測不相符。  
  
 預設的每一個無參數建構函式中，雖然`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>不能指定。 嘗試執行此作業將會引發例外狀況。  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="defaultValue" /> 無法設定為值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">處理常式實作的參考，當屬性的有效值變更時會由屬性系統呼叫。</param>
        <summary>使用指定的 <see cref="T:System.Windows.PropertyMetadata" /> 實作參考，初始化 <see cref="T:System.Windows.PropertyChangedCallback" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">相依性屬性的預設值，通常是做為某些特定型別的值提供。</param>
        <param name="propertyChangedCallback">處理常式實作的參考，當屬性的有效值變更時會由屬性系統呼叫。</param>
        <summary>使用指定的預設值和 <see cref="T:System.Windows.PropertyMetadata" /> 實作參考，初始化 <see cref="T:System.Windows.PropertyChangedCallback" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 提供值的型別`defaultValue`必須相符或相關相依性屬性，此中繼資料將會套用到原始的註冊中指定的型別。 很難偵錯時，中繼資料預設值的類型與套用至相依性屬性的型別之間的不符，因為 （不符會引發執行階段例外狀況） 的編譯期間無法偵測不相符。  
  
 預設的每一個無參數建構函式中，雖然`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>不能指定。 嘗試執行此作業將會引發例外狀況。  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="defaultValue" /> 無法設定為值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">相依性屬性的預設值，通常是做為某些特定型別的值提供。</param>
        <param name="propertyChangedCallback">處理常式實作的參考，當屬性的有效值變更時會由屬性系統呼叫。</param>
        <param name="coerceValueCallback">處理常式實作的參考，當屬性系統針對這個屬性呼叫 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 時便會呼叫。</param>
        <summary>使用指定的預設值和回呼，初始化 <see cref="T:System.Windows.PropertyMetadata" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您想要指定<xref:System.Windows.CoerceValueCallback>而非<xref:System.Windows.PropertyChangedCallback>，您可以傳遞`null`如`propertyChangedCallback`參數。  
  
 提供值的型別`defaultValue`必須相符或相關相依性屬性，此中繼資料將會套用到原始的註冊中指定的型別。 很難偵錯時，中繼資料預設值的類型與套用至相依性屬性的型別之間的不符，因為 （不符會引發執行階段例外狀況） 的編譯期間無法偵測不相符。  
  
 預設的每一個無參數建構函式中，雖然`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>不能指定。 嘗試執行此作業將會引發例外狀況。  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="defaultValue" /> 無法設定為值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CoerceValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.CoerceValueCallback CoerceValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.CoerceValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property CoerceValueCallback As CoerceValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::CoerceValueCallback ^ CoerceValueCallback { System::Windows::CoerceValueCallback ^ get(); void set(System::Windows::CoerceValueCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CoerceValueCallback : System.Windows.CoerceValueCallback with get, set" Usage="System.Windows.PropertyMetadata.CoerceValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.CoerceValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定在這個中繼資料中指定之 <see cref="T:System.Windows.CoerceValueCallback" /> 實作的參考。</summary>
        <value><see cref="T:System.Windows.CoerceValueCallback" /> 實作參考。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性中繼資料中的回呼不包含的類型，通常是公用成員，因此這個屬性的值不是很重要，大部分的情況下，只要使用現有的相依性屬性中繼資料。 這個屬性會公開的其中一個原因是，讓中繼資料的子類別可以執行其所需的合併邏輯，如果基底中繼資料和覆寫/新增的中繼資料指定<xref:System.Windows.CoerceValueCallback>。 不過，預設值合併邏輯<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>是要取代舊的金鑰。  
  
 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> 是物件模型中定義為讀寫。 這種情形<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>可以初始化之後調整<xref:System.Windows.PropertyMetadata>物件本身。 不過，一旦中繼資料的一部分的呼叫消耗<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 屬性系統會將密封該中繼資料執行個體和屬性現在會被視為不變。 嘗試設定<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>一旦<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">一旦套用至相依性屬性作業，便無法設定中繼資料屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultValue : obj with get, set" Usage="System.Windows.PropertyMetadata.DefaultValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定相依性屬性的預設值。</summary>
        <value>屬性的預設值。 上的預設值<see cref="T:System.Windows.PropertyMetadata" />建立具有無參數建構函式的執行個體將會<see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.PropertyMetadata.DefaultValue%2A> 是物件模型中定義為讀寫。 這種情形<xref:System.Windows.PropertyMetadata.DefaultValue%2A>可以初始化之後調整<xref:System.Windows.PropertyMetadata>物件本身。 不過，一旦中繼資料的一部分的呼叫消耗<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 屬性系統會將密封該中繼資料執行個體和屬性現在會被視為不變。 嘗試設定<xref:System.Windows.PropertyMetadata.DefaultValue%2A>一旦<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。  
  
 預設的每一個無參數建構函式中，雖然`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>無法使用其中一個設定<xref:System.Windows.PropertyMetadata.DefaultValue%2A>或建構函式。 嘗試執行此作業將會引發例外狀況。  
  
<a name="xamlTextUsage_PropertyChangedCallback"></a>   
## <a name="xaml-text-usage"></a>XAML 文字使用方式  
 這個類型的成員不會通常用於[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">一旦建立，便無法設定為值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</exception>
        <exception cref="T:System.InvalidOperationException">一旦套用至相依性屬性作業，便無法設定中繼資料屬性。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="protected bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.PropertyMetadata.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值判斷中繼資料是否已經以某種方式套用至屬性，導致中繼資料執行個體的不可變狀態。</summary>
        <value>如果中繼資料執行個體是不可變的則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各種屬性<xref:System.Windows.PropertyMetadata>，例如<xref:System.Windows.PropertyMetadata.DefaultValue%2A>，為讀寫物件模型中定義。 這是讓這些屬性可以初始化之後調整<xref:System.Windows.PropertyMetadata>物件本身。 不過，一旦中繼資料套用至相依性屬性呼叫的一部分<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 屬性系統會將密封該中繼資料執行個體和屬性現在會被視為不變。 其中一個呼叫，當時<xref:System.Windows.PropertyMetadata.OnApply%2A>呼叫時，且這個屬性的值設定為`true`。  
  
   
  
## Examples  
 下列範例會檢查<xref:System.Windows.PropertyMetadata.IsSealed%2A>之前設定作業中的自訂中繼資料屬性。  
  
 [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit&#xA;override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="propertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata">要與這個執行個體值合併的基底中繼資料。</param>
        <param name="dp">要套用這個中繼資料的相依性屬性。</param>
        <summary>合併這個中繼資料和基底中繼資料。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正在覆寫中繼資料時在內部使用這個方法 (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>方法)。  
  
   
  
## Examples  
 下列範例會將一個額外的屬性加入至屬性中繼資料的自訂中繼資料類型的合併。  
  
 [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>類別衍生自的實作<see cref="T:System.Windows.PropertyMetadata" />應該覆寫這個方法，以負責他們已在其實作任何中繼資料屬性。比方說，您的實作可能已經加入新的旗標型列舉值，而<see cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />實作應該可以正確結合這些旗標。請務必呼叫基底實作之前您實作程式碼，因為基底實作會負責合併上已定義的所有屬性<see cref="T:System.Windows.PropertyMetadata" />型別。合併的確切行為是由您決定。您可以選擇有合併的值，請還原成基底值，如果衍生的中繼資料已保留預設值或根據您已將其加入您特定的中繼資料類別和其意義的屬性類型的其他行為。</para></block>
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member OnApply : System.Windows.DependencyProperty * Type -&gt; unit&#xA;override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="propertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp">已套用這個中繼資料的相依性屬性。</param>
        <param name="targetType">如果這是型別特定的中繼資料，則為與這個中繼資料相關聯的型別。 如果這是預設中繼資料，則該值是 null 參考。</param>
        <summary>在這個中繼資料已套用至屬性時呼叫，表示要密封中繼資料。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 子類別應該確保任何可變動性的資料結構<xref:System.Windows.PropertyMetadata>子類別應該標示為不可變一次<xref:System.Windows.PropertyMetadata.OnApply%2A>呼叫。 這會呼叫後之中繼資料套用至屬性系統作業 （註冊、 將擁有者新增、 覆寫中繼資料）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChangedCallback">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyChangedCallback PropertyChangedCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.PropertyChangedCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyChangedCallback As PropertyChangedCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyChangedCallback ^ PropertyChangedCallback { System::Windows::PropertyChangedCallback ^ get(); void set(System::Windows::PropertyChangedCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyChangedCallback : System.Windows.PropertyChangedCallback with get, set" Usage="System.Windows.PropertyMetadata.PropertyChangedCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyChangedCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定在這個中繼資料中指定之 <see cref="T:System.Windows.PropertyChangedCallback" /> 實作的參考。</summary>
        <value><see cref="T:System.Windows.PropertyChangedCallback" /> 實作參考。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 屬性中繼資料中的回呼不在定義的型別，通常是公用成員，因此這個屬性的值不是很重要，大部分的情況下，只要使用現有的相依性屬性中繼資料。 這個屬性會公開的其中一個原因是，讓中繼資料類別可以執行其所需的合併邏輯，如果基底中繼資料和覆寫/新增的中繼資料指定<xref:System.Windows.PropertyChangedCallback>。 預設合併邏輯會維護所有<xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A>實作中的資料表和呼叫每一個人，在執行第一個階層架構中最深的類別所建立的回呼。  
  
 <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> 是物件模型中定義為讀寫。 這種情形<xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A>可以初始化之後調整<xref:System.Windows.PropertyMetadata>物件本身。 不過，一旦中繼資料的一部分的呼叫消耗<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 屬性系統會將密封該中繼資料執行個體和屬性現在會被視為不變。 嘗試設定<xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A>一旦<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">一旦套用至相依性屬性作業，便無法設定中繼資料屬性。</exception>
      </Docs>
    </Member>
  </Members>
</Type>