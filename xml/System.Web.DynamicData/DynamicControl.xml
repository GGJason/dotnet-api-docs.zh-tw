<Type Name="DynamicControl" FullName="System.Web.DynamicData.DynamicControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2ad449c084f3fbbe5f36562fdca675ad4cb2658c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30540172" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicControl : System.Web.UI.Control, System.Web.DynamicData.IFieldFormattingOptions, System.Web.DynamicData.IFieldTemplateHost, System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicControl extends System.Web.UI.Control implements class System.Web.DynamicData.IFieldFormattingOptions, class System.Web.DynamicData.IFieldTemplateHost, class System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicControl" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicControl&#xA;Inherits Control&#xA;Implements IAttributeAccessor, IFieldFormattingOptions, IFieldTemplateHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicControl : System::Web::UI::Control, System::Web::DynamicData::IFieldFormattingOptions, System::Web::DynamicData::IFieldTemplateHost, System::Web::UI::IAttributeAccessor" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldFormattingOptions</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldTemplateHost</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IAttributeAccessor</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicControl), "DynamicControl.bmp")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>使用 ASP.NET Dynamic Data 功能，顯示樣板化資料繫結控制項中欄位所定義的內容。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主題內容：  
  
-   [簡介](#introduction)  
  
-   [宣告式語法](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>簡介  
 <xref:System.Web.DynamicData.DynamicControl>控制項由樣板化資料繫結控制項，例如<xref:System.Web.UI.WebControls.FormView>或<xref:System.Web.UI.WebControls.ListView>，以顯示資料欄位中，使用 ASP.NET Dynamic Data 功能的自訂頁面。 您也可以使用<xref:System.Web.DynamicData.DynamicControl>控制<xref:System.Web.UI.WebControls.TemplateField>欄位<xref:System.Web.UI.WebControls.GridView>或<xref:System.Web.UI.WebControls.DetailsView>控制項。  
  
 <xref:System.Web.DynamicData.DynamicControl>控制項提供類似的功能<xref:System.Web.DynamicData.DynamicField>欄位。 不過，因為<xref:System.Web.DynamicData.DynamicControl>控制項只用在範本內，它可讓您更有彈性地控制資料因為您可以將其他欄位周圍的 HTML 元素的顯示方式。 當您使用<xref:System.Web.DynamicData.DynamicControl>控制項，您可以利用下列的動態資料功能：  
  
-   自動轉譯適當的控制項欄位使用欄位的範本為基礎的資料類型。 整個應用程式都可以修改全域的欄位樣板。  
  
-   提供根據資料庫結構描述的內建的資料驗證。 您也可以加入自訂資料模型的驗證類型。  
  
-   使用資料模型中的屬性，或使用自訂個別欄位的資料轉譯<xref:System.Web.DynamicData.DynamicField.UIHint%2A>屬性。  
  
 若要指定的欄位中顯示<xref:System.Web.DynamicData.DynamicControl>控制，請設定<xref:System.Web.DynamicData.DynamicControl.DataField%2A>屬性設為欄位名稱。 您可以設定來套用自訂格式字串至欄位值<xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>屬性。 根據預設，格式化字串會套用至欄位值，只有在資料繫結控制項處於唯讀模式時。 若要將格式字串套用至資料繫結控制項處於編輯模式時顯示的值，設定<xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A>屬性`true`。 如果欄位值為`null`，您可以藉由設定顯示自訂標題<xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A>屬性。 <xref:System.Web.DynamicData.DynamicControl>控制項也會自動將轉換空字串 ("") 藉由設定欄位值為 null 值<xref:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull%2A>屬性`true`。  
  
 <xref:System.Web.DynamicData.DynamicControl>控制項支援不同的顯示模式。 若要指定要在其中顯示模式<xref:System.Web.DynamicData.DynamicControl>控制，請設定<xref:System.Web.DynamicData.DynamicControl.Mode%2A>屬性。 下表顯示不同的模式。  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>  
 用於顯示模式。 這可以防止使用者修改記錄或資料欄位的值。 它可以用於任何範本。  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>  
 用於編輯模式。 這可讓使用者更新現有記錄的值。 它用於編輯範本 (通常會命名為`EditItemTemplate`)。  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>  
 用於插入模式。 這可讓使用者輸入新的記錄中的值。 它會插入範本中使用 (通常會命名為`InsertItemTemplate`)。  
  
 您可以隱藏<xref:System.Web.DynamicData.DynamicControl>藉由設定資料繫結控制項中的控制項<xref:System.Web.UI.Control.Visible%2A>屬性`false`。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>宣告式語法  
  
```  
<asp:DynamicControl  
    ApplyFormatInEditMode="True|False"  
    ConvertEmptyStringToNull="True|False"  
    CssClass="string"  
    DataField="string"  
    DataFormatString="string"  
    EnableViewState="True|False"  
    HtmlEncode="True|False"  
    ID="string"  
    Mode="Edit|Insert|ReadOnly"  
    NullDisplayText="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    UIHint="string"  
    ValidationGroup="string"  
    Visible="True|False"  
>  
</asp:DynamicControl>  
```  
  
   
  
## Examples  
 請參閱這項功能的執行階段程式碼範例：[執行](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl)。  
  
 下列範例示範如何使用<xref:System.Web.DynamicData.DynamicControl>控制<xref:System.Web.UI.WebControls.ListView>控制項來顯示、 插入、 刪除或編輯資料庫資料表中的值。 請注意，為了進行插入作業，才能執行，務必<xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A>屬性`rowguid`和`ModifiedDate`欄位都設定為`true`。  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/VB/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="T:System.Web.UI.WebControls.FormView" />
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="T:System.Web.UI.WebControls.ListView" />
    <altmember cref="T:System.Web.UI.WebControls.Repeater" />
    <altmember cref="T:System.Web.DynamicData.DynamicField" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.DynamicData.DynamicControl" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.DynamicData.DynamicControl" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl (System.Web.UI.WebControls.DataBoundControlMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Web.UI.WebControls.DataBoundControlMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor(System.Web.UI.WebControls.DataBoundControlMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As DataBoundControlMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl(System::Web::UI::WebControls::DataBoundControlMode mode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Web.UI.WebControls.DataBoundControlMode" />
      </Parameters>
      <Docs>
        <param name="mode">一個列舉值，指定控制項的模式。</param>
        <summary>使用指定的模式，初始化 <see cref="T:System.Web.DynamicData.DynamicControl" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyFormatInEditMode">
      <MemberSignature Language="C#" Value="public bool ApplyFormatInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyFormatInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplyFormatInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ApplyFormatInEditMode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示當資料欄位處於編輯模式時，<see cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" /> 屬性指定的格式化字串是否套用至欄位值。</summary>
        <value>
          如果套用格式化字串則為 <see langword="true" />；否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicControl>控制項具有不同的顯示模式，讓使用者讀取、 編輯或插入欄位。 依預設，格式化字串會指定由<xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>屬性套用至欄位值時，才<xref:System.Web.DynamicData.DynamicControl>控制項處於唯讀模式。 若要將格式字串套用至資料繫結控制項處於編輯模式時顯示的值，設定<xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A>屬性`true`。  
  
> [!NOTE]
>  <xref:System.Web.DynamicData.DynamicControl>控制項不會自動移除設定格式化的資料來源中更新的欄位時。 如果您不想格式儲存的值的一部分，您必須移除的格式以程式設計的方式。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Mode" />
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); void set(System::Web::DynamicData::MetaColumn ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與控制項相關聯的資料行物件。</summary>
        <value>與控制項相關聯的資料行物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Web.DynamicData.DynamicControl.Column%2A>屬性，以取得有關特定資料行中繼資料資訊。 <xref:System.Web.DynamicData.DynamicControl.Column%2A>屬性會自動設定<xref:System.Web.DynamicData.DynamicControl>控制項根據提供的欄位名稱<xref:System.Web.DynamicData.DynamicControl.DataField%2A>屬性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Table" />
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertEmptyStringToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertEmptyStringToNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，表示在資料來源中更新資料欄位時，是否將空字串值 ("") 自動轉換為 null 值。</summary>
        <value>
          如果空字串值會自動轉換為 null 值則為 <see langword="true" />；否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter>資料來源控制項的物件也有一個名為屬性<xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A?displayProperty=nameWithType>。 這個屬性會執行相同的函式。 請確定這兩個屬性會適當地設定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CssClass">
      <MemberSignature Language="C#" Value="public virtual string CssClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CssClass" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CssClass As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CssClass { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.CssClassProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定階層式樣式表 (CSS) 類別，這個類別指定 <see cref="T:System.Web.DynamicData.DynamicControl" /> 控制項內容的顯示樣式。</summary>
        <value>CSS 類別的名稱。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Web.DynamicData.DynamicControl" /> 控制項所繫結的資料欄位名稱。</summary>
        <value>要繫結 <see cref="T:System.Web.DynamicData.DynamicControl" /> 控制項的資料欄位名稱。 預設為空字串 ("")，表示這個屬性未設定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.DynamicData.DynamicControl.DataField%2A>屬性來指定資料欄位繫結至<xref:System.Web.DynamicData.DynamicControl>控制項。 資料欄位可以是資料行名稱，或在外部索引鍵資料行，此關聯性名稱。  
  
 根據預設，指定的資料欄位會顯示由<xref:System.Web.DynamicData.DynamicControl>控制使用的欄位資料型別相關聯的欄位樣板。 您可以變更設定呈現資料欄位的欄位樣板<xref:System.Web.DynamicData.DynamicControl.UIHint%2A>屬性。 您也可以藉由設定格式化顯示的文字<xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>屬性。  
  
 **請注意**如果您想要變更全域的顯示和行為的資料欄位，您必須將屬性套用至您的資料模型，而不是將此設定中的特定執行個體<xref:System.Web.DynamicData.DynamicControl>控制項。 如需詳細資訊，請參閱[ASP.NET Dynamic Data](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Web.DynamicData.DynamicControl.DataField%2A>屬性來指定哪些欄位来顯示在<xref:System.Web.DynamicData.DynamicControl>控制項。  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/VB/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.UIHint" />
      </Docs>
    </Member>
    <Member MemberName="DataFormatString">
      <MemberSignature Language="C#" Value="public string DataFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property DataFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定字串，這個字串指定欄位值的顯示格式。</summary>
        <value>指定欄位值顯示格式的格式化字串。 預設為空字串 ("")，表示未將特殊格式套用至該欄位值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>屬性來指定自訂的顯示格式的顯示值<xref:System.Web.DynamicData.DynamicControl>控制項。 如果<xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>屬性未設定，將欄位值會顯示不含任何特殊的格式。  
  
 根據預設，格式字串套用至該欄位值時，才<xref:System.Web.DynamicData.DynamicControl.Mode%2A>屬性設定為<xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>。 若要將格式字串套用至欄位值，在編輯模式中，設定<xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A>屬性`true`。  
  
 使用指定的顯示格式<xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>屬性是這個執行個體的特定<xref:System.Web.DynamicData.DynamicControl>控制項。 您也可以變更橫跨整個應用程式資料欄位的顯示格式，藉由套用<xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute>您的資料模型和設定<xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString%2A?displayProperty=nameWithType>建構函式中的參數名稱。 如需詳細資訊，請參閱[ASP.NET Dynamic Data](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" />
        <altmember cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" />
      </Docs>
    </Member>
    <Member MemberName="FieldTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FieldTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FieldTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FieldTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FieldTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得為 <see cref="T:System.Web.DynamicData.DynamicControl" /> 控制項建立的欄位樣板。</summary>
        <value>為 <see cref="T:System.Web.DynamicData.DynamicControl" /> 控制項建立的欄位樣板。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetAttribute(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">屬性的名稱。</param>
        <summary>使用指定的索引鍵，擷取屬性值。</summary>
        <returns>屬性的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果屬性集合是`null`，這個方法會傳回空字串。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public bool HtmlEncode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberSignature Language="VB.NET" Value="Public Property HtmlEncode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HtmlEncode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示控制項的資料在呈現之前是否進行 HTML 編碼。</summary>
        <value>
          如果控制項的資料在呈現之前進行 HTML 編碼則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.DynamicData.DynamicControl.HtmlEncode%2A>屬性來指定欄位值是否為 HTML 編碼成其個別的字串表示法顯示之前。  
  
> [!NOTE]
>  HTML 編碼的欄位值可協助防止跨網站指令碼的攻擊和惡意的內容不會再顯示。 可能的話，應該啟用這個屬性。 如需詳細資訊，請參閱 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07) (指令碼攻擊概觀)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.DataBoundControlMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.DataBoundControlMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As DataBoundControlMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::DataBoundControlMode Mode { System::Web::UI::WebControls::DataBoundControlMode get(); void set(System::Web::UI::WebControls::DataBoundControlMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataBoundControlMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定呈現模式。</summary>
        <value>一個列舉值，指定控制項的呈現模式。 預設值為 <see cref="F:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.DynamicData.DynamicControl.Mode%2A>屬性來指定要用來顯示的轉譯模式<xref:System.Web.DynamicData.DynamicControl>控制項。 下表顯示不同的模式。  
  
|模式|描述|  
|----------|-----------------|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>|用於顯示模式。 這可以防止使用者修改記錄或資料欄位的值。 它可以用於任何範本。 這是預設值。|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>|用於編輯模式。 這可讓使用者更新現有記錄的值。 它用於`EditItemTemplate`範本。|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>|用於插入模式。 這可讓使用者輸入新的記錄中的值。 它用於`InsertItemTemplate`範本。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullDisplayText">
      <MemberSignature Language="C#" Value="public string NullDisplayText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullDisplayText" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberSignature Language="VB.NET" Value="Public Property NullDisplayText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NullDisplayText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料欄位值為 <see langword="null" /> 時該欄位所顯示的標題。</summary>
        <value>資料欄位值為 <see langword="null" /> 時該欄位所顯示的標題。 預設為空字串 ("")，表示這個屬性未設定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有時欄位值會儲存為 null 的資料來源中。 您可以指定自訂顯示藉由設定具有 null 值的欄位標題<xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A>屬性。 如果未設定這個屬性，null 的欄位值顯示為空字串 ("")。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">事件資料。</param>
        <summary>引發 <see cref="E:System.Web.UI.Control.Init" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.DynamicData.DynamicControl.OnInit%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">未設定 <see cref="P:System.Web.DynamicData.DynamicControl.DataField" /> 屬性。</exception>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">用來在用戶端的瀏覽器上呈現 <see cref="T:System.Web.DynamicData.DynamicControl" /> 控制項內容的物件。</param>
        <summary>使用指定的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 物件，將 <see cref="T:System.Web.DynamicData.DynamicControl" /> 控制項內容呈現至用戶端的瀏覽器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicControl.Render%2A>方法主要由控制項開發人員用來擴充<xref:System.Web.DynamicData.DynamicControl>控制項。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttribute(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAttribute(System::String ^ key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">要設定的屬性名稱。</param>
        <param name="value">要指派給屬性的值。</param>
        <summary>將指定的屬性設定為指定的值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFieldTemplateHost.FormattingOptions">
      <MemberSignature Language="C#" Value="System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property FormattingOptions As IFieldFormattingOptions Implements IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::DynamicData::IFieldFormattingOptions ^ System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { System::Web::DynamicData::IFieldFormattingOptions ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.IFieldFormattingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如需這個成員的說明，請參閱 <see cref="P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />。</summary>
        <value>要套用至欄位樣板的格式化選項。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public virtual System.Web.DynamicData.MetaTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Table" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Table As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::DynamicData::MetaTable ^ Table { System::Web::DynamicData::MetaTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與控制項相關聯的資料表物件。</summary>
        <value>與控制項相關聯的資料表物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.DynamicData.DynamicControl.Table%2A>屬性來存取中繼資料資訊包含在資料繫結控制項相關聯的資料表相關<xref:System.Web.DynamicData.DynamicControl>控制項。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <see cref="T:System.Web.DynamicData.DynamicControl" /> 控制項是一種在資料繫結控制項內的控制項，它不會繫結至實作 <see cref="T:System.Web.DynamicData.IDynamicDataSource" /> 介面的資料來源控制項。</exception>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Column" />
      </Docs>
    </Member>
    <Member MemberName="UIHint">
      <MemberSignature Language="C#" Value="public virtual string UIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來呈現資料欄位的欄位樣板名稱。</summary>
        <value>用來呈現資料欄位的欄位樣板名稱。 預設為空字串 ("")，表示欄位樣板將會根據資料欄位型別或套用於資料模型的中繼資料資訊來呈現。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.DynamicData.DynamicControl.UIHint%2A>屬性來指定要用來顯示資料欄位的使用者介面的欄位樣板。 預設的欄位樣板是使用者控制項，而且其名稱包含識別欄位的範本，可用於編輯作業和插入作業的後置詞。 尾碼會分別為 （_e） 和 （_i）。 當您將值設<xref:System.Web.DynamicData.DynamicControl.UIHint%2A>屬性，將不含網域的尾碼的名稱。 動態資料會識別正確的模式，藉由評估<xref:System.Web.DynamicData.DynamicControl.Mode%2A>屬性值，並將會呈現正確的欄位樣板。  
  
 如果<xref:System.Web.DynamicData.DynamicControl.UIHint%2A>屬性未設定，根據預設，動態資料會轉譯根據欄位類型的欄位樣板。 如需詳細資訊，請參閱[ASP.NET 動態資料 Scaffolding](http://msdn.microsoft.com/library/e0166a58-9178-4660-81a6-175994b11b12)。  
  
 使用指定的欄位樣板<xref:System.Web.DynamicData.DynamicControl.UIHint%2A>屬性是這個執行個體的特定<xref:System.Web.DynamicData.DynamicControl>控制項。 您也可以變更使用橫跨整個應用程式藉由套用資料欄位的欄位樣板<xref:System.ComponentModel.DataAnnotations.UIHintAttribute>資料模型。 設定<xref:System.Web.DynamicData.DynamicControl.UIHint%2A>屬性會覆寫套用至資料模型的中繼資料。 如需中繼資料屬性的詳細資訊，請參閱[ASP.NET Dynamic Data](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)。  
  
   
  
## Examples  
 請參閱這項功能的執行階段程式碼範例：[執行](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl.UIHint)。  
  
 下列範例會示範如何指定資料欄位，用來呈現其內容的不同欄位樣板。 第二個範例會顯示所指定的自訂欄位樣板<xref:System.Web.DynamicData.DynamicControl.UIHint%2A>屬性。  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Default.aspx#1)]  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Email.ascx#2)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Email.ascx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定控制項的驗證群組名稱。</summary>
        <value>控制項的驗證群組名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 驗證群組可讓您將驗證頁面上的控制項指派給特定的類別。 每個驗證群組可以在頁面上的其他驗證群組從獨立進行驗證。 使用<xref:System.Web.DynamicData.DynamicControl.ValidationGroup%2A>屬性，以指定的驗證群組名稱的<xref:System.Web.DynamicData.DynamicControl>頁面回傳至伺服器時，控制會造成驗證。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>