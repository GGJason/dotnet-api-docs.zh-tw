<Type Name="IXmlJsonWriterInitializer" FullName="System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="43db34bef2bee95ec89e7e7cc8aceb84aab08144" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36533957" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IXmlJsonWriterInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IXmlJsonWriterInitializer" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IXmlJsonWriterInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IXmlJsonWriterInitializer" />
  <TypeSignature Language="F#" Value="type IXmlJsonWriterInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1d36d-101">當重複使用 JavaScript Object Notation (JSON) 寫入器來寫入特定輸出資料流時，指定初始化寫入器所使用的介面。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1d36d-101">Specifies the interface for initializing a JavaScript Object Notation (JSON) writer when reusing them to write to a particular output stream.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d36d-102"><xref:System.Xml.XmlDictionaryWriter> 方法建立的 <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> 物件會實作此介面，並且建立好的時候，隨時可以寫入以 JSON 編碼的資料。</span><span class="sxs-lookup"><span data-stu-id="1d36d-102">The <xref:System.Xml.XmlDictionaryWriter> objects created by the <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> methods implement this interface and when created are immediately ready to write JSON-encoded data.</span></span> <span data-ttu-id="1d36d-103">但是如果使用者要重複使用相同的 <xref:System.Xml.XmlDictionaryWriter> 物件將新的 JSON 文件寫入至其他輸出資料流，就必須使用 <xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29> 方法將寫入器初始化為適當的資料流。</span><span class="sxs-lookup"><span data-stu-id="1d36d-103">But if a user wants to reuse the same <xref:System.Xml.XmlDictionaryWriter> object to write a new JSON document to another output stream, then the writer must be initialized to the appropriate stream by using the <xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29> method.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetOutput">
      <MemberSignature Language="C#" Value="public void SetOutput (System.IO.Stream stream, System.Text.Encoding encoding, bool ownsStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOutput(class System.IO.Stream stream, class System.Text.Encoding encoding, bool ownsStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutput(System::IO::Stream ^ stream, System::Text::Encoding ^ encoding, bool ownsStream);" />
      <MemberSignature Language="F#" Value="abstract member SetOutput : System.IO.Stream * System.Text.Encoding * bool -&gt; unit" Usage="iXmlJsonWriterInitializer.SetOutput (stream, encoding, ownsStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Json</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="ownsStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="1d36d-104">寫入器會將結果寫入至輸出 <see cref="T:System.IO.Stream" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d36d-104">The output <see cref="T:System.IO.Stream" /> to which the writer writes.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="1d36d-105">指定輸出資料流字元編碼的 <see cref="T:System.Text.Encoding" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d36d-105">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding of the output stream.</span>
          </span>
        </param>
        <param name="ownsStream">
          <span data-ttu-id="1d36d-106">若為 <see langword="true" />，則寫入器會在完成時關閉輸出資料流；否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d36d-106">If <see langword="true" />, the output stream is closed by the writer when done; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1d36d-107">將 JavaScript Object Notation (JSON) 寫入器初始化 (或重新初始化) 為具有指定字元編碼的指定輸出資料流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1d36d-107">Initializes (or reinitializes) a JavaScript Object Notation (JSON) writer to a specified output stream with specified character encoding.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d36d-108"><xref:System.Xml.XmlDictionaryWriter> 方法建立的 <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> 物件會實作此介面，並且建立好的時候，隨時可以寫入以 JSON 編碼的資料。</span><span class="sxs-lookup"><span data-stu-id="1d36d-108">The <xref:System.Xml.XmlDictionaryWriter> objects created by the <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A> methods implement this interface and when created are immediately ready to write JSON-encoded data.</span></span> <span data-ttu-id="1d36d-109">但是如果使用者要重複使用相同的 <xref:System.Xml.XmlDictionaryWriter> 物件將新的 JSON 文件寫入至其他輸出資料流，就必須使用 <xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29> 方法將寫入器初始化為適當的資料流。</span><span class="sxs-lookup"><span data-stu-id="1d36d-109">But if a user wants to reuse the same <xref:System.Xml.XmlDictionaryWriter> object to write a new JSON document to another output stream, then the writer must be initialized to the appropriate stream by using the <xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29> method.</span></span>  
  
 <span data-ttu-id="1d36d-110"><xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory> 所建立的寫入器，可以處理 UTF-8 和 UTF-16 (位元組由大到小或由小到大) 編碼。</span><span class="sxs-lookup"><span data-stu-id="1d36d-110">The writers created by <xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory> can handle the UTF-8 and the UTF-16 (big- or little-endian) encodings.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>