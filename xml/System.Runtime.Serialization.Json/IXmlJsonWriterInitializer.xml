<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IXmlJsonWriterInitializer.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5491bc19db12ac297dcca28539fe02d8bb96c46eb.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">491bc19db12ac297dcca28539fe02d8bb96c46eb</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
          <source>Specifies the interface for initializing a JavaScript Object Notation (JSON) writer when reusing them to write to a particular output stream.</source>
          <target state="translated">當重複使用 JavaScript Object Notation (JSON) 寫入器來寫入特定輸出資料流時，指定初始化寫入器所使用的介面。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> objects created by the <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A&gt;</ph> methods implement this interface and when created are immediately ready to write JSON-encoded data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> 方法建立的 <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A&gt;</ph> 物件會實作此介面，並且建立好的時候，隨時可以寫入以 JSON 編碼的資料。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
          <source>But if a user wants to reuse the same <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> object to write a new JSON document to another output stream, then the writer must be initialized to the appropriate stream by using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29&gt;</ph> method.</source>
          <target state="translated">但是如果使用者要重複使用相同的 <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> 物件將新的 JSON 文件寫入至其他輸出資料流，就必須使用 <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29&gt;</ph> 方法將寫入器初始化為適當的資料流。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> to which the writer writes.</source>
          <target state="translated">寫入器會將結果寫入至輸出 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding of the output stream.</source>
          <target state="translated">指定輸出資料流字元編碼的 <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">若為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，則寫入器會在完成時關閉輸出資料流；否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Initializes (or reinitializes) a JavaScript Object Notation (JSON) writer to a specified output stream with specified character encoding.</source>
          <target state="translated">將 JavaScript Object Notation (JSON) 寫入器初始化 (或重新初始化) 為具有指定字元編碼的指定輸出資料流。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> objects created by the <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A&gt;</ph> methods implement this interface and when created are immediately ready to write JSON-encoded data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> 方法建立的 <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A&gt;</ph> 物件會實作此介面，並且建立好的時候，隨時可以寫入以 JSON 編碼的資料。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>But if a user wants to reuse the same <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> object to write a new JSON document to another output stream, then the writer must be initialized to the appropriate stream by using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29&gt;</ph> method.</source>
          <target state="translated">但是如果使用者要重複使用相同的 <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> 物件將新的 JSON 文件寫入至其他輸出資料流，就必須使用 <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput%28System.IO.Stream%2CSystem.Text.Encoding%2CSystem.Boolean%29&gt;</ph> 方法將寫入器初始化為適當的資料流。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The writers created by <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory&gt;</ph> can handle the UTF-8 and the UTF-16 (big- or little-endian) encodings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory&gt;</ph> 所建立的寫入器，可以處理 UTF-8 和 UTF-16 (位元組由大到小或由小到大) 編碼。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>