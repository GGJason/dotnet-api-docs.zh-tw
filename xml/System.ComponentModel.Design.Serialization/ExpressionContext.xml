<Type Name="ExpressionContext" FullName="System.ComponentModel.Design.Serialization.ExpressionContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7f21c8d79188df3ecb9df91effbfa1a48e870be7" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39841834" /></Metadata><TypeSignature Language="C#" Value="public sealed class ExpressionContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExpressionContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.ExpressionContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExpressionContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionContext sealed" />
  <TypeSignature Language="F#" Value="type ExpressionContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1fc99-101">提供在序列化程式之間傳遞內容狀態的方法。</span><span class="sxs-lookup"><span data-stu-id="1fc99-101">Provides a means of passing context state among serializers.</span></span> <span data-ttu-id="1fc99-102">這個類別無法被繼承。</span><span class="sxs-lookup"><span data-stu-id="1fc99-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fc99-103"><xref:System.ComponentModel.Design.Serialization.ExpressionContext>放置內容堆疊上，並包含在序列化期間的最相關的運算式。</span><span class="sxs-lookup"><span data-stu-id="1fc99-103">An <xref:System.ComponentModel.Design.Serialization.ExpressionContext> is placed on the context stack and contains the most relevant expression during serialization.</span></span> <span data-ttu-id="1fc99-104">下列 C# 程式碼示範指派。</span><span class="sxs-lookup"><span data-stu-id="1fc99-104">The following C# code demonstrates an assignment.</span></span>  
  
```csharp  
button1.Text = "Hello";  
```  
  
 <span data-ttu-id="1fc99-105">在序列化期間，數個序列化程式會負責建立此單一陳述式。</span><span class="sxs-lookup"><span data-stu-id="1fc99-105">During serialization, several serializers are responsible for creating this single statement.</span></span> <span data-ttu-id="1fc99-106">其中一個這些序列化程式會負責建立"Hello"。</span><span class="sxs-lookup"><span data-stu-id="1fc99-106">One of those serializers is responsible for creating "Hello".</span></span> <span data-ttu-id="1fc99-107">有些的時候，當序列化程式可能需要知道它在其中建立其運算式的內容。</span><span class="sxs-lookup"><span data-stu-id="1fc99-107">There are times when that serializer may need to know the context in which it is creating its expression.</span></span> <span data-ttu-id="1fc99-108">在上述範例中，就不需要此內容。</span><span class="sxs-lookup"><span data-stu-id="1fc99-108">In the previous example, this context is not needed.</span></span> <span data-ttu-id="1fc99-109">下列 C# 程式碼會顯示在其內容的知識是必要的情況。</span><span class="sxs-lookup"><span data-stu-id="1fc99-109">The following C# code shows a situation in which knowledge of the context is necessary.</span></span>  
  
```csharp  
button1.Text = rm.GetString("button1_Text");  
```  
  
 <span data-ttu-id="1fc99-110">在此情況下，負責建立的資源運算式的序列化程式必須以確實掌握的目標物件的名稱。</span><span class="sxs-lookup"><span data-stu-id="1fc99-110">In this case, the serializer responsible for creating the resource expression needs to be informed of the names of the target objects.</span></span> <span data-ttu-id="1fc99-111"><xref:System.ComponentModel.Design.Serialization.ExpressionContext>類別可用於此。</span><span class="sxs-lookup"><span data-stu-id="1fc99-111">The <xref:System.ComponentModel.Design.Serialization.ExpressionContext> class can be used for this.</span></span> <span data-ttu-id="1fc99-112">當每個序列化程式會建立一個運算式，並叫用來處理整個陳述式的一小部分的序列化程式，序列化程式會將運算式內容推送內容堆疊上。</span><span class="sxs-lookup"><span data-stu-id="1fc99-112">As each serializer creates an expression and invokes a serializer to handle a smaller part of the statement as a whole, the serializer pushes an expression context on the context stack.</span></span> <span data-ttu-id="1fc99-113">每個運算式的內容會有一個在堆疊尋找下一個運算式內容的父屬性。</span><span class="sxs-lookup"><span data-stu-id="1fc99-113">Each expression context has a parent property that locates the next expression context on the stack.</span></span> <span data-ttu-id="1fc99-114">這會提供便利的走訪功能。</span><span class="sxs-lookup"><span data-stu-id="1fc99-114">This provides a convenient traversal capability.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.CodeDom.CodeExpression" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1fc99-115">初始化 <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="1fc99-115">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As CodeExpression, expressionType As Type, owner As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionContext(System::CodeDom::CodeExpression ^ expression, Type ^ expressionType, System::Object ^ owner);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.Serialization.ExpressionContext : System.CodeDom.CodeExpression * Type * obj -&gt; System.ComponentModel.Design.Serialization.ExpressionContext" Usage="new System.ComponentModel.Design.Serialization.ExpressionContext (expression, expressionType, owner)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="1fc99-116">指定的程式碼運算式。</span><span class="sxs-lookup"><span data-stu-id="1fc99-116">The given code expression.</span></span></param>
        <param name="expressionType"><span data-ttu-id="1fc99-117">指定的程式碼運算式類型。</span><span class="sxs-lookup"><span data-stu-id="1fc99-117">The given code expression type.</span></span></param>
        <param name="owner"><span data-ttu-id="1fc99-118">指定的程式碼運算式擁有者。</span><span class="sxs-lookup"><span data-stu-id="1fc99-118">The given code expression owner.</span></span></param>
        <summary><span data-ttu-id="1fc99-119">使用指定的運算式與擁有者，將新的 <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> 執行個體初始化。</span><span class="sxs-lookup"><span data-stu-id="1fc99-119">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> class with the given expression and owner.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1fc99-120"><paramref name="expression" /><paramref name="expressionType" /> 或 <paramref name="owner" /> 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1fc99-120"><paramref name="expression" />, <paramref name="expressionType" />, or <paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner, object presetValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner, object presetValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As CodeExpression, expressionType As Type, owner As Object, presetValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionContext(System::CodeDom::CodeExpression ^ expression, Type ^ expressionType, System::Object ^ owner, System::Object ^ presetValue);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.Serialization.ExpressionContext : System.CodeDom.CodeExpression * Type * obj * obj -&gt; System.ComponentModel.Design.Serialization.ExpressionContext" Usage="new System.ComponentModel.Design.Serialization.ExpressionContext (expression, expressionType, owner, presetValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
        <Parameter Name="presetValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="1fc99-121">指定的程式碼運算式。</span><span class="sxs-lookup"><span data-stu-id="1fc99-121">The given code expression.</span></span></param>
        <param name="expressionType"><span data-ttu-id="1fc99-122">指定的程式碼運算式類型。</span><span class="sxs-lookup"><span data-stu-id="1fc99-122">The given code expression type.</span></span></param>
        <param name="owner"><span data-ttu-id="1fc99-123">指定的程式碼運算式擁有者。</span><span class="sxs-lookup"><span data-stu-id="1fc99-123">The given code expression owner.</span></span></param>
        <param name="presetValue"><span data-ttu-id="1fc99-124">指定的程式碼運算式預設值。</span><span class="sxs-lookup"><span data-stu-id="1fc99-124">The given code expression preset value.</span></span></param>
        <summary><span data-ttu-id="1fc99-125">使用現有值，將 <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> 類別的新執行個體初始化。</span><span class="sxs-lookup"><span data-stu-id="1fc99-125">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> class with a current value.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1fc99-126"><paramref name="expression" /><paramref name="expressionType" /> 或 <paramref name="owner" /> 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1fc99-126"><paramref name="expression" />, <paramref name="expressionType" />, or <paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Expression" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Expression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Expression As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ Expression { System::CodeDom::CodeExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Expression : System.CodeDom.CodeExpression" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1fc99-127">取得這個內容表示的運算式。</span><span class="sxs-lookup"><span data-stu-id="1fc99-127">Gets the expression this context represents.</span></span></summary>
        <value><span data-ttu-id="1fc99-128">這個內容表示的運算式。</span><span class="sxs-lookup"><span data-stu-id="1fc99-128">The expression this context represents.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionType">
      <MemberSignature Language="C#" Value="public Type ExpressionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ExpressionType" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ExpressionType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionType : Type" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1fc99-129">取得運算式的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="1fc99-129">Gets the <see cref="T:System.Type" /> of the expression.</span></span></summary>
        <value><span data-ttu-id="1fc99-130">運算式的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="1fc99-130">The <see cref="T:System.Type" /> of the expression.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fc99-131">您可以使用<xref:System.ComponentModel.Design.Serialization.ExpressionContext>來判斷指派給運算式時，是否需要轉換。</span><span class="sxs-lookup"><span data-stu-id="1fc99-131">You can use <xref:System.ComponentModel.Design.Serialization.ExpressionContext> to determine if a cast is needed when assigning to the expression.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public object Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Owner { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : obj" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1fc99-132">取得擁有這個運算式的物件。</span><span class="sxs-lookup"><span data-stu-id="1fc99-132">Gets the object owning this expression.</span></span></summary>
        <value><span data-ttu-id="1fc99-133">擁有這個運算式的物件。</span><span class="sxs-lookup"><span data-stu-id="1fc99-133">The object owning this expression.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fc99-134">如果運算式的屬性參考<xref:System.Windows.Forms.Control.Text%2A>執行個體的屬性<xref:System.Windows.Forms.Button>稱為`button1`，<xref:System.ComponentModel.Design.Serialization.ExpressionContext.Owner%2A>傳回`button1`。</span><span class="sxs-lookup"><span data-stu-id="1fc99-134">If the expression is a property reference to the <xref:System.Windows.Forms.Control.Text%2A> property of an instance of <xref:System.Windows.Forms.Button> called `button1`, <xref:System.ComponentModel.Design.Serialization.ExpressionContext.Owner%2A> returns `button1`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="PresetValue">
      <MemberSignature Language="C#" Value="public object PresetValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PresetValue" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PresetValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ PresetValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PresetValue : obj" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1fc99-135">取得運算式的預設值。</span><span class="sxs-lookup"><span data-stu-id="1fc99-135">Gets the preset value of an expression.</span></span></summary>
        <value><span data-ttu-id="1fc99-136">這個運算式的預設值，或 <see langword="null" /> (如果未指派)。</span><span class="sxs-lookup"><span data-stu-id="1fc99-136">The preset value of this expression, or <see langword="null" /> if not assigned.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fc99-137">包含其中一個應該存在運算式，預設的的值。</span><span class="sxs-lookup"><span data-stu-id="1fc99-137">Contains the preset value of an expression, should one exist.</span></span> <span data-ttu-id="1fc99-138">例如，如果運算式是指的是屬性參考運算式<xref:System.Windows.Forms.Control.Controls%2A>的屬性<xref:System.Windows.Forms.Button>，則<xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A>屬性包含的執行個體<xref:System.Windows.Forms.Control.Controls%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="1fc99-138">For example, if the expression is a property reference expression referring to the <xref:System.Windows.Forms.Control.Controls%2A> property of a <xref:System.Windows.Forms.Button>, the <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> property contains the instance of the <xref:System.Windows.Forms.Control.Controls%2A> property.</span></span> <span data-ttu-id="1fc99-139">這是因為屬性是唯讀，而且預設所要包含值的物件。</span><span class="sxs-lookup"><span data-stu-id="1fc99-139">This is because the property is read-only and preset by the object to contain a value.</span></span> <span data-ttu-id="1fc99-140">另一方面，這類屬性<xref:System.Windows.Forms.Control.Text%2A>或是<xref:System.Windows.Forms.Control.Visible%2A>沒有預設的值，因此<xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A>屬性會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="1fc99-140">On the other hand, a property such as <xref:System.Windows.Forms.Control.Text%2A> or <xref:System.Windows.Forms.Control.Visible%2A> does not have a preset value and therefore the <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> property returns `null`.</span></span>  
  
 <span data-ttu-id="1fc99-141">下列 C# 程式碼示範如何序列化程式可以使用此資訊來引導序列化。</span><span class="sxs-lookup"><span data-stu-id="1fc99-141">The following C# code shows how serializers can use this information to guide serialization.</span></span>  
  
```csharp  
Padding p = new Padding();  
p.Left = 5;  
button1.Padding = p;  
  
button1.Padding.Left = 5;  
```  
  
 <span data-ttu-id="1fc99-142">序列化程式<xref:System.Windows.Forms.Padding>結構需要收到通知，如果它應該產生第一個或第二個表單。</span><span class="sxs-lookup"><span data-stu-id="1fc99-142">The serializer of the <xref:System.Windows.Forms.Padding> structure needs to be informed if it should generate the first or second form.</span></span> <span data-ttu-id="1fc99-143">預設會產生第一種形式。</span><span class="sxs-lookup"><span data-stu-id="1fc99-143">The first form is generated by default.</span></span> <span data-ttu-id="1fc99-144">如果沒有，才會產生第二種形式<xref:System.ComponentModel.Design.Serialization.ExpressionContext>上包含的內容堆疊<xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A>的值等於<xref:System.Windows.Forms.Padding>目前序列化。</span><span class="sxs-lookup"><span data-stu-id="1fc99-144">The second form is only generated if there is an <xref:System.ComponentModel.Design.Serialization.ExpressionContext> on the context stack that contains a <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> equal to the value of the <xref:System.Windows.Forms.Padding> currently being serialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>