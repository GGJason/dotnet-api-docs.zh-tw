<Type Name="DesignerSerializationManager" FullName="System.ComponentModel.Design.Serialization.DesignerSerializationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d25755190c3410b70176ce9e68fb7096b9117195" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39773810" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DesignerSerializationManager : IServiceProvider, System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignerSerializationManager extends System.Object implements class System.ComponentModel.Design.Serialization.IDesignerSerializationManager, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class DesignerSerializationManager&#xA;Implements IDesignerSerializationManager, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignerSerializationManager : IServiceProvider, System::ComponentModel::Design::Serialization::IDesignerSerializationManager" />
  <TypeSignature Language="F#" Value="type DesignerSerializationManager = class&#xA;    interface IDesignerSerializationManager&#xA;    interface IServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.Serialization.IDesignerSerializationManager</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="688ca-101">提供 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 介面的實作。</span>
      <span class="sxs-lookup">
        <span data-stu-id="688ca-101">Provides an implementation of the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> interface.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-102"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>介面設計為的物件可控制序列化的格式不受影響介面。</span><span class="sxs-lookup"><span data-stu-id="688ca-102">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> interface is designed to be a format-independent interface to an object that controls serialization.</span></span> <span data-ttu-id="688ca-103">它基本上會提供內容和服務給序列化程式，實際執行的還原序列化。</span><span class="sxs-lookup"><span data-stu-id="688ca-103">It essentially provides context and services to serializers, which actually perform the deserialization.</span></span> <span data-ttu-id="688ca-104"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> 藉由追蹤的物件，以協助在還原序列化程序。</span><span class="sxs-lookup"><span data-stu-id="688ca-104"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> assists in the deserialization process by keeping track of objects.</span></span> <span data-ttu-id="688ca-105">這是類似的技巧<xref:System.ComponentModel.Design.IDesignerHost>介面： 設計工具會實際提供使用者介面 (UI)，和<xref:System.ComponentModel.Design.IDesignerHost>提供可讓不同的設計工具，可共同運作不可或缺的利器。</span><span class="sxs-lookup"><span data-stu-id="688ca-105">This is similar in technique to the <xref:System.ComponentModel.Design.IDesignerHost> interface: designers actually provide the user interface (UI), and <xref:System.ComponentModel.Design.IDesignerHost> provides the glue that allows different designers to work together.</span></span>  
  
 <span data-ttu-id="688ca-106"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> 類別會實作 <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>。</span><span class="sxs-lookup"><span data-stu-id="688ca-106">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> class implements <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>.</span></span> <span data-ttu-id="688ca-107">它旨在提供類似於執行階段序列化程式，例如的還原序列化的一般表單<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>。</span><span class="sxs-lookup"><span data-stu-id="688ca-107">It is designed to provide a generic form of deserialization that is similar to run-time serializers like the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.</span></span>  
  
 <span data-ttu-id="688ca-108"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager>類別達成三個目標：</span><span class="sxs-lookup"><span data-stu-id="688ca-108">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> class achieves three goals:</span></span>  
  
-   <span data-ttu-id="688ca-109">它是簡單的周全的物件，可用來還原序列化的各種不同的格式。</span><span class="sxs-lookup"><span data-stu-id="688ca-109">It is a simple, turnkey object that can be used to deserialize a variety of formats.</span></span>  
  
-   <span data-ttu-id="688ca-110">它是泛型且未繫結至任何特定的格式。</span><span class="sxs-lookup"><span data-stu-id="688ca-110">It is generic and not tied to any particular format.</span></span> <span data-ttu-id="688ca-111">它可以用於同樣 CodeDOM 還原序列化，以及標記還原序列化。</span><span class="sxs-lookup"><span data-stu-id="688ca-111">It can be used equally for CodeDOM deserialization as well as markup deserialization.</span></span>  
  
-   <span data-ttu-id="688ca-112">它是可延伸，並且支援複製/貼上和復原/取消復原案例，使用不同的序列化方法。</span><span class="sxs-lookup"><span data-stu-id="688ca-112">It is extensible and supports different serialization methods that are used in copy/paste and undo/redo scenarios.</span></span>  
  
 <span data-ttu-id="688ca-113">設計階段序列化具有從執行階段物件序列化的下列差異：</span><span class="sxs-lookup"><span data-stu-id="688ca-113">Design-time serialization has the following differences from run-time object serialization:</span></span>  
  
-   <span data-ttu-id="688ca-114">執行序列化的物件是通常不同於執行階段物件，因此可以移除設計階段邏輯，從元件。</span><span class="sxs-lookup"><span data-stu-id="688ca-114">The object performing the serialization is generally separate from the run-time object, so that design-time logic can be removed from a component.</span></span>  
  
-   <span data-ttu-id="688ca-115">序列化配置假設會建立完全初始化的物件，然後在還原序列化期間，以修改透過屬性和方法引動過程。</span><span class="sxs-lookup"><span data-stu-id="688ca-115">The serialization scheme assumes the object will be created fully initialized, and then modified through property and method invocations during deserialization.</span></span>  
  
-   <span data-ttu-id="688ca-116">不會序列化物件的屬性具有永遠不會 （的屬性會包含預設值） 的物件設定的值。</span><span class="sxs-lookup"><span data-stu-id="688ca-116">Properties of an object that have values that were never set on the object (the properties contain the default values) are not serialized.</span></span> <span data-ttu-id="688ca-117">相反地，還原序列化資料流可能有漏洞。</span><span class="sxs-lookup"><span data-stu-id="688ca-117">Conversely, the deserialization stream may have holes.</span></span>  
  
-   <span data-ttu-id="688ca-118">強調的重點是在序列化資料流，而不是完整的還原序列化的物件內容的品質。</span><span class="sxs-lookup"><span data-stu-id="688ca-118">Emphasis is placed on the quality of the content within the serialization stream, rather than the full serialization of an object.</span></span> <span data-ttu-id="688ca-119">這表示，如果沒有任何已定義的方法，可序列化物件，該物件可能會略過而不是擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="688ca-119">This means that if there is no defined way to serialize an object, that object may be skipped rather than throwing an exception.</span></span> <span data-ttu-id="688ca-120">序列化引擎可能會提供以下啟發式決定可以忽略哪些失敗，以及哪些是無法復原。</span><span class="sxs-lookup"><span data-stu-id="688ca-120">The serialization engine may provide heuristics here to decide which failures can be ignored and which are unrecoverable.</span></span>  
  
-   <span data-ttu-id="688ca-121">序列化資料流可能超過所需的還原序列化的資料。</span><span class="sxs-lookup"><span data-stu-id="688ca-121">The serialization stream may have more data than is needed for deserialization.</span></span> <span data-ttu-id="688ca-122">原始程式碼序列化，比方說，有混合使用還原序列化物件圖形所需的程式碼的使用者程式碼。</span><span class="sxs-lookup"><span data-stu-id="688ca-122">Source code serialization, for example, has user code mixed in with the code needed to deserialize an object graph.</span></span> <span data-ttu-id="688ca-123">此使用者程式碼必須在還原序列化時忽略，並在序列化保留。</span><span class="sxs-lookup"><span data-stu-id="688ca-123">This user code must be ignored on deserialization and preserved on serialization.</span></span>  
  
 <span data-ttu-id="688ca-124">這些差異，因為不同的序列化模型適用於設計階段序列化。</span><span class="sxs-lookup"><span data-stu-id="688ca-124">Because of these differences, a different serialization model applies to design-time serialization.</span></span> <span data-ttu-id="688ca-125">此模型會利用每個要序列化的資料類型的另一個序列化程式物件。</span><span class="sxs-lookup"><span data-stu-id="688ca-125">This model utilizes a separate serializer object for each data type being serialized.</span></span> <span data-ttu-id="688ca-126">每個序列化程式提供整體小型著作的問題。</span><span class="sxs-lookup"><span data-stu-id="688ca-126">Each serializer provides its small contribution to the problem as a whole.</span></span> <span data-ttu-id="688ca-127">這些序列化程式是透過通用的序列化管理員協調。</span><span class="sxs-lookup"><span data-stu-id="688ca-127">These serializers are all coordinated through a common serialization manager.</span></span> <span data-ttu-id="688ca-128">序列化管理員負責維護這些不同的序列化程式之間的狀態。</span><span class="sxs-lookup"><span data-stu-id="688ca-128">The serialization manager is responsible for maintaining state between these different serializers.</span></span> <span data-ttu-id="688ca-129">例如，請考慮下列類別：</span><span class="sxs-lookup"><span data-stu-id="688ca-129">As an example, consider the following class:</span></span>  
  
 [!code-csharp[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/CS/Program.cs#2)]
 [!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/VB/Program.vb#2)]  
  
 <span data-ttu-id="688ca-130">此類別的執行個體，會利用三個不同的序列化程式： 一個用於`SampleObject`，一個針對字串，而另一個整數。</span><span class="sxs-lookup"><span data-stu-id="688ca-130">An instance of this class would utilize three different serializers: one for `SampleObject`, one for strings, and another for integers.</span></span> <span data-ttu-id="688ca-131">序列化程式`SampleObject`稱為根序列化工具，因為`SampleObject`是序列化圖形的根目錄。</span><span class="sxs-lookup"><span data-stu-id="688ca-131">The serializer for `SampleObject` is called the root serializer because `SampleObject` is the root of the serialization graph.</span></span> <span data-ttu-id="688ca-132">也可以建立更複雜的物件圖形。</span><span class="sxs-lookup"><span data-stu-id="688ca-132">More complex object graphs can be created as well.</span></span> <span data-ttu-id="688ca-133">例如，請考慮會發生什麼事如果`SampleObject`已變更，如下所示：</span><span class="sxs-lookup"><span data-stu-id="688ca-133">For example, consider what would happen if `SampleObject` were changed as follows:</span></span>  
  
 [!code-csharp[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/CS/SampleObject.cs#11)]
 [!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/VB/SampleObject.vb#11)]  
  
 <span data-ttu-id="688ca-134">這可讓`SampleObject`有本身的另一個執行個體的子系。</span><span class="sxs-lookup"><span data-stu-id="688ca-134">This allows `SampleObject` to have a child that is another instance of itself.</span></span> <span data-ttu-id="688ca-135">下列程式碼會填入物件圖形中：</span><span class="sxs-lookup"><span data-stu-id="688ca-135">The following code fills in the object graph:</span></span>  
  
 [!code-csharp[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/CS/SampleObject.cs#12)]
 [!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject/VB/SampleObject.vb#12)]  
  
 <span data-ttu-id="688ca-136">當`root`序列化時，會有四個序列化程式，用於： 一個根序列化程式、 一個序列化程式子系`SampleObject`，一個序列化程式`int`，和一個序列化程式`string`。</span><span class="sxs-lookup"><span data-stu-id="688ca-136">When `root` is serialized, there will be four serializers used: one root serializer, one serializer for the child `SampleObject`, one serializer for `int`, and one serializer for `string`.</span></span> <span data-ttu-id="688ca-137">序列化程式會快取，取決於型別，所以不需要建立的序列化程式的每個執行個體`SampleObject`。</span><span class="sxs-lookup"><span data-stu-id="688ca-137">Serializers are cached based on type, so there is no need to create a serializer for each instance of `SampleObject`.</span></span>  
  
 <span data-ttu-id="688ca-138"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager>類別以序列化工作階段的概念為基礎。</span><span class="sxs-lookup"><span data-stu-id="688ca-138">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> class is based on the idea of a serialization session.</span></span> <span data-ttu-id="688ca-139">工作階段會維護不同的序列化程式可以存取的狀態。</span><span class="sxs-lookup"><span data-stu-id="688ca-139">A session maintains state that can be accessed by the various serializers.</span></span> <span data-ttu-id="688ca-140">處置工作階段時，就會終結此狀態。</span><span class="sxs-lookup"><span data-stu-id="688ca-140">When a session is disposed, this state is destroyed.</span></span> <span data-ttu-id="688ca-141">如此可確保序列化程式保持主要是無狀態，並協助序列化程式會清除已損毀。</span><span class="sxs-lookup"><span data-stu-id="688ca-141">This helps to ensure that serializers remain largely stateless, and helps to clean up serializers that are have been corrupted.</span></span> <span data-ttu-id="688ca-142">下表描述中，並在工作階段管理狀態的方式。</span><span class="sxs-lookup"><span data-stu-id="688ca-142">The following tables describe how state is managed in and among sessions.</span></span>  
  
## <a name="global-state"></a><span data-ttu-id="688ca-143">全域狀態</span><span class="sxs-lookup"><span data-stu-id="688ca-143">Global State</span></span>  
 <span data-ttu-id="688ca-144">此狀態是物件所擁有的序列化管理員，但獨立於目前的序列化工作階段。</span><span class="sxs-lookup"><span data-stu-id="688ca-144">This state is owned by the serialization manager object, but is independent of the current serialization session.</span></span>  
  
|<span data-ttu-id="688ca-145">Object</span><span class="sxs-lookup"><span data-stu-id="688ca-145">Object</span></span>|<span data-ttu-id="688ca-146">使用量</span><span class="sxs-lookup"><span data-stu-id="688ca-146">Usage</span></span>|  
|------------|-----------|  
|<span data-ttu-id="688ca-147">序列化提供者</span><span class="sxs-lookup"><span data-stu-id="688ca-147">Serialization providers</span></span>|<span data-ttu-id="688ca-148">物件可以新增自己自訂的序列化提供者。</span><span class="sxs-lookup"><span data-stu-id="688ca-148">Objects can add themselves as custom serialization providers.</span></span> <span data-ttu-id="688ca-149">因為這些提供者用來找出序列化程式，它們必須有存在的序列化工作階段。</span><span class="sxs-lookup"><span data-stu-id="688ca-149">Because these providers are used to locate serializers, they outlive a serialization session.</span></span>|  
  
## <a name="session-owned-state"></a><span data-ttu-id="688ca-150">工作階段所擁有的狀態</span><span class="sxs-lookup"><span data-stu-id="688ca-150">Session-Owned State</span></span>  
 <span data-ttu-id="688ca-151">此狀態由工作階段所擁有，也會終結時終結的工作階段。</span><span class="sxs-lookup"><span data-stu-id="688ca-151">This state is owned by a session and is destroyed when a session is destroyed.</span></span> <span data-ttu-id="688ca-152">因此，存取任何屬性或方法，可操作這個狀態會擲回例外狀況的序列化管理員不在作用中工作階段。</span><span class="sxs-lookup"><span data-stu-id="688ca-152">Consequently, accessing any properties or methods that would manipulate this state will throw an exception if the serialization manager is not in an active session.</span></span>  
  
|<span data-ttu-id="688ca-153">Object</span><span class="sxs-lookup"><span data-stu-id="688ca-153">Object</span></span>|<span data-ttu-id="688ca-154">使用量</span><span class="sxs-lookup"><span data-stu-id="688ca-154">Usage</span></span>|  
|------------|-----------|  
|<span data-ttu-id="688ca-155"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> 事件</span><span class="sxs-lookup"><span data-stu-id="688ca-155"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> event</span></span>|<span data-ttu-id="688ca-156"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName>由序列化程式提供額外的解析的名稱會在附加事件。</span><span class="sxs-lookup"><span data-stu-id="688ca-156">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> event is attached by a serializer to provide additional resolution of names.</span></span> <span data-ttu-id="688ca-157">所有的處理常式會從此事件工作階段終止時中斷連結。</span><span class="sxs-lookup"><span data-stu-id="688ca-157">All handlers are detached from this event when a session terminates.</span></span>|  
|<span data-ttu-id="688ca-158"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> 事件</span><span class="sxs-lookup"><span data-stu-id="688ca-158"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event</span></span>|<span data-ttu-id="688ca-159"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete>之前處置工作階段時，會引發事件。</span><span class="sxs-lookup"><span data-stu-id="688ca-159">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event is raised just before a session is disposed.</span></span> <span data-ttu-id="688ca-160">然後，所有處理常式會中斷此事件。</span><span class="sxs-lookup"><span data-stu-id="688ca-160">Then, all handlers are detached from this event.</span></span>|  
|<span data-ttu-id="688ca-161">名稱表格</span><span class="sxs-lookup"><span data-stu-id="688ca-161">Name table</span></span>|<span data-ttu-id="688ca-162">序列化管理員會維護物件和其名稱之間進行對應的資料表。</span><span class="sxs-lookup"><span data-stu-id="688ca-162">The serialization manager maintains a table that maps between objects and their names.</span></span> <span data-ttu-id="688ca-163">序列化程式會提供易於識別的物件名稱。</span><span class="sxs-lookup"><span data-stu-id="688ca-163">Serializers may give objects names for easy identification.</span></span> <span data-ttu-id="688ca-164">工作階段結束時，會清除此名稱的資料表。</span><span class="sxs-lookup"><span data-stu-id="688ca-164">This name table is cleared when the session terminates.</span></span>|  
|<span data-ttu-id="688ca-165">序列化程式快取</span><span class="sxs-lookup"><span data-stu-id="688ca-165">Serializer cache</span></span>|<span data-ttu-id="688ca-166">序列化管理員會維護快取的要求提供的序列化程式。</span><span class="sxs-lookup"><span data-stu-id="688ca-166">The serialization manager maintains a cache of serializers it has been asked to supply.</span></span> <span data-ttu-id="688ca-167">工作階段結束時，會清除此快取。</span><span class="sxs-lookup"><span data-stu-id="688ca-167">This cache is cleared when the session terminates.</span></span> <span data-ttu-id="688ca-168">公用<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A>隨時都可以安全地呼叫方法，但只有當它在工作階段內呼叫，會快取其值。</span><span class="sxs-lookup"><span data-stu-id="688ca-168">The public <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A> method can safely be called at any time, but its value is cached only if it is called from within a session.</span></span>|  
|<span data-ttu-id="688ca-169">內容堆疊</span><span class="sxs-lookup"><span data-stu-id="688ca-169">Context stack</span></span>|<span data-ttu-id="688ca-170">序列化管理員會維護物件呼叫內容堆疊，您可以存取與<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="688ca-170">The serialization manager maintains an object called the context stack, which you can access with the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A> property.</span></span> <span data-ttu-id="688ca-171">序列化程式可以使用這個堆疊，來儲存所使用的其他序列化程式的其他資訊。</span><span class="sxs-lookup"><span data-stu-id="688ca-171">Serializers can use this stack to store additional information that is available to other serializers.</span></span> <span data-ttu-id="688ca-172">比方說，正在序列化的屬性值序列化程式可以將屬性名稱推送序列化堆疊上，再要求要序列化的值。</span><span class="sxs-lookup"><span data-stu-id="688ca-172">For example, a serializer that is serializing a property value can push the property name on the serialization stack before asking the value to serialize.</span></span> <span data-ttu-id="688ca-173">當工作階段結束時，會清除這個堆疊。</span><span class="sxs-lookup"><span data-stu-id="688ca-173">This stack is cleared when the session is terminated.</span></span>|  
|<span data-ttu-id="688ca-174">錯誤清單</span><span class="sxs-lookup"><span data-stu-id="688ca-174">Error list</span></span>|<span data-ttu-id="688ca-175">序列化管理員會維護一份在序列化期間發生的錯誤。</span><span class="sxs-lookup"><span data-stu-id="688ca-175">The serialization manager maintains a list of errors that occurred during serialization.</span></span> <span data-ttu-id="688ca-176">這份清單透過存取<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A>屬性，當工作階段結束時清除。</span><span class="sxs-lookup"><span data-stu-id="688ca-176">This list, which is accessed through the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> property, is cleared when the session is terminated.</span></span> <span data-ttu-id="688ca-177">存取<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A>工作階段之間的屬性會導致例外狀況。</span><span class="sxs-lookup"><span data-stu-id="688ca-177">Accessing the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> property between sessions will result in an exception.</span></span>|  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.ContextStack" />
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="688ca-178">初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-178">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerSerializationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerSerializationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="688ca-179">初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-179">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-180">這個建構函式設定<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>並<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>屬性，以`true`。</span><span class="sxs-lookup"><span data-stu-id="688ca-180">This constructor sets the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> and <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> properties to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerSerializationManager (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (provider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerSerializationManager(IServiceProvider ^ provider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.Serialization.DesignerSerializationManager : IServiceProvider -&gt; System.ComponentModel.Design.Serialization.DesignerSerializationManager" Usage="new System.ComponentModel.Design.Serialization.DesignerSerializationManager provider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="688ca-181">
            <see cref="T:System.IServiceProvider" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-181">An <see cref="T:System.IServiceProvider" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-182">使用指定的服務提供者，初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-182">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> class with the given service provider.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-183">如果序列化程式會要求無法滿足的序列化管理員的服務，預設實作將這些要求轉送到`provider`參數。</span><span class="sxs-lookup"><span data-stu-id="688ca-183">If a serializer requests services that cannot be satisfied by the serialization manager, the default implementation will forward those requests to the `provider` parameter.</span></span>  
  
 <span data-ttu-id="688ca-184">這個建構函式設定<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>並<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>屬性，以`true`。</span><span class="sxs-lookup"><span data-stu-id="688ca-184">This constructor sets the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> and <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> properties to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="688ca-185">
            <paramref name="provider" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-185">
              <paramref name="provider" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IServiceProvider" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName="Container">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IContainer Container { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IContainer Container" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container" />
      <MemberSignature Language="VB.NET" Value="Public Property Container As IContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IContainer ^ Container { System::ComponentModel::IContainer ^ get(); void set(System::ComponentModel::IContainer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Container : System.ComponentModel.IContainer with get, set" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="688ca-186">取得或設定這個序列化管理員的容器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-186">Gets or sets to the container for this serialization manager.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="688ca-187">序列化管理員要加入元件的 <see cref="T:System.ComponentModel.IContainer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-187">The <see cref="T:System.ComponentModel.IContainer" /> to which the serialization manager will add components.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-188">如果容器存在時，所建立的序列化管理員的所有元件會都新增至容器。</span><span class="sxs-lookup"><span data-stu-id="688ca-188">If a container exists, all components that are created by the serialization manager will be added to the container.</span></span> <span data-ttu-id="688ca-189">這個屬性的預設實作會搜尋的服務提供者<xref:System.ComponentModel.Design.IDesignerHost>而且使用設計工具主應用程式所提供的容器時，應該是存在。</span><span class="sxs-lookup"><span data-stu-id="688ca-189">The default implementation of this property will search the service provider for an <xref:System.ComponentModel.Design.IDesignerHost> and use the container provided by the designer host, should one exist.</span></span> <span data-ttu-id="688ca-190">否則，這個屬性會傳回`null`並沒有任何元件會新增至容器。</span><span class="sxs-lookup"><span data-stu-id="688ca-190">Otherwise, this property will return `null` and no components will be added to a container.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-191">序列化管理員具有使用中的序列化工作階段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-191">The serialization manager has an active serialization session.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected virtual object CreateInstance (Type type, System.Collections.ICollection arguments, string name, bool addToContainer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object CreateInstance(class System.Type type, class System.Collections.ICollection arguments, string name, bool addToContainer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ CreateInstance(Type ^ type, System::Collections::ICollection ^ arguments, System::String ^ name, bool addToContainer);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : Type * System.Collections.ICollection * string * bool -&gt; obj&#xA;override this.CreateInstance : Type * System.Collections.ICollection * string * bool -&gt; obj" Usage="designerSerializationManager.CreateInstance (type, arguments, name, addToContainer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.ICollection" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="addToContainer" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="688ca-192">要建立其執行個體的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-192">The type to create an instance of.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="688ca-193">型別之建構函式的參數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-193">The parameters of the type’s constructor.</span>
          </span>
          <span data-ttu-id="688ca-194">可以是 <see langword="null" />，或是一個空集合以叫用預設的建構函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-194">This can be <see langword="null" /> or an empty collection to invoke the default constructor.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="688ca-195">提供給物件的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-195">A name to give the object.</span>
          </span>
          <span data-ttu-id="688ca-196">如果為 <see langword="null" />，則不會為物件提供名稱，除非已將物件加入容器且容器提供了物件名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-196">If <see langword="null" />, the object will not be given a name, unless the object is added to a container and the container gives the object a name.</span>
          </span>
        </param>
        <param name="addToContainer">
          <span data-ttu-id="688ca-197">
            <see langword="true" /> 表示物件實作 <see cref="T:System.ComponentModel.IComponent" /> 時將物件加入容器，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-197">
              <see langword="true" /> to add the object to the container if the object implements <see cref="T:System.ComponentModel.IComponent" />; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-198">建立型別的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-198">Creates an instance of a type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-199">
            <paramref name="type" /> 指定之型別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-199">A new instance of the type specified by <paramref name="type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-200">當使用者嘗試建立類型的執行個體時，序列化程式會呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="688ca-200">This method is called by serializers when they attempt to create an instance of a type.</span></span> <span data-ttu-id="688ca-201">預設實作會建立新的執行個體的型別，或者可能傳回的值根據現有執行個體<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>和<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="688ca-201">The default implementation creates a new instance of the type, or it may return an existing instance depending on the values of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> and <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> properties.</span></span> <span data-ttu-id="688ca-202"><xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>方法會使用反映來建立執行個體，並且會執行一些泛型<xref:System.IConvertible>來尋找相符的建構函式的參數上的轉換。</span><span class="sxs-lookup"><span data-stu-id="688ca-202">The <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A> method uses reflection to create instances and will perform some generic <xref:System.IConvertible> transformations on parameters to find a matching constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <span data-ttu-id="688ca-203">
            <paramref name="type" /> 沒有使用 <paramref name="arguments" /> 中所包含之參數的建構函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-203">
              <paramref name="type" /> does not have a constructor that takes parameters contained in <paramref name="arguments" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName="CreateSession">
      <MemberSignature Language="C#" Value="public IDisposable CreateSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable CreateSession() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSession () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ CreateSession();" />
      <MemberSignature Language="F#" Value="member this.CreateSession : unit -&gt; IDisposable" Usage="designerSerializationManager.CreateSession " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="688ca-204">建立新的序列化工作階段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-204">Creates a new serialization session.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-205">表示新序列化工作階段的 <see cref="T:System.IDisposable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-205">An <see cref="T:System.IDisposable" /> that represents a new serialization session.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-206">序列化管理員中的大部分資料是暫時性的且只會存序列化工作階段的存留期間。</span><span class="sxs-lookup"><span data-stu-id="688ca-206">Most data within the serialization manager is transient and only lives for the life of a serialization session.</span></span> <span data-ttu-id="688ca-207">處置工作階段時，序列化會被視為完成，並清除此暫時性狀態。</span><span class="sxs-lookup"><span data-stu-id="688ca-207">When a session is disposed, serialization is considered to be complete and this transient state is cleared.</span></span> <span data-ttu-id="688ca-208">這可讓用來序列化多個物件樹狀結構的序列化管理員的單一執行個體。</span><span class="sxs-lookup"><span data-stu-id="688ca-208">This allows a single instance of a serialization manager to be used to serialize multiple object trees.</span></span> <span data-ttu-id="688ca-209">某些狀態，服務提供者及任何自訂序列化提供者加入序列化管理員，包括跨越工作階段。</span><span class="sxs-lookup"><span data-stu-id="688ca-209">Some state, including the service provider and any custom serialization providers that were added to the serialization manager, span sessions.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-210">序列化管理員已處於工作階段中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-210">The serialization manager is already within a session.</span>
          </span>
          <span data-ttu-id="688ca-211">這個版本的 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 不支援同時執行的工作階段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-211">This version of <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> does not support simultaneous sessions.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public System.Collections.IList Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Errors" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Errors As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Errors { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Errors : System.Collections.IList" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="688ca-212">取得序列化或還原序列化期間發生的錯誤清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-212">Gets the list of errors that occurred during serialization or deserialization.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="688ca-213">序列化或還原序列化期間發生的錯誤清單。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-213">The list of errors that occurred during serialization or deserialization.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-214">序列化工作階段為使用中時，您只可以讀取錯誤清單。</span><span class="sxs-lookup"><span data-stu-id="688ca-214">You can only read the error list while a serialization session is active.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-215">這個屬性從序列化工作階段外存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-215">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeType">
      <MemberSignature Language="C#" Value="public Type GetRuntimeType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetRuntimeType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRuntimeType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetRuntimeType(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetRuntimeType : string -&gt; Type" Usage="designerSerializationManager.GetRuntimeType typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="688ca-216">要取得之類型的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-216">The name of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-217">取得對應到指定型別名稱的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-217">Gets the type corresponding to the specified type name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-218">指定的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-218">The specified type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializer">
      <MemberSignature Language="C#" Value="public object GetSerializer (Type objectType, Type serializerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetSerializer(class System.Type objectType, class System.Type serializerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSerializer (objectType As Type, serializerType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetSerializer(Type ^ objectType, Type ^ serializerType);" />
      <MemberSignature Language="F#" Value="member this.GetSerializer : Type * Type -&gt; obj" Usage="designerSerializationManager.GetSerializer (objectType, serializerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="serializerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType">
          <span data-ttu-id="688ca-219">為其擷取序列化程式的物件型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-219">The type of object for which to retrieve the serializer.</span>
          </span>
        </param>
        <param name="serializerType">
          <span data-ttu-id="688ca-220">要擷取的序列化程式型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-220">The type of serializer to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-221">取得指定物件型別的序列化程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-221">Gets the serializer for the given object type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-222">
            <paramref name="objectType" /> 的序列化程式，如果找不到則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-222">The serializer for <paramref name="objectType" />, or <see langword="null" />, if not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-223">您可以要求您想要的序列化工具型別。</span><span class="sxs-lookup"><span data-stu-id="688ca-223">You can request the type of serializer you would like.</span></span> <span data-ttu-id="688ca-224">這個方法會傳回`null`如果找不到指定的物件型別的所要求型別的序列化。</span><span class="sxs-lookup"><span data-stu-id="688ca-224">This method returns `null` if there is no serializer of the requested type for the specified object type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="688ca-225">
            <paramref name="objectType" /> 或 <paramref name="serializerType" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-225">
              <paramref name="objectType" /> or <paramref name="serializerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected virtual object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="designerSerializationManager.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <span data-ttu-id="688ca-226">要擷取的服務類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-226">The type of service to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-227">取得所要求的服務。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-227">Gets the requested service.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-228">要求的服務，如果無法解析服務則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-228">The requested service, or <see langword="null" /> if the service cannot be resolved.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-229"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService%2A>方法可以存取的基礎容器或服務提供者所設定的建構函式。</span><span class="sxs-lookup"><span data-stu-id="688ca-229">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService%2A> method provides access to the underlying container or service provider that was set in the constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="protected virtual Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Type ^ GetType(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="override this.GetType : string -&gt; Type" Usage="designerSerializationManager.GetType typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="688ca-230">要擷取的型別名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-230">The name of the type to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-231">取得要求的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-231">Gets the requested type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-232">要求的型別，如果無法解析型別則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-232">The requested type, or <see langword="null" /> if the type cannot be resolved.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-233"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A>方法會搜尋的服務提供者<xref:System.ComponentModel.Design.ITypeResolutionService>，並，如果有的話，它會委派至該服務來解析類型。</span><span class="sxs-lookup"><span data-stu-id="688ca-233">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A> method will search the service provider for an <xref:System.ComponentModel.Design.ITypeResolutionService> and, if available, it will delegate to that service to resolve the type.</span></span> <span data-ttu-id="688ca-234">如果<xref:System.ComponentModel.Design.ITypeResolutionService>不是的話<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A>稱之為<xref:System.Object.GetType%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="688ca-234">If an <xref:System.ComponentModel.Design.ITypeResolutionService> is not available, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A> will call the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResolveName">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveName (System.ComponentModel.Design.Serialization.ResolveNameEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveName(class System.ComponentModel.Design.Serialization.ResolveNameEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveName (e As ResolveNameEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveName(System::ComponentModel::Design::Serialization::ResolveNameEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResolveName : System.ComponentModel.Design.Serialization.ResolveNameEventArgs -&gt; unit&#xA;override this.OnResolveName : System.ComponentModel.Design.Serialization.ResolveNameEventArgs -&gt; unit" Usage="designerSerializationManager.OnResolveName e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="688ca-235">
            <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />，其中包含事件資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-235">A <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-236">引發 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-236">Raises the <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-237">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="688ca-237">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="688ca-238">如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="688ca-238">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="688ca-239"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="688ca-239">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="688ca-240">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="688ca-240">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="688ca-241">
            <para>當覆寫<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" />衍生類別時，請務必呼叫基底類別的<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" />方法，讓已註冊的委派收到事件。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-241">
              <para>When overriding <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionCreated : EventArgs -&gt; unit&#xA;override this.OnSessionCreated : EventArgs -&gt; unit" Usage="designerSerializationManager.OnSessionCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="688ca-242">包含事件資料的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-242">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-243">引發 <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-243">Raises the <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-244">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="688ca-244">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="688ca-245">如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="688ca-245">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="688ca-246"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="688ca-246">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="688ca-247">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="688ca-247">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="688ca-248">
            <para>當覆寫<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />衍生類別時，請務必呼叫基底類別的<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />方法，讓已註冊的委派收到事件。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-248">
              <para>When overriding <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionDisposed">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionDisposed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionDisposed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionDisposed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionDisposed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionDisposed : EventArgs -&gt; unit&#xA;override this.OnSessionDisposed : EventArgs -&gt; unit" Usage="designerSerializationManager.OnSessionDisposed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="688ca-249">包含事件資料的 <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-249">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-250">引發 <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-250">Raises the <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-251">引發事件會透過委派叫用此事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="688ca-251">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="688ca-252">如需詳細資訊，請參閱 <<c0> [ 處理和引發事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="688ca-252">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="688ca-253"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed%2A> 方法也允許衍生類別處理事件，而不用附加委派。</span><span class="sxs-lookup"><span data-stu-id="688ca-253">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="688ca-254">這是在衍生類別中處理事件的慣用技巧。</span><span class="sxs-lookup"><span data-stu-id="688ca-254">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="688ca-255">
            <para>當覆寫<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />衍生類別時，請務必呼叫基底類別的<see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" />方法，讓已註冊的委派收到事件。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-255">
              <para>When overriding <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PreserveNames">
      <MemberSignature Language="C#" Value="public bool PreserveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreserveNames" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property PreserveNames As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PreserveNames { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PreserveNames : bool with get, set" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="688ca-256">取得或設定值，指出是否 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 方法應當檢查容器中指定名稱存在與否。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-256">Gets or sets a value indicating whether the <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> method should check for the presence of the given name in the container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="688ca-257">如果 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 傳遞指定的元件名稱，則為 <see langword="true" />，如果 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 檢查容器中是否存在指定名稱，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-257">
              <see langword="true" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will pass the given component name; <see langword="false" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will check for the presence of the given name in the container.</span>
          </span>
          <span data-ttu-id="688ca-258">預設值為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-258">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-259"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>屬性會決定行為<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="688ca-259">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> property determines the behavior of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method.</span></span> <span data-ttu-id="688ca-260">如果`true`，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>會傳遞指定的元件名稱。</span><span class="sxs-lookup"><span data-stu-id="688ca-260">If `true`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will pass the given component name.</span></span> <span data-ttu-id="688ca-261">如果`false`，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>會檢查指定之名稱的容器中是否存在。</span><span class="sxs-lookup"><span data-stu-id="688ca-261">If `false`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will check for the presence of the given name in the container.</span></span> <span data-ttu-id="688ca-262">如果不存在的名稱，這是在容器中，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>會使用指定的名稱。</span><span class="sxs-lookup"><span data-stu-id="688ca-262">If the name does not exist in the container, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will use the given name.</span></span> <span data-ttu-id="688ca-263">如果名稱不在容器中，存在<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>新增至容器，進而提供新名稱時，會傳遞 null 值做為元件的名稱。</span><span class="sxs-lookup"><span data-stu-id="688ca-263">If the name does exist in the container, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will pass a null value as the name of a component when adding it to the container, thereby giving it a new name.</span></span> <span data-ttu-id="688ca-264">此第二種變化適合用來實作一律會複製物件的序列化程式，而不是假設這些物件不存在。</span><span class="sxs-lookup"><span data-stu-id="688ca-264">This second variation is useful for implementing a serializer that always duplicates objects, rather than assuming those objects do not exist.</span></span> <span data-ttu-id="688ca-265">貼上命令通常會使用這種類型的序列化程式。</span><span class="sxs-lookup"><span data-stu-id="688ca-265">Paste commands often use this type of serializer.</span></span>  
  
 <span data-ttu-id="688ca-266">您不在序列化工作階段時，您只可以變更這個屬性。</span><span class="sxs-lookup"><span data-stu-id="688ca-266">You can only change this property when you are not in a serialization session.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-267">這個屬性從序列化工作階段內變更。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-267">This property was changed from within a serialization session.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PropertyProvider">
      <MemberSignature Language="C#" Value="public object PropertyProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PropertyProvider" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyProvider As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ PropertyProvider { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyProvider : obj with get, set" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="688ca-268">取得物件，該物件應當用於為序列化管理員的 <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 屬性提供屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-268">Gets the object that should be used to provide properties to the serialization manager's <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="688ca-269">應當用於為序列化管理員的 <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 屬性提供屬性的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-269">The object that should be used to provide properties to the serialization manager's <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-270"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider%2A>屬性會提供一種方法讓一組的序列化程式可用來引導其行為的序列化屬性的序列化管理員。</span><span class="sxs-lookup"><span data-stu-id="688ca-270">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider%2A> property provides a way to give the serialization manager a set of serialization properties that serializers can use to guide their behavior.</span></span>  
  
 <span data-ttu-id="688ca-271">會檢查此物件的公用屬性，並包裝在目標物件的序列化管理員的新屬性描述項。</span><span class="sxs-lookup"><span data-stu-id="688ca-271">This object's public properties will be inspected and wrapped in new property descriptors that have a target object of the serialization manager.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecycleInstances">
      <MemberSignature Language="C#" Value="public bool RecycleInstances { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RecycleInstances" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances" />
      <MemberSignature Language="VB.NET" Value="Public Property RecycleInstances As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RecycleInstances { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RecycleInstances : bool with get, set" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="688ca-272">取得或設定旗標，指出 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 是否永遠建立型別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-272">Gets or sets a flag indicating whether <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will always create a new instance of a type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="688ca-273">如果 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 傳回現有執行個體則為 <see langword="true" />，如果 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 建立型別的新執行個體則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-273">
              <see langword="true" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will return the existing instance; <see langword="false" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> will create a new instance of a type.</span>
          </span>
          <span data-ttu-id="688ca-274">預設值為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-274">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-275">如果<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>屬性是`false`，則<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法一律會建立類型的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="688ca-275">If the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> property is `false`, the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method will always create a new instance of a type.</span></span> <span data-ttu-id="688ca-276">如果<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>已`true`，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>會先搜尋名稱表，以及具有相同名稱的物件的容器。</span><span class="sxs-lookup"><span data-stu-id="688ca-276">If <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> is `true`, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will first search the name table and container for an object of the same name.</span></span> <span data-ttu-id="688ca-277">如果這類物件存在，而且屬於相同的型別，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>會傳回現有執行個體。</span><span class="sxs-lookup"><span data-stu-id="688ca-277">If such an object exists and is of the same type, <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> will return the existing instance.</span></span> <span data-ttu-id="688ca-278">此第二種變化，適合用於實作的序列化程式序列化狀態套用至一組現有的物件，而不是永遠建立新的樹狀結構。</span><span class="sxs-lookup"><span data-stu-id="688ca-278">This second variation is useful for implementing a serializer that applies serialization state to an existing set of objects, rather than always creating a new tree.</span></span> <span data-ttu-id="688ca-279">**復原**命令通常會使用這種類型的序列化程式。</span><span class="sxs-lookup"><span data-stu-id="688ca-279">The **Undo** command often uses this type of serializer.</span></span>  
  
 <span data-ttu-id="688ca-280">萬一其中<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>屬性是`true`，則<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>屬性會進一步修改行為<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>根據兩個物件的類型。</span><span class="sxs-lookup"><span data-stu-id="688ca-280">In the case where the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> property is `true`, the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> property will further modify the behavior of <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> depending on the types of the two objects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-281">序列化管理員具有使用中的序列化工作階段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-281">The serialization manager has an active serialization session.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      </Docs>
    </Member>
    <Member MemberName="SessionCreated">
      <MemberSignature Language="C#" Value="public event EventHandler SessionCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SessionCreated" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SessionCreated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SessionCreated;" />
      <MemberSignature Language="F#" Value="member this.SessionCreated : EventHandler " Usage="member this.SessionCreated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="688ca-282">發生於工作階段建立時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-282">Occurs when a session is created.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionDisposed">
      <MemberSignature Language="C#" Value="public event EventHandler SessionDisposed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SessionDisposed" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SessionDisposed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SessionDisposed;" />
      <MemberSignature Language="F#" Value="member this.SessionDisposed : EventHandler " Usage="member this.SessionDisposed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="688ca-283">發生於處置工作階段時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-283">Occurs when a session is disposed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.AddSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(class System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      <MemberSignature Language="VB.NET" Value="Sub AddSerializationProvider (provider As IDesignerSerializationProvider) Implements IDesignerSerializationManager.AddSerializationProvider" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System::ComponentModel::Design::Serialization::IDesignerSerializationProvider ^ provider) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::AddSerializationProvider;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="688ca-284">要加入的序列化提供者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-284">The serialization provider to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-285">將自訂序列化提供者加入序列化管理員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-285">Adds a custom serialization provider to the serialization manager.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-286">當<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A>方法用來要求的序列化提供者、 序列化管理員會查詢第一次之前尋找型別的中繼資料中適當的序列化程式的自訂序列化提供者。</span><span class="sxs-lookup"><span data-stu-id="688ca-286">When the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A> method is used to request a serialization provider, the serialization manager queries the custom serialization providers first before looking in the type's metadata for the appropriate serializer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <MemberSignature Language="C#" Value="System.ComponentModel.Design.Serialization.ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.Serialization.ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Context As ContextStack Implements IDesignerSerializationManager.Context" />
      <MemberSignature Language="C++ CLI" Value="property System::ComponentModel::Design::Serialization::ContextStack ^ System::ComponentModel::Design::Serialization::IDesignerSerializationManager::Context { System::ComponentModel::Design::Serialization::ContextStack ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.Serialization.ContextStack</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="688ca-287">取得這個序列化工作階段的內容堆疊。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-287">Gets the context stack for this serialization session.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="688ca-288">
            <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />，儲存資料。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-288">A <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> that stores data.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-289">內容堆疊提供使用者定義的存放區，實作成堆疊。</span><span class="sxs-lookup"><span data-stu-id="688ca-289">A context stack provides a user-defined storage area, implemented as a stack.</span></span> <span data-ttu-id="688ca-290">這個儲存體區域是實用的方式，跨序列化程式，提供通訊因為序列化是一般階層式的程序。</span><span class="sxs-lookup"><span data-stu-id="688ca-290">This storage area is a useful way to provide communication across serializers, as serialization is a generally hierarchical process.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-291">這個屬性從序列化工作階段外存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-291">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.ContextStack" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance">
      <MemberSignature Language="C#" Value="object IDesignerSerializationManager.CreateInstance (Type type, System.Collections.ICollection arguments, string name, bool addToContainer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(class System.Type type, class System.Collections.ICollection arguments, string name, bool addToContainer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type ^ type, System::Collections::ICollection ^ arguments, System::String ^ name, bool addToContainer) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::CreateInstance;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.ICollection" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="addToContainer" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="688ca-292">要建立的資料型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-292">The data type to create.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="688ca-293">要傳送給這個型別的建構函式的引數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-293">The arguments to pass to the constructor for this type.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="688ca-294">物件的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-294">The name of the object.</span>
          </span>
          <span data-ttu-id="688ca-295">之後便可經由 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />，用這個名稱存取物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-295">This name can be used to access the object later through <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />.</span>
          </span>
          <span data-ttu-id="688ca-296">如果傳遞的是 <see langword="null" />，物件還是可以建立，但是無法以名稱存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-296">If <see langword="null" /> is passed, the object is still created but cannot be accessed by name.</span>
          </span>
        </param>
        <param name="addToContainer">
          <span data-ttu-id="688ca-297">
            <see langword="true" /> 表示將這個物件加入設計容器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-297">
              <see langword="true" /> to add this object to the design container.</span>
          </span>
          <span data-ttu-id="688ca-298">物件必須實作 <see cref="T:System.ComponentModel.IComponent" />，才能發生效用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-298">The object must implement <see cref="T:System.ComponentModel.IComponent" /> for this to have any effect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-299">實作 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-299">Implements the <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-300">新建立的物件執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-300">The newly created object instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance">
      <MemberSignature Language="C#" Value="object IDesignerSerializationManager.GetInstance (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetInstance (name As String) As Object Implements IDesignerSerializationManager.GetInstance" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System::String ^ name) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetInstance;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="688ca-301">所要擷取的物件名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-301">The name of the object to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-302">擷取已建立物件具有指定名稱的執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-302">Retrieves an instance of a created object of the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-303">有指定名稱的物件的執行個體，或 <see langword="null" /> (如果找不到有該名稱的物件)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-303">An instance of the object with the given name, or <see langword="null" /> if no object by that name can be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="688ca-304">
            <paramref name="name" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-304">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-305">這個屬性從序列化工作階段外存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-305">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName">
      <MemberSignature Language="C#" Value="string IDesignerSerializationManager.GetName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetName (value As Object) As String Implements IDesignerSerializationManager.GetName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System::Object ^ value) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetName;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="688ca-306">要為其擷取名稱的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-306">The object for which to retrieve the name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-307">擷取指定物件的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-307">Retrieves a name for the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-308">物件的名稱，或 <see langword="null" /> (如果物件未命名)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-308">The name of the object, or <see langword="null" /> if the object is unnamed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-309">如果<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetName%2A>方法找不到對應的名稱，如`value`參數，它會引發<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName>事件之前它會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="688ca-309">If the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetName%2A> method cannot find a corresponding name for the `value` parameter, it raises the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> event before it returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="688ca-310">
            <paramref name="value" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-310">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-311">這個屬性從序列化工作階段外存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-311">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)" />
        <altmember cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer">
      <MemberSignature Language="C#" Value="object IDesignerSerializationManager.GetSerializer (Type objectType, Type serializerType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(class System.Type objectType, class System.Type serializerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function GetSerializer (objectType As Type, serializerType As Type) As Object Implements IDesignerSerializationManager.GetSerializer" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type ^ objectType, Type ^ serializerType) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetSerializer;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="serializerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType">
          <span data-ttu-id="688ca-312">要為其取得序列化工具的物件型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-312">The type of the object to get the serializer for.</span>
          </span>
        </param>
        <param name="serializerType">
          <span data-ttu-id="688ca-313">要擷取的序列化工具型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-313">The type of the serializer to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-314">為指定的物件型別取得要求的型別的序列化工具。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-314">Gets a serializer of the requested type for the specified object type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-315">要求的序列化工具的執行個體，或 <see langword="null" /> (如果找不到適當的序列化工具)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-315">An instance of the requested serializer, or <see langword="null" /> if no appropriate serializer can be located.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType">
      <MemberSignature Language="C#" Value="Type IDesignerSerializationManager.GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetType (typeName As String) As Type Implements IDesignerSerializationManager.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System::String ^ typeName) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::GetType;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="688ca-316">要載入型別的完整名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-316">The fully qualified name of the type to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-317">取得指定名稱的型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-317">Gets a type of the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-318">型別的執行個體，或 <see langword="null" /> (如果無法載入型別)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-318">An instance of the type, or <see langword="null" /> if the type cannot be loaded.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-319">這個屬性從序列化工作階段外存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-319">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <MemberSignature Language="C#" Value="System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Properties As PropertyDescriptorCollection Implements IDesignerSerializationManager.Properties" />
      <MemberSignature Language="C++ CLI" Value="property System::ComponentModel::PropertyDescriptorCollection ^ System::ComponentModel::Design::Serialization::IDesignerSerializationManager::Properties { System::ComponentModel::PropertyDescriptorCollection ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="688ca-320">實作 <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-320">Implements the <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="688ca-321">
            <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，含有要被序列化的屬性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-321">A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> containing the properties to be serialized.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.RemoveSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(class System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveSerializationProvider (provider As IDesignerSerializationProvider) Implements IDesignerSerializationManager.RemoveSerializationProvider" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System::ComponentModel::Design::Serialization::IDesignerSerializationProvider ^ provider) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::RemoveSerializationProvider;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="688ca-322">要移除的 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-322">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" /> to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-323">移除之前加入的序列化提供者。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-323">Removes a previously added serialization provider.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-324"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23RemoveSerializationProvider%2A>方法會移除先前呼叫所加入的自訂序列化提供者<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23AddSerializationProvider%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="688ca-324">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23RemoveSerializationProvider%2A> method removes a custom serialization provider that was previously added by a call to the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23AddSerializationProvider%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.ReportError (object errorInformation);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(object errorInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub ReportError (errorInformation As Object) Implements IDesignerSerializationManager.ReportError" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System::Object ^ errorInformation) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::ReportError;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorInformation" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="errorInformation">
          <span data-ttu-id="688ca-325">包含錯誤資訊的物件，通常為 <see cref="T:System.String" /> 或 <see cref="T:System.Exception" /> 型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-325">An object containing the error information, usually of type <see cref="T:System.String" /> or <see cref="T:System.Exception" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-326">用於報告序列化中的可修復錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-326">Used to report a recoverable error in serialization.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-327">序列化程式可以寫入正常處理可復原的錯誤，藉由呼叫<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A>附上錯誤資訊的方法。</span><span class="sxs-lookup"><span data-stu-id="688ca-327">Serializers can be written to handle recoverable errors gracefully by calling the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A> method with the error information.</span></span> <span data-ttu-id="688ca-328">序列化管理員可能支援它完成時，或它可能會擲回的例外狀況，這個方法，並中止序列化程序之後，報告錯誤的清單。</span><span class="sxs-lookup"><span data-stu-id="688ca-328">The serialization manager may support reporting a list of errors after it completes, or it may throw an exception from this method and abort the serialization process.</span></span> <span data-ttu-id="688ca-329">序列化程式應該呼叫此函式之後繼續執行。</span><span class="sxs-lookup"><span data-stu-id="688ca-329">The serializer should continue after calling this function.</span></span>  
  
 <span data-ttu-id="688ca-330"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A> 新增`errorInformation`參數來<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="688ca-330"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23ReportError%2A> adds the `errorInformation` parameter to the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> collection.</span></span> <span data-ttu-id="688ca-331">如果`errorInformation`是`null`，不採取任何動作。</span><span class="sxs-lookup"><span data-stu-id="688ca-331">If `errorInformation` is `null`, no action is taken.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-332">這個屬性從序列化工作階段外存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-332">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <MemberSignature Language="C#" Value="event System.ComponentModel.Design.Serialization.ResolveNameEventHandler System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.Design.Serialization.ResolveNameEventHandler System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ResolveName" />
      <MemberSignature Language="VB.NET" Value="Custom Event ResolveName As ResolveNameEventHandler Implements System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.Serialization.ResolveNameEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <MemberSignature Language="C#" Value="event EventHandler System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SerializationComplete" />
      <MemberSignature Language="VB.NET" Value="Custom Event SerializationComplete As EventHandler Implements System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName">
      <MemberSignature Language="C#" Value="void IDesignerSerializationManager.SetName (object instance, string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(object instance, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub SetName (instance As Object, name As String) Implements IDesignerSerializationManager.SetName" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System::Object ^ instance, System::String ^ name) = System::ComponentModel::Design::Serialization::IDesignerSerializationManager::SetName;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="688ca-333">要設定名稱的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-333">The object to set the name.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="688ca-334">用做物件名稱的 <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-334">A <see cref="T:System.String" /> used as the name of the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-335">設定指定物件的名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-335">Sets the name for the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-336"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23SetName%2A>方法可用來設定現有物件的名稱。</span><span class="sxs-lookup"><span data-stu-id="688ca-336">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23SetName%2A> method provides a way to set the name of an existing object.</span></span> <span data-ttu-id="688ca-337">這可透過呼叫物件的執行個體建立<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetInstance%2A>方法，避免的額外負荷<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="688ca-337">This enables creation of an instance of the object through a call to the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetInstance%2A> method, avoiding the overhead of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="688ca-338">參數的其中之一或兩者都是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-338">One or both of the parameters are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="688ca-339">執行個體指定的物件已具有名稱，或 <paramref name="name" /> 已由其他具名物件使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-339">The object specified by instance already has a name, or <paramref name="name" /> is already used by another named object.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-340">這個屬性從序列化工作階段外存取。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-340">This property was accessed outside of a serialization session.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)" />
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="System.IServiceProvider.GetService">
      <MemberSignature Language="C#" Value="object IServiceProvider.GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IServiceProvider.GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#IServiceProvider#GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function GetService (serviceType As Type) As Object Implements IServiceProvider.GetService" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IServiceProvider.GetService(Type ^ serviceType) = IServiceProvider::GetService;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <span data-ttu-id="688ca-341">物件，指定要取得的服務物件類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-341">An object that specifies the type of service object to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="688ca-342">如需這個成員的描述，請參閱 <see cref="M:System.IServiceProvider.GetService(System.Type)" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-342">For a description of this member, see the <see cref="M:System.IServiceProvider.GetService(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="688ca-343">型別 <paramref name="serviceType" /> 的服務物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-343">A service object of type <paramref name="serviceType" />.</span>
          </span>
          <span data-ttu-id="688ca-344">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-344">-or-</span>
          </span>
          <span data-ttu-id="688ca-345">如果不存在型別 <paramref name="serviceType" /> 的服務物件，則為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-345">
              <see langword="null" /> if there is no service object of type <paramref name="serviceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-346">這個成員是明確介面成員實作，</span><span class="sxs-lookup"><span data-stu-id="688ca-346">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="688ca-347">只有在 <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> 執行個體轉換成 <xref:System.IServiceProvider> 介面時，才能使用這個成員。</span><span class="sxs-lookup"><span data-stu-id="688ca-347">It can be used only when the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager> instance is cast to an <xref:System.IServiceProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateRecycledTypes">
      <MemberSignature Language="C#" Value="public bool ValidateRecycledTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateRecycledTypes" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateRecycledTypes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateRecycledTypes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateRecycledTypes : bool with get, set" Usage="System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="688ca-348">取得或設定旗標，指出是否 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 方法會驗證相符名稱參考同一型別。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-348">Gets or sets a flag indicating whether the <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> method will verify that matching names refer to the same type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="688ca-349">如果 <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 驗證型別則為 <see langword="true" />，否則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-349">
              <see langword="true" /> if <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> verifies types; otherwise, <see langword="false" /> if it does not.</span>
          </span>
          <span data-ttu-id="688ca-350">預設值為 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-350">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="688ca-351"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>屬性修改的行為<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法時<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>屬性是`true`下, 表中所述。</span><span class="sxs-lookup"><span data-stu-id="688ca-351">The <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> property modifies the behavior of the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> method when the <xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> property is `true`, as detailed in the following table.</span></span>  
  
|`RecycleInstances`|`ValidateRecycledTypes`|<span data-ttu-id="688ca-352">行為 `CreateInstance`</span><span class="sxs-lookup"><span data-stu-id="688ca-352">Behavior of `CreateInstance`</span></span>|  
|------------------------|-----------------------------|----------------------------------|  
|`false`|<span data-ttu-id="688ca-353">`true` 或 `false`</span><span class="sxs-lookup"><span data-stu-id="688ca-353">`true` or `false`</span></span>|<span data-ttu-id="688ca-354">一律建立指定型別的新執行個體</span><span class="sxs-lookup"><span data-stu-id="688ca-354">Always create a new instance of the specified type</span></span>|  
|`true`|`false`|<span data-ttu-id="688ca-355">如果找到相符的執行個體則會傳回，不論類型為何。</span><span class="sxs-lookup"><span data-stu-id="688ca-355">If a matching instance is found it is returned, regardless of its type.</span></span>|  
|`true`|`true`|<span data-ttu-id="688ca-356">如果找到相符的執行個體，它才會傳回其類型相當於方法呼叫中指定。</span><span class="sxs-lookup"><span data-stu-id="688ca-356">If a matching instance is found, it is returned only if its type is the same as specified in the method call.</span></span>|  
  
 <span data-ttu-id="688ca-357"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> 可用於變形一種類型的物件與另一個，如果他們具有相似屬性，但共用任何一般的父代或介面。</span><span class="sxs-lookup"><span data-stu-id="688ca-357"><xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> is useful for morphing one type of object to another if they have similar properties but share no common parent or interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="688ca-358">序列化管理員具有使用中的序列化工作階段。</span>
          <span class="sxs-lookup">
            <span data-stu-id="688ca-358">The serialization manager has an active serialization session.</span>
          </span>
        </exception>
        <altmember cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />
        <altmember cref="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances" />
      </Docs>
    </Member>
  </Members>
</Type>