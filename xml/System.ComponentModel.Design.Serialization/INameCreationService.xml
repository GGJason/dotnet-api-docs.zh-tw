<Type Name="INameCreationService" FullName="System.ComponentModel.Design.Serialization.INameCreationService">
  <TypeSignature Language="C#" Value="public interface INameCreationService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameCreationService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.INameCreationService" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameCreationService" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameCreationService" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4618c-101">提供可以產生物件唯一名稱的服務。</span><span class="sxs-lookup"><span data-stu-id="4618c-101">Provides a service that can generate unique names for objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4618c-102">A<xref:System.ComponentModel.Design.Serialization.DesignerLoader>可實作這項服務提供一種方式設計工具，用以建立新物件的唯一名稱。</span><span class="sxs-lookup"><span data-stu-id="4618c-102">A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this service to provide a way for a designer to create new, unique names for objects.</span></span> <span data-ttu-id="4618c-103">如果此服務無法使用，在設計工具會使用預設的實作。</span><span class="sxs-lookup"><span data-stu-id="4618c-103">If this service is not available, the designer uses a default implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4618c-104">下列範例程式碼會提供<xref:System.ComponentModel.Design.Serialization.INameCreationService>實作。</span><span class="sxs-lookup"><span data-stu-id="4618c-104">The following example code provides an example <xref:System.ComponentModel.Design.Serialization.INameCreationService> implementation.</span></span> <span data-ttu-id="4618c-105">服務可以建立根據型別不符合指定的容器中的任何名稱的唯一名稱。</span><span class="sxs-lookup"><span data-stu-id="4618c-105">The service can create a unique name based on a type that does not match any names in the specified container.</span></span> <span data-ttu-id="4618c-106">它也可以驗證指定的名稱字串。</span><span class="sxs-lookup"><span data-stu-id="4618c-106">It can also validate a specified name string.</span></span>  
  
 [!code-cpp[INameCreationServiceExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/INameCreationServiceExample/CPP/class1.cpp#1)]
 [!code-csharp[INameCreationServiceExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/INameCreationServiceExample/CS/class1.cs#1)]
 [!code-vb[INameCreationServiceExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/INameCreationServiceExample/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateName">
      <MemberSignature Language="C#" Value="public string CreateName (System.ComponentModel.IContainer container, Type dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateName(class System.ComponentModel.IContainer container, class System.Type dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateName (container As IContainer, dataType As Type) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ CreateName(System::ComponentModel::IContainer ^ container, Type ^ dataType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
        <Parameter Name="dataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="container"><span data-ttu-id="4618c-107">加入新物件的所在容器。</span><span class="sxs-lookup"><span data-stu-id="4618c-107">The container where the new object is added.</span></span></param>
        <param name="dataType"><span data-ttu-id="4618c-108">接收名稱的物件資料型別。</span><span class="sxs-lookup"><span data-stu-id="4618c-108">The data type of the object that receives the name.</span></span></param>
        <summary><span data-ttu-id="4618c-109">建立在指定容器中所有元件的唯一新名稱。</span><span class="sxs-lookup"><span data-stu-id="4618c-109">Creates a new name that is unique to all components in the specified container.</span></span></summary>
        <returns><span data-ttu-id="4618c-110">資料型別的唯一名稱。</span><span class="sxs-lookup"><span data-stu-id="4618c-110">A unique name for the data type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4618c-111">這個方法會傳回指定的容器內是唯一的新物件的名稱。</span><span class="sxs-lookup"><span data-stu-id="4618c-111">This method returns a name for the new object that is unique within the specified container.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4618c-112">下列程式碼範例會提供範例<xref:System.ComponentModel.Design.Serialization.INameCreationService.CreateName%2A?displayProperty=nameWithType>方法實作。</span><span class="sxs-lookup"><span data-stu-id="4618c-112">The following code example provides an example <xref:System.ComponentModel.Design.Serialization.INameCreationService.CreateName%2A?displayProperty=nameWithType> method implementation.</span></span> <span data-ttu-id="4618c-113">方法可以建立名稱為基礎的是唯一指定的容器內的元件名稱之指定型別的名稱。</span><span class="sxs-lookup"><span data-stu-id="4618c-113">The method can create a name based on the name of a specified type that is unique to the names of the components within the specified container.</span></span>  
  
 [!code-cpp[INameCreationServiceExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/INameCreationServiceExample/CPP/class1.cpp#2)]
 [!code-csharp[INameCreationServiceExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/INameCreationServiceExample/CS/class1.cs#2)]
 [!code-vb[INameCreationServiceExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/INameCreationServiceExample/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="4618c-114">通常會實作這種類型的服務，從資料類型，通常會附加數字，可讓名稱成為唯一的識別項的名稱建立唯一的物件名稱。</span><span class="sxs-lookup"><span data-stu-id="4618c-114">This type of service is often implemented to create a unique object name from the name of the data type, often appended with a number that allows the name to be a unique identifier.</span></span> <span data-ttu-id="4618c-115">例如，<see langword="ListBox1" />如<see langword="ListBox" />物件。</span><span class="sxs-lookup"><span data-stu-id="4618c-115">For example, <see langword="ListBox1" /> for a <see langword="ListBox" /> object.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsValidName">
      <MemberSignature Language="C#" Value="public bool IsValidName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidName (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4618c-116">要驗證的名稱。</span><span class="sxs-lookup"><span data-stu-id="4618c-116">The name to validate.</span></span></param>
        <summary><span data-ttu-id="4618c-117">取得值，指出指定名稱是否有效。</span><span class="sxs-lookup"><span data-stu-id="4618c-117">Gets a value indicating whether the specified name is valid.</span></span></summary>
        <returns>
          <span data-ttu-id="4618c-118">如果名稱有效，即為 <see langword="true" />；否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4618c-118"><see langword="true" /> if the name is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4618c-119">實作<xref:System.ComponentModel.Design.Serialization.INameCreationService>只能有定義有效的名稱的參數的規則。</span><span class="sxs-lookup"><span data-stu-id="4618c-119">An implementation of the <xref:System.ComponentModel.Design.Serialization.INameCreationService> can have rules that define the parameters for valid names.</span></span> <span data-ttu-id="4618c-120">若要驗證的名稱，並強制執行這些規則，就可以實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="4618c-120">This method can be implemented to validate a name and enforce those rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4618c-121">下列程式碼範例會提供範例<xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A?displayProperty=nameWithType>方法實作。</span><span class="sxs-lookup"><span data-stu-id="4618c-121">The following code example provides an example <xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A?displayProperty=nameWithType> method implementation.</span></span> <span data-ttu-id="4618c-122">此方法會使用字串的驗證配置，這會檢查指定的字串，以判斷指定的字串是否為有效的名稱的每個字元。</span><span class="sxs-lookup"><span data-stu-id="4618c-122">The method uses a string validation scheme that examines each character of the specified string to determine whether the specified string is a valid name.</span></span> <span data-ttu-id="4618c-123">方法會傳回`true`該字串是否有效，或`false`否則。</span><span class="sxs-lookup"><span data-stu-id="4618c-123">The method returns `true` if the string is valid, or `false` otherwise.</span></span>  
  
 [!code-cpp[INameCreationServiceExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/INameCreationServiceExample/CPP/class1.cpp#3)]
 [!code-csharp[INameCreationServiceExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/INameCreationServiceExample/CS/class1.cs#3)]
 [!code-vb[INameCreationServiceExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/INameCreationServiceExample/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateName">
      <MemberSignature Language="C#" Value="public void ValidateName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ValidateName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="4618c-124">要驗證的名稱。</span><span class="sxs-lookup"><span data-stu-id="4618c-124">The name to validate.</span></span></param>
        <summary><span data-ttu-id="4618c-125">取得值，指出指定名稱是否有效。</span><span class="sxs-lookup"><span data-stu-id="4618c-125">Gets a value indicating whether the specified name is valid.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4618c-126">實作<xref:System.ComponentModel.Design.Serialization.INameCreationService>只能有定義有效的名稱的參數的規則。</span><span class="sxs-lookup"><span data-stu-id="4618c-126">An implementation of the <xref:System.ComponentModel.Design.Serialization.INameCreationService> can have rules that define the parameters for valid names.</span></span> <span data-ttu-id="4618c-127">若要驗證的名稱，並強制執行這些規則，就可以實作這個方法。</span><span class="sxs-lookup"><span data-stu-id="4618c-127">This method can be implemented to validate a name and enforce those rules.</span></span>  
  
 <span data-ttu-id="4618c-128">這個方法是類似於<xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A>，不過，如果不正確的名稱，這個方法擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="4618c-128">This method is similar to <xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A>, except that this method throws an exception if the name is invalid.</span></span> <span data-ttu-id="4618c-129">這可讓實作者，以提供例外狀況訊息中的詳細的資訊。</span><span class="sxs-lookup"><span data-stu-id="4618c-129">This allows implementers to provide detailed information in the exception message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4618c-130">下列程式碼範例會提供範例<xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A?displayProperty=nameWithType>方法實作，會使用字串的驗證配置，這會檢查指定的字串，以判斷指定的字串是否為有效的名稱的每個字元。</span><span class="sxs-lookup"><span data-stu-id="4618c-130">The following code example provides an example <xref:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName%2A?displayProperty=nameWithType> method implementation that uses a string validation scheme that examines each character of the specified string to determine whether the specified string is a valid name.</span></span> <span data-ttu-id="4618c-131">如果字串不是有效，則方法會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="4618c-131">The method throws an exception if the string is not valid.</span></span>  
  
 [!code-cpp[INameCreationServiceExample#4](~/samples/snippets/cpp/VS_Snippets_Winforms/INameCreationServiceExample/CPP/class1.cpp#4)]
 [!code-csharp[INameCreationServiceExample#4](~/samples/snippets/csharp/VS_Snippets_Winforms/INameCreationServiceExample/CS/class1.cs#4)]
 [!code-vb[INameCreationServiceExample#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/INameCreationServiceExample/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>