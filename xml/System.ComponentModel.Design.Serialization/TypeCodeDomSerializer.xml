<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="40d32dbfb7fd25485ddac09a38520af0137e4ebc" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48641103" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <TypeSignature Language="F#" Value="type TypeCodeDomSerializer = class&#xA;    inherit CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d47a9-101">將物件序列化為新的型別。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d47a9-101">Serializes an object to a new type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d47a9-102"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>類別會執行相同的工作<xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>，但將物件序列化為透過此類別會定義新的型別。</span><span class="sxs-lookup"><span data-stu-id="d47a9-102">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> class performs the same tasks as a <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, but serializing an object through this class defines a new type.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    <related type="Article" href="http://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">
      <span data-ttu-id="d47a9-103">動態原始程式碼的產生和編譯</span>
      <span class="sxs-lookup">
        <span data-stu-id="d47a9-103">Dynamic Source Code Generation and Compilation</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d47a9-104">初始化 <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-104">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj&#xA;override this.Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj" Usage="typeCodeDomSerializer.Deserialize (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="d47a9-105">用於序列化的序列化管理員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-105">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="declaration">
          <span data-ttu-id="d47a9-106">要用於序列化的型別宣告。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-106">Type declaration to use for serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d47a9-107">還原序列化指定的型別宣告 (Type Declaration)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-107">Deserializes the given type declaration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d47a9-108">根物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-108">The root object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d47a9-109"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>方法還原序列化先前序列化的程式碼型別宣告。</span><span class="sxs-lookup"><span data-stu-id="d47a9-109">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method deserializes a previously serialized code type declaration.</span></span> <span data-ttu-id="d47a9-110">下表顯示工作預設實作會執行。</span><span class="sxs-lookup"><span data-stu-id="d47a9-110">The following table shows the tasks default implementation performs.</span></span>  
  
|<span data-ttu-id="d47a9-111">工作</span><span class="sxs-lookup"><span data-stu-id="d47a9-111">Task</span></span>|<span data-ttu-id="d47a9-112">描述</span><span class="sxs-lookup"><span data-stu-id="d47a9-112">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="d47a9-113">區分大小寫檢查</span><span class="sxs-lookup"><span data-stu-id="d47a9-113">Case Sensitivity Checks</span></span>|<span data-ttu-id="d47a9-114">實作搜尋<xref:System.CodeDom.Compiler.CodeDomProvider>決定如果它應該將成員視為區分大小寫或不區分大小寫的服務。</span><span class="sxs-lookup"><span data-stu-id="d47a9-114">The implementation searches for a <xref:System.CodeDom.Compiler.CodeDomProvider> service to decide if it should treat members as case sensitive or case insensitive.</span></span>|  
|<span data-ttu-id="d47a9-115">陳述式排序</span><span class="sxs-lookup"><span data-stu-id="d47a9-115">Statement Sorting</span></span>|<span data-ttu-id="d47a9-116">所有成員變數和 init 方法的本機變數會都儲存在資料表中。</span><span class="sxs-lookup"><span data-stu-id="d47a9-116">All member variables and local variables from init methods are stored in a table.</span></span> <span data-ttu-id="d47a9-117">然後在 init 方法中的每個陳述式加入至陳述式集合中根據其左上方，組成群組，以便指派或作業特定的變數上的所有陳述式之下該變數。</span><span class="sxs-lookup"><span data-stu-id="d47a9-117">Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</span></span> <span data-ttu-id="d47a9-118">沒有陳述式的變數都會被捨棄。</span><span class="sxs-lookup"><span data-stu-id="d47a9-118">Variables that have no statements are discarded.</span></span>|  
|<span data-ttu-id="d47a9-119">還原序列化</span><span class="sxs-lookup"><span data-stu-id="d47a9-119">Deserialization</span></span>|<span data-ttu-id="d47a9-120">每個變數的陳述式集合會根據變數還原序列化。</span><span class="sxs-lookup"><span data-stu-id="d47a9-120">The statement collections for each variable are deserialized according to the variable.</span></span>|  
  
 <span data-ttu-id="d47a9-121">下表顯示服務<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>方法需要。</span><span class="sxs-lookup"><span data-stu-id="d47a9-121">The following table shows the services the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method requires.</span></span>  
  
|<span data-ttu-id="d47a9-122">服務</span><span class="sxs-lookup"><span data-stu-id="d47a9-122">Service</span></span>|<span data-ttu-id="d47a9-123">描述</span><span class="sxs-lookup"><span data-stu-id="d47a9-123">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|<span data-ttu-id="d47a9-124">雖然不是絕對必要，服務，如果有的話，用來決定序列化是否要區分大小寫或不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="d47a9-124">While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.</span></span>|  
|<xref:System.ComponentModel.IContainer>|<span data-ttu-id="d47a9-125">如果物件不存在名稱表格中還原序列化期間，查詢<xref:System.ComponentModel.IContainer>為止。</span><span class="sxs-lookup"><span data-stu-id="d47a9-125">If an object does not exist in the name table during deserialization, a query for <xref:System.ComponentModel.IContainer> is made.</span></span> <span data-ttu-id="d47a9-126">如果此查詢成功，會檢查物件的容器。</span><span class="sxs-lookup"><span data-stu-id="d47a9-126">If this query succeeds, the container is checked for the object.</span></span> <span data-ttu-id="d47a9-127">容器也會做為替代的元件所需的任何容器引數。</span><span class="sxs-lookup"><span data-stu-id="d47a9-127">The container is also used as a stand-in for any container argument needed by components.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d47a9-128">
            <paramref name="manager" /> 或 <paramref name="typeDecl" /> 是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-128">
              <paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="http://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">
          <span data-ttu-id="d47a9-129">動態原始程式碼的產生和編譯</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-129">Dynamic Source Code Generation and Compilation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod&#xA;override this.GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod" Usage="typeCodeDomSerializer.GetInitializeMethod (manager, declaration, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="d47a9-130">用於序列化的序列化管理員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-130">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="declaration">
          <span data-ttu-id="d47a9-131">用於序列化的類型宣告。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-131">The type declaration to use for serialization.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="d47a9-132">用於序列化的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-132">The value to use for serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d47a9-133">傳回儲存用於序列化成員之陳述式的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-133">Returns the method where statements used to serialize a member are stored.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d47a9-134">用於發出指定成員之所有初始化程式碼的方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-134">The method used to emit all of the initialization code for the given member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d47a9-135"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>方法會傳回指定成員發出所有初始化程式碼的方法。</span><span class="sxs-lookup"><span data-stu-id="d47a9-135">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> method returns the method to emit all of the initialization code for the given member.</span></span> <span data-ttu-id="d47a9-136">預設實作會傳回空的建構函式。</span><span class="sxs-lookup"><span data-stu-id="d47a9-136">The default implementation returns an empty constructor.</span></span> <span data-ttu-id="d47a9-137">如果相同的方法是將傳回之多個值，應該會傳回相同的執行個體的方法。</span><span class="sxs-lookup"><span data-stu-id="d47a9-137">If the same method is to be returned for multiple values, the same instance of the method should be returned.</span></span> <span data-ttu-id="d47a9-138">您可以使用<xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType>字典記住您已建立的方法。</span><span class="sxs-lookup"><span data-stu-id="d47a9-138">You can use the <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> dictionary to remember methods you have created.</span></span> <span data-ttu-id="d47a9-139">`typeDecl`參數也可用來新增基礎結構的方法。</span><span class="sxs-lookup"><span data-stu-id="d47a9-139">The `typeDecl` parameter can also be used to add infrastructure methods.</span></span> <span data-ttu-id="d47a9-140">例如，如果您想要發出的每個物件不同的方法，您需要依次呼叫所有這些方法的單一方法。</span><span class="sxs-lookup"><span data-stu-id="d47a9-140">For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</span></span> <span data-ttu-id="d47a9-141">這個方法可以加入所需的程式碼類型宣告。</span><span class="sxs-lookup"><span data-stu-id="d47a9-141">This method can be added to the code type declaration as needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d47a9-142">
            <paramref name="manager" />、<paramref name="typeDecl" /> 或 <paramref name="value" /> 為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-142">
              <paramref name="manager" />, <paramref name="typeDecl" />, or <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="http://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">
          <span data-ttu-id="d47a9-143">動態原始程式碼的產生和編譯</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-143">Dynamic Source Code Generation and Compilation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]&#xA;override this.GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]" Usage="typeCodeDomSerializer.GetInitializeMethods (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="d47a9-144">用於序列化的序列化管理員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-144">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="declaration">
          <span data-ttu-id="d47a9-145">用於序列化的型別宣告。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-145">The type declaration to use for serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d47a9-146">傳回要在還原序列化期間解譯的方法陣列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-146">Returns an array of methods to be interpreted during deserialization.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d47a9-147">方法的 <see cref="T:System.CodeDom.CodeMemberMethod" /> 陣列，要在還原序列化期間解譯。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-147">A <see cref="T:System.CodeDom.CodeMemberMethod" /> array of methods to be interpreted during deserialization.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d47a9-148">預設實作會傳回在其建構函式的單一元素陣列。</span><span class="sxs-lookup"><span data-stu-id="d47a9-148">The default implementation returns a single-element array with the constructor in it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d47a9-149">
            <paramref name="manager" /> 或 <paramref name="typeDecl" /> 是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-149">
              <paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="http://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">
          <span data-ttu-id="d47a9-150">動態原始程式碼的產生和編譯</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-150">Dynamic Source Code Generation and Compilation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration&#xA;override this.Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration" Usage="typeCodeDomSerializer.Serialize (manager, root, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager">
          <span data-ttu-id="d47a9-151">用於序列化的序列化管理員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-151">The serialization manager to use for serialization.</span>
          </span>
        </param>
        <param name="root">
          <span data-ttu-id="d47a9-152">要序列化的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-152">The object to serialize.</span>
          </span>
        </param>
        <param name="members">
          <span data-ttu-id="d47a9-153">成員的選擇性集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-153">Optional collection of members.</span>
          </span>
          <span data-ttu-id="d47a9-154">可以為 <see langword="null" /> 或空白。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-154">Can be <see langword="null" /> or empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d47a9-155">藉由建立定義根 (Root) 的新型別宣告序列化物件根。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-155">Serializes the object root by creating a new type declaration that defines root.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d47a9-156">
            <see cref="T:System.CodeDom.CodeTypeDeclaration" />，定義根物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-156">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that defines the root object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d47a9-157"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法會序列化給定的根物件和要建立新的類型定義之成員的選擇性集合。</span><span class="sxs-lookup"><span data-stu-id="d47a9-157">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method serializes the given root object and optional collection of members to create a new type definition.</span></span> <span data-ttu-id="d47a9-158">如果`members`集合包含值，這些值序列化。</span><span class="sxs-lookup"><span data-stu-id="d47a9-158">If the `members` collection contains values, these values are serialized.</span></span> <span data-ttu-id="d47a9-159">做為成員變數或本機變數，將這些值可能會序列化。</span><span class="sxs-lookup"><span data-stu-id="d47a9-159">Values themselves may serialize as either member variables or local variables.</span></span> <span data-ttu-id="d47a9-160">這項決定是藉由擴充項屬性上呼叫的物件搜尋`GenerateMember`。</span><span class="sxs-lookup"><span data-stu-id="d47a9-160">This determination is done by searching for an extender property on the object called `GenerateMember`.</span></span> <span data-ttu-id="d47a9-161">如果`true`，成員就會產生。</span><span class="sxs-lookup"><span data-stu-id="d47a9-161">If `true`, a member is generated.</span></span> <span data-ttu-id="d47a9-162">否則，會產生的本機變數。</span><span class="sxs-lookup"><span data-stu-id="d47a9-162">Otherwise, a local variable is generated.</span></span> <span data-ttu-id="d47a9-163">為了方便起見，`members`集合可以包含根物件。</span><span class="sxs-lookup"><span data-stu-id="d47a9-163">For convenience, the `members` collection can contain the root object.</span></span> <span data-ttu-id="d47a9-164">在此情況下，根物件不也會加入做為成員或本機變數。</span><span class="sxs-lookup"><span data-stu-id="d47a9-164">In this case, the root object is not also added as a member or local variable.</span></span>  
  
 <span data-ttu-id="d47a9-165">如果是具名的物件，傳回型別名稱是取自根物件的名稱。</span><span class="sxs-lookup"><span data-stu-id="d47a9-165">The name of the returned type is taken from the root object’s name, if it was a named object.</span></span> <span data-ttu-id="d47a9-166">如果沒有，則名稱簡單類型名稱的根類別中傳遞。</span><span class="sxs-lookup"><span data-stu-id="d47a9-166">If not, a name is fabricated from the simple type name of the root class.</span></span>  
  
 <span data-ttu-id="d47a9-167">下表顯示的預設實作所執行的工作<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d47a9-167">The following table shows the tasks performed by the default implementation of the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method.</span></span>  
  
|<span data-ttu-id="d47a9-168">工作</span><span class="sxs-lookup"><span data-stu-id="d47a9-168">Task</span></span>|<span data-ttu-id="d47a9-169">描述</span><span class="sxs-lookup"><span data-stu-id="d47a9-169">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="d47a9-170">植入的內容</span><span class="sxs-lookup"><span data-stu-id="d47a9-170">Context Seeding</span></span>|<span data-ttu-id="d47a9-171">序列化內容會使用資料，包括初始化<xref:System.ComponentModel.Design.Serialization.RootContext>和 <xref:System.CodeDom.CodeTypeDeclaration></span><span class="sxs-lookup"><span data-stu-id="d47a9-171">The serialization context is initialized with data including the <xref:System.ComponentModel.Design.Serialization.RootContext> and <xref:System.CodeDom.CodeTypeDeclaration></span></span>|  
|<span data-ttu-id="d47a9-172">成員序列化</span><span class="sxs-lookup"><span data-stu-id="d47a9-172">Member Serialization</span></span>|<span data-ttu-id="d47a9-173">下一步<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>將逐步引導的所有成員和呼叫<xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>。</span><span class="sxs-lookup"><span data-stu-id="d47a9-173">Next, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> walks all of the members and calls <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>.</span></span> <span data-ttu-id="d47a9-174">因為序列化必須完成才視情況在<xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>，這可確保序列化未完成兩次。</span><span class="sxs-lookup"><span data-stu-id="d47a9-174">Because serialization is done opportunistically in <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, this ensures that serialization is not done twice.</span></span>|  
|<span data-ttu-id="d47a9-175">根序列化</span><span class="sxs-lookup"><span data-stu-id="d47a9-175">Root Serialization</span></span>|<span data-ttu-id="d47a9-176">接下來，將根物件序列化和它的陳述式新增至陳述式集合。</span><span class="sxs-lookup"><span data-stu-id="d47a9-176">Next, the root object is serialized and its statements are added to the statement collection.</span></span>|  
|<span data-ttu-id="d47a9-177">陳述式整合</span><span class="sxs-lookup"><span data-stu-id="d47a9-177">Statement Integration</span></span>|<span data-ttu-id="d47a9-178">所有物件都會都序列化之後，<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法排序陳述式，並且將它們新增至方法，從傳回<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>。</span><span class="sxs-lookup"><span data-stu-id="d47a9-178">After all objects are serialized, the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method orders the statements and adds them to a method returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span> <span data-ttu-id="d47a9-179">最後，建構函式在其中傳遞呼叫的所有方法所傳回<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>。</span><span class="sxs-lookup"><span data-stu-id="d47a9-179">Finally, a constructor is fabricated that calls all of the methods returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span>|  
  
-  
  
 <span data-ttu-id="d47a9-180">下表顯示的物件<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法置於內容堆疊。</span><span class="sxs-lookup"><span data-stu-id="d47a9-180">The following table shows the objects the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method places on the context stack.</span></span>  
  
|<span data-ttu-id="d47a9-181">執行個體</span><span class="sxs-lookup"><span data-stu-id="d47a9-181">Instance</span></span>|<span data-ttu-id="d47a9-182">描述</span><span class="sxs-lookup"><span data-stu-id="d47a9-182">Description</span></span>|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|<span data-ttu-id="d47a9-183">此序列化程式。</span><span class="sxs-lookup"><span data-stu-id="d47a9-183">This serializer.</span></span> <span data-ttu-id="d47a9-184">衍生類別，可能會發現它可將加入這個類別的公用屬性。</span><span class="sxs-lookup"><span data-stu-id="d47a9-184">Deriving classes may find it useful to add public properties to this class.</span></span>|  
|<xref:System.CodeDom.CodeTypeDeclaration>|<span data-ttu-id="d47a9-185">正在建立的型別。</span><span class="sxs-lookup"><span data-stu-id="d47a9-185">The type being created.</span></span> <span data-ttu-id="d47a9-186">大部分的物件不需要直接存取。</span><span class="sxs-lookup"><span data-stu-id="d47a9-186">Most objects do not need direct access to this.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d47a9-187">
            <paramref name="manager" /> 或 <paramref name="root" /> 是 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-187">
              <paramref name="manager" /> or <paramref name="root" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="http://msdn.microsoft.com/library/d077a3e8-bd81-4bdf-b6a3-323857ea30fb">
          <span data-ttu-id="d47a9-188">動態原始程式碼的產生和編譯</span>
          <span class="sxs-lookup">
            <span data-stu-id="d47a9-188">Dynamic Source Code Generation and Compilation</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>