<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="97b7b-101">將物件序列化為新的型別。</span><span class="sxs-lookup"><span data-stu-id="97b7b-101">Serializes an object to a new type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-102"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>類別會執行與相同的工作<xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>，但將物件序列化為透過此類別會定義新型別。</span><span class="sxs-lookup"><span data-stu-id="97b7b-102">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> class performs the same tasks as a <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, but serializing an object through this class defines a new type.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97b7b-103">初始化 <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="97b7b-103">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="97b7b-104">用於序列化的序列化管理員。</span><span class="sxs-lookup"><span data-stu-id="97b7b-104">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="97b7b-105">要用於序列化的型別宣告。</span><span class="sxs-lookup"><span data-stu-id="97b7b-105">Type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="97b7b-106">還原序列化指定的型別宣告 (Type Declaration)。</span><span class="sxs-lookup"><span data-stu-id="97b7b-106">Deserializes the given type declaration.</span></span></summary>
        <returns><span data-ttu-id="97b7b-107">根物件。</span><span class="sxs-lookup"><span data-stu-id="97b7b-107">The root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-108"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>方法還原序列化序列化先前的程式碼型別宣告。</span><span class="sxs-lookup"><span data-stu-id="97b7b-108">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method deserializes a previously serialized code type declaration.</span></span> <span data-ttu-id="97b7b-109">下表顯示工作預設實作會執行。</span><span class="sxs-lookup"><span data-stu-id="97b7b-109">The following table shows the tasks default implementation performs.</span></span>  
  
|<span data-ttu-id="97b7b-110">工作</span><span class="sxs-lookup"><span data-stu-id="97b7b-110">Task</span></span>|<span data-ttu-id="97b7b-111">描述</span><span class="sxs-lookup"><span data-stu-id="97b7b-111">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="97b7b-112">區分大小寫檢查</span><span class="sxs-lookup"><span data-stu-id="97b7b-112">Case Sensitivity Checks</span></span>|<span data-ttu-id="97b7b-113">實作搜尋<xref:System.CodeDom.Compiler.CodeDomProvider>服務，以決定是否它應該將成員視為區分大小寫或不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="97b7b-113">The implementation searches for a <xref:System.CodeDom.Compiler.CodeDomProvider> service to decide if it should treat members as case sensitive or case insensitive.</span></span>|  
|<span data-ttu-id="97b7b-114">陳述式排序</span><span class="sxs-lookup"><span data-stu-id="97b7b-114">Statement Sorting</span></span>|<span data-ttu-id="97b7b-115">所有成員變數和 init 方法的本機變數會都儲存在資料表中。</span><span class="sxs-lookup"><span data-stu-id="97b7b-115">All member variables and local variables from init methods are stored in a table.</span></span> <span data-ttu-id="97b7b-116">則 init 方法中的每個陳述式加入至其左邊，根據組成群組，以便在該變數底下的分組指派或作業在特定變數的所有陳述式的陳述式集合。</span><span class="sxs-lookup"><span data-stu-id="97b7b-116">Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</span></span> <span data-ttu-id="97b7b-117">沒有陳述式的變數會被捨棄。</span><span class="sxs-lookup"><span data-stu-id="97b7b-117">Variables that have no statements are discarded.</span></span>|  
|<span data-ttu-id="97b7b-118">還原序列化</span><span class="sxs-lookup"><span data-stu-id="97b7b-118">Deserialization</span></span>|<span data-ttu-id="97b7b-119">每個變數的陳述式集合會根據變數還原序列化。</span><span class="sxs-lookup"><span data-stu-id="97b7b-119">The statement collections for each variable are deserialized according to the variable.</span></span>|  
  
 <span data-ttu-id="97b7b-120">下表顯示服務<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A>方法需要。</span><span class="sxs-lookup"><span data-stu-id="97b7b-120">The following table shows the services the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method requires.</span></span>  
  
|<span data-ttu-id="97b7b-121">服務</span><span class="sxs-lookup"><span data-stu-id="97b7b-121">Service</span></span>|<span data-ttu-id="97b7b-122">描述</span><span class="sxs-lookup"><span data-stu-id="97b7b-122">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|<span data-ttu-id="97b7b-123">時並非絕對必要，「 服務，如果有的話，用來判斷是否序列化應區分大小寫或不區分大小寫。</span><span class="sxs-lookup"><span data-stu-id="97b7b-123">While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.</span></span>|  
|<xref:System.ComponentModel.IContainer>|<span data-ttu-id="97b7b-124">如果物件不存在名稱表格中還原序列化時，查詢<xref:System.ComponentModel.IContainer>進行。</span><span class="sxs-lookup"><span data-stu-id="97b7b-124">If an object does not exist in the name table during deserialization, a query for <xref:System.ComponentModel.IContainer> is made.</span></span> <span data-ttu-id="97b7b-125">如果這個查詢成功，容器會檢查物件。</span><span class="sxs-lookup"><span data-stu-id="97b7b-125">If this query succeeds, the container is checked for the object.</span></span> <span data-ttu-id="97b7b-126">容器也作為替代的元件所需的任何容器引數。</span><span class="sxs-lookup"><span data-stu-id="97b7b-126">The container is also used as a stand-in for any container argument needed by components.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="97b7b-127"><paramref name="manager" /> 或 <paramref name="typeDecl" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97b7b-127"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="97b7b-128">用於序列化的序列化管理員。</span><span class="sxs-lookup"><span data-stu-id="97b7b-128">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="97b7b-129">用於序列化的類型宣告。</span><span class="sxs-lookup"><span data-stu-id="97b7b-129">The type declaration to use for serialization.</span></span></param>
        <param name="value"><span data-ttu-id="97b7b-130">供序列化使用的值。</span><span class="sxs-lookup"><span data-stu-id="97b7b-130">The value to use for serialization.</span></span></param>
        <summary><span data-ttu-id="97b7b-131">傳回一個方法，而在該方法中會儲存用於序列化成員的陳述式。</span><span class="sxs-lookup"><span data-stu-id="97b7b-131">Returns the method where statements used to serialize a member are stored.</span></span></summary>
        <returns><span data-ttu-id="97b7b-132">用於為指定成員發出所有初始化程式碼的方法。</span><span class="sxs-lookup"><span data-stu-id="97b7b-132">The method used to emit all of the initialization code for the given member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-133"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>方法會傳回指定成員發出所有初始化程式碼的方法。</span><span class="sxs-lookup"><span data-stu-id="97b7b-133">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> method returns the method to emit all of the initialization code for the given member.</span></span> <span data-ttu-id="97b7b-134">預設實作會傳回空的建構函式。</span><span class="sxs-lookup"><span data-stu-id="97b7b-134">The default implementation returns an empty constructor.</span></span> <span data-ttu-id="97b7b-135">如果傳回多個值相同的方法，則應該會傳回相同的執行個體的方法。</span><span class="sxs-lookup"><span data-stu-id="97b7b-135">If the same method is to be returned for multiple values, the same instance of the method should be returned.</span></span> <span data-ttu-id="97b7b-136">您可以使用<xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType>記住您建立的方法的字典。</span><span class="sxs-lookup"><span data-stu-id="97b7b-136">You can use the <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> dictionary to remember methods you have created.</span></span> <span data-ttu-id="97b7b-137">`typeDecl`參數也可用來新增基礎結構的方法。</span><span class="sxs-lookup"><span data-stu-id="97b7b-137">The `typeDecl` parameter can also be used to add infrastructure methods.</span></span> <span data-ttu-id="97b7b-138">例如，如果您想要發出的每個物件不同的方法，您需要依次呼叫所有這些方法的單一方法。</span><span class="sxs-lookup"><span data-stu-id="97b7b-138">For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</span></span> <span data-ttu-id="97b7b-139">這個方法可以加入所需的程式碼型別宣告。</span><span class="sxs-lookup"><span data-stu-id="97b7b-139">This method can be added to the code type declaration as needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="97b7b-140"><paramref name="manager" /><paramref name="typeDecl" /> 或 <paramref name="value" /> 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97b7b-140"><paramref name="manager" />, <paramref name="typeDecl" />, or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="97b7b-141">用於序列化的序列化管理員。</span><span class="sxs-lookup"><span data-stu-id="97b7b-141">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="97b7b-142">用於序列化的類型宣告。</span><span class="sxs-lookup"><span data-stu-id="97b7b-142">The type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="97b7b-143">傳回要在還原序列化期間解譯的方法陣列。</span><span class="sxs-lookup"><span data-stu-id="97b7b-143">Returns an array of methods to be interpreted during deserialization.</span></span></summary>
        <returns><span data-ttu-id="97b7b-144">方法的 <see cref="T:System.CodeDom.CodeMemberMethod" /> 陣列，要在還原序列化期間解譯。</span><span class="sxs-lookup"><span data-stu-id="97b7b-144">A <see cref="T:System.CodeDom.CodeMemberMethod" /> array of methods to be interpreted during deserialization.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-145">預設實作會傳回在其建構函式的單一元素陣列。</span><span class="sxs-lookup"><span data-stu-id="97b7b-145">The default implementation returns a single-element array with the constructor in it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="97b7b-146"><paramref name="manager" /> 或 <paramref name="typeDecl" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97b7b-146"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="97b7b-147">用於序列化的序列化管理員。</span><span class="sxs-lookup"><span data-stu-id="97b7b-147">The serialization manager to use for serialization.</span></span></param>
        <param name="root"><span data-ttu-id="97b7b-148">要序列化的物件。</span><span class="sxs-lookup"><span data-stu-id="97b7b-148">The object to serialize.</span></span></param>
        <param name="members"><span data-ttu-id="97b7b-149">成員的選擇性集合。</span><span class="sxs-lookup"><span data-stu-id="97b7b-149">Optional collection of members.</span></span> <span data-ttu-id="97b7b-150">可以為 <see langword="null" /> 或空白。</span><span class="sxs-lookup"><span data-stu-id="97b7b-150">Can be <see langword="null" /> or empty.</span></span></param>
        <summary><span data-ttu-id="97b7b-151">藉由建立定義根 (Root) 的新型別宣告序列化物件根。</span><span class="sxs-lookup"><span data-stu-id="97b7b-151">Serializes the object root by creating a new type declaration that defines root.</span></span></summary>
        <returns><span data-ttu-id="97b7b-152"><see cref="T:System.CodeDom.CodeTypeDeclaration" />，定義根物件。</span><span class="sxs-lookup"><span data-stu-id="97b7b-152">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that defines the root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97b7b-153"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法會序列化給定的根物件和要建立新的類型定義之成員的選擇性集合。</span><span class="sxs-lookup"><span data-stu-id="97b7b-153">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method serializes the given root object and optional collection of members to create a new type definition.</span></span> <span data-ttu-id="97b7b-154">如果`members`集合包含值，這些值序列化。</span><span class="sxs-lookup"><span data-stu-id="97b7b-154">If the `members` collection contains values, these values are serialized.</span></span> <span data-ttu-id="97b7b-155">做為成員變數或本機變數，將這些值可能會序列化。</span><span class="sxs-lookup"><span data-stu-id="97b7b-155">Values themselves may serialize as either member variables or local variables.</span></span> <span data-ttu-id="97b7b-156">這項判斷是藉由擴充項屬性上呼叫的物件搜尋`GenerateMember`。</span><span class="sxs-lookup"><span data-stu-id="97b7b-156">This determination is done by searching for an extender property on the object called `GenerateMember`.</span></span> <span data-ttu-id="97b7b-157">如果`true`，成員就會產生。</span><span class="sxs-lookup"><span data-stu-id="97b7b-157">If `true`, a member is generated.</span></span> <span data-ttu-id="97b7b-158">否則，會產生的本機變數。</span><span class="sxs-lookup"><span data-stu-id="97b7b-158">Otherwise, a local variable is generated.</span></span> <span data-ttu-id="97b7b-159">為了方便起見，`members`集合可以包含根物件。</span><span class="sxs-lookup"><span data-stu-id="97b7b-159">For convenience, the `members` collection can contain the root object.</span></span> <span data-ttu-id="97b7b-160">在此情況下，根物件不也會加入做為成員或本機變數。</span><span class="sxs-lookup"><span data-stu-id="97b7b-160">In this case, the root object is not also added as a member or local variable.</span></span>  
  
 <span data-ttu-id="97b7b-161">如果是具名的物件的傳回型別名稱是取自根物件的名稱。</span><span class="sxs-lookup"><span data-stu-id="97b7b-161">The name of the returned type is taken from the root object’s name, if it was a named object.</span></span> <span data-ttu-id="97b7b-162">如果沒有，則名稱簡單類型名稱的根類別中傳遞。</span><span class="sxs-lookup"><span data-stu-id="97b7b-162">If not, a name is fabricated from the simple type name of the root class.</span></span>  
  
 <span data-ttu-id="97b7b-163">下表顯示的預設實作所執行的工作<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="97b7b-163">The following table shows the tasks performed by the default implementation of the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method.</span></span>  
  
|<span data-ttu-id="97b7b-164">工作</span><span class="sxs-lookup"><span data-stu-id="97b7b-164">Task</span></span>|<span data-ttu-id="97b7b-165">描述</span><span class="sxs-lookup"><span data-stu-id="97b7b-165">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="97b7b-166">植入的內容</span><span class="sxs-lookup"><span data-stu-id="97b7b-166">Context Seeding</span></span>|<span data-ttu-id="97b7b-167">序列化內容會初始化資料包括<xref:System.ComponentModel.Design.Serialization.RootContext>和 <xref:System.CodeDom.CodeTypeDeclaration></span><span class="sxs-lookup"><span data-stu-id="97b7b-167">The serialization context is initialized with data including the <xref:System.ComponentModel.Design.Serialization.RootContext> and <xref:System.CodeDom.CodeTypeDeclaration></span></span>|  
|<span data-ttu-id="97b7b-168">成員序列化</span><span class="sxs-lookup"><span data-stu-id="97b7b-168">Member Serialization</span></span>|<span data-ttu-id="97b7b-169">下一步<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>會引導所有成員和呼叫<xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>。</span><span class="sxs-lookup"><span data-stu-id="97b7b-169">Next, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> walks all of the members and calls <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>.</span></span> <span data-ttu-id="97b7b-170">因為序列化必須視情況在完成<xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>，這可確保，序列化不是兩次。</span><span class="sxs-lookup"><span data-stu-id="97b7b-170">Because serialization is done opportunistically in <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, this ensures that serialization is not done twice.</span></span>|  
|<span data-ttu-id="97b7b-171">根序列化</span><span class="sxs-lookup"><span data-stu-id="97b7b-171">Root Serialization</span></span>|<span data-ttu-id="97b7b-172">接下來，序列化根物件，其陳述式已加入至陳述式集合。</span><span class="sxs-lookup"><span data-stu-id="97b7b-172">Next, the root object is serialized and its statements are added to the statement collection.</span></span>|  
|<span data-ttu-id="97b7b-173">陳述式整合</span><span class="sxs-lookup"><span data-stu-id="97b7b-173">Statement Integration</span></span>|<span data-ttu-id="97b7b-174">所有物件都會都序列化之後，<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法訂單陳述式，並將它們加入至方法，從傳回<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>。</span><span class="sxs-lookup"><span data-stu-id="97b7b-174">After all objects are serialized, the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method orders the statements and adds them to a method returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span> <span data-ttu-id="97b7b-175">最後，建構函式會傳遞可呼叫的方法所傳回的所有<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>。</span><span class="sxs-lookup"><span data-stu-id="97b7b-175">Finally, a constructor is fabricated that calls all of the methods returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span>|  
  
-  
  
 <span data-ttu-id="97b7b-176">下表顯示的物件<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A>方法置於內容堆疊。</span><span class="sxs-lookup"><span data-stu-id="97b7b-176">The following table shows the objects the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method places on the context stack.</span></span>  
  
|<span data-ttu-id="97b7b-177">執行個體</span><span class="sxs-lookup"><span data-stu-id="97b7b-177">Instance</span></span>|<span data-ttu-id="97b7b-178">描述</span><span class="sxs-lookup"><span data-stu-id="97b7b-178">Description</span></span>|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|<span data-ttu-id="97b7b-179">這個序列化程式。</span><span class="sxs-lookup"><span data-stu-id="97b7b-179">This serializer.</span></span> <span data-ttu-id="97b7b-180">衍生類別可能會發現將這個類別的公用屬性。</span><span class="sxs-lookup"><span data-stu-id="97b7b-180">Deriving classes may find it useful to add public properties to this class.</span></span>|  
|<xref:System.CodeDom.CodeTypeDeclaration>|<span data-ttu-id="97b7b-181">正在建立的類型。</span><span class="sxs-lookup"><span data-stu-id="97b7b-181">The type being created.</span></span> <span data-ttu-id="97b7b-182">大部分的物件不需要直接存取。</span><span class="sxs-lookup"><span data-stu-id="97b7b-182">Most objects do not need direct access to this.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="97b7b-183"><paramref name="manager" /> 或 <paramref name="root" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97b7b-183"><paramref name="manager" /> or <paramref name="root" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
  </Members>
</Type>