<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="02366399c041606f7039849acedcefa543ab6551" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="58874874" /></Metadata><TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <TypeSignature Language="F#" Value="type HttpEncoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供編碼和解碼邏輯。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此類別包含編碼和解碼這類方法在類別中所使用的邏輯<xref:System.Web.HttpUtility>， <xref:System.Web.HttpServerUtility>，和<xref:System.Net.HttpResponseHeader>。  
  
 您可以繼承自<xref:System.Web.Util.HttpEncoder>類別並覆寫其行為，以自訂預設的編碼和解碼的 ASP.NET 行為。 然後，您設定<xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A>屬性<xref:System.Web.Configuration.HttpRuntimeSection>類別，以設定您的自訂類別。  
  
 編碼和解碼的自訂類別衍生自<xref:System.Web.Util.HttpEncoder>可覆寫內建的 ASP.NET 編碼和解碼行為，或變更只會選取的項目。  
  
 您可以在 ASP.NET 中來取代或補充下列編碼行為設定的自訂編碼類型：  
  
-   HTML 編碼  
  
-   HTML 屬性編碼  
  
-   URL 編碼  
  
-   URL 路徑編碼  
  
-   HTTP 標頭名稱和標頭值編碼方式  
  
 根據預設，ASP.NET 應用程式設定為使用<xref:System.Web.Security.AntiXss.AntiXssEncoder>輸入，針對所有輸出的編碼方式。  
  
 下列範例從應用程式層級的 Web.config 檔案顯示如何<xref:System.Web.Security.AntiXss.AntiXssEncoder>類型會設定 ASP.NET 應用程式：  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 範例會設定中的組態設定<xref:System.Web.Security.AntiXss.AntiXssEncoder>類別來執行所有輸出應用程式中的編碼方式。 如需詳細資訊，請參閱<xref:System.Web.Security.AntiXss.AntiXssEncoder>類別概觀。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>當您建立自訂編碼器類別並覆寫基底類別的基底方法時，衍生的編碼器可能會擲回任何覆寫方法的例外狀況。 不過，在下列情況擲回例外狀況可能會導致非預期的行為，在 ASP.NET 中： 
-如果 ASP.NET 呈現錯誤頁面，起因於未處理的例外狀況從自訂編碼器，ASP.NET 不會嘗試藉由呼叫自訂編碼器編碼其錯誤輸出。 這可避免遞迴錯誤狀況。  
  
-當 ASP.NET 傳送 HTTP 標頭至 IIS，ASP.NET 就會有任何未處理例外狀況的佈建。 因此，（如果組態設定允許此頁面，即可顯示），將會呈現標準的 ASP.NET 錯誤頁面。</para></block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Util.HttpEncoder" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.HttpEncoder with get, set" Usage="System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定將在應用程式中使用的 <see cref="T:System.Web.Util.HttpEncoder" /> 型別。</summary>
        <value>將使用之編碼器/解碼器型別的參考。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果衍生<xref:System.Web.Util.HttpEncoder>已在組態檔中，指定類型<xref:System.Web.Util.HttpEncoder.Current%2A>屬性會傳回自訂型別的參考。 不過，如果沒有自訂編碼器，屬性會傳回預設的 ASP.NET 的參考<xref:System.Web.Util.HttpEncoder>執行個體。  
  
 <xref:System.Web.Util.HttpEncoder.Current%2A>屬性不是安全執行緒。 只能在應用程式中設定這個屬性`Application_Start`方法，因為`Application_Start`單一執行緒上執行。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指派給這個屬性的編碼器執行個體為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.Util.HttpEncoder" Usage="System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 ASP.NET 預設編碼器的參考。</summary>
        <value>預設編碼器的參考。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 常見的編碼問題是預設 ASP.NET<xref:System.Web.Util.HttpEncoder.UrlEncode%2A>行為會將空格轉換成"+"字元。 在過去，"+"字元已網際網路慣例更人類看得懂的方式編碼在 URL 中的空格字元。 不過，根據標準，空格字元應該為"%20"，而不是編碼為"+"字元。 ASP.NET 可讓您實作更多的標準符合編碼演算法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberSignature Language="F#" Value="abstract member HeaderNameValueEncode : string * string *  *  -&gt; unit&#xA;override this.HeaderNameValueEncode : string * string *  *  -&gt; unit" Usage="httpEncoder.HeaderNameValueEncode (headerName, headerValue, encodedHeaderName, encodedHeaderValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">要編碼的 HTTP 標頭名稱。</param>
        <param name="headerValue">要編碼的 HTTP 標頭值。</param>
        <param name="encodedHeaderName">當這個方法傳回時，傳回值會包含要用於 HTTP 標頭的編碼名稱。 這個參數會以未初始化的狀態傳遞。</param>
        <param name="encodedHeaderValue">當這個方法傳回時，傳回值會包含要用於 HTTP 標頭的編碼值。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>將標頭名稱及值編碼為可當做 HTTP 標頭使用的字串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A>方法會從輸入的字串`headerName`和`headerValue`參數，並將其編碼。 做為 out 參數，會傳回已編碼的值。  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A>方法會使用下列邏輯來編碼標頭名稱和值：  
  
-   其 Unicode 值小於以外 9 的 ASCII 字元的 ASCII 字元 32 的所有字元都都轉換為格式的 URL 編碼`%NN`其中`N`字元表示的十六進位值。  
  
-   ASCII 字元 9 （水平定位字元） 不是 URL 編碼。  
  
-   127 的 ASCII 字元編碼為`%7F`。  
  
-   所有其他字元不被編碼。  
  
    > [!NOTE]
    >  雖然這個方法可以用於 Unicode 值，它通常用於 ASCII 範圍內的值。  
  
 預設實作<xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A>方法會傳回值`headerValue`中`encodedHeaderValue`如果`headerValue`是`null`或為空字串。 同樣地，預設實作會傳回的值`headerName`中`encodedHeaderName`如果`headerName`是`null`或為空字串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要編碼的字串。</param>
        <param name="output">要在其中寫入編碼值的文字寫入器。</param>
        <summary>將輸入值編碼為字串，此字串可插入至使用單或雙引號分隔的 HTML 屬性中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>方法會將字元編碼使用標準的 HTML 實體。 例如， `<` （左的角括號） 的編碼方式`&lt;`並`\`（反斜線） 會編碼為`&#92;`。  
  
 它會安全地使用<xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>單引號和雙引號括住屬性內。 值必須加上引號。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlDecode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要解碼的字串。</param>
        <param name="output">要在其中寫入解碼值的文字寫入器。</param>
        <summary>將 HTML 編碼字串中的值解碼。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出 ASP.NET 解碼邏輯可以解碼的字元序列。  
  
|字元順序|規則|  
|------------------------|----------|  
|`&#NNN;` （ASCII 字元的十進位碼）。|解碼成指定的 ASCII 字元。 字元順序開始 # 字元之後的第一個數字，並完成於分號。|  
|`&#xZZ;` （ASCII 字元的十六進位碼）。|解碼成指定的 ASCII 字元。 編碼的格式指定的字元，而不是十進位值中使用十六進位字元。 字元順序開始 # 字元之後的第一個數字，並完成於分號。|  
|具名的 HTML 實體。|解碼為對等的 ASCII 字元。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要編碼的字串。</param>
        <param name="output">要在其中寫入編碼值的文字寫入器。</param>
        <summary>將字串編碼為 HTML 編碼字串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出 ASP.NET 的編碼邏輯可以解碼的字元序列。  
  
|字元|編碼為|  
|---------------|----------------|  
|`<` （左的角括號）|`&lt;`|  
|`>` （右角括號）|`&gt;`|  
|`"` （雙引號）|`&quot;`|  
|`&` （連字號）|`&amp;`|  
|`\` （反斜線）|`&#92;`|  
|從 160 到 255 的 ASCII 字元|`&#NNN;`其中`NNN`的三位數十進位字元碼|  
  
 如果您覆寫<xref:System.Web.Util.HttpEncoder.HtmlEncode%2A>方法，您必須產生的安全性在雙引號或單引號的 HTML 屬性的輸出。 這適用於剖析 Razor 引擎，其中標記和程式碼可以結合，例如\<標記 attr ="@value">。 此外，@ 運算子不是內容感知 Razor 引擎處理，因此它會呼叫<xref:System.Web.Util.HttpEncoder.HtmlEncode%2A>而非<xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member JavaScriptStringEncode : string -&gt; string&#xA;override this.JavaScriptStringEncode : string -&gt; string" Usage="httpEncoder.JavaScriptStringEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">要編碼的字串。</param>
        <summary>編碼字串。</summary>
        <returns>編碼字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 編碼，可確定所有瀏覽器會正確傳輸 URL 字串中的文字。 問號 （？）、 連字號 (&)、 斜線 （/） 和空格等字元可能會被截斷或某些瀏覽器損毀。 因此，您必須編碼這些字元。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member UrlEncode : byte[] * int * int -&gt; byte[]&#xA;override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="httpEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">要編碼的位元組陣列。</param>
        <param name="offset"><paramref name="bytes" /> 陣列中要開始編碼的位置。</param>
        <param name="count"><paramref name="bytes" /> 陣列中要編碼之項目的數目。</param>
        <summary>將 URL 中不允許的字元陣列編碼為對等的十六進位字元實體。</summary>
        <returns>編碼字元的陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A>方法由數個 URL 編碼中的方法呼叫<xref:System.Web.HttpUtility>類別。  
  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A>方法進行 URL 編碼的任何不在集合的 ASCII 字元的字元數字會被視為安全的 URL。 空格會被編碼為 ASCII 「`+"`字元。 URL 安全的 ASCII 字元包括 ASCII 字元 (A 到 Z 和 a 到 z)、 數字 (0 到 9)，以及某些標點符號。 下表列出會被視為安全的 URL ASCII 字元的標點符號。  
  
|字元|描述|  
|---------------|-----------------|  
|-|連字號|  
|_|底線|  
|。|句點 （點）|  
|!|驚嘆號|  
|*|星號 （star 認證）|  
|(|左括號|  
|)|右括號|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小於零或大於 <paramref name="bytes" /> 陣列的長度。  
  
-或- 
 <paramref name="count" /> 小於零或 <paramref name="count" /> 加上 <paramref name="offset" /> 大於 <paramref name="bytes" /> 陣列的長度。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member UrlPathEncode : string -&gt; string&#xA;override this.UrlPathEncode : string -&gt; string" Usage="httpEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要編碼的字串。</param>
        <summary>編碼 URL 的子區段。</summary>
        <returns>URL 編碼的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> 方法會呼叫 <xref:System.Web.HttpUtility.UrlPathEncode%2A> 方法。 <xref:System.Web.HttpUtility.UrlPathEncode%2A>方法會執行下列步驟：  
  
-   套用的編碼邏輯<xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A>只有 URL （可在不含查詢字串） 的路徑部分的方法。 此方法會假設 URL 編碼為 utf-8 字串。  
  
-   將非空格的編碼，以便產生編碼的字串中使用的前 128 個 ASCII 字元的子集。 128 和更新版本，或 32 和更少的 Unicode 值的任何字元是 URL 編碼。  
  
-   將空格編碼為 %20。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>