<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d4bac60268ba6ef9b0edfa417efcbd211763d938" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36575147" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <TypeSignature Language="F#" Value="type HttpEncoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides encoding and decoding logic.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別包含的編碼和解碼，例如由類別中方法的邏輯<xref:System.Web.HttpUtility>， <xref:System.Web.HttpServerUtility>，和<xref:System.Net.HttpResponseHeader>。  
  
 您可以繼承自<xref:System.Web.Util.HttpEncoder>類別並覆寫其自訂預設的編碼和解碼的 ASP.NET 行為的行為。 然後，您設定<xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A>屬性<xref:System.Web.Configuration.HttpRuntimeSection>類別來設定您的自訂類別。  
  
 用於編碼和解碼，為自訂類別衍生自<xref:System.Web.Util.HttpEncoder>可以覆寫內建 ASP.NET 編碼和解碼行為，或變更只會選取它的層面。  
  
 您可以將下列編碼行為來補充或取代 ASP.NET 中設定的自訂編碼類型：  
  
-   HTML 編碼  
  
-   HTML 屬性編碼  
  
-   URL 編碼  
  
-   編碼方式的 URL 路徑  
  
-   HTTP 標頭名稱和編碼方式的標頭值  
  
 根據預設，ASP.NET 應用程式設定為使用<xref:System.Web.Security.AntiXss.AntiXssEncoder>輸入所有輸出編碼方式。  
  
 下列範例從應用程式層級的 Web.config 檔案顯示如何<xref:System.Web.Security.AntiXss.AntiXssEncoder>類型針對 ASP.NET 應用程式設定：  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 中的範例集合的組態設定<xref:System.Web.Security.AntiXss.AntiXssEncoder>類別以執行所有輸出應用程式中的編碼。 如需詳細資訊，請參閱<xref:System.Web.Security.AntiXss.AntiXssEncoder>類別概觀。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>當您建立自訂編碼器類別並覆寫基底方法的基底類別時，衍生的編碼器可能會擲回任何覆寫方法的例外狀況。不過，在下列情況下擲回例外狀況可能會導致非預期的行為，在 ASP.NET:-如果 ASP.NET 會呈現錯誤頁面已從自訂編碼器擲回未處理例外狀況所造成，ASP.NET 不會嘗試編碼其錯誤 o藉由呼叫自訂編碼器 utput。這可避免遞迴錯誤狀況。 -當 ASP.NET HTTP 標頭傳送到 IIS，ASP.NET 會具有不支援未處理例外狀況。因此，（如果有組態設定可讓此頁面，即可顯示），將會呈現標準的 ASP.NET 錯誤網頁。</para>
    </block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Util.HttpEncoder" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.HttpEncoder with get, set" Usage="System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or set the <see cref="T:System.Web.Util.HttpEncoder" /> type that will be used in an application.</summary>
        <value>將會使用編碼器/解碼器類型的參考。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果衍生<xref:System.Web.Util.HttpEncoder>已在組態檔中，指定類型<xref:System.Web.Util.HttpEncoder.Current%2A>屬性會傳回自訂類型的參考。 不過，如果沒有自訂編碼器，屬性會傳回預設 ASP.NET 的參考<xref:System.Web.Util.HttpEncoder>執行個體。  
  
 <xref:System.Web.Util.HttpEncoder.Current%2A>屬性不是安全執行緒。 只在應用程式中設定這個屬性`Application_Start`方法，因為`Application_Start`單一執行緒上執行。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The encoder instance that is being assigned to this property is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.Util.HttpEncoder" Usage="System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the default encoder for ASP.NET.</summary>
        <value>預設編碼器的參考。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 常見的編碼問題在於預設 ASP.NET<xref:System.Web.Util.HttpEncoder.UrlEncode%2A>行為會將空格轉換成"+"字元。 在過去，"+"字元已網際網路慣例在 URL 中的空格字元編碼成更人類看得懂的方式。 不過，根據標準，空格字元應該為"%20"，而不是要編碼為"+"字元。 ASP.NET 可讓您更多的標準相容編碼演算法的實作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberSignature Language="F#" Value="abstract member HeaderNameValueEncode : string * string *  *  -&gt; unit&#xA;override this.HeaderNameValueEncode : string * string *  *  -&gt; unit" Usage="httpEncoder.HeaderNameValueEncode (headerName, headerValue, encodedHeaderName, encodedHeaderValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">The HTTP header name to encode.</param>
        <param name="headerValue">The HTTP header value to encode.</param>
        <param name="encodedHeaderName">When this method returns, contains the encoded name to use for an HTTP header. This parameter is passed uninitialized.</param>
        <param name="encodedHeaderValue">When this method returns, contains the encoded value to use for an HTTP header. This parameter is passed uninitialized.</param>
        <summary>Encodes a header name and value into a string that can be used as an HTTP header.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A>方法會從輸入的字串`headerName`和`headerValue`參數，並將它們編碼。 編碼的值會傳回做為 out 參數。  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A>方法會使用下列邏輯來編碼標頭名稱和值：  
  
-   其 Unicode 值小於 ASCII 字元 32、 ASCII 字元 9、 除外的所有字元都是 URL 編碼成的格式為`%NN`其中`N`字元表示的十六進位值。  
  
-   9 （水平 tab 字元） 的 ASCII 字元不是 URL 編碼。  
  
-   127 的 ASCII 字元編碼成`%7F`。  
  
-   所有其他字元不被編碼。  
  
    > [!NOTE]
    >  雖然這個方法可以用於 Unicode 值，它通常用於 ASCII 範圍中的值。  
  
 預設實作<xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A>方法傳回的值`headerValue`中`encodedHeaderValue`如果`headerValue`是`null`或為空字串。 同樣地，預設實作會傳回的值`headerName`中`encodedHeaderName`如果`headerName`是`null`或為空字串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">The string to encode.</param>
        <param name="output">The text writer to write the encoded value to.</param>
        <summary>Encodes an incoming value into a string that can be inserted into an HTML attribute that is delimited by using single or double quotation marks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>方法使用標準 HTML 實體編碼的字元。 例如， `<` （左的角括號） 會編碼為`&lt;`和`\`（反斜線） 會編碼為`&#92;`。  
  
 您可以放心使用<xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>單引號和雙引號括住屬性內。 值必須加上引號。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlDecode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">The string to decode.</param>
        <param name="output">The text writer to write the decoded value to.</param>
        <summary>Decodes a value from an HTML-encoded string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出 ASP.NET 解碼邏輯可以解碼的字元序列。  
  
|字元順序|規則|  
|------------------------|----------|  
|`&#NNN;` （針對 ASCII 字元的十進位碼）。|解碼為指定的 ASCII 字元。 字元順序開始 # 字元之後的第一個數字，並於分號完成。|  
|`&#xZZ;` （針對 ASCII 字元的十六進位碼）。|解碼為指定的 ASCII 字元。 編碼的格式指定的字元，而不是十進位值中使用十六進位字元。 字元順序開始 # 字元之後的第一個數字，並於分號完成。|  
|具名的 HTML 實體。|解碼為對等的 ASCII 字元。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">The string to encode.</param>
        <param name="output">The text writer to write the encoded value to.</param>
        <summary>Encodes a string into an HTML-encoded string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出 ASP.NET 編碼邏輯可以解碼的字元序列。  
  
|字元|編碼為|  
|---------------|----------------|  
|`<` （左的角括號）|`&lt;`|  
|`>` （右角括號）|`&gt;`|  
|`"` （雙引號）|`&quot;`|  
|`&` （連字號）|`&amp;`|  
|`\` （反斜線）|`&#92;`|  
|從 160 到 255 的 ASCII 字元|`&#NNN;`其中`NNN`的三位數的十進位字元碼|  
  
 如果您覆寫<xref:System.Web.Util.HttpEncoder.HtmlEncode%2A>方法，您必須產生輸出，而且也是安全雙引號或單引號的 HTML 屬性中。 這適用於剖析 Razor 引擎，其中標記和程式碼可以結合，例如\<標記 attr ="@value">。 此外，@ 運算子不是內容感知 Razor 引擎處理，因此它會呼叫<xref:System.Web.Util.HttpEncoder.HtmlEncode%2A>而不是<xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member JavaScriptStringEncode : string -&gt; string&#xA;override this.JavaScriptStringEncode : string -&gt; string" Usage="httpEncoder.JavaScriptStringEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string to encode.</param>
        <summary>Encodes a string.</summary>
        <returns>An encoded string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 編碼方式可確保所有瀏覽器會正確傳輸 URL 字串中的文字。 例如問號 （？）、 連字號 (&)、 斜線 （/） 和空格字元可能會截斷或某些瀏覽器損毀。 因此，這些字元必須編碼。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member UrlEncode : byte[] * int * int -&gt; byte[]&#xA;override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="httpEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">An array of bytes to encode.</param>
        <param name="offset">The position in the <c>bytes</c> array at which to begin encoding.</param>
        <param name="count">The number of items in the <c>bytes</c> array to encode.</param>
        <summary>Encodes an array of characters that are not allowed in a URL into a hexadecimal character-entity equivalent.</summary>
        <returns>An array of encoded characters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A>方法由數個 URL 編碼中的方法呼叫<xref:System.Web.HttpUtility>類別。  
  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A>方法進行 URL 編碼的任何字元，且不在集合的 ASCII 字元的數字會被視為安全的 URL。 空格會被編碼為 ASCII"`+"`字元。 URL 安全 ASCII 字元包括 ASCII 字元 (A 到 Z 和 a 到 z)、 數字 (0 到 9)，以及某些標點符號。 下表列出會被視為 URL 安全 ASCII 字元的標點符號。  
  
|字元|描述|  
|---------------|-----------------|  
|-|連字號|  
|_|底線|  
|。|句點 （點）|  
|!|驚嘆號|  
|*|星號 （星號）|  
|(|左括號|  
|)|右括號|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than zero or greater than the length of the <paramref name="bytes" /> array.  -or-  <paramref name="count" /> is less than zero or <paramref name="count" /> plus <paramref name="offset" /> is greater than the length of the <paramref name="bytes" /> array.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member UrlPathEncode : string -&gt; string&#xA;override this.UrlPathEncode : string -&gt; string" Usage="httpEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string to encode.</param>
        <summary>Encodes a subsection of a URL.</summary>
        <returns>A URL-encoded string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> 方法會呼叫 <xref:System.Web.HttpUtility.UrlPathEncode%2A> 方法。 <xref:System.Web.HttpUtility.UrlPathEncode%2A>方法會執行下列步驟：  
  
-   適用於編碼的邏輯<xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A>只的 URL (不包括查詢字串） 的路徑部分的方法。 方法會假設 URL 會編碼為 utf-8 字串。  
  
-   將編碼非空間，使前 128 個 ASCII 字元的子集用於編碼的字串。 在 128 和更大，或 32 和更少的 Unicode 值的任何字元是 URL 編碼。  
  
-   將空格編碼為 20%。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>