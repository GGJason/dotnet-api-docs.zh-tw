<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e9af6ca1efee30c522e150ec0ff7b42684ff91ce" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36574991" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定義自訂要求驗證的基底方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，ASP.NET 不會驗證要求之前從要求的程式碼明確要求的值。 例如，ASP.NET 並不會驗證查詢字串值之前的程式碼存取<xref:System.Web.HttpRequest.QueryString%2A>集合。 根據預設，ASP.NET 也不會驗證某些類型的要求資料，例如表單值、 cookie、 使用 HTTP 和的值已上載的檔案名稱<xref:System.Web.HttpRequest.RawUrl%2A>屬性。  
  
 <xref:System.Web.Util.RequestValidator>類別是基底類別，可實作以提供自訂要求驗證。 實作這個類別，您可以決定當驗證發生時以及要求資料上執行驗證的類型。  
  
 根據預設，ASP.NET 提供跨網站指令碼 (XSS) 檢查。 不過，您也可以補充或取代所建立的自訂實作 XSS 提供在 ASP.NET 要求驗證邏輯。 例如，您可以撰寫自訂要求驗證的實作掃描 SQL 插入式攻擊，除了檢查 XSS 攻擊。  
  
 若要建立自訂要求驗證，您可以撰寫自訂的類別衍生自<xref:System.Web.Util.RequestValidator>基底類別。 接著，您會設定 ASP.NET 應用程式層級的 Web.config 檔案中使用自訂要求驗證程式。 在 App_Code 資料夾中，在已編譯的類別庫的 Bin 資料夾中，或在已編譯的類別庫在 GAC 中，您可以將自訂類別。  
  
> [!NOTE]
>  只有一個自訂要求驗證的類型可以設定應用程式。 您不可以設定不同的要求驗證的類型為個別的虛擬路徑或頁面。  
  
   
  
## Examples  
 下列範例會示範如何建立自訂要求驗證程式，可讓特定字串，用於查詢字串值。  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 下列範例會示範如何設定 ASP.NET 應用程式的 Web.config 檔案中使用自訂驗證程式。  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Util.RequestValidator" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator>類別有預設建構函式。 初始化類別的新執行個體時，內部的方法會擷取自訂的驗證詳細資料從應用程式的組態資訊。 中所包含的組態詳細資料<xref:System.Web.Configuration.HttpRuntimeSection>> 一節。 如需詳細資訊，請參閱[httpRuntime 元素 （ASP.NET 設定結構描述）](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369)和<xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A>屬性。  
  
 在初始化期間，單一執行個體<xref:System.Web.Util.RequestValidator>類別，建立和執行個體的參考保留在<xref:System.Web.Util.RequestValidator.Current%2A>屬性。 ASP.NET 不會建立新的要求驗證程式執行個體，每個要求。 因此的自訂實作<xref:System.Web.Util.RequestValidator>類別必須是安全執行緒。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定將在應用程式中使用之目前 <see cref="T:System.Web.Util.RequestValidator" /> 執行個體的參考。</summary>
        <value>
          <see cref="T:System.Web.Util.RequestValidator" /> 類別的執行個體。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.Current%2A>屬性維護的單一允許的執行個體參考<xref:System.Web.Util.RequestValidator>類別。 如果沒有執行個體存在，則會建立一個新。 如果執行個體已經存在，則會傳回目前執行個體。  
  
 在初始化期間，單一執行個體<xref:System.Web.Util.RequestValidator>類別，建立和執行個體的參考可在<xref:System.Web.Util.RequestValidator.Current%2A>屬性。 ASP.NET 不會建立新的要求驗證程式執行個體，每個要求。 因此的自訂實作<xref:System.Web.Util.RequestValidator>類別必須是安全執行緒。  
  
> [!NOTE]
>  <xref:System.Web.Util.RequestValidator.Current%2A>屬性不是安全執行緒屬性設定為目前的參考時<xref:System.Web.Util.RequestValidator>類別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">屬性為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">要求的 HTTP 內容。</param>
        <param name="value">要驗證的 HTTP 要求資料。</param>
        <param name="requestValidationSource">列舉，代表要驗證的要求資料之來源。 以下是該列舉的可能值：-   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(選擇性) 要驗證的項目之要求集合中的金鑰。 如果要驗證的資料是從集合取得，就會使用此參數。 如果要驗證的資料不是從集合取得，此參數可以是 <see langword="null" />。</param>
        <param name="validationFailureIndex">當傳回此方法時，會指出要求集合中有問題或無效文字的起始點 (從零算起)。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>提供呼叫受保護的 <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> 方法的公用方法，以驗證 HTTP 要求資料。</summary>
        <returns>如果要驗證的字串未包含可能用於惡意指令碼攻擊的未編碼字元則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A>方法提供的公用存取權受保護<xref:System.Web.Util.RequestValidator.IsValidRequestString%2A>方法。 這可讓您建立的自訂包裝函數類別<xref:System.Web.Util.RequestValidator>類別並呼叫<xref:System.Web.Util.RequestValidator.IsValidRequestString%2A>方法，而不需繼承自<xref:System.Web.Util.RequestValidator>類別。  
  
 要求驗證的相關資訊，請參閱<xref:System.Web.UnvalidatedRequestValues>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">目前要求的內容。</param>
        <param name="value">要驗證的 HTTP 要求資料。</param>
        <param name="requestValidationSource">列舉，代表要驗證的要求資料之來源。 以下是該列舉的可能值：- <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">在要驗證的項目之要求集合中的金鑰。 這是選擇性參數。 如果要驗證的資料是從集合取得，就會使用此參數。 如果要驗證的資料不是從集合取得，則 <c>collectionKey</c> 可以是 <see langword="null" />。</param>
        <param name="validationFailureIndex">當傳回此方法時，會指出要求集合中有問題或無效文字的起始點 (從零算起)。 這個參數會以未初始化的狀態傳遞。</param>
        <summary>驗證包含 HTTP 要求資料的字串。</summary>
        <returns>如果要驗證的字串有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您實作這個方法，以執行自訂驗證的要求資料。 基底行為<xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29>方法就像在內部實作 ASP.NET 危險的字串中跨網站指令碼驗證檢查的行為。 如需詳細資訊，請參閱[How To： 防止跨網站指令碼在 ASP.NET 中](http://go.microsoft.com/fwlink/?LinkID=178708)。  
  
 如果自訂驗證邏輯會偵測到錯誤，此方法應傳回`false`並提供在值`validationFailureIndex`表示造成錯誤之文字的起始點。 中的值`validationFailureIndex`必須是 0 或正整數。  
  
 要求驗證檢查的邏輯如下所示：  
  
-   <xref:System.Web.HttpRequest>類別執行內送資料的 null 字元移除檢查。  
  
-   <xref:System.Web.HttpRequest>類別會呼叫 <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A>方法 （基底方法的預設實作），或是呼叫方法的衍生的版本。  
  
-   如果<xref:System.Web.Util.RequestValidator.IsValidRequestString%2A>方法會傳回`false`來指出驗證失敗，ASP.NET 建構錯誤字串 （如有必要），並擲回<xref:System.Web.HttpRequestValidationException>例外狀況。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>