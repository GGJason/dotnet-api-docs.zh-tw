<Type Name="ReceiveCompletedEventArgs" FullName="System.Messaging.ReceiveCompletedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="40fb7c4c36e8a9ddbae569f24bf33f51c4c52063" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37479099" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ReceiveCompletedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReceiveCompletedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.ReceiveCompletedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ReceiveCompletedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReceiveCompletedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ReceiveCompletedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供 <see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> 事件的資料。 當非同步 (Asynchronous) 接收作業呼叫事件處理常式時，會將這個類別的執行個體 (Instance) 傳遞至處理常式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用事件通知以非同步方式從佇列接收訊息時，您必須建立處理訊息的方法。 您的程式碼必須呼叫<xref:System.Messaging.MessageQueue.BeginReceive%2A>開始非同步處理程序。 當收到訊息時，您的應用程式會收到通知，透過<xref:System.Messaging.MessageQueue.ReceiveCompleted>事件。 執行個體<xref:System.Messaging.ReceiveCompletedEventArgs>傳入呼叫事件處理常式的事件委派。 與相關聯的資料<xref:System.Messaging.MessageQueue.ReceiveCompleted>事件包含在委派的<xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A>參數。  
  
 有兩種方式可提供事件完成的通知： 事件通知和回呼。 <xref:System.Messaging.ReceiveCompletedEventArgs> 只用於事件通知。 比較回呼和事件通知的資訊，請參閱 < 事件與比較。回呼 」 MSDN 上。  
  
 <xref:System.Messaging.ReceiveCompletedEventArgs> 可讓您存取的訊息，起始端的非同步接收作業，透過<xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A>成員。 這是替代存取的訊息，與行為就如同呼叫<xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列程式碼範例會建立事件處理常式<xref:System.Messaging.MessageQueue.ReceiveCompleted>事件，並將它與事件委派使用<xref:System.Messaging.ReceiveCompletedEventHandler>。 事件處理常式`MyReceiveCompleted`、 從佇列接收訊息並將其主體寫入螢幕。  
  
 [!code-cpp[MessageQueue.ReceiveCompleted#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/CPP/mqreceivecompletedeventhandler.cpp#1)]
 [!code-csharp[MessageQueue.ReceiveCompleted#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/CS/mqreceivecompletedeventhandler.cs#1)]
 [!code-vb[MessageQueue.ReceiveCompleted#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/VB/mqreceivecompletedeventhandler.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ReceiveCompletedEventHandler" />
    <altmember cref="E:System.Messaging.MessageQueue.ReceiveCompleted" />
    <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
    <altmember cref="M:System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)" />
    <altmember cref="T:System.Messaging.Message" />
  </Docs>
  <Members>
    <Member MemberName="AsyncResult">
      <MemberSignature Language="C#" Value="public IAsyncResult AsyncResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IAsyncResult AsyncResult" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.ReceiveCompletedEventArgs.AsyncResult" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncResult As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IAsyncResult ^ AsyncResult { IAsyncResult ^ get(); void set(IAsyncResult ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncResult : IAsyncResult with get, set" Usage="System.Messaging.ReceiveCompletedEventArgs.AsyncResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要求的非同步作業結果。</summary>
        <value>
          <see cref="T:System.IAsyncResult" />，包含與接收作業相關聯的資料。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A> 指出正在進行中或已完成的非同步作業。 屬性包含資料，以協助判斷哪些數個潛在的非同步作業完成，並傳遞至事件處理常式時，可讓<xref:System.Messaging.MessageQueue.EndReceive%2A>存取已完成之作業相關聯的訊息。  
  
 當您呼叫<xref:System.Messaging.MessageQueue.BeginReceive%2A>、<xref:System.IAsyncResult>即使訊息時，如果有的話，有尚未擷取作業未完成，因為會立即傳回。 <xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A>表示非同步作業的狀態。 <xref:System.Messaging.MessageQueue.BeginReceive%2A> 建立物件，因為它會修改在整個作業，直到<xref:System.Messaging.MessageQueue.EndReceive%2A>完成它。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.BeginReceive" />
        <altmember cref="M:System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)" />
        <altmember cref="T:System.IAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Message" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.ReceiveCompletedEventArgs.Message" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Message As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Message { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : System.Messaging.Message" Usage="System.Messaging.ReceiveCompletedEventArgs.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與非同步接收作業關聯的訊息。</summary>
        <value>
          <see cref="T:System.Messaging.Message" />，表示非同步接收作業的結果。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A>屬性會提供方法來擷取訊息，起始端的非同步接收作業。  
  
 <xref:System.Messaging.MessageQueue.EndReceive%2A?displayProperty=nameWithType> 第一次呼叫<xref:System.Messaging.ReceiveCompletedEventArgs.Message%2A>屬性唯讀，因此不需要呼叫<xref:System.Messaging.MessageQueue.EndReceive%2A>之前取得這個屬性的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">無法擷取 <see cref="P:System.Messaging.ReceiveCompletedEventArgs.Message" />。 非同步作業可能已經逾時。</exception>
      </Docs>
    </Member>
  </Members>
</Type>