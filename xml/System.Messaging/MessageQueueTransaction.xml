<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MessageQueueTransaction.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d2f750339c17f272f8cc360d38e3f1850a40606b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2f750339c17f272f8cc360d38e3f1850a40606b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageQueueTransaction">
          <source>Provides a Message Queuing internal transaction.</source>
          <target state="translated">提供訊息佇列內部交易。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>To send or receive a message as part of a transaction, you can use the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> class to create a transaction and pass it to an overload of the <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType&gt;</ph> method or the <ph id="ph3">&lt;xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType&gt;</ph> method that takes a <ph id="ph4">`transaction`</ph> parameter.</source>
          <target state="translated">若要傳送或接收訊息的交易的一部份，您可以使用<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph>類別來建立交易，並將它傳遞給的多載<ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType&gt;</ph>方法或<ph id="ph3">&lt;xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType&gt;</ph>採用方法<ph id="ph4">`transaction`</ph>參數。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>Messages sent as part of a transaction must be sent to transactional queues.</source>
          <target state="translated">當做交易之一部分傳送的訊息必須傳送至交易式佇列。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>Messages received from transactional queues must be received using a specified transaction.</source>
          <target state="translated">使用指定的交易必須接收從交易式佇列接收訊息。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, you can receive messages with a specified identifier or specified correlation identifier.</source>
          <target state="translated">除了<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>方法，您可以接收訊息與指定的識別項或指定的相互關聯識別項。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>See the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.ReceiveById%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt;</ph> methods for more information about selectively receiving messages from transactional queues.</source>
          <target state="translated">請參閱<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.ReceiveById%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt;</ph>選擇性地從交易式佇列接收訊息的詳細資訊的方法。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>Messages sent to transactional queues are removed if the transaction is committed.</source>
          <target state="translated">如果交易已認可，則會移除傳送至交易式佇列的訊息。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</source>
          <target state="translated">同樣地，從交易式佇列接收的訊息會傳回佇列中，如果交易已回復。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>If you instantiate a <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> and pass it to an applicable overload of the <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Send%2A&gt;</ph> method or <ph id="ph3">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</source>
          <target state="translated">如果您具現化<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph>並將它傳遞至適用的多載<ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Send%2A&gt;</ph>方法或<ph id="ph3">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>方法，以將訊息傳送至非異動式佇列或非交易式佇列，此方法接收的訊息會擲回例外狀況，指出 「 錯誤用法交易 」。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> is threading apartment aware, so if your apartment state is <ph id="ph2">`STA`</ph>, you cannot use the transaction in multiple threads.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> 為執行緒的 apartment 感知的功能，因此，如果已 apartment 狀態<ph id="ph2">`STA`</ph>，您無法使用多個執行緒中的交易。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>Visual Basic sets the state of the main thread to <ph id="ph1">`STA`</ph>, so you must apply the <ph id="ph2">&lt;xref:System.MTAThreadAttribute&gt;</ph> in the <ph id="ph3">`Main`</ph> subroutine.</source>
          <target state="translated">Visual Basic 會將主執行緒的狀態<ph id="ph1">`STA`</ph>，因此您必須先套用<ph id="ph2">&lt;xref:System.MTAThreadAttribute&gt;</ph>中<ph id="ph3">`Main`</ph>副程式。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>Otherwise, sending a transactional message using another thread throws a <ph id="ph1">&lt;xref:System.Messaging.MessageQueueException&gt;</ph> exception.</source>
          <target state="translated">否則，使用其他執行緒傳送交易式訊息時，會擲回 <ph id="ph1">&lt;xref:System.Messaging.MessageQueueException&gt;</ph> 例外狀況。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>You apply the <ph id="ph1">&lt;xref:System.MTAThreadAttribute&gt;</ph> by using the following fragment.</source>
          <target state="translated">您套用<ph id="ph1">&lt;xref:System.MTAThreadAttribute&gt;</ph>使用下列的片段。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageQueueTransaction">
          <source>This type is thread safe.</source>
          <target state="translated">此型別具備執行緒安全。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.#ctor">
          <source>This constructor sets the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;</ph> property to <ph id="ph2">`Initialized`</ph>.</source>
          <target state="translated">這個建構函式設定<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;</ph>屬性<ph id="ph2">`Initialized`</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Abort">
          <source>Rolls back the pending internal transaction.</source>
          <target state="translated">復原暫止的內部交易。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Abort">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> marks the unsuccessful completion of a process begun at a call to <ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> 標記開始呼叫的處理序沒有成功完成<ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Abort">
          <source>Typically, one makes a call to <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> within a <ph id="ph2">`Try...Catch`</ph> exception-handling block, putting a call to <ph id="ph3">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph> in the <ph id="ph4">`Try`</ph> clause, and a call to <ph id="ph5">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> in the <ph id="ph6">`Catch`</ph> clause.</source>
          <target state="translated">一般而言，一個會呼叫<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>內<ph id="ph2">`Try...Catch`</ph>例外狀況處理區塊中，將呼叫<ph id="ph3">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph>中<ph id="ph4">`Try`</ph>子句，而呼叫<ph id="ph5">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>中<ph id="ph6">`Catch`</ph>子句。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Abort">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> rolls back the entire transaction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> 回復整個交易。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Abort">
          <source>This includes all messages sent or received after the call to <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>.</source>
          <target state="translated">這包括所有的訊息傳送或接收的呼叫後方<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Abort">
          <source>The internal transaction you are attempting to roll back has not started.</source>
          <target state="translated">您要復原的內部交易尚未啟動。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Abort">
          <source>An internal Message Queuing error occurs.</source>
          <target state="translated">發生內部訊息佇列錯誤。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Begin">
          <source>Begins a new Message Queuing internal transaction.</source>
          <target state="translated">開始新的訊息佇列內部交易。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Begin">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> 標記的處理，將會認可或回復，根據成功，交易的開頭。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Begin">
          <source>If an exception occurs during processing, the entire transaction is rolled back.</source>
          <target state="translated">如果在處理期間發生例外狀況，會回復整個交易。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Begin">
          <source>This includes all messages sent or received after the call to <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>.</source>
          <target state="translated">這包括所有的訊息傳送或接收的呼叫後方<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Begin">
          <source>Typically, one makes a call to <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> within a <ph id="ph2">`Try...Catch`</ph> exception-handling block, putting a call to <ph id="ph3">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph> in the <ph id="ph4">`Try`</ph> clause, and a call to <ph id="ph5">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> in the <ph id="ph6">`Catch`</ph> clause.</source>
          <target state="translated">一般而言，一個會呼叫<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>內<ph id="ph2">`Try...Catch`</ph>例外狀況處理區塊中，將呼叫<ph id="ph3">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph>中<ph id="ph4">`Try`</ph>子句，而呼叫<ph id="ph5">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>中<ph id="ph6">`Catch`</ph>子句。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Begin">
          <source>The transaction has already been started.</source>
          <target state="translated">已經啟動交易。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Begin">
          <source>An internal Message Queuing error occurs.</source>
          <target state="translated">發生內部訊息佇列錯誤。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Commit">
          <source>Commits a pending internal transaction.</source>
          <target state="translated">認可一個暫止的內部交易。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Commit">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph> marks the successful completion of processing begun at a call to <ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph> 將標記處呼叫開始處理成功完成<ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Commit">
          <source>If an exception occurs between the call the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> and the call to <ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph>, the entire transaction is rolled back.</source>
          <target state="translated">如果發生例外狀況的呼叫之間<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>和呼叫<ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph>，回復整個交易。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Commit">
          <source>This includes all messages sent or received after the call to <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>.</source>
          <target state="translated">這包括所有的訊息傳送或接收的呼叫後方<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Commit">
          <source>Typically, one makes a call to <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> within a <ph id="ph2">`Try...Catch`</ph> exception-handling block, putting a call to <ph id="ph3">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph> in the <ph id="ph4">`Try`</ph> clause, and a call to <ph id="ph5">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> in the <ph id="ph6">`Catch`</ph> clause.</source>
          <target state="translated">一般而言，一個會呼叫<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>內<ph id="ph2">`Try...Catch`</ph>例外狀況處理區塊中，將呼叫<ph id="ph3">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph>中<ph id="ph4">`Try`</ph>子句，而呼叫<ph id="ph5">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>中<ph id="ph6">`Catch`</ph>子句。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Commit">
          <source>The transaction you are trying to commit has not started.</source>
          <target state="translated">您嘗試認可的交易尚未啟動。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Commit">
          <source>An internal Message Queuing error occurs.</source>
          <target state="translated">發生內部訊息佇列錯誤。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageQueueTransaction">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph>.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> 使用的資源。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph>.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> 所使用的所有資源。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose">
          <source>Calling <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">呼叫<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;</ph>允許所使用的資源<ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph>都重新配置用於其他用途。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">如需有關<ph id="ph1">`Dispose`</ph>，請參閱<bpt id="p1">[</bpt>清除 Unmanaged 資源上<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose">
          <source>Any pending internal transactions are rolled back by <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;</ph>.</source>
          <target state="translated">任何暫止的內部交易都回復<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 表示釋放 Managed 和 Unmanaged 資源，<ph id="ph2">&lt;see langword="false" /&gt;</ph> 則表示只釋放 Unmanaged 資源。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">釋放 <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">這個方法會呼叫公用<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Dispose%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> 叫用受保護<ph id="ph2">`Dispose(Boolean)`</ph>方法<ph id="ph3">`disposing`</ph>參數設定為<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 叫用<ph id="ph2">`Dispose`</ph>與<ph id="ph3">`disposing`</ph>設<ph id="ph4">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 參數為 <ph id="ph2">`true`</ph> 時，這個方法會釋放 <ph id="ph3">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> 參考的任何 Managed 物件所掌握的資源。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">這個方法會叫用每個參考物件的 <ph id="ph1">`Dispose`</ph> 方法。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 可以被其他物件呼叫多次。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">覆寫 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> 時，請小心不要參考到先前已在對 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph> 的早期呼叫中被處置 (Dispose) 的物件。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">如需有關如何實作<ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>，請參閱<bpt id="p1">[</bpt>實作 Dispose 方法<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">如需有關<ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>和<ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>，請參閱<bpt id="p1">[</bpt>清除 Unmanaged 資源上<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>和<bpt id="p2">[</bpt>覆寫 Finalize 方法<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageQueueTransaction.Finalize">
          <source>Releases the resources held by the current instance.</source>
          <target state="translated">將目前執行個體所持有的資源釋出。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Finalize">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">這個方法覆寫 <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Finalize">
          <source>Application code should not call this method; an object's <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Finalize%2A&gt;</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">應用程式程式碼不應該呼叫這個方法。物件的<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Finalize%2A&gt;</ph>方法會自動叫用記憶體回收期間，除非已停用記憶體回收行程的最終處理的呼叫所<ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageQueueTransaction.Finalize">
          <source>For more information, see <bpt id="p1">[</bpt>Finalize Methods and Destructors<ept id="p1">](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>Cleaning Up Unmanaged Resources<ept id="p2">](~/docs/standard/garbage-collection/unmanaged.md)</ept>, and <bpt id="p3">[</bpt>Overriding the Finalize Method<ept id="p3">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>Finalize 方法和解構函式<ept id="p1">](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)</ept>，<bpt id="p2">[</bpt>清除 Unmanaged 資源上<ept id="p2">](~/docs/standard/garbage-collection/unmanaged.md)</ept>，和<bpt id="p3">[</bpt>覆寫 Finalize 方法<ept id="p3">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageQueueTransaction.Status">
          <source>Gets the status of the transaction.</source>
          <target state="translated">取得交易的狀態。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageQueueTransaction.Status">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionStatus" /&gt;</ph> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</source>
          <target state="translated">其中一個 <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionStatus" /&gt;</ph> 值，指出交易是否已認可、中止、初始化或暫止。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageQueueTransaction.Status">
          <source>When an instance of the <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> class has been created, the <ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;</ph> is set by the constructor to <ph id="ph3">`Initialized`</ph>.</source>
          <target state="translated">執行個體時<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph>建立類別之後，<ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;</ph>由建構函式來設定<ph id="ph3">`Initialized`</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageQueueTransaction.Status">
          <source>After a call to <ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph> but before a call to <ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>, the <ph id="ph4">&lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;</ph> is <ph id="ph5">`Pending`</ph>.</source>
          <target state="translated">呼叫之後<ph id="ph1">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>之前呼叫，但<ph id="ph2">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>、<ph id="ph4">&lt;xref:System.Messaging.MessageQueueTransaction.Status%2A&gt;</ph>是<ph id="ph5">`Pending`</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>