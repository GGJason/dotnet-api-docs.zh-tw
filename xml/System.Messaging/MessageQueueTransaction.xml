<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d2f750339c17f272f8cc360d38e3f1850a40606b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460032" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="ed9a6-101">提供訊息佇列內部交易。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ed9a6-101">Provides a Message Queuing internal transaction.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed9a6-102">若要傳送或接收訊息的交易的一部份，您可以使用<xref:System.Messaging.MessageQueueTransaction>類別來建立交易，並將它傳遞給的多載<xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType>方法或<xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType>採用方法`transaction`參數。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-102">To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> method that takes a `transaction` parameter.</span></span> <span data-ttu-id="ed9a6-103">當做交易之一部分傳送的訊息必須傳送至交易式佇列。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-103">Messages sent as part of a transaction must be sent to transactional queues.</span></span> <span data-ttu-id="ed9a6-104">使用指定的交易必須接收從交易式佇列接收訊息。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-104">Messages received from transactional queues must be received using a specified transaction.</span></span>  
  
 <span data-ttu-id="ed9a6-105">除了<xref:System.Messaging.MessageQueue.Receive%2A>方法，您可以接收訊息與指定的識別項或指定的相互關聯識別項。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-105">In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier.</span></span> <span data-ttu-id="ed9a6-106">請參閱<xref:System.Messaging.MessageQueue.ReceiveById%2A>和<xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>選擇性地從交易式佇列接收訊息的詳細資訊的方法。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-106">See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.</span></span>  
  
 <span data-ttu-id="ed9a6-107">如果交易已認可，則會移除傳送至交易式佇列的訊息。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-107">Messages sent to transactional queues are removed if the transaction is committed.</span></span> <span data-ttu-id="ed9a6-108">同樣地，從交易式佇列接收的訊息會傳回佇列中，如果交易已回復。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-108">Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</span></span>  
  
 <span data-ttu-id="ed9a6-109">如果您具現化<xref:System.Messaging.MessageQueueTransaction>並將它傳遞至適用的多載<xref:System.Messaging.MessageQueue.Send%2A>方法或<xref:System.Messaging.MessageQueue.Receive%2A>方法，以將訊息傳送至非異動式佇列或非交易式佇列，此方法接收的訊息會擲回例外狀況，指出 「 錯誤用法交易 」。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-109">If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</span></span>  
  
 <span data-ttu-id="ed9a6-110"><xref:System.Messaging.MessageQueueTransaction> 為執行緒的 apartment 感知的功能，因此，如果已 apartment 狀態`STA`，您無法使用多個執行緒中的交易。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-110"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="ed9a6-111">Visual Basic 會將主執行緒的狀態`STA`，因此您必須先套用<xref:System.MTAThreadAttribute>中`Main`副程式。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-111">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="ed9a6-112">否則，使用其他執行緒傳送交易式訊息時，會擲回 <xref:System.Messaging.MessageQueueException> 例外狀況。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-112">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="ed9a6-113">您套用<xref:System.MTAThreadAttribute>使用下列的片段。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-113">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ed9a6-114">此型別具備執行緒安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ed9a6-114">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ed9a6-115">初始化 <see cref="T:System.Messaging.MessageQueueTransaction" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-115">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueTransaction" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed9a6-116">這個建構函式設定<xref:System.Messaging.MessageQueueTransaction.Status%2A>屬性`Initialized`。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-116">This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ed9a6-117">復原暫止的內部交易。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-117">Rolls back the pending internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed9a6-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> 標記開始呼叫的處理序沒有成功完成<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="ed9a6-119">一般而言，一個會呼叫<xref:System.Messaging.MessageQueueTransaction.Begin%2A>內`Try...Catch`例外狀況處理區塊中，將呼叫<xref:System.Messaging.MessageQueueTransaction.Commit%2A>中`Try`子句，而呼叫<xref:System.Messaging.MessageQueueTransaction.Abort%2A>中`Catch`子句。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-119">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 <span data-ttu-id="ed9a6-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> 回復整個交易。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction.</span></span> <span data-ttu-id="ed9a6-121">這包括所有的訊息傳送或接收的呼叫後方<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-121">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ed9a6-122">您要復原的內部交易尚未啟動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-122">The internal transaction you are attempting to roll back has not started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="ed9a6-123">發生內部訊息佇列錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-123">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ed9a6-124">開始新的訊息佇列內部交易。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-124">Begins a new Message Queuing internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed9a6-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> 標記的處理，將會認可或回復，根據成功，交易的開頭。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</span></span> <span data-ttu-id="ed9a6-126">如果在處理期間發生例外狀況，會回復整個交易。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-126">If an exception occurs during processing, the entire transaction is rolled back.</span></span> <span data-ttu-id="ed9a6-127">這包括所有的訊息傳送或接收的呼叫後方<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-127">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="ed9a6-128">一般而言，一個會呼叫<xref:System.Messaging.MessageQueueTransaction.Begin%2A>內`Try...Catch`例外狀況處理區塊中，將呼叫<xref:System.Messaging.MessageQueueTransaction.Commit%2A>中`Try`子句，而呼叫<xref:System.Messaging.MessageQueueTransaction.Abort%2A>中`Catch`子句。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-128">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ed9a6-129">已經啟動交易。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-129">The transaction has already been started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="ed9a6-130">發生內部訊息佇列錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-130">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ed9a6-131">認可一個暫止的內部交易。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-131">Commits a pending internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed9a6-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> 將標記處呼叫開始處理成功完成<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span> <span data-ttu-id="ed9a6-133">如果發生例外狀況的呼叫之間<xref:System.Messaging.MessageQueueTransaction.Begin%2A>和呼叫<xref:System.Messaging.MessageQueueTransaction.Commit%2A>，回復整個交易。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-133">If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back.</span></span> <span data-ttu-id="ed9a6-134">這包括所有的訊息傳送或接收的呼叫後方<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-134">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="ed9a6-135">一般而言，一個會呼叫<xref:System.Messaging.MessageQueueTransaction.Begin%2A>內`Try...Catch`例外狀況處理區塊中，將呼叫<xref:System.Messaging.MessageQueueTransaction.Commit%2A>中`Try`子句，而呼叫<xref:System.Messaging.MessageQueueTransaction.Abort%2A>中`Catch`子句。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-135">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ed9a6-136">您嘗試認可的交易尚未啟動。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-136">The transaction you are trying to commit has not started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="ed9a6-137">發生內部訊息佇列錯誤。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-137">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ed9a6-138">釋放 <see cref="T:System.Messaging.MessageQueueTransaction" /> 使用的資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-138">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ed9a6-139">釋放 <see cref="T:System.Messaging.MessageQueueTransaction" /> 所使用的所有資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-139">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed9a6-140">呼叫<xref:System.Messaging.MessageQueueTransaction.Dispose%2A>允許所使用的資源<xref:System.Messaging.MessageQueueTransaction>都重新配置用於其他用途。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-140">Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes.</span></span> <span data-ttu-id="ed9a6-141">如需有關`Dispose`，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-141">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="ed9a6-142">任何暫止的內部交易都回復<xref:System.Messaging.MessageQueueTransaction.Dispose%2A>。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-142">Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="ed9a6-143">
            <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-143">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed9a6-144">釋放 <see cref="T:System.Messaging.MessageQueueTransaction" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-144">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed9a6-145">這個方法會呼叫公用<xref:System.Messaging.MessageQueueTransaction.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-145">This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="ed9a6-146">`Dispose` 叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-146">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="ed9a6-147"><xref:System.Object.Finalize%2A> 叫用`Dispose`與`disposing`設`false`。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-147"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="ed9a6-148">`disposing` 參數為 `true` 時，這個方法會釋放 <xref:System.Messaging.MessageQueueTransaction> 參考的任何 Managed 物件所掌握的資源。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-148">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references.</span></span> <span data-ttu-id="ed9a6-149">這個方法會叫用每個參考物件的 `Dispose` 方法。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-149">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="ed9a6-150">
              <see langword="Dispose" /> 可以被其他物件呼叫多次。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ed9a6-150">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="ed9a6-151">覆寫 <see langword="Dispose(Boolean)" /> 時，請小心不要參考到先前已在對 <see langword="Dispose" /> 的早期呼叫中被處置 (Dispose) 的物件。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ed9a6-151">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="ed9a6-152">如需有關如何實作<see langword="Dispose" />，請參閱[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ed9a6-152">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="ed9a6-153">如需有關<see langword="Dispose" />和<see langword="Finalize" />，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[覆寫 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ed9a6-153">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ed9a6-154">將目前執行個體所持有的資源釋出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-154">Releases the resources held by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed9a6-155">這個方法覆寫 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-155">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ed9a6-156">應用程式程式碼不應該呼叫這個方法。物件的<xref:System.Messaging.MessageQueueTransaction.Finalize%2A>方法會自動叫用記憶體回收期間，除非已停用記憶體回收行程的最終處理的呼叫所<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-156">Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ed9a6-157">如需詳細資訊，請參閱[Finalize 方法和解構函式](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)，[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)，和[覆寫 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-157">For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ed9a6-158">取得交易的狀態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-158">Gets the status of the transaction.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ed9a6-159">其中一個 <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> 值，指出交易是否已認可、中止、初始化或暫止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed9a6-159">One of the <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed9a6-160">執行個體時<xref:System.Messaging.MessageQueueTransaction>建立類別之後，<xref:System.Messaging.MessageQueueTransaction.Status%2A>由建構函式來設定`Initialized`。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-160">When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`.</span></span> <span data-ttu-id="ed9a6-161">呼叫之後<xref:System.Messaging.MessageQueueTransaction.Begin%2A>之前呼叫，但<xref:System.Messaging.MessageQueueTransaction.Commit%2A>或<xref:System.Messaging.MessageQueueTransaction.Abort%2A>、<xref:System.Messaging.MessageQueueTransaction.Status%2A>是`Pending`。</span><span class="sxs-lookup"><span data-stu-id="ed9a6-161">After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>