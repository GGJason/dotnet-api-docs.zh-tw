<Type Name="SecurityContext" FullName="System.Messaging.SecurityContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cbe952ec1491fedd917992bf3d66dc1f76373f08" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36553184" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecurityContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecurityContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.SecurityContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecurityContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecurityContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示佇列中訊息的安全性內容。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全性內容，其中包含快取的安全性資訊，例如憑證和傳送者識別項附加到訊息，要求驗證時所需的內部憑證對應的私密金鑰，使用者的 SID。  
  
 如果用戶端，例如 ASP.NET 應用程式，模擬使用者來傳送訊息至佇列時，使用者的識別用來存取佇列。 如果遠端佇列，這些認證會快取，並用於後續傳送至佇列的訊息。 因此，在後續的訊息中的 SID 會傳送訊息至佇列的第一個使用者的快取身分識別。 傳送訊息至佇列的第一個使用者的快取身分識別將用於後續的使用者。  
  
 若要解決這個問題，將 安全性內容中使用<xref:System.Messaging.Message.SecurityContext%2A>再將訊息傳送至遠端的佇列，以確保目前使用者的認證會用來存取佇列。 不過，建議的最佳作法如下：  
  
1.  請驗證的佇列的佇列。  
  
2.  以網域識別執行 ASP.NET 應用程式，並授權該應用程式寫入至佇列。  
  
3.  不會模擬使用者時使用的佇列。 相反地，取得呼叫者身分識別，然後執行授權檢查 ASP.NET 應用程式中或是訊息中包含呼叫者身分識別，然後執行授權檢查收件者應用程式中。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.SecurityContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="securityContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放 <see cref="T:System.Messaging.SecurityContext" /> 所使用的所有資源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>