<Type Name="MessageQueueException" FullName="System.Messaging.MessageQueueException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="92e3aabd8ee2fcef12efc0523f23e9aa175fddf2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36553421" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageQueueException : System.Runtime.InteropServices.ExternalException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit MessageQueueException extends System.Runtime.InteropServices.ExternalException" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueException" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueException&#xA;Inherits ExternalException" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueException : System::Runtime::InteropServices::ExternalException" />
  <TypeSignature Language="F#" Value="type MessageQueueException = class&#xA;    inherit ExternalException" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.InteropServices.ExternalException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>發生 Microsoft Message Queuing 內部錯誤時，所擲回的例外狀況。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例外狀況相關聯<xref:System.Messaging.MessageQueueException>中訊息佇列，必須以處理透過您的程式碼的內部錯誤所產生類別。  
  
 每個例外狀況是由一個錯誤碼和描述錯誤來源的文字字串所組成。 請參閱<xref:System.Messaging.MessageQueueErrorCode>這些錯誤碼及其描述的類別清單。  
  
 如果 <xref:System.Messaging.MessageQueue> 開啟一個佇列，而佇列中帶有設定為 true 的 `sharedModeDenyReceive` 參數，則後續嘗試從佇列讀取的任何 <xref:System.Messaging.MessageQueue> 都會因為共用違規的緣故，產生 <xref:System.Messaging.MessageQueueException> 例外狀況。 如果 <xref:System.Messaging.MessageQueue> 在獨佔模式中嘗試存取該佇列，而另一個 <xref:System.Messaging.MessageQueue> 已擁有該佇列的非獨佔存取，就會擲回相同的例外狀況。  
  
> **不支援警示標記!!!**  
> <xref:System.Messaging.MessageQueueTransaction> 能夠辨識執行緒的 Apartment。 Visual Basic 會將主執行緒的狀態`STA`，因此您必須先套用<xref:System.MTAThreadAttribute>中`Main`副程式。 否則，使用其他執行緒傳送交易式訊息時，會擲回 <xref:System.Messaging.MessageQueueException> 例外狀況。  
  
   
  
## Examples  
 [!code-cpp[MessageQueue.ExistsDelete#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ExistsDelete/CPP/mqexistsdelete.cpp#1)]
 [!code-csharp[MessageQueue.ExistsDelete#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ExistsDelete/CS/mqexistsdelete.cs#1)]
 [!code-vb[MessageQueue.ExistsDelete#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ExistsDelete/VB/mqexistsdelete.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueueErrorCode" />
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageQueueException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageQueueException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Messaging.MessageQueueException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Messaging.MessageQueueException" Usage="new System.Messaging.MessageQueueException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" />，保留與 <see cref="T:System.Messaging.MessageQueueException" /> 關聯的序列化資料。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" />，含有與 <see cref="T:System.Messaging.MessageQueueException" /> 關聯的序列資料流的來源和目的端。</param>
        <summary>使用序列化資料，初始化 <see cref="T:System.Messaging.MessageQueueException" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="messageQueueException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" />，保留與 <see cref="T:System.Messaging.MessageQueueException" /> 關聯的序列化資料。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" />，含有與 <see cref="T:System.Messaging.MessageQueueException" /> 關聯的序列資料流的來源和目的端。</param>
        <summary>以序列化 <see cref="T:System.Messaging.MessageQueueException" /> 所需的資料，填入序列化資訊物件。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public override string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueException.Message" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.Messaging.MessageQueueException.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得一個描述訊息佇列錯誤的值。</summary>
        <value>產生這個 <see cref="T:System.Messaging.MessageQueueException" /> 訊息佇列內部錯誤的描述。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您取得這個屬性時，該方法會嘗試擷取與相關聯的文字字串<xref:System.Messaging.MessageQueueException.MessageQueueErrorCode%2A>屬性。 如果方法無法解譯訊息佇列產生的錯誤碼<xref:System.Messaging.MessageQueueException.Message%2A>屬性取得的值`UnknownError`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.MessageQueueException.MessageQueueErrorCode" />
      </Docs>
    </Member>
    <Member MemberName="MessageQueueErrorCode">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueErrorCode MessageQueueErrorCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueErrorCode MessageQueueErrorCode" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueException.MessageQueueErrorCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MessageQueueErrorCode As MessageQueueErrorCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueErrorCode MessageQueueErrorCode { System::Messaging::MessageQueueErrorCode get(); };" />
      <MemberSignature Language="F#" Value="member this.MessageQueueErrorCode : System.Messaging.MessageQueueErrorCode" Usage="System.Messaging.MessageQueueException.MessageQueueErrorCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueErrorCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出與這個例外狀況關聯的錯誤碼。</summary>
        <value>
          <see cref="T:System.Messaging.MessageQueueErrorCode" /> 將辨認訊息佇列產生的錯誤類型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueException.Message%2A>屬性包含與此相關聯的字串<xref:System.Messaging.MessageQueueException.MessageQueueErrorCode%2A>更完整描述錯誤的來源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueErrorCode" />
        <altmember cref="P:System.Messaging.MessageQueueException.Message" />
      </Docs>
    </Member>
  </Members>
</Type>