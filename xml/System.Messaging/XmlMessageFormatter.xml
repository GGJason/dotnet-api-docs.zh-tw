<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlMessageFormatter.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5563e678b40760a20036da2630095cb8b05f461de.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">563e678b40760a20036da2630095cb8b05f461de</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Serializes and deserializes objects to or from the body of a message, using the XML format based on the XSD schema definition.</source>
          <target state="translated">使用根據 XSD 結構描述定義的 XML 格式，將物件序列化為訊息主體，或從訊息主體還原序列化為物件。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> is the default formatter that an instance of <ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph> uses to serialize messages written to the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>是預設的格式器的執行個體<ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph>用來序列化訊息寫入佇列。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>When you create an instance of <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>, an instance of <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> is created for you and associated with the <ph id="ph3">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.</source>
          <target state="translated">當您建立的執行個體<ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>，執行個體<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>為您建立並與相關聯<ph id="ph3">&lt;xref:System.Messaging.MessageQueue&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>You can specify a different formatter by creating it in your code and assigning it to the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph> property of your <ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.</source>
          <target state="translated">您可以指定不同的格式器所建立程式碼中，並將它指派給<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph>屬性您<ph id="ph2">&lt;xref:System.Messaging.MessageQueue&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>A queue's default <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> instance can be used to write to the queue, but it cannot be used to read from the queue until you set either the <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> property on the formatter.</source>
          <target state="translated">佇列的預設<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>執行個體可以用來寫入至佇列，但它不能用來從佇列讀取，直到您將<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>格式器上的屬性。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>You can either set one or both of these values on the default formatter instance, or you can create a new instance of the formatter and set the values automatically by passing them as arguments into the appropriate <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">您可以透過設定一個或多個這些值的預設格式器執行個體，或您可以建立格式器的新執行個體，並將它們做為引數傳遞至適當的自動設定的值<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph>建構函式。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>When specifying <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>, type existence is checked at compile time rather than read time, reducing possibility for error.</source>
          <target state="translated">當指定<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>而不是<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>，編譯時間，而不是唯讀的時間，減少錯誤可能性在檢查類型是否存在。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> requires every entry to be fully qualified, specifying its assembly name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> 需要完整限定，指定其組件名稱的每個項目。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</source>
          <target state="translated">此外，當使用多個並行版本，版本號碼也必須附加至目標型別名稱。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性告知格式器嘗試比對訊息還原序列化時哪些結構描述。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">這可讓要解譯訊息本文格式器。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">其中一個代表型別陣列中的結構描述必須符合訊息主體中序列化的執行個體。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">當您閱讀訊息使用<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>方法，方法會建立對應至識別的結構描述和訊息本文讀入之型別的物件。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">只有其中一個兩個屬性必須設定從佇列讀取時，但您可以將兩個設定。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型別是從兩個屬性的組合。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The decision of which property to use is specific to your application.</source>
          <target state="translated">決定要使用哪一個屬性是專屬於您的應用程式。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</source>
          <target state="translated">如果訊息本文包含其結構描述不符合任何兩個屬性陣列中之類型的型別，讀取訊息時將會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> is a crucial component of loosely coupled XML-based messaging.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>是重要的鬆散偶合 XML 為基礎的傳訊元件。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The XSD.exe utility uses the XML format is used to generate XML schema, such as when you use the utility to serialize a class used by your application.</source>
          <target state="translated">XSD.exe 公用程式使用 XML 格式用來產生 XML 結構描述，例如當您使用此公用程式來序列化您的應用程式所使用的類別。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The class must have a default constructor.</source>
          <target state="translated">此類別必須具有預設的建構函式。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The format is used again in the reverse process when the utility generates a class based on the schema you distribute to describe your class data.</source>
          <target state="translated">所用的格式再次相反的處理序中的公用程式會產生結構描述為基礎的類別時您發佈至描述類別資料。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The use of the utility and the XML schema it generates enables you to avoid redistributing.dll files every time you recompile a class after the implementation of your class has changed.</source>
          <target state="translated">使用此公用程式和它產生的 XML 結構描述可讓您避免轉散發.dll 檔案，每次您重新編譯類別，類別的實作已變更之後。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>As long as the schema does not change on the client or the server, other changes on either side do not affect the other.</source>
          <target state="translated">只要在結構描述不會變更用戶端或伺服器上，其他任一端的變更不會影響其他。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The following code example includes three pieces of code: a server component, an order class, and client code.</source>
          <target state="translated">下列程式碼範例包含三個程式碼片段： 一種伺服器元件、 order 類別，而且用戶端程式碼。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages.</source>
          <target state="translated">Order 類別可供 XSD.exe 公用程式，以產生傳入訊息內的伺服器可辨識的結構描述。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The schema is an XML formatted file that describes the "shape" of the class.</source>
          <target state="translated">結構描述會描述 「 圖形 」 類別的 XML 格式的檔案。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.</source>
          <target state="translated">然後在用戶端上產生共用的伺服器類別為相同的結構描述的用戶端特定的順序類別使用這個結構描述。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The following code example represents a server component that receives orders through a message queue.</source>
          <target state="translated">下列程式碼範例代表接收訂單，透過訊息佇列的伺服器元件。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The body of the message should be an order object whose schema matches the Order.cs class below.</source>
          <target state="translated">訊息的主體應該是順序物件，其結構描述符合此 Order.cs 類別下方。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The server process or application deserializes the order.</source>
          <target state="translated">伺服器處理序或應用程式會還原序列化的順序。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.</source>
          <target state="translated">下列程式碼範例代表 order 類別，提供伺服器上的應用程式接收和還原序列化的順序物件的結構描述。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body.</source>
          <target state="translated">與伺服器上的應用程式互動的任何用戶端應用程式必須在本機定義的順序類別為訊息本文的序列化資訊所傳送訊息至伺服器。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body.</source>
          <target state="translated">本機定義的順序類別必須具有相同結構描述所在伺服器上的應用程式會嘗試還原序列化訊息本文的伺服器定義的順序類別。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.</source>
          <target state="translated">XSD.exe 公用程式可讓應用程式管理員在伺服器上建立，並將用戶端必須用來序列化訊息移至伺服器的結構描述。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema.</source>
          <target state="translated">當用戶端應用程式管理員收到 order 類別的結構描述時，會再次從結構描述產生的用戶端特定的順序類別使用 XSD.exe 公用程式。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class).</source>
          <target state="translated">它是用戶端程式碼範例，以下伺服器的 order 類別中使用這個類別 （XSD.exe 公用程式會導致結構描述產生的類別具有與原始類別相同的名稱）。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>This new order class is used to serialize the order into the message body.</source>
          <target state="translated">這個新的 order 類別用來序列化訊息本文中的順序。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue.</source>
          <target state="translated">下列程式碼範例是用戶端處理，用來序列化順序，並傳送至佇列的順序與相關聯的資訊。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility.</source>
          <target state="translated">程式碼會關聯此 Order.cs 類別 XSD.exe 公用程式所產生的結構描述項目中的項目、 數量和位址資訊。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>An order is sent to the Orders queue on the local computer.</source>
          <target state="translated">順序會傳送到訂單佇列，在本機電腦上。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>After the schema is generated from the order class on the server, you can modify the class.</source>
          <target state="translated">從伺服器上的 order 類別產生結構描述之後，您可以修改的類別。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Unless the schema changes, you do not need to redistribute the schema.</source>
          <target state="translated">結構描述變更，除非您不需要重新發佈的結構描述。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified.</source>
          <target state="translated">您已經發佈結構描述及產生的用戶端 order 類別之後，該用戶端類別也可以修改個別伺服器的 order 類別，只要結構描述本身則不會修改。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.XmlMessageFormatter">
          <source>The two classes have become loosely coupled.</source>
          <target state="translated">變成鬆散結合兩個類別。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="T:System.Messaging.XmlMessageFormatter">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> class, without target types set.</source>
          <target state="translated">不使用目標型別 (Target Type) 集來初始化 <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor">
          <source>This overload of the constructor is used most frequently when writing to the queue, as target types are not required when writing.</source>
          <target state="translated">這個多載建構函式的最常用來寫入佇列時寫入時的目標類型並非必要條件。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor">
          <source>To read a message from a queue using an instance of <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> created using this constructor, you must set the <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties so the formatter knows what types to attempt to deserialize.</source>
          <target state="translated">若要從使用的執行個體的佇列讀取訊息<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>使用這個建構函式所建立，您必須設定<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>或<ph id="ph3">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>讓格式器可讓您知道哪些類型，以嘗試還原序列化的屬性。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor">
          <source>When you create a new <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>, a default <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> instance is created, without the target types set.</source>
          <target state="translated">當您建立新<ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>，預設值<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>建立執行個體，不含目標型別集。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor">
          <source>As with a formatter created using this constructor, you must set target types for that formatter instance if you want to read from the queue.</source>
          <target state="translated">如同使用這個建構函式所建立的格式器，您必須設定該格式器執行個體的目標型別，如果您想要從佇列讀取。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 型別的陣列，指定可能型別的設定，格式子會從所提供的訊息還原序列化這些型別。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>These values must be fully qualified, for example, "MyNamespace.MyOrders, MyOrdersAssemblyName".</source>
          <target state="translated">這些值必須是完整的，例如「MyNamespace.MyOrders, MyOrdersAssemblyName」。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> class, setting target types passed in as an array of (fully qualified) string values.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> 類別的新執行個體，將傳入的目標型別設定為 (完整的) 字串值陣列。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>The constructors with target type parameters are most frequently used when reading from the queue.</source>
          <target state="translated">從佇列讀取時最常使用目標型別參數的建構函式。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>When writing, it is not necessary to specify target types.</source>
          <target state="translated">在撰寫時，它不需要指定目標類型。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph> constructor sets the <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> property to the array values passed in through the <ph id="ph3">`targetTypeNames`</ph> parameter.</source>
          <target state="translated">這個多載<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph>建構函式<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>屬性中傳遞的陣列值<ph id="ph3">`targetTypeNames`</ph>參數。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>Setting this property enables a <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> using this <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> instance to read messages containing objects of given types.</source>
          <target state="translated">設定此屬性可讓<ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>使用這個<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>讀取訊息包含的物件執行個體指定型別。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>Both the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">同時<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性告知格式器嘗試比對訊息還原序列化時哪些結構描述。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">這可讓要解譯訊息本文格式器。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">其中一個代表型別陣列中的結構描述必須符合訊息主體中序列化的執行個體。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">當您閱讀訊息使用<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>方法，方法會建立對應至識別的結構描述和訊息本文讀入之型別的物件。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">只有其中一個兩個屬性必須設定從佇列讀取時，但您可以將兩個設定。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型別是從兩個屬性的組合。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>The decision of which one to use is specific to your application.</source>
          <target state="translated">決定来使用一個是專屬於您的應用程式。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</source>
          <target state="translated">如果訊息本文包含的類型，其結構描述不符合任何兩個屬性陣列中的型別，在讀取時間將會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
          <source>The <ph id="ph1">&lt;paramref name="targetTypeNames" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="targetTypeNames" /&gt;</ph> 參數為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 型別的陣列，指定可能型別的設定，格式子會從所提供的訊息還原序列化這些型別。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> class, setting target types passed in as an array of object types.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> 類別的新執行個體，將傳入的目標型別設定為物件型別的陣列。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>The constructors with target type parameters are most frequently used when reading from the queue.</source>
          <target state="translated">從佇列讀取時最常使用目標型別參數的建構函式。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>When writing, it is not necessary to specify target types.</source>
          <target state="translated">在撰寫時，它不需要指定目標類型。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph> constructor sets the <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> property to the array values passed in through the <ph id="ph3">`targetTypes`</ph> parameter.</source>
          <target state="translated">這個多載<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.%23ctor%2A&gt;</ph>建構函式<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性中傳遞的陣列值<ph id="ph3">`targetTypes`</ph>參數。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>Setting this property enables a <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> using this <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> instance to read messages containing objects of the given types.</source>
          <target state="translated">設定此屬性可讓<ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph>使用這個<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>讀取訊息包含指定型別的物件的執行個體。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>Both the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">同時<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性告知格式器嘗試比對訊息還原序列化時哪些結構描述。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">這可讓要解譯訊息本文格式器。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">其中一個代表型別陣列中的結構描述必須符合訊息主體中序列化的執行個體。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">當您閱讀訊息使用<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>方法，方法會建立對應至識別的結構描述和訊息本文讀入之型別的物件。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">只有其中一個兩個屬性必須設定從佇列讀取時，但您可以將兩個設定。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型別是從兩個屬性的組合。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>The decision of which one to use is specific to your application.</source>
          <target state="translated">決定来使用一個是專屬於您的應用程式。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</source>
          <target state="translated">如果訊息本文包含的類型，其結構描述不符合任何兩個屬性陣列中的型別，在讀取時間將會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>When specifying <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>, type existence is checked at compile time rather than read time, reducing possibility for error.</source>
          <target state="translated">當指定<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>而不是<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>，編譯時間，而不是唯讀的時間，減少錯誤可能性在檢查類型是否存在。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> requires every entry to be fully qualified, specifying its assembly name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> 需要完整限定，指定其組件名稱的每個項目。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</source>
          <target state="translated">此外，當使用多個並行版本，版本號碼也必須附加至目標型別名稱。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>When using <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>, you can add each object (for example, <ph id="ph2">`MyClass`</ph>) to the list in a way demonstrated by the following C# code.</source>
          <target state="translated">使用時<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>，您可以新增每個物件 (例如， <ph id="ph2">`MyClass`</ph>) 至下列 C# 程式碼所示的方法中的清單。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
          <source>The <ph id="ph1">&lt;paramref name="targetTypes" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="targetTypes" /&gt;</ph> 參數為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> to inspect.</source>
          <target state="translated">要檢查的 <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>Determines whether the formatter can deserialize the message.</source>
          <target state="translated">決定格式子是否能夠還原序列化訊息。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the XML formatter can deserialize the message; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 XML 格式子能夠還原序列化訊息，則為 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，否則為 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>When <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph> is called, the formatter attempts to determine if the contents of the message are something it can deserialize.</source>
          <target state="translated">當<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph>呼叫時，則格式器會嘗試判斷訊息的內容是否可以還原序列化的項目。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The formatter can only deserialize the message if the type in the message body has the same schema as one of the types in the array represented by the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties.</source>
          <target state="translated">格式器可以只將訊息還原序列化訊息本文中的型別為其中一個類型相同的結構描述所代表陣列中必須有<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph> returns <ph id="ph2">`false`</ph> under the following two circumstances:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph> 傳回<ph id="ph2">`false`</ph>下列兩種情況下：</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The message was not formatted using the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>.</source>
          <target state="translated">訊息格式不使用<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The schema of the message body is not among those listed in either the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> property.</source>
          <target state="translated">訊息內文的結構描述不在所列的是<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what types of objects it must be able to deserialize.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性告知格式器的物件類型它必須能夠還原序列化。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>If any type is missing from the list, yet is found within the message, <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph> returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">如果遺漏從清單中，任何型別訊息中找到<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.CanRead%2A&gt;</ph>傳回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>Neither the <ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> nor <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> property has been set.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> 屬性都沒有設定。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
          <source>The <ph id="ph1">&lt;paramref name="message" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="message" /&gt;</ph> 參數為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Clone">
          <source>Creates an instance of the <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> class whose read/write properties (the sets of target types) are the same as the current <ph id="ph2">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> instance.</source>
          <target state="translated">建立 <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> 類別的執行個體，其讀取/寫入屬性 (目標型別集) 與目前的 <ph id="ph2">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> 執行個體相同。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Clone">
          <source>An object whose properties are identical to those of this <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> instance, but whose metadata does not specify it to be a formatter class instance.</source>
          <target state="translated">物件，其屬性和這個 <ph id="ph1">&lt;see cref="T:System.Messaging.XmlMessageFormatter" /&gt;</ph> 執行個體的屬性相同，但是其中繼資料 (Metadata) 沒有指定它為格式子類別執行個體。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Clone">
          <source>This method creates a copy of the formatter and initializes all its properties to the values of this <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> object.</source>
          <target state="translated">這個方法會建立此格式子的複本，並初始化其所有屬性的值<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>物件。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>, in XML format, to deserialize.</source>
          <target state="translated">要還原序列化的 <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>，格式為 XML。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>Reads the contents from the given message and creates an object that contains the deserialized message.</source>
          <target state="translated">讀取指定訊息的內容，並建立包含還原序列化訊息的物件。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The deserialized message.</source>
          <target state="translated">還原序列化的訊息。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>Both the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">同時<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性告知格式器嘗試比對訊息還原序列化時哪些結構描述。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>One of these properties must be set before the message can be deserialized.</source>
          <target state="translated">其中一個屬性必須先設定訊息還原序列化。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">其中一個代表型別陣列中的結構描述必須符合訊息主體中序列化的執行個體。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">當您閱讀訊息使用<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>方法，方法會建立對應至識別的結構描述和訊息本文讀入之型別的物件。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The target types do not have to be specified in order to write to the queue.</source>
          <target state="translated">目標類型沒有指定，才能寫入至佇列。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>Neither the <ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> nor <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> property has been set.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> 屬性都沒有設定。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The instance serialized in the message body does not comply with any of the schemas represented by the types in the <ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> properties.</source>
          <target state="translated">在訊息主體中序列化的執行個體不會遵循 <ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> 和 <ph id="ph2">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> 屬性中型別所表示的任何結構描述。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
          <source>The <ph id="ph1">&lt;paramref name="message" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="message" /&gt;</ph> 參數為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>Specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated">指定可能型別的設定，格式子會從所提供的訊息還原序列化這些型別。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that specifies the types of objects to deserialize from the message body when reading the message.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 型別的陣列，讀取訊息時，指定要從訊息主體還原序列化的物件型別。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>Both the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">同時<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性告知格式器嘗試比對訊息還原序列化時哪些結構描述。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">這可讓要解譯訊息本文格式器。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">其中一個代表型別陣列中的結構描述必須符合訊息主體中序列化的執行個體。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">當您閱讀訊息使用<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>方法，方法會建立對應至識別的結構描述和訊息本文讀入之型別的物件。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">只有其中一個兩個屬性必須設定從佇列讀取時，但您可以將兩個設定。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型別是從兩個屬性的組合。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The decision of which property to use is specific to your application.</source>
          <target state="translated">決定要使用哪一個屬性是專屬於您的應用程式。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</source>
          <target state="translated">如果訊息本文包含其結構描述不符合任何兩個屬性陣列中之類型的型別，讀取訊息時將會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> requires every entry to be fully qualified, specifying its assembly name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> 需要完整限定，指定其組件名稱的每個項目。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</source>
          <target state="translated">此外，當使用多個並行版本，版本號碼也必須附加至目標型別名稱。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The target types are only required when reading from the queue.</source>
          <target state="translated">目標類型，才需要： 當從佇列讀取。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties do not need to be set to write to the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性不需要設定為寫入至佇列。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
          <source>The <ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /&gt;</ph> 屬性為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>Specifies the set of possible types that will be deserialized by the formatter from the message provided.</source>
          <target state="translated">指定可能型別的設定，格式子會從所提供的訊息還原序列化這些型別。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that specifies the types of objects to deserialize from the message body when reading the message.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 型別的陣列，讀取訊息時，指定要從訊息主體還原序列化的物件型別。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>Both the <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties tell the formatter what schemas to attempt to match when deserializing a message.</source>
          <target state="translated">同時<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性告知格式器嘗試比對訊息還原序列化時哪些結構描述。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>This allows the formatter to interpret the message body.</source>
          <target state="translated">這可讓要解譯訊息本文格式器。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The instance serialized in the message body must comply with one of the schemas represented in the type array.</source>
          <target state="translated">其中一個代表型別陣列中的結構描述必須符合訊息主體中序列化的執行個體。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>When you read the message using the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</source>
          <target state="translated">當您閱讀訊息使用<ph id="ph1">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>方法，方法會建立對應至識別的結構描述和訊息本文讀入之型別的物件。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>Only one of the two properties needs to be set when reading from the queue, but you can set both.</source>
          <target state="translated">只有其中一個兩個屬性必須設定從佇列讀取時，但您可以將兩個設定。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The set of types is the combined set from the two properties.</source>
          <target state="translated">型別是從兩個屬性的組合。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The decision of which property to use is specific to your application.</source>
          <target state="translated">決定要使用哪一個屬性是專屬於您的應用程式。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</source>
          <target state="translated">如果訊息本文包含其結構描述不符合任何兩個屬性陣列中之類型的型別，讀取訊息時將會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The target types are only required when reading from the queue.</source>
          <target state="translated">目標類型，才需要： 當從佇列讀取。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> properties do not need to be set to write to the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>屬性不需要設定為寫入至佇列。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>When specifying <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>, type existence is checked at compile time rather than read time, reducing possibility for error.</source>
          <target state="translated">當指定<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>而不是<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>，編譯時間，而不是唯讀的時間，減少錯誤可能性在檢查類型是否存在。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>When using <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>, you can add each object (for example, <ph id="ph2">`MyClass`</ph>) to the list in a way demonstrated by the C# code <ph id="ph3">`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`</ph>.</source>
          <target state="translated">使用時<ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>，您可以新增每個物件 (例如， <ph id="ph2">`MyClass`</ph>) 至以 C# 程式碼所示的方式清單<ph id="ph3">`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`</ph>。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The following code example sends and receives a message that contains an order to and from a queue.</source>
          <target state="translated">下列程式碼範例會將傳送和接收包含訂單與佇列的訊息。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="P:System.Messaging.XmlMessageFormatter.TargetTypes">
          <source>The <ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /&gt;</ph> 屬性為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> whose <ph id="ph2">&lt;see cref="P:System.Messaging.Message.Body" /&gt;</ph> property will contain the serialized object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph>，其 <ph id="ph2">&lt;see cref="P:System.Messaging.Message.Body" /&gt;</ph> 屬性會包含序列化物件。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to be serialized into the message body.</source>
          <target state="translated">要序列化到訊息主體中的 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>Serializes an object into the body of the message.</source>
          <target state="translated">將物件序列化到訊息主體中。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The target types need not be specified to write to the queue as they must be when reading.</source>
          <target state="translated">目標類型，則不需要指定他們必須為讀取時寫入至佇列。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph> property is used by the formatter only when deserializing a message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A&gt;</ph>只在還原序列化訊息時，將會使用格式器所的屬性。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> makes use of the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class, which defines what can be serialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>利用<ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>類別，定義可以序列化。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>Only public fields and public properties can be serialized.</source>
          <target state="translated">只可以序列化公用欄位和公用屬性。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>Structures, structures with arrays, and arrays of structures are all serializable, as long as they do not use the encoded style with the SOAP protocol.</source>
          <target state="translated">結構、 結構陣列和結構的陣列是所有可序列化，只要它們不使用 SOAP 通訊協定與編碼的樣式。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="message" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="message" /&gt;</ph> 參數為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>-or-</source>
          <target state="translated">-或-</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 參數為 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>