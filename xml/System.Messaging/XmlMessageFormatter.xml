<Type Name="XmlMessageFormatter" FullName="System.Messaging.XmlMessageFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a9a1931c75db76f56c20e9b7b0a8567e6d17609" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48590748" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.XmlMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type XmlMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>使用根據 XSD 結構描述定義的 XML 格式，將物件序列化為訊息主體，或從訊息主體還原序列化為物件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter>是預設的格式器的執行個體<xref:System.Messaging.MessageQueue>用來序列化訊息寫入佇列。 當您建立的執行個體<xref:System.Messaging.MessageQueue>，執行個體<xref:System.Messaging.XmlMessageFormatter>會為您建立並與相關聯<xref:System.Messaging.MessageQueue>。 您可以指定不同的格式器在程式碼中建立它，並將它指派給<xref:System.Messaging.MessageQueue.Formatter%2A>屬性的程式<xref:System.Messaging.MessageQueue>。  
  
 佇列的預設<xref:System.Messaging.XmlMessageFormatter>執行個體可以用來寫入至佇列，但它不能用來從佇列讀取，直到您設定<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>格式子上的屬性。 您可以設定一個或多個這些值的預設格式器執行個體，或您可以建立格式子的新執行個體，並自動設定值，藉由將它們做為引數傳遞至適當<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>建構函式。  
  
 指定時<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>而非<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>，類型是否存在已在編譯時期，而不是唯讀的時間，減少錯誤的可能性。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 需要完整限定，指定其組件名稱的每個項目。 此外，當使用多個並行版本，版本號碼也必須附加至目標型別名稱。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性告知格式器嘗試比對時還原序列化訊息的哪些結構描述。 這可讓要解譯訊息本文格式器。  
  
 訊息主體中序列化的執行個體必須符合其中一種表示型別陣列中的結構描述。 當您讀取訊息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，此方法會建立對應到識別結構描述和訊息主體讀入之型別的物件。  
  
 只有其中的兩個屬性必須設定從佇列讀取時，但您可以同時設定。 類型為結合來自兩個屬性集。 若要使用哪一個屬性的決策旨在說明您的應用程式。 如果訊息本文包含的結構描述不符合任何兩個屬性陣列中之類型的類型，讀取訊息時將會擲回例外狀況。  
  
 <xref:System.Messaging.XmlMessageFormatter>是鬆散偶合的 XML 架構訊息的重要元件。 XSD.exe 公用程式使用 XML 格式用來產生 XML 結構描述，例如當您使用此公用程式來序列化您的應用程式所使用的類別。 此類別必須具有預設的建構函式。  
  
 所用的格式一次的反向程序中的公用程式會產生結構描述為基礎的類別時您發佈至描述您類別的資料。 使用此公用程式和它所產生的 XML 結構描述可讓您避免轉散發.dll 檔案，每次您類別的實作已變更之後，重新編譯的類別。 只要結構描述不會變更用戶端或伺服器上，其他任一端的變更不會影響其他。  
  
   
  
## Examples  
 下列程式碼範例包含三個程式碼片段： 一種伺服器元件、 order 類別和用戶端程式碼。 Order 類別可以用 XSD.exe 公用程式，來產生伺服器會辨識在傳入訊息中的結構描述。 結構描述是描述 「 圖形 」 類別的 XML 格式的檔案。 此結構描述以產生用戶端特定的順序類別共用相同的結構描述的伺服器類別然後使用用戶端上。  
  
 下列程式碼範例代表接收訂單，透過訊息佇列伺服器元件。 訊息的本文應該是順序物件，其結構描述符合下列 Order.cs 類別。 伺服器處理序或應用程式還原序列化的順序。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlMessageFormatter Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source.cs#1)]
 [!code-vb[Classic XmlMessageFormatter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source.vb#1)]  
  
 下列程式碼範例代表 order 類別，提供伺服器上的應用程式接收和還原序列化的順序物件的結構描述。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic XmlMessageFormatter Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source2.cs#2)]
 [!code-vb[Classic XmlMessageFormatter Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source2.vb#2)]  
  
 任何用戶端應用程式互動的伺服器上的應用程式必須傳送訊息至伺服器本機定義的順序類別中為訊息本文的序列化資訊。 本機定義的 order 類別必須具有相同的結構描述所在的伺服器上的應用程式會嘗試還原序列化訊息本文的伺服器定義 order 類別。 XSD.exe 公用程式可讓應用程式管理員在伺服器上建立並散發用戶端必須用來序列化訊息要送往伺服器的結構描述。  
  
 當用戶端應用程式管理員會收到 order 類別的結構描述時，XSD.exe 公用程式會再次用來從結構描述產生的用戶端特定的順序類別。 下列伺服器的 order 類別的用戶端程式碼範例中使用這個類別 （XSD.exe 公用程式會導致結構描述產生類別，具有與原始類別相同的名稱）。 這個新的 order 類別用來序列化訊息本文中的順序。  
  
 下列程式碼範例是在用戶端處理，用來序列化順序，並傳送至佇列的順序與相關的資訊。 程式碼會將項目、 數量和位址資訊關聯的結構描述，XSD.exe 公用程式 Order.cs 類別所產生的項目。 訂單會傳送到訂單佇列，在本機電腦上。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source3.cpp#3)]
 [!code-csharp[Classic XmlMessageFormatter Example#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source3.cs#3)]
 [!code-vb[Classic XmlMessageFormatter Example#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source3.vb#3)]  
  
 從 order 類別，在伺服器上產生結構描述之後，您可以修改類別。 除非結構描述變更，則您不需要重新發佈結構描述。 您已發佈的結構描述，並產生用戶端 order 類別之後，該用戶端類別也可以修改獨立伺服器的 order 類別，只要結構描述本身則不會修改。 成為鬆散結合的兩個類別。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.IMessageFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>不使用目標型別 (Target Type) 集來初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個多載建構函式的最常用來寫入佇列時，寫入時，不需要的目標類型。  
  
 若要從使用的執行個體的佇列讀取訊息<xref:System.Messaging.XmlMessageFormatter>使用這個建構函式所建立，您必須設定<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>讓格式器可讓您知道項目類型，以嘗試還原序列化的屬性。  
  
 當您建立新<xref:System.Messaging.MessageQueue>，預設值<xref:System.Messaging.XmlMessageFormatter>建立執行個體，而不需要的目標型別集。 如同使用這個建構函式所建立的格式器，，如果您想要從佇列讀取，必須設定該格式器執行個體的目標型別。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (string[] targetTypeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] targetTypeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypeNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;System::String ^&gt; ^ targetTypeNames);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : string[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypeNames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypeNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="targetTypeNames">
          <see cref="T:System.String" /> 型別的陣列，指定可能型別的設定，格式子會從所提供的訊息還原序列化這些型別。 這些值必須是完整的，例如「MyNamespace.MyOrders, MyOrdersAssemblyName」。</param>
        <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 類別的新執行個體，將傳入的目標型別設定為 (完整的) 字串值陣列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 從佇列讀取時最常使用以目標型別參數的建構函式。 在撰寫時，它不需要指定目標類型。  
  
 這個多載<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>建構函式<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>屬性中傳遞的陣列值`targetTypeNames`參數。 設定這個屬性可讓<xref:System.Messaging.MessageQueue>使用此<xref:System.Messaging.XmlMessageFormatter>執行個體以讀取訊息，其中包含物件的指定型別。  
  
 同時<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性告知格式器嘗試比對時還原序列化訊息的哪些結構描述。 這可讓要解譯訊息本文格式器。  
  
 訊息主體中序列化的執行個體必須符合其中一種表示型別陣列中的結構描述。 當您讀取訊息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，此方法會建立對應到識別結構描述和訊息主體讀入之型別的物件。  
  
 只有其中的兩個屬性必須設定從佇列讀取時，但您可以同時設定。 類型為結合來自兩個屬性集。 其中決定来使用一個是應用程式特定的。 如果訊息本文包含的結構描述不符合任何兩個屬性陣列中之類型的類型，在讀取時將會擲回例外狀況。  
  
   
  
## Examples  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetTypeNames" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (Type[] targetTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type[] targetTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;Type ^&gt; ^ targetTypes);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : Type[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="targetTypes">
          <see cref="T:System.Type" /> 型別的陣列，指定可能型別的設定，格式子會從所提供的訊息還原序列化這些型別。</param>
        <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 類別的新執行個體，將傳入的目標型別設定為物件型別的陣列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 從佇列讀取時最常使用以目標型別參數的建構函式。 在撰寫時，它不需要指定目標類型。  
  
 這個多載<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>建構函式<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性中傳遞的陣列值`targetTypes`參數。 設定這個屬性可讓<xref:System.Messaging.MessageQueue>使用此<xref:System.Messaging.XmlMessageFormatter>執行個體以讀取訊息，其中包含指定類型的物件。  
  
 同時<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性告知格式器嘗試比對時還原序列化訊息的哪些結構描述。 這可讓要解譯訊息本文格式器。  
  
 訊息主體中序列化的執行個體必須符合其中一種表示型別陣列中的結構描述。 當您讀取訊息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，此方法會建立對應到識別結構描述和訊息主體讀入之型別的物件。  
  
 只有其中的兩個屬性必須設定從佇列讀取時，但您可以同時設定。 類型為結合來自兩個屬性集。 其中決定来使用一個是應用程式特定的。 如果訊息本文包含的結構描述不符合任何兩個屬性陣列中之類型的類型，在讀取時將會擲回例外狀況。  
  
 指定時<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>而非<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>，類型是否存在已在編譯時期，而不是唯讀的時間，減少錯誤的可能性。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 需要完整限定，指定其組件名稱的每個項目。 此外，當使用多個並行版本，版本號碼也必須附加至目標型別名稱。  
  
 使用時<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>，您可以新增每個物件 (例如`MyClass`) 下列 C# 程式碼所示的方法中的清單。  
  
```  
TargetTypes = new Type[]{typeof(MyClass)}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetTypes" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="xmlMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">要檢查的 <see cref="T:System.Messaging.Message" />。</param>
        <summary>決定格式子是否能夠還原序列化訊息。</summary>
        <returns>如果 XML 格式子能夠還原序列化訊息，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Messaging.XmlMessageFormatter.CanRead%2A>呼叫時，則格式器會嘗試判斷訊息的內容是否可以還原序列化的項目。 格式器可以只將訊息還原序列化訊息本文中的型別為其中一個類型相同的結構描述所表示的陣列中的是否<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性。 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 傳回`false`下列兩種情況下：  
  
-   訊息的格式不使用<xref:System.Messaging.XmlMessageFormatter>。  
  
-   訊息內文的結構描述不在所列的其中一個<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性告知格式器哪些類型的物件就必須能夠還原序列化。 如果遺漏從清單中，任何型別，但訊息中找到<xref:System.Messaging.XmlMessageFormatter.CanRead%2A>傳回`false`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 屬性都沒有設定。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="xmlMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Messaging.XmlMessageFormatter" /> 類別的執行個體，其讀取/寫入屬性 (目標型別集) 與目前的 <see cref="T:System.Messaging.XmlMessageFormatter" /> 執行個體相同。</summary>
        <returns>物件，其屬性和這個 <see cref="T:System.Messaging.XmlMessageFormatter" /> 執行個體的屬性相同，但是其中繼資料 (Metadata) 沒有指定它為格式子類別執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會建立一份格式器，並初始化其所有屬性的值，這個<xref:System.Messaging.XmlMessageFormatter>物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="xmlMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">要還原序列化的 <see cref="T:System.Messaging.Message" />，格式為 XML。</param>
        <summary>讀取指定訊息的內容，並建立包含還原序列化訊息的物件。</summary>
        <returns>還原序列化的訊息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性告知格式器嘗試比對時還原序列化訊息的哪些結構描述。 其中一個屬性必須設定訊息可以還原序列化之前。  
  
 訊息主體中序列化的執行個體必須符合其中一種表示型別陣列中的結構描述。 當您讀取訊息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，此方法會建立對應到識別結構描述和訊息主體讀入之型別的物件。  
  
 目標類型沒有指定，才能寫入至佇列。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 屬性都沒有設定。  
  
-或- 
在訊息主體中序列化的執行個體不會遵循 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 屬性中型別所表示的任何結構描述。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypeNames">
      <MemberSignature Language="C#" Value="public string[] TargetTypeNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] TargetTypeNames" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypeNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ TargetTypeNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypeNames : string[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypeNames")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定可能型別的設定，格式子會從所提供的訊息還原序列化這些型別。</summary>
        <value>
          <see cref="T:System.String" /> 型別的陣列，讀取訊息時，指定要從訊息主體還原序列化的物件型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性告知格式器嘗試比對時還原序列化訊息的哪些結構描述。 這可讓要解譯訊息本文格式器。  
  
 訊息主體中序列化的執行個體必須符合其中一種表示型別陣列中的結構描述。 當您讀取訊息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，此方法會建立對應到識別結構描述和訊息主體讀入之型別的物件。  
  
 只有其中的兩個屬性必須設定從佇列讀取時，但您可以同時設定。 類型為結合來自兩個屬性集。 若要使用哪一個屬性的決策旨在說明您的應用程式。 如果訊息本文包含的結構描述不符合任何兩個屬性陣列中之類型的類型，讀取訊息時將會擲回例外狀況。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 需要完整限定，指定其組件名稱的每個項目。 此外，當使用多個並行版本，版本號碼也必須附加至目標型別名稱。  
  
 目標型別只會從佇列讀取時所需。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性不需要設定為寫入至佇列。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 屬性為 <see langword="null" />。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypes">
      <MemberSignature Language="C#" Value="public Type[] TargetTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] TargetTypes" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypes As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;Type ^&gt; ^ TargetTypes { cli::array &lt;Type ^&gt; ^ get(); void set(cli::array &lt;Type ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypes : Type[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypes")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定可能型別的設定，格式子會從所提供的訊息還原序列化這些型別。</summary>
        <value>
          <see cref="T:System.Type" /> 型別的陣列，讀取訊息時，指定要從訊息主體還原序列化的物件型別。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同時<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性告知格式器嘗試比對時還原序列化訊息的哪些結構描述。 這可讓要解譯訊息本文格式器。  
  
 訊息主體中序列化的執行個體必須符合其中一種表示型別陣列中的結構描述。 當您讀取訊息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，此方法會建立對應到識別結構描述和訊息主體讀入之型別的物件。  
  
 只有其中的兩個屬性必須設定從佇列讀取時，但您可以同時設定。 類型為結合來自兩個屬性集。 若要使用哪一個屬性的決策旨在說明您的應用程式。 如果訊息本文包含的結構描述不符合任何兩個屬性陣列中之類型的類型，讀取訊息時將會擲回例外狀況。  
  
 目標型別只會從佇列讀取時所需。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>屬性不需要設定為寫入至佇列。  
  
 指定時<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>而非<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>，類型是否存在已在編譯時期，而不是唯讀的時間，減少錯誤的可能性。  
  
 使用時<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>，您可以新增每個物件 (例如`MyClass`) 至以 C# 程式碼所示的方式清單`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`。  
  
   
  
## Examples  
 下列程式碼範例會傳送，並收到包含訂單與佇列的訊息。  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 屬性為 <see langword="null" />。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="xmlMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">
          <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Body" /> 屬性會包含序列化物件。</param>
        <param name="obj">要序列化到訊息主體中的 <see cref="T:System.Object" />。</param>
        <summary>將物件序列化到訊息主體中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目標類型，則不需要指定寫入至佇列，因為它們必須讀取時。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>只有在還原序列化訊息時，才使用屬性，格式器。  
  
 <xref:System.Messaging.XmlMessageFormatter>利用<xref:System.Xml.Serialization.XmlSerializer>類別，定義什麼可以序列化。 只可以序列化公用欄位和公用屬性。 結構、 結構與陣列和結構的陣列是所有可序列化，只要它們不使用 SOAP 通訊協定與編碼的樣式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> 參數為 <see langword="null" />。  
  
-或- 
<paramref name="obj" /> 參數為 <see langword="null" />。</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>