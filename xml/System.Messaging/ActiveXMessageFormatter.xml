<Type Name="ActiveXMessageFormatter" FullName="System.Messaging.ActiveXMessageFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="faadf8481cd3fb72c4c4e7cd4f515c7c94f12924" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37647413" /></Metadata><TypeSignature Language="C#" Value="public class ActiveXMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ActiveXMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.ActiveXMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class ActiveXMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ActiveXMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type ActiveXMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="11b5c-101">使用與 MSMQ ActiveX 元件相容的格式，將訊息佇列訊息主體的基本資料型別和其他物件序列化或還原序列化。</span><span class="sxs-lookup"><span data-stu-id="11b5c-101">Serializes or deserializes primitive data types and other objects to or from the body of a Message Queuing message, using a format that is compatible with the MSMQ ActiveX Component.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11b5c-102"><xref:System.Messaging.ActiveXMessageFormatter>適用於使用訊息佇列的 COM 元件，可讓使用 MSMQ COM 控制項的應用程式的互通性所傳送的訊息。</span><span class="sxs-lookup"><span data-stu-id="11b5c-102">The <xref:System.Messaging.ActiveXMessageFormatter> is compatible with messages sent using Message Queuing COM components, allowing interoperability with applications that use the MSMQ COM control.</span></span>  
  
 <span data-ttu-id="11b5c-103"><xref:System.Messaging.ActiveXMessageFormatter>大部分基本類型，以及實作的物件可以序列化`IPersistStream`OLE 介面。</span><span class="sxs-lookup"><span data-stu-id="11b5c-103">The <xref:System.Messaging.ActiveXMessageFormatter> can serialize most primitives, as well as objects that implement the `IPersistStream` OLE interface.</span></span> <span data-ttu-id="11b5c-104">它可以還原序列化的基本項目，一組相同，但需要進一步努力還原序列化實作的 COM 物件 （例如，使用 Visual Basic 6.0 中建立的物件） 時`IPersistStream`。</span><span class="sxs-lookup"><span data-stu-id="11b5c-104">It can deserialize the same set of primitives, but requires further effort when deserializing a COM object (for example, an object created using Visual Basic 6.0) that implements `IPersistStream`.</span></span> <span data-ttu-id="11b5c-105">要還原序列化的物件必須在記憶體中的第一次匯入物件的.NET Framework 應用程式。</span><span class="sxs-lookup"><span data-stu-id="11b5c-105">The object to deserialize must be in memory by first importing the object into a .NET Framework application.</span></span>  
  
 <span data-ttu-id="11b5c-106">當應用程式會傳送訊息至佇列使用的執行個體<xref:System.Messaging.MessageQueue>類別，格式器會將物件序列化成資料流，並將它插入訊息內文。</span><span class="sxs-lookup"><span data-stu-id="11b5c-106">When an application sends a message to the queue using an instance of the <xref:System.Messaging.MessageQueue> class, the formatter serializes the object into a stream and inserts it into the message body.</span></span> <span data-ttu-id="11b5c-107">讀取佇列使用時<xref:System.Messaging.MessageQueue>，格式器會將訊息資料還原序列化<xref:System.Messaging.Message.Body%2A>屬性<xref:System.Messaging.Message>。</span><span class="sxs-lookup"><span data-stu-id="11b5c-107">When reading from a queue using a <xref:System.Messaging.MessageQueue>, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.</span></span>  
  
 <span data-ttu-id="11b5c-108">ActiveX 序列化是極為精簡，因此使用<xref:System.Messaging.ActiveXMessageFormatter>和 MSMQ COM 控制序列化的非常快速的方法。</span><span class="sxs-lookup"><span data-stu-id="11b5c-108">ActiveX serialization is very compact, which makes using the <xref:System.Messaging.ActiveXMessageFormatter> and MSMQ COM control a very fast method of serialization.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActiveXMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActiveXMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11b5c-109">初始化 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="11b5c-109">Initializes a new instance of the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="activeXMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="11b5c-110">要檢查的 <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="11b5c-110">The <see cref="T:System.Messaging.Message" /> to inspect.</span></span></param>
        <summary><span data-ttu-id="11b5c-111">決定格式子是否能夠還原序列化訊息的內容。</span><span class="sxs-lookup"><span data-stu-id="11b5c-111">Determines whether the formatter can deserialize the contents of the message.</span></span></summary>
        <returns><span data-ttu-id="11b5c-112">如果 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 能夠將訊息還原序列化，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="11b5c-112"><see langword="true" /> if the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> can deserialize the message; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11b5c-113"><xref:System.Messaging.ActiveXMessageFormatter.CanRead%2A> 會傳回`false`如果訊息本文不是訊息佇列的 ActiveX 控制項可以還原序列化的基本類型或它不會實作`IPersistStream`介面。</span><span class="sxs-lookup"><span data-stu-id="11b5c-113"><xref:System.Messaging.ActiveXMessageFormatter.CanRead%2A> returns `false` if the message body is not a primitive that the Message Queuing ActiveX control can deserialize or if it does not implement the `IPersistStream` interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="11b5c-114"><paramref name="message" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="11b5c-114">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="activeXMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="11b5c-115">建立一個和目前 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 相同的 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 類別的執行個體。</span><span class="sxs-lookup"><span data-stu-id="11b5c-115">Creates an instance of the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> class that is identical to the current <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</span></span></summary>
        <returns><span data-ttu-id="11b5c-116">物件的屬性和這個 <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 的屬性相同。</span><span class="sxs-lookup"><span data-stu-id="11b5c-116">An object whose properties are identical to those of this <see cref="T:System.Messaging.ActiveXMessageFormatter" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11b5c-117">這個方法由<xref:System.Messaging.MessageQueue>才能接收多個訊息在此同時，（比方說，如果應用程式以非同步方式接收） 的類別。</span><span class="sxs-lookup"><span data-stu-id="11b5c-117">This method is used by the <xref:System.Messaging.MessageQueue> class in order to receive multiple messages at the same time (for example, if the application is receiving asynchronously).</span></span> <span data-ttu-id="11b5c-118">您通常不需要在應用程式程式碼中呼叫此方法。</span><span class="sxs-lookup"><span data-stu-id="11b5c-118">You typically do not need to call this method in your application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="InitStreamedObject">
      <MemberSignature Language="C#" Value="public static void InitStreamedObject (object streamedObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitStreamedObject(object streamedObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitStreamedObject (streamedObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitStreamedObject(System::Object ^ streamedObject);" />
      <MemberSignature Language="F#" Value="static member InitStreamedObject : obj -&gt; unit" Usage="System.Messaging.ActiveXMessageFormatter.InitStreamedObject streamedObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamedObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="streamedObject"><span data-ttu-id="11b5c-119">實作 <see langword="IPersistStreamInit" /> 的 OLE 物件。</span><span class="sxs-lookup"><span data-stu-id="11b5c-119">An OLE object that implements <see langword="IPersistStreamInit" />.</span></span></param>
        <summary><span data-ttu-id="11b5c-120">提供公用程式，以協助序列化實作 <see langword="IPersistStream" /> 並要求呼叫 <see langword="IPersistStreamInit" /> 的 COM 物件。</span><span class="sxs-lookup"><span data-stu-id="11b5c-120">Provides a utility to help serialize COM objects that implement <see langword="IPersistStream" /> and require <see langword="IPersistStreamInit" /> to be called.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="activeXMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="11b5c-121">要還原序列化的 <see cref="T:System.Messaging.Message" />，格式為 MSMQ ActiveX 控制項。</span><span class="sxs-lookup"><span data-stu-id="11b5c-121">The <see cref="T:System.Messaging.Message" />, in MSMQ ActiveX control format, to deserialize.</span></span></param>
        <summary><span data-ttu-id="11b5c-122">讀取指定訊息的內容，並建立包含還原序列化訊息的物件。</span><span class="sxs-lookup"><span data-stu-id="11b5c-122">Reads the contents from the given message and creates an object that contains the deserialized message.</span></span></summary>
        <returns><span data-ttu-id="11b5c-123">還原序列化的訊息。</span><span class="sxs-lookup"><span data-stu-id="11b5c-123">The deserialized message.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11b5c-124">如果訊息的主體代表基本類型，訊息的<xref:System.Messaging.Message.BodyType%2A>屬性必須是其中一個下表中的 managed 類型。</span><span class="sxs-lookup"><span data-stu-id="11b5c-124">If the body of the message represents a primitive type, the message's <xref:System.Messaging.Message.BodyType%2A> property must be one of the managed types in the following table.</span></span>  
  
|<span data-ttu-id="11b5c-125">BodyType 值</span><span class="sxs-lookup"><span data-stu-id="11b5c-125">BodyType value</span></span>|<span data-ttu-id="11b5c-126">Managed 的類型</span><span class="sxs-lookup"><span data-stu-id="11b5c-126">Managed type</span></span>|  
|--------------------|------------------|  
|<span data-ttu-id="11b5c-127">VT_LPSTR</span><span class="sxs-lookup"><span data-stu-id="11b5c-127">VT_LPSTR</span></span>|<span data-ttu-id="11b5c-128"><xref:System.Char> 陣列 （還原序列化使用 ASCII 編碼）</span><span class="sxs-lookup"><span data-stu-id="11b5c-128"><xref:System.Char> array (deserialized using ASCII encoding)</span></span>|  
|<span data-ttu-id="11b5c-129">VT_BSTR, VT_LPWSTR</span><span class="sxs-lookup"><span data-stu-id="11b5c-129">VT_BSTR, VT_LPWSTR</span></span>|<span data-ttu-id="11b5c-130"><xref:System.String> （還原序列化使用 Unicode 編碼）</span><span class="sxs-lookup"><span data-stu-id="11b5c-130"><xref:System.String> (deserialized using Unicode encoding)</span></span>|  
|<span data-ttu-id="11b5c-131">VT_VECTOR &AMP;#124; VT_UI1</span><span class="sxs-lookup"><span data-stu-id="11b5c-131">VT_VECTOR &#124; VT_UI1</span></span>|<span data-ttu-id="11b5c-132"><xref:System.Byte> 陣列</span><span class="sxs-lookup"><span data-stu-id="11b5c-132"><xref:System.Byte> array</span></span>|  
|<span data-ttu-id="11b5c-133">VT_BOOL</span><span class="sxs-lookup"><span data-stu-id="11b5c-133">VT_BOOL</span></span>|<xref:System.Boolean>|  
|<span data-ttu-id="11b5c-134">VT_CLSID</span><span class="sxs-lookup"><span data-stu-id="11b5c-134">VT_CLSID</span></span>|<xref:System.Guid>|  
|<span data-ttu-id="11b5c-135">VT_CY</span><span class="sxs-lookup"><span data-stu-id="11b5c-135">VT_CY</span></span>|<xref:System.Decimal>|  
|<span data-ttu-id="11b5c-136">VT_DATE</span><span class="sxs-lookup"><span data-stu-id="11b5c-136">VT_DATE</span></span>|<xref:System.DateTime>|  
|<span data-ttu-id="11b5c-137">VT_I1 VT_UI1</span><span class="sxs-lookup"><span data-stu-id="11b5c-137">VT_I1, VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="11b5c-138">VT_I2</span><span class="sxs-lookup"><span data-stu-id="11b5c-138">VT_I2</span></span>|<xref:System.Int16>|  
|<span data-ttu-id="11b5c-139">VT_UI2</span><span class="sxs-lookup"><span data-stu-id="11b5c-139">VT_UI2</span></span>|<xref:System.UInt16>|  
|<span data-ttu-id="11b5c-140">VT_I4</span><span class="sxs-lookup"><span data-stu-id="11b5c-140">VT_I4</span></span>|<xref:System.Int32>|  
|<span data-ttu-id="11b5c-141">VT_UI4</span><span class="sxs-lookup"><span data-stu-id="11b5c-141">VT_UI4</span></span>|<xref:System.UInt32>|  
|<span data-ttu-id="11b5c-142">VT_I8</span><span class="sxs-lookup"><span data-stu-id="11b5c-142">VT_I8</span></span>|<xref:System.Int64>|  
|<span data-ttu-id="11b5c-143">VT_UI8</span><span class="sxs-lookup"><span data-stu-id="11b5c-143">VT_UI8</span></span>|<xref:System.UInt64>|  
|<span data-ttu-id="11b5c-144">VT_R4</span><span class="sxs-lookup"><span data-stu-id="11b5c-144">VT_R4</span></span>|<xref:System.Single>|  
|<span data-ttu-id="11b5c-145">VT_R8</span><span class="sxs-lookup"><span data-stu-id="11b5c-145">VT_R8</span></span>|<xref:System.Double>|  
|<span data-ttu-id="11b5c-146">VT_NULL</span><span class="sxs-lookup"><span data-stu-id="11b5c-146">VT_NULL</span></span>|`null`|  
|<span data-ttu-id="11b5c-147">VT_STREAMED_OBJECT</span><span class="sxs-lookup"><span data-stu-id="11b5c-147">VT_STREAMED_OBJECT</span></span>|<xref:System.Object>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="11b5c-148"><paramref name="message" /> 的 <see cref="P:System.Messaging.Message.BodyType" /> 屬性傳遞的參數無法對應至基本型別，它也不表示一個資料流物件。</span><span class="sxs-lookup"><span data-stu-id="11b5c-148">The <see cref="P:System.Messaging.Message.BodyType" /> property of the <paramref name="message" /> passed as a parameter cannot be mapped to a primitive type, nor does it represent a streamed object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="11b5c-149">主體表示一個預存物件。</span><span class="sxs-lookup"><span data-stu-id="11b5c-149">The body represents a stored object.</span></span> <span data-ttu-id="11b5c-150"><see cref="T:System.Messaging.ActiveXMessageFormatter" /> 不支援儲存物件的還原序列化 (Deserialization) 格式。</span><span class="sxs-lookup"><span data-stu-id="11b5c-150">The <see cref="T:System.Messaging.ActiveXMessageFormatter" /> does not support deserialization of stored objects.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="11b5c-151"><paramref name="message" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="11b5c-151">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="activeXMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="11b5c-152"><see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Body" /> 屬性會包含序列化物件。</span><span class="sxs-lookup"><span data-stu-id="11b5c-152">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Body" /> property will contain the serialized object.</span></span></param>
        <param name="obj"><span data-ttu-id="11b5c-153">要序列化到訊息本文中的物件。</span><span class="sxs-lookup"><span data-stu-id="11b5c-153">The object to be serialized into the message body.</span></span></param>
        <summary><span data-ttu-id="11b5c-154">將物件序列化到訊息主體中。</span><span class="sxs-lookup"><span data-stu-id="11b5c-154">Serializes an object into the body of the message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11b5c-155">下表顯示 managed 型別之間的關聯性和<xref:System.Messaging.Message.BodyType%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="11b5c-155">The following table shows the relationship between managed types and the <xref:System.Messaging.Message.BodyType%2A> property.</span></span> <span data-ttu-id="11b5c-156">您將序列化的物件必須是其中一個受管理的類型，或必須實作 OLE`IPersistStream`介面。</span><span class="sxs-lookup"><span data-stu-id="11b5c-156">The object that you serialize must be one of these managed types or must implement the OLE `IPersistStream` interface.</span></span>  
  
|<span data-ttu-id="11b5c-157">BodyType 值</span><span class="sxs-lookup"><span data-stu-id="11b5c-157">BodyType value</span></span>|<span data-ttu-id="11b5c-158">Managed 的類型</span><span class="sxs-lookup"><span data-stu-id="11b5c-158">Managed type</span></span>|  
|--------------------|------------------|  
|<span data-ttu-id="11b5c-159">VT_LPSTR</span><span class="sxs-lookup"><span data-stu-id="11b5c-159">VT_LPSTR</span></span>|<xref:System.Char>|  
|<span data-ttu-id="11b5c-160">VT_BSTR, VT_LPWSTR</span><span class="sxs-lookup"><span data-stu-id="11b5c-160">VT_BSTR, VT_LPWSTR</span></span>|<xref:System.String>|  
|<span data-ttu-id="11b5c-161">VT_VECTOR &AMP;#124; VT_UI1</span><span class="sxs-lookup"><span data-stu-id="11b5c-161">VT_VECTOR &#124; VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="11b5c-162">VT_BOOL</span><span class="sxs-lookup"><span data-stu-id="11b5c-162">VT_BOOL</span></span>|<xref:System.Boolean>|  
|<span data-ttu-id="11b5c-163">VT_CLSID</span><span class="sxs-lookup"><span data-stu-id="11b5c-163">VT_CLSID</span></span>|<xref:System.Guid>|  
|<span data-ttu-id="11b5c-164">VT_CY</span><span class="sxs-lookup"><span data-stu-id="11b5c-164">VT_CY</span></span>|<xref:System.Decimal>|  
|<span data-ttu-id="11b5c-165">VT_DATE</span><span class="sxs-lookup"><span data-stu-id="11b5c-165">VT_DATE</span></span>|<xref:System.DateTime>|  
|<span data-ttu-id="11b5c-166">VT_I1 VT_UI1</span><span class="sxs-lookup"><span data-stu-id="11b5c-166">VT_I1, VT_UI1</span></span>|<xref:System.Byte>|  
|<span data-ttu-id="11b5c-167">VT_I2</span><span class="sxs-lookup"><span data-stu-id="11b5c-167">VT_I2</span></span>|<xref:System.Int16>|  
|<span data-ttu-id="11b5c-168">VT_UI2</span><span class="sxs-lookup"><span data-stu-id="11b5c-168">VT_UI2</span></span>|<xref:System.UInt16>|  
|<span data-ttu-id="11b5c-169">VT_I4</span><span class="sxs-lookup"><span data-stu-id="11b5c-169">VT_I4</span></span>|<xref:System.Int32>|  
|<span data-ttu-id="11b5c-170">VT_UI4</span><span class="sxs-lookup"><span data-stu-id="11b5c-170">VT_UI4</span></span>|<xref:System.UInt32>|  
|<span data-ttu-id="11b5c-171">VT_I8</span><span class="sxs-lookup"><span data-stu-id="11b5c-171">VT_I8</span></span>|<xref:System.Int64>|  
|<span data-ttu-id="11b5c-172">VT_UI8</span><span class="sxs-lookup"><span data-stu-id="11b5c-172">VT_UI8</span></span>|<xref:System.UInt64>|  
|<span data-ttu-id="11b5c-173">VT_R4</span><span class="sxs-lookup"><span data-stu-id="11b5c-173">VT_R4</span></span>|<xref:System.Single>|  
|<span data-ttu-id="11b5c-174">VT_R8</span><span class="sxs-lookup"><span data-stu-id="11b5c-174">VT_R8</span></span>|<xref:System.Double>|  
|<span data-ttu-id="11b5c-175">VT_NULL</span><span class="sxs-lookup"><span data-stu-id="11b5c-175">VT_NULL</span></span>|`null`|  
|<span data-ttu-id="11b5c-176">VT_STREAMED_OBJECT</span><span class="sxs-lookup"><span data-stu-id="11b5c-176">VT_STREAMED_OBJECT</span></span>|<span data-ttu-id="11b5c-177">`IPersistStream` (OLE) <xref:System.Object></span><span class="sxs-lookup"><span data-stu-id="11b5c-177">`IPersistStream` (OLE) <xref:System.Object></span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="11b5c-178">要序列化的物件既不是基本型別，也不是實作 OLE <see langword="IPersistStream" /> 介面的資料流物件。</span><span class="sxs-lookup"><span data-stu-id="11b5c-178">The object to serialize is neither a primitive nor a streamed object that implements the OLE <see langword="IPersistStream" /> interface.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="11b5c-179"><paramref name="message" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="11b5c-179">The <paramref name="message" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>