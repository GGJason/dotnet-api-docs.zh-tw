<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a3039a11d941cd3db611cb997eb17835525e4da" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460812" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="93e13-101">提供順向資料指標，進而列舉訊息佇列中的訊息。</span>
      <span class="sxs-lookup">
        <span data-stu-id="93e13-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-102">使用<xref:System.Messaging.MessageEnumerator>與訊息佇列中的動態互動。</span><span class="sxs-lookup"><span data-stu-id="93e13-102">Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue.</span></span> <span data-ttu-id="93e13-103">方法可透過<xref:System.Messaging.MessageQueue>類別可以傳回<xref:System.Messaging.MessageEnumerator>指向動態清單的訊息佇列或陣列，其中包含指定何時快照集-佇列的複本，在時間中指定的方法呼叫。</span><span class="sxs-lookup"><span data-stu-id="93e13-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="93e13-104">與不同的是靜態的快照集，列舉值可讓您修改該集合。</span><span class="sxs-lookup"><span data-stu-id="93e13-104">Unlike a static snapshot, an enumerator allows you to modify the collection.</span></span> <span data-ttu-id="93e13-105">使用<xref:System.Messaging.MessageEnumerator>，您可以從佇列移除訊息，此變更會立即反映在佇列中。</span><span class="sxs-lookup"><span data-stu-id="93e13-105">Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.</span></span>  
  
 <span data-ttu-id="93e13-106">時，它會查詢佇列的列舉值將不會從佇列移除訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-106">An enumerator does not remove the messages from the queue when it queries the queue.</span></span> <span data-ttu-id="93e13-107">它會傳回在目前游標位置中，訊息的相關資訊，但會將訊息留在佇列中。</span><span class="sxs-lookup"><span data-stu-id="93e13-107">It returns information about the message at the current cursor position, but it leaves the message in the queue.</span></span>  
  
 <span data-ttu-id="93e13-108">A<xref:System.Messaging.MessageEnumerator>是資料指標，初始化為動態清單的開頭。</span><span class="sxs-lookup"><span data-stu-id="93e13-108">A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="93e13-109">清單的順序是在佇列中，訊息的順序相同根據訊息的優先權。</span><span class="sxs-lookup"><span data-stu-id="93e13-109">The list order is the same as the order of the messages in the queue, according to message priority.</span></span> <span data-ttu-id="93e13-110">您可以將游標移到佇列中的第一個訊息藉由呼叫<xref:System.Messaging.MessageEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="93e13-110">You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="93e13-111">初始化列舉值之後，您可以使用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>逐步剩餘的訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-111">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages.</span></span> <span data-ttu-id="93e13-112">您可以指定是否要等候變成可用，藉由傳遞至逾時訊息<xref:System.Messaging.MessageEnumerator.MoveNext%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="93e13-112">You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.</span></span>  
  
 <span data-ttu-id="93e13-113">列舉值是動態的因為附加 （例如，由於低優先順序），資料指標的目前位置之後的訊息可以透過列舉值。</span><span class="sxs-lookup"><span data-stu-id="93e13-113">Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</span></span> <span data-ttu-id="93e13-114">無法存取資料指標的目前位置之前插入訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-114">A message that is inserted before the cursor's current position cannot be accessed.</span></span> <span data-ttu-id="93e13-115">不可能藉由向後逐步<xref:System.Messaging.MessageEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="93e13-115">It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>.</span></span> <span data-ttu-id="93e13-116">資料指標可讓順向移動。</span><span class="sxs-lookup"><span data-stu-id="93e13-116">A cursor allows forward-only movement.</span></span> <span data-ttu-id="93e13-117"><xref:System.Messaging.MessageEnumerator.Reset%2A>方法可讓您將游標放回佇列的開頭。</span><span class="sxs-lookup"><span data-stu-id="93e13-117">The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="93e13-118">執行個體<xref:System.Messaging.MessageEnumerator>獨立指定佇列的工作。</span><span class="sxs-lookup"><span data-stu-id="93e13-118">Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently.</span></span> <span data-ttu-id="93e13-119">您可以建立兩個<xref:System.Messaging.MessageEnumerator>套用至相同佇列的執行個體。</span><span class="sxs-lookup"><span data-stu-id="93e13-119">You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue.</span></span> <span data-ttu-id="93e13-120">所做的變更，其中<xref:System.Messaging.MessageEnumerator>對佇列中訊息將會立即反映在第二個列舉值如果第二個列舉程式位在第一個。</span><span class="sxs-lookup"><span data-stu-id="93e13-120">The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</span></span> <span data-ttu-id="93e13-121">不過，如果兩個列舉值具有相同的位置，而且其中一個方法中移除該位置的訊息，會擲回例外狀況取得的值嘗試其他列舉值<xref:System.Messaging.MessageEnumerator.Current%2A>現在刪除的訊息上的屬性。</span><span class="sxs-lookup"><span data-stu-id="93e13-121">However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="93e13-122">如果您建立的執行個體<xref:System.Messaging.MessageQueue>與<xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType>設`true`，沒有其他應用程式可以連接到佇列時，可以修改您的列舉值中的訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-122">If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93e13-123">下列範例會在佇列取得訊息的動態清單，並計算的所有訊息<xref:System.Messaging.Message.Priority%2A>屬性設定為<xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="93e13-123">The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="93e13-124">釋放與列舉值相關的資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-124">Frees the resources associated with the enumerator.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-125">作業系統會在資料指標的存留期內保留佇列的開啟控制代碼。</span><span class="sxs-lookup"><span data-stu-id="93e13-125">The operating system retains an open handle to the queue during the lifetime of the cursor.</span></span> <span data-ttu-id="93e13-126">當您完成使用列舉值時，呼叫<xref:System.Messaging.MessageEnumerator.Close%2A>釋放控制代碼相關聯的資源。</span><span class="sxs-lookup"><span data-stu-id="93e13-126">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="93e13-127">取得這個列舉值指向的目前 <see cref="T:System.Messaging.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-127">Gets the current <see cref="T:System.Messaging.Message" /> that this enumerator points to.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="93e13-128">目前的訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-128">The current message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-129">建立列舉值時，它所指向的佇列中的第一個訊息之前的位置標頭。</span><span class="sxs-lookup"><span data-stu-id="93e13-129">When the enumerator is created, it points to the head of the queue, at a location before the first message.</span></span> <span data-ttu-id="93e13-130">在此情況下，<xref:System.Messaging.MessageEnumerator.Current%2A>不正確，如果它存取將會擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="93e13-130">In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="93e13-131">您必須呼叫<xref:System.Messaging.MessageEnumerator.MoveNext%2A>將資料指標置於佇列中的第一個訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-131">You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="93e13-132">在第一次呼叫 <see cref="P:System.Messaging.MessageEnumerator.Current" /> 之前，請先呼叫 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-132">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span>
          </span>
          <span data-ttu-id="93e13-133">資料指標位於訊息列舉型別的第一個項目前面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-133">The cursor is located before the first element of the message enumeration.</span>
          </span>
          <span data-ttu-id="93e13-134">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-134">-or-</span>
          </span>
          <span data-ttu-id="93e13-135">在對 <see cref="P:System.Messaging.MessageEnumerator.Current" /> 的呼叫傳回 <see langword="false" /> 之後，請呼叫 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> (指示資料指標位於訊息列舉型別的最後一個項目後面)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-135">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned <see langword="false" /> (indicating the cursor is located after the last element of the message enumeration.)</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="93e13-136">列舉值目前指向的訊息已經不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-136">The message the enumerator is currently pointing to no longer exists.</span>
          </span>
          <span data-ttu-id="93e13-137">可能已遭刪除。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-137">It might have been deleted.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="93e13-138">取得用來瀏覽佇列中訊息的原生 (Native) 訊息佇列資料指標控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-138">Gets the native Message Queuing cursor handle used to browse messages in the queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="93e13-139">原生資料指標控制代碼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-139">The native cursor handle.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-140">此屬性包含在列舉的原生控制代碼。</span><span class="sxs-lookup"><span data-stu-id="93e13-140">This property contains the native handle to the enumeration.</span></span> <span data-ttu-id="93e13-141">當您完成使用列舉值時，呼叫<xref:System.Messaging.MessageEnumerator.Close%2A>釋放此資源。</span><span class="sxs-lookup"><span data-stu-id="93e13-141">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="93e13-142">控制代碼不存在。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-142">The handle does not exist.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="93e13-143">釋放 <see cref="T:System.Messaging.MessageEnumerator" /> 使用的資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-143">Releases the resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="93e13-144">釋放 <see cref="T:System.Messaging.MessageEnumerator" /> 所使用的所有資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-144">Releases all resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-145">呼叫<xref:System.Messaging.MessageEnumerator.Dispose%2A>允許所使用的資源<xref:System.Messaging.MessageEnumerator>都重新配置用於其他用途。</span><span class="sxs-lookup"><span data-stu-id="93e13-145">Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="93e13-146">如需有關<xref:System.Messaging.MessageEnumerator.Dispose%2A>，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="93e13-146">For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="93e13-147">
            <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-147">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="93e13-148">釋放 <see cref="T:System.Messaging.MessageEnumerator" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-148">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageEnumerator" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-149">這個方法會呼叫公用<xref:System.Messaging.MessageEnumerator.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="93e13-149">This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="93e13-150">`Dispose()` 叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。</span><span class="sxs-lookup"><span data-stu-id="93e13-150">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="93e13-151"><xref:System.Object.Finalize%2A> 叫用`Dispose`與`disposing`設`false`。</span><span class="sxs-lookup"><span data-stu-id="93e13-151"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="93e13-152">`disposing` 參數為 `true` 時，這個方法會釋放 <xref:System.Messaging.MessageEnumerator> 參考的任何 Managed 物件所掌握的資源。</span><span class="sxs-lookup"><span data-stu-id="93e13-152">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references.</span></span> <span data-ttu-id="93e13-153">這個方法會叫用每個參考物件的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="93e13-153">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="93e13-154">
              <see langword="Dispose" /> 可以被其他物件呼叫多次。</span>
            <span class="sxs-lookup">
              <span data-stu-id="93e13-154">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="93e13-155">覆寫 <see langword="Dispose(Boolean)" /> 時，請小心不要參考到先前已在對 <see langword="Dispose" /> 的早期呼叫中被處置 (Dispose) 的物件。</span>
            <span class="sxs-lookup">
              <span data-stu-id="93e13-155">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="93e13-156">如需有關如何實作<see langword="Dispose" />，請參閱[實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="93e13-156">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="93e13-157">如需有關<see langword="Dispose" />和<see langword="Finalize" />，請參閱[清除 Unmanaged 資源上](~/docs/standard/garbage-collection/unmanaged.md)和[覆寫 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</span>
            <span class="sxs-lookup">
              <span data-stu-id="93e13-157">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="93e13-158">讓列舉值前進至佇列中的下一個訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-158">Advances the enumerator to the next message in the queue.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="93e13-159">如果目前有可用的列舉值，讓列舉值前進至佇列中的下一個訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-159">Advances the enumerator to the next message in the queue, if one is currently available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="93e13-160">如果列舉值成功地前移至下一則訊息則為 <see langword="true" />，如果列舉值已到達佇列結尾則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-160">
              <see langword="true" /> if the enumerator was succesfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-161">不是否有任何訊息佇列中這個多載會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="93e13-161">This overload returns immediately if there is no message in the queue.</span></span> <span data-ttu-id="93e13-162">等候指定的另一個多載<xref:System.TimeSpan>抵達的訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-162">There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.</span></span>  
  
 <span data-ttu-id="93e13-163">如果訊息不是目前可用因為佇列是空的或是因為您已在集合中，最後一個項目之外<xref:System.Messaging.MessageEnumerator.MoveNext%2A>傳回`false`至呼叫的方法。</span><span class="sxs-lookup"><span data-stu-id="93e13-163">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method.</span></span>  
  
 <span data-ttu-id="93e13-164">在建立列舉值在概念上位在佇列中，且第一個呼叫的第一個訊息之前<xref:System.Messaging.MessageEnumerator.MoveNext%2A>帶入檢視中的第一個佇列的訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-164">Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="93e13-165">擲回訊息佇列的特定例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-165">An exception specific to Message Queuing was thrown.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="93e13-166">如果列舉值已經位於佇列的末端，<see cref="T:System.TimeSpan" /> 等待訊息變成可用所需的時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-166">The <see cref="T:System.TimeSpan" /> to wait for a message to be available if the enumerator is positioned at the end of the queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="93e13-167">讓列舉值前進至佇列中的下一個訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-167">Advances the enumerator to the next message in the queue.</span>
          </span>
          <span data-ttu-id="93e13-168">如果列舉值已位於佇列的結尾，<see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 會一直等待，直到有可用的訊息或指定的逾時到期為止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-168">If the enumerator is positioned at the end of the queue, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> waits until a message is available or the given timeout expires.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="93e13-169">如果列舉值成功地前進到下一個訊息，則為 <see langword="true" />；如果列舉值已經到達佇列的末端，而且在 <paramref name="timeout" /> 參數指定的時間之內訊息尚未變成可用，則為 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-169">
              <see langword="true" /> if the enumerator successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <paramref name="timeout" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-170">如果佇列中沒有任何訊息，或資料指標已到達佇列的末端，則會等候這個多載。</span><span class="sxs-lookup"><span data-stu-id="93e13-170">This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</span></span> <span data-ttu-id="93e13-171">如果訊息不是目前可用因為佇列是空的或是因為您已在集合中，最後一個項目之外<xref:System.Messaging.MessageEnumerator.MoveNext%2A>等候指定的逾時。</span><span class="sxs-lookup"><span data-stu-id="93e13-171">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.</span></span>  
  
 <span data-ttu-id="93e13-172">如果資料指標已經在佇列結尾<xref:System.Messaging.MessageEnumerator.MoveNext%2A>只會傳回`true`新訊息到達指定的時間間隔內，如果佇列中目前的優先權低於所有訊息，並放置在佇列結尾。</span><span class="sxs-lookup"><span data-stu-id="93e13-172">If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</span></span> <span data-ttu-id="93e13-173">如果沒有進一步的訊息會在佇列中沒有參數的多載會立即傳回。</span><span class="sxs-lookup"><span data-stu-id="93e13-173">An overload with no parameter returns immediately if no further messages are in the queue.</span></span>  
  
 <span data-ttu-id="93e13-174">在建立列舉值在概念上位列舉型別，且第一個呼叫的第一個訊息之前<xref:System.Messaging.MessageEnumerator.MoveNext%2A>讓列舉型別檢視的第一個訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-174">Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="93e13-175">為逾時參數指定的值無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-175">The value specified for the timeout parameter is invalid.</span>
          </span>
          <span data-ttu-id="93e13-176">可能表示負數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-176">It might represent a negative number.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="93e13-177">擲回訊息佇列的特定例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-177">An exception specific to Message Queuing was thrown.</span>
          </span>
          <span data-ttu-id="93e13-178">-或-</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-178">-or-</span>
          </span>
          <span data-ttu-id="93e13-179">已經逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-179">The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="93e13-180">從佇列中移除目前的訊息，並將訊息傳回至呼叫的應用程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-180">Removes the current message from the queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="93e13-181">移除訊息會將它從佇列中刪除。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-181">Removing the message deletes it from the queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-182">描述這些多載的行為是適用於只有當<xref:System.Messaging.MessageEnumerator>使用擷取執行個體<xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>。</span><span class="sxs-lookup"><span data-stu-id="93e13-182">The behavior described for these overloads is applicable only if the <xref:System.Messaging.MessageEnumerator> instance is retrieved by using the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span></span> <span data-ttu-id="93e13-183">請勿使用<xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A>擷取執行個體的<xref:System.Messaging.MessageEnumerator>當這個方法已被取代。</span><span class="sxs-lookup"><span data-stu-id="93e13-183">Do not use <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> to retrieve an instance of <xref:System.Messaging.MessageEnumerator> as this method has been deprecated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="93e13-184">從異動或非異動性佇列中移除目前的訊息，並將訊息傳回至呼叫的應用程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-184">Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="93e13-185">沒有為訊息到達佇列指定逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-185">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="93e13-186">
            <see cref="T:System.Messaging.Message" />，參考佇列中的第一個可用訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-186">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-187"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除並傳回資料指標的目前位置的訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-187"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span>  
  
 <span data-ttu-id="93e13-188">如果您使用的佇列日誌，移除該訊息會導致保留在日誌佇列，就如同副本<xref:System.Messaging.MessageQueue>類別的<xref:System.Messaging.MessageQueue.Receive%2A>方法會執行。</span><span class="sxs-lookup"><span data-stu-id="93e13-188">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="93e13-189">當您移除目前的訊息時，將游標移至下一個訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-189">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="93e13-190">您不需要呼叫<xref:System.Messaging.MessageEnumerator.MoveNext%2A>之後呼叫<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="93e13-190">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="93e13-191">如果您在交易式佇列上呼叫這個多載，訊息佇列會建立單一的內部交易。</span><span class="sxs-lookup"><span data-stu-id="93e13-191">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">
          <span data-ttu-id="93e13-192">指定移除訊息異動的 <see cref="T:System.Messaging.MessageQueueTransaction" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-192">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction in which the message will be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="93e13-193">從異動佇列中移除目前的訊息，並將訊息傳回至呼叫的應用程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-193">Removes the current message from a transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="93e13-194">沒有為訊息到達佇列指定逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-194">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="93e13-195">
            <see cref="T:System.Messaging.Message" />，參考佇列中的第一個可用訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-195">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-196"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除並傳回資料指標的目前位置，使用內部交易內容所定義的訊息`transaction`參數。</span><span class="sxs-lookup"><span data-stu-id="93e13-196"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter.</span></span>  
  
 <span data-ttu-id="93e13-197">如果您使用的佇列日誌，移除該訊息會導致保留在日誌佇列，就如同副本<xref:System.Messaging.MessageQueue>類別的<xref:System.Messaging.MessageQueue.Receive%2A>方法會執行。</span><span class="sxs-lookup"><span data-stu-id="93e13-197">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="93e13-198">當使用交易式佇列，交易的回復會導致呼叫所移除的任何訊息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>傳回至佇列。</span><span class="sxs-lookup"><span data-stu-id="93e13-198">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="93e13-199">移除不是無法復原，直到交易認可為止。</span><span class="sxs-lookup"><span data-stu-id="93e13-199">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="93e13-200">當您移除目前的訊息時，將游標移至下一個訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-200">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="93e13-201">您不需要呼叫<xref:System.Messaging.MessageEnumerator.MoveNext%2A>之後呼叫<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="93e13-201">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93e13-202">
            <paramref name="transaction" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-202">The <paramref name="transaction" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType">
          <span data-ttu-id="93e13-203">其中一個 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值，描述要與訊息相關聯的異動內容的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-203">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="93e13-204">從佇列移除目前的訊息，並將訊息傳回至呼叫的應用程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-204">Removes the current message from a queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="93e13-205">沒有為訊息到達佇列指定逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-205">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="93e13-206">
            <see cref="T:System.Messaging.Message" />，參考佇列中的第一個可用訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-206">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-207"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除並傳回資料指標的目前位置，使用交易內容所定義的訊息`transactionType`參數。</span><span class="sxs-lookup"><span data-stu-id="93e13-207"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span>  
  
 <span data-ttu-id="93e13-208">指定`Automatic`如`transactionType`參數，如果已經有外部交易內容附加到您要用來接收訊息的執行緒。</span><span class="sxs-lookup"><span data-stu-id="93e13-208">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="93e13-209">指定`Single`如果您想要接收的訊息當做單一的內部異動。</span><span class="sxs-lookup"><span data-stu-id="93e13-209">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="93e13-210">您可以指定`None`如果您想要從交易內容外部異動式佇列接收訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-210">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="93e13-211">如果您使用的佇列日誌，移除該訊息會導致保留在日誌佇列，就如同副本<xref:System.Messaging.MessageQueue>類別的<xref:System.Messaging.MessageQueue.Receive%2A>方法會執行。</span><span class="sxs-lookup"><span data-stu-id="93e13-211">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="93e13-212">當使用交易式佇列，交易的回復會導致呼叫所移除的任何訊息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>傳回至佇列。</span><span class="sxs-lookup"><span data-stu-id="93e13-212">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="93e13-213">移除不是無法復原，直到交易認可為止。</span><span class="sxs-lookup"><span data-stu-id="93e13-213">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="93e13-214">當您移除目前的訊息時，將游標移至下一個訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-214">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="93e13-215">您不需要呼叫<xref:System.Messaging.MessageEnumerator.MoveNext%2A>之後呼叫<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="93e13-215">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="93e13-216">
            <paramref name="transactionType" /> 參數不是其中一個 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-216">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="93e13-217">等待訊息到達佇列的時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-217">The interval of time to wait for a message to arrive in the queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="93e13-218">從佇列中移除目前的訊息，並將訊息傳回至呼叫的應用程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-218">Removes the current message from the queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="93e13-219">如果有要移除的訊息，方法會立即將它傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-219">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="93e13-220">否則，方法會為新訊息的到達等待指定的逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-220">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="93e13-221">
            <see cref="T:System.Messaging.Message" />，參考佇列中的第一個可用訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-221">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-222"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除並傳回資料指標的目前位置的訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-222"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="93e13-223">這個方法多載，如果資料指標位於佇列結尾，會等到訊息可以使用，或指定的間隔`timeout`參數已過期。</span><span class="sxs-lookup"><span data-stu-id="93e13-223">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="93e13-224">如果您使用的佇列日誌，移除該訊息會導致保留在日誌佇列，就如同副本<xref:System.Messaging.MessageQueue>類別的<xref:System.Messaging.MessageQueue.Receive%2A>方法會執行。</span><span class="sxs-lookup"><span data-stu-id="93e13-224">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="93e13-225">當您移除目前的訊息時，將游標移至下一個訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-225">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="93e13-226">您不需要呼叫<xref:System.Messaging.MessageEnumerator.MoveNext%2A>之後呼叫<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="93e13-226">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="93e13-227">如果您在交易式佇列上呼叫這個多載，訊息佇列會建立單一的內部交易。</span><span class="sxs-lookup"><span data-stu-id="93e13-227">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="93e13-228">為 <paramref name="timeout" /> 參數指定的值無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-228">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="93e13-229">已經逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-229">The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="93e13-230">等待移除訊息的時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-230">The interval of time to wait for the message to be removed.</span>
          </span>
        </param>
        <param name="transaction">
          <span data-ttu-id="93e13-231">指定訊息異動內容的 <see cref="T:System.Messaging.MessageQueueTransaction" /> 物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-231">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction context for the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="93e13-232">從異動佇列中移除目前的訊息，並將訊息傳回至呼叫的應用程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-232">Removes the current message from a transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="93e13-233">如果有要移除的訊息，方法會立即將它傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-233">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="93e13-234">否則，方法會為新訊息的到達等待指定的逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-234">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="93e13-235">
            <see cref="T:System.Messaging.Message" />，參考佇列中的第一個可用訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-235">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-236"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除並傳回資料指標的目前位置的訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-236"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="93e13-237">這個方法多載，如果資料指標位於佇列結尾，會等到訊息可以使用，或指定的間隔`timeout`參數已過期。</span><span class="sxs-lookup"><span data-stu-id="93e13-237">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="93e13-238">當使用交易式佇列，交易的回復會導致呼叫所移除的任何訊息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>傳回至佇列。</span><span class="sxs-lookup"><span data-stu-id="93e13-238">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="93e13-239">移除不是無法復原，直到交易認可為止。</span><span class="sxs-lookup"><span data-stu-id="93e13-239">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="93e13-240">如果您使用的佇列日誌，移除該訊息會導致保留在日誌佇列，就如同副本<xref:System.Messaging.MessageQueue>類別的<xref:System.Messaging.MessageQueue.Receive%2A>方法會執行。</span><span class="sxs-lookup"><span data-stu-id="93e13-240">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="93e13-241">當您移除目前的訊息時，將游標移至下一個訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-241">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="93e13-242">您不需要呼叫<xref:System.Messaging.MessageEnumerator.MoveNext%2A>之後呼叫<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="93e13-242">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="93e13-243">為 <paramref name="timeout" /> 參數指定的值無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-243">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93e13-244">
            <paramref name="transaction" /> 參數為 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-244">The <paramref name="transaction" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="93e13-245">已經逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-245">The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="93e13-246">等待移除訊息的時間間隔。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-246">The interval of time to wait for the message to be removed.</span>
          </span>
        </param>
        <param name="transactionType">
          <span data-ttu-id="93e13-247">其中一個 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 值，描述要與訊息相關聯的異動內容的類型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-247">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="93e13-248">從佇列移除目前的訊息，並將訊息傳回至呼叫的應用程式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-248">Removes the current message from a queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="93e13-249">如果有要移除的訊息，方法會立即將它傳回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-249">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="93e13-250">否則，方法會為新訊息的到達等待指定的逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-250">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="93e13-251">
            <see cref="T:System.Messaging.Message" />，參考佇列中的第一個可用訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-251">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-252"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除並傳回資料指標的目前位置，使用交易內容所定義的訊息`transactionType`參數。</span><span class="sxs-lookup"><span data-stu-id="93e13-252"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="93e13-253">這個方法多載，如果資料指標位於佇列結尾，會等到訊息可以使用，或指定的間隔`timeout`參數已過期。</span><span class="sxs-lookup"><span data-stu-id="93e13-253">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="93e13-254">指定`Automatic`如`transactionType`參數，如果已經有外部交易內容附加到您要用來接收訊息的執行緒。</span><span class="sxs-lookup"><span data-stu-id="93e13-254">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="93e13-255">指定`Single`如果您想要接收的訊息當做單一的內部異動。</span><span class="sxs-lookup"><span data-stu-id="93e13-255">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="93e13-256">您可以指定`None`如果您想要從交易內容外部異動式佇列接收訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-256">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="93e13-257">如果您使用的佇列日誌，移除該訊息會導致保留在日誌佇列，就如同副本<xref:System.Messaging.MessageQueue>類別的<xref:System.Messaging.MessageQueue.Receive%2A>方法會執行。</span><span class="sxs-lookup"><span data-stu-id="93e13-257">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="93e13-258">當使用交易式佇列，交易的回復會導致呼叫所移除的任何訊息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>傳回至佇列。</span><span class="sxs-lookup"><span data-stu-id="93e13-258">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="93e13-259">移除不是無法復原，直到交易認可為止。</span><span class="sxs-lookup"><span data-stu-id="93e13-259">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="93e13-260">當您移除目前的訊息時，將游標移至下一個訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-260">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="93e13-261">您不需要呼叫<xref:System.Messaging.MessageEnumerator.MoveNext%2A>之後呼叫<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="93e13-261">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="93e13-262">為 <paramref name="timeout" /> 參數指定的值無效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-262">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="93e13-263">已經逾時。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-263">The timeout has expired.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="93e13-264">
            <paramref name="transactionType" /> 參數不是其中一個 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成員。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-264">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="93e13-265">重設目前的列舉值，讓它指向佇列的前端。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-265">Resets the current enumerator so it points to the head of the queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93e13-266">列舉值只能以正向方向移動。</span><span class="sxs-lookup"><span data-stu-id="93e13-266">An enumerator can only move in a forward direction.</span></span> <span data-ttu-id="93e13-267">使用此方法透過佇列的開頭開始。</span><span class="sxs-lookup"><span data-stu-id="93e13-267">Use this method to start over at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="93e13-268">在呼叫<xref:System.Messaging.MessageEnumerator.Reset%2A>，資料指標會指向第一個訊息。</span><span class="sxs-lookup"><span data-stu-id="93e13-268">After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message.</span></span> <span data-ttu-id="93e13-269">您不需要呼叫<xref:System.Messaging.MessageEnumerator.MoveNext%2A>之後呼叫<xref:System.Messaging.MessageEnumerator.Reset%2A>將游標向前移至第一個訊息佇列中。</span><span class="sxs-lookup"><span data-stu-id="93e13-269">You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="93e13-270">傳回 <see cref="T:System.Messaging.Message" />，其參考目前游標位置的訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-270">Returns a <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="93e13-271">
            <see cref="T:System.Messaging.Message" />，其參考目前游標位置的訊息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="93e13-271">A <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>