<Type Name="MessageQueueInstaller" FullName="System.Messaging.MessageQueueInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2169da977692b3e7ae0fe99175aa7991d83a31df" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460832" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageQueueInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueInstaller : System::Configuration::Install::ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>讓您安裝和設定執行應用程式時需要的佇列 (Queue)。 安裝 <see cref="T:System.Messaging.MessageQueue" /> 時，安裝公用程式 (如 InstallUtil.exe) 會呼叫這個類別。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller>安裝公用程式所用來寫入與佇列相關聯的登錄值。 如需有關安裝公用程式的詳細資訊，請參閱[Installutil.exe （安裝程式工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)。  
  
 若要安裝的佇列，請建立繼承自專案安裝程式類別<xref:System.Configuration.Install.Installer>，並設定<xref:System.ComponentModel.RunInstallerAttribute>類別`true`。 在您的專案內建立<xref:System.Messaging.MessageQueueInstaller>執行個體中安裝的每個佇列，並加入您專案的安裝程式類別的執行個體。  
  
 建立時<xref:System.Messaging.MessageQueueInstaller>執行個體，您可以選擇性地將傳遞的現有<xref:System.Messaging.MessageQueue>（例如，從測試伺服器） 至<xref:System.Messaging.MessageQueueInstaller.%23ctor%2A>建構函式。 這個方法會自動提供新佇列的組態設定，鏡像傳入佇列的設定。 或者，您可以手動設定屬性<xref:System.Messaging.MessageQueueInstaller>狀態並呼叫預設建構函式的執行個體。  
  
 當呼叫時，安裝公用程式時，它會尋找<xref:System.ComponentModel.RunInstallerAttribute>。 如果是`true`，此公用程式會安裝中的所有佇列<xref:System.Configuration.Install.Installer.Installers%2A>與您專案的安裝程式相關聯的集合。 如果<xref:System.ComponentModel.RunInstallerAttribute>是`false`，此公用程式會略過專案安裝程式。  
  
 修改的其他屬性<xref:System.Messaging.MessageQueueInstaller>之前或之後加入至執行個體的執行個體<xref:System.Configuration.Install.Installer.Installers%2A>您專案的安裝程式的集合。 例如，佇列的<xref:System.Messaging.MessageQueue.Path%2A>安裝公用程式執行之前，必須設定。  
  
 一般而言，未呼叫的方法<xref:System.Messaging.MessageQueueInstaller>從程式碼; 內通常稱為只能由 installutil.exe 安裝公用程式。 此公用程式會自動呼叫<xref:System.Messaging.MessageQueueInstaller.Install%2A>方法期間的安裝程序和呼叫<xref:System.Messaging.MessageQueueInstaller.Commit%2A>如果安裝未擲回例外狀況。 它會備份時失敗，如有必要，藉由呼叫<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>產生例外狀況物件。  
  
 應用程式的安裝常式使用的專案安裝程式<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>自動維護已安裝的元件的相關資訊。 為每個持續更新這項狀態資訊<xref:System.Messaging.MessageQueueInstaller>公用程式所安裝執行個體。 它通常不需要您的程式碼明確修改的狀態資訊。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 類別的新執行個體。 沒有設定任何執行個體屬性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller (System.Messaging.MessageQueue componentToCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Messaging.MessageQueue componentToCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor(System.Messaging.MessageQueue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (componentToCopy As MessageQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller(System::Messaging::MessageQueue ^ componentToCopy);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="componentToCopy" Type="System.Messaging.MessageQueue" />
      </Parameters>
      <Docs>
        <param name="componentToCopy">
          <see cref="T:System.Messaging.MessageQueue" /> 元件，其設定決定安裝的新佇列的屬性設定。</param>
        <summary>初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 類別的新執行個體，將安裝設定初始化為現存的 <see cref="T:System.Messaging.MessageQueue" /> 執行個體的安裝設定。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public bool Authenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Authenticate" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Authenticate" />
      <MemberSignature Language="VB.NET" Value="Public Property Authenticate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Authenticate { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出要安裝的佇列是否只接受已驗證的訊息。</summary>
        <value>
          如果佇列只接受驗證過的訊息則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當未驗證的訊息傳送至只接受已驗證的訊息的佇列時，將會拒絕訊息。 傳送應用程式可以藉由設定要求的訊息拒絕通知<xref:System.Messaging.Message.AcknowledgeType%2A>訊息。 否則，沒有指示的訊息被拒絕，因此除非您傳送到寄不出信件佇列，訊息可能會遺失。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public short BasePriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public Property BasePriority As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short BasePriority { short get(); void set(short value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來在網路上傳送公用 (Public) 佇列訊息的基礎優先權 (Base Priority)。</summary>
        <value>傳送至公用佇列的所有訊息的單一基礎優先權。 預設為零 (0)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A>用於透過網路路由佇列的訊息。 使用<xref:System.Messaging.MessageQueueInstaller.BasePriority%2A>以便傳送至佇列較高或較低的優先順序高於訊息傳送至其他佇列的訊息。 設定佇列的基礎優先權，當傳送給它的所有訊息都指定較高的優先順序高於傳送至優先順序較低基底的佇列的訊息。 佇列的基礎優先權無效的訊息順序在佇列中或從佇列讀取訊息的方式。  
  
 <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A>適用於透過網域控制站存取為公用佇列 （亦即，使用 public 格式名稱）。 私用佇列並直接存取的公用佇列的基本優先順序永遠是零。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public Guid Category { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Category" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Category" />
      <MemberSignature Language="VB.NET" Value="Public Property Category As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Category { Guid get(); void set(Guid value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.GuidConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定實作 (Implementation) 特定的佇列類型。</summary>
        <value>
          <see cref="T:System.Guid" />，表示佇列的分類 (或 Message Queuing 類型識別項)，可讓應用程式根據使用方式將其佇列分類。 預設值為 <see langword="Guid.empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 佇列類別目錄可讓應用程式相關聯的佇列，根據使用方式分類。 <xref:System.Messaging.MessageQueue.Category%2A>可以是 null 參考。 您也可以定義新的類別。  
  
 <xref:System.Messaging.MessageQueue.Category%2A>屬性提供的訊息佇列類型識別碼屬性，這是特定佇列相關聯，且是讀取/寫入存取。 您可以使用<xref:System.Guid.NewGuid%2A>方法來建立類別目錄的值，保證是唯一的所有<xref:System.Guid>值。 不過，則只需要其他類別，不是從所有其他的不同類別目錄值<xref:System.Guid>值。 例如，您可以設定<xref:System.Messaging.MessageQueue.Category%2A>{00000000-0000-0000-0000-000000000001} 的佇列的一個群組而<xref:System.Messaging.MessageQueue.Category%2A>{00000000-0000-0000-0000-000000000002} 的另一個群組。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" />，包含電腦的後續安裝狀態。</param>
        <summary>認可 <see cref="T:System.Messaging.MessageQueue" /> 方法寫入登錄的 <see cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" /> 安裝資訊，以完成安裝程序。 這個方法是安裝工具所使用的方法，安裝工具會自動呼叫適當的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，未呼叫的方法<xref:System.Messaging.MessageQueueInstaller>從程式碼; 內通常稱為只能由 installutil.exe 安裝公用程式。 此公用程式會自動呼叫<xref:System.Messaging.MessageQueueInstaller.Install%2A>在安裝程序的方法。 安裝是交易式的所以如果在安裝期間沒有任何安裝專案元件失敗，所有先前安裝的元件會回復到安裝前狀態。 這是藉由呼叫每個元件的<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法。  
  
 安裝專案相關聯的所有元件的安裝成功完成之後發生，安裝公用程式的認可安裝。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 完成的安裝<xref:System.Messaging.MessageQueue>的佇列設為適當的初始狀態。 如果所指定的佇列<xref:System.Messaging.MessageQueueInstaller.Path%2A>屬性已經存在，且包含訊息，<xref:System.Messaging.MessageQueueInstaller.Commit%2A>清除訊息。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A>而非<xref:System.Messaging.MessageQueueInstaller.Install%2A>，清除的訊息，因為清除訊息的動作無法回復。  
  
 應用程式的安裝常式使用的專案安裝程式<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>自動維護已安裝的元件的相關資訊。 此狀態資訊，這會傳遞至<xref:System.Messaging.MessageQueueInstaller.Commit%2A>為`savedState`參數，會持續更新公用程式會認可每個<xref:System.Messaging.MessageQueueInstaller>執行個體。 通常，不需要您的程式碼明確修改這個狀態資訊。 如果已清除佇列，<xref:System.Messaging.MessageQueueInstaller.Commit%2A>張貼至記錄項目`savedState`與安裝相關聯。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">
          <see cref="T:System.ComponentModel.IComponent" />，要用做 <see cref="T:System.Messaging.MessageQueueInstaller" /> 的樣板 (Template)。</param>
        <summary>為訊息佇列複製安裝時需要的 <see cref="T:System.Messaging.MessageQueue" /> 元件的屬性值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，未呼叫的方法<xref:System.Messaging.MessageQueueInstaller>從程式碼; 內通常稱為只能由 installutil.exe 安裝公用程式。 <xref:System.Messaging.MessageQueueInstaller.CopyFromComponent%2A> 用於安裝公用程式所設定的屬性值<xref:System.Messaging.MessageQueueInstaller>的現有值<xref:System.Messaging.MessageQueue>。  
  
 如果<xref:System.Messaging.MessageQueue.Path%2A>的<xref:System.Messaging.MessageQueue>也就是傳入為空字串 ("")，您必須設定<xref:System.Messaging.MessageQueue.Path%2A>屬性設為非空白值執行安裝程式之前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">與這個 <see cref="T:System.Messaging.MessageQueueInstaller" /> 相關的元件不是 <see cref="T:System.Messaging.MessageQueue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptionRequired">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionRequired EncryptionRequired { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionRequired EncryptionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.EncryptionRequired" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionRequired As EncryptionRequired" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionRequired EncryptionRequired { System::Messaging::EncryptionRequired get(); void set(System::Messaging::EncryptionRequired value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionRequired</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出佇列是否只接受私用或加密的訊息。</summary>
        <value>其中一個 <see cref="T:System.Messaging.EncryptionRequired" /> 值，指出傳送至佇列的訊息所需的加密 (Encryption) 層級。 預設值為 <see langword="Optional" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 加密指定時，只有<xref:System.Messaging.Message.Body%2A>加密的訊息。 其他屬性，例如<xref:System.Messaging.Message.Label%2A>，不會加密。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">
          <see cref="T:System.Collections.IDictionary" />，用於儲存執行認可、復原或解除安裝作業所需的資訊。</param>
        <summary>執行安裝，並將訊息佇列資訊寫入至登錄。 這個方法是安裝工具所使用的方法，安裝工具會自動呼叫適當的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.Install%2A>方法將訊息佇列資訊寫入至登錄，並將相關聯<xref:System.Messaging.MessageQueue>的執行個體的佇列，位於所指定的路徑與<xref:System.Messaging.MessageQueueInstaller.Path%2A>屬性。 如果佇列不存在，<xref:System.Messaging.MessageQueueInstaller.Install%2A>建立交易式佇列。 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 將新的或現有的佇列屬性設定為您指定的那些<xref:System.Messaging.MessageQueueInstaller>。 如果佇列已存在，其屬性會重設的<xref:System.Messaging.MessageQueueInstaller>。 如果現有的佇列不是交易式，其為刪除，然後再重建為交易式佇列。  
  
> [!CAUTION]
>  如果需要重新建立佇列，佇列中的訊息將會遺失。  
  
 一般而言，未呼叫的方法<xref:System.Messaging.MessageQueueInstaller>從程式碼; 內通常稱為只能由 installutil.exe 安裝公用程式。 此公用程式會自動呼叫<xref:System.Messaging.MessageQueueInstaller.Install%2A>方法來撰寫與正在安裝訊息佇列相關聯的登錄資訊在安裝程序。 安裝是交易式的所以如果在安裝期間沒有任何安裝專案元件失敗，所有先前安裝的元件會回復到安裝前狀態。 這是藉由呼叫每個元件的<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法。  
  
 安裝專案相關聯的所有元件的安裝成功完成之後發生，安裝公用程式的認可安裝。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 完成的安裝<xref:System.Messaging.MessageQueue>的佇列設為適當的初始狀態。 如果所指定的佇列<xref:System.Messaging.MessageQueueInstaller.Path%2A>屬性已經存在，且包含訊息，<xref:System.Messaging.MessageQueueInstaller.Commit%2A>清除訊息。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A>而非<xref:System.Messaging.MessageQueueInstaller.Install%2A>，清除的訊息，因為清除訊息的動作無法回復。  
  
 應用程式的安裝常式使用的專案安裝程式<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>自動維護已安裝的元件的相關資訊。 此狀態資訊，這會傳遞至<xref:System.Messaging.MessageQueueInstaller.Install%2A>為`stateSaver`參數，會持續更新公用程式會安裝每個<xref:System.Messaging.MessageQueueInstaller>執行個體。 通常，不需要您的程式碼明確修改這個狀態資訊。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">要比較的安裝程式。</param>
        <summary>決定指定的安裝程式是否能夠處理與這個安裝程式相同的安裝。</summary>
        <returns>
          如果這個安裝程式和 <paramref name="otherInstaller" /> 參數指定的安裝程式能夠處理相同的安裝，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，<xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A>傳回`true`只有此安裝程式和安裝程式所指定`otherInstaller`參數都相同的類型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定佇列的描述。</summary>
        <value>標籤，描述訊息佇列。 預設為空字串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueue.Label%2A>屬性不需要是唯一的佇列。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Messaging.MessageQueueInstaller.Label" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumJournalSize">
      <MemberSignature Language="C#" Value="public long MaximumJournalSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumJournalSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumJournalSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumJournalSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumJournalSize { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與佇列相關的日誌的最大值。</summary>
        <value>日誌佇列的最大值 (以 KB 計)，日誌記錄的是從佇列移除的訊息。 訊息佇列的預設值是沒有限制。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建立佇列時，訊息佇列會自動建立佇列日誌中的新佇列的相同位置。 佇列日誌用來追蹤從佇列中移除的訊息。  
  
 兩種類型的訊息不會受到追蹤： 因為其接收時間計時器過期時，會從佇列中移除，以及從佇列中清除。  
  
 應用程式無法傳送訊息到日誌佇列。 不過，您必須定期清除佇列，以便移除不再需要的訊息。 計算儲存在日誌佇列至為佇列所在的電腦配額的訊息。 （由系統管理員會設定電腦配額）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumQueueSize">
      <MemberSignature Language="C#" Value="public long MaximumQueueSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumQueueSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumQueueSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumQueueSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumQueueSize { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定佇列的最大值。</summary>
        <value>佇列的最大值 (以 KB 計)。 訊息佇列的預設值是沒有限制。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 佇列大小上限通常會設定在佇列建立期間，雖然可以稍後再重。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MulticastAddress">
      <MemberSignature Language="C#" Value="public string MulticastAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MulticastAddress" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MulticastAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MulticastAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 MSMQ 3.0 中介紹。 取得或設定與佇列相關聯的多點傳送位址。</summary>
        <value>
          <see cref="T:System.String" />，包含有效的多點傳送位址 (在下面所示的表單中)，否則為 <see langword="null" />，表示佇列未與多點傳送位址相關聯。  
  
```  
&lt;address&gt;:&lt;port&gt;  
```</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">未安裝 MSMQ 3.0。</exception>
        <altmember cref="P:System.Messaging.MessageQueue.MulticastAddress" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定這個物件參考的佇列的位置。</summary>
        <value>路徑，表示佇列在網路中的位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 語法<xref:System.Messaging.MessageQueue.Path%2A>屬性取決於佇列類型它的參考。 下表顯示的語法，您應該使用的各種類型的佇列。  
  
|佇列類型|語法|  
|----------------|------------|  
|公用佇列|`machineName`\\`queueName`|  
|私用佇列|`machineName`\\`Private$`\\`queueName`|  
|日誌佇列|`machineName`\\`queueName`\\`Journal$`|  
|電腦日誌佇列|`machineName`\\`Journal$`|  
|機器寄不出信件佇列|`machineName`\\`Deadletter$`|  
|電腦交易式寄不出信件佇列|`machineName`\\`XactDeadletter$`|  
  
 使用 」。 「 本機電腦。  
  
 您也可以使用<xref:System.Messaging.MessageQueue.FormatName%2A>或<xref:System.Messaging.MessageQueue.Label%2A>的訊息佇列應用程式物件來說明佇列路徑。 下表顯示每種類型的參考適當的語法。  
  
|參考資料|語法|  
|---------------|------------|  
|格式名稱|使用 FormatName: [*格式名稱*]|  
|ThisAddIn|標籤: [*標籤*]|  
  
 如果您離線工作，您必須使用格式名稱來定義佇列<xref:System.Messaging.MessageQueue.Path%2A>。 如果不這麼做，應用程式將會擲回例外狀況，因為無法解析主要網域控制站<xref:System.Messaging.MessageQueue.Path%2A>到<xref:System.Messaging.MessageQueue.FormatName%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> 設為無效值，可能因為語法無效。  
  
 -或-  
  
 <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Permissions">
      <MemberSignature Language="C#" Value="public System.Messaging.AccessControlList Permissions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.AccessControlList Permissions" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Permissions" />
      <MemberSignature Language="VB.NET" Value="Public Property Permissions As AccessControlList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AccessControlList ^ Permissions { System::Messaging::AccessControlList ^ get(); void set(System::Messaging::AccessControlList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AccessControlList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與佇列相關的使用權限。</summary>
        <value>
          <see cref="T:System.Messaging.AccessControlList" />，包含一或多個存取控制項目，指定信任項和要授與佇列的使用權限。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，公用或私用佇列的建立者擁有完整控制權，而且每個人都已取得佇列屬性，取得權限，然後再寫入佇列的權限的網域群組。 訊息佇列依次存取每個權限清單項目，直到它找到適用於目前的使用者和目前嘗試的動作。 因為作業系統權限明確拒絕使用者的權限優先於允許執行。  
  
 當您建構<xref:System.Messaging.MessageQueueInstaller.Permissions%2A>屬性，新增<xref:System.Messaging.AccessControlEntry>執行個體來您<xref:System.Messaging.AccessControlList>集合。 當您建構每個存取控制項目時，您可以指定一般或標準存取權限。 佇列的權限可以是下列任何組合：  
  
-   刪除  
  
-   讀取安全性  
  
-   寫入安全性  
  
-   同步處理  
  
-   修改擁有者  
  
-   讀取  
  
-   Write  
  
-   執行  
  
-   必要  
  
-   全部  
  
-   無  
  
 這些權限，您可以使用的位元 OR 來結合的位元旗標的一組：  
  
-   完全控制  
  
-   刪除訊息  
  
-   接收訊息  
  
-   查看訊息  
  
-   接收日誌訊息  
  
-   取得佇列屬性  
  
-   設定佇列屬性  
  
-   取得權限  
  
-   設定權限  
  
-   取得佇列的擁有權  
  
-   寫入訊息  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" />，包含電腦的預先安裝狀態。</param>
        <summary>將電腦還原到安裝之前的狀態，方法是復原安裝程式寫入登錄的佇列資訊。 這個方法是安裝工具所使用的方法，安裝工具會自動呼叫適當的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法復原的效果<xref:System.Messaging.MessageQueueInstaller.Install%2A>方法。 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 安裝專案中的任何元件的安裝失敗時呼叫。 <xref:System.Messaging.MessageQueueInstaller.Install%2A>方法建立或設定佇列的屬性。 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 請刪除佇列，或將現有的佇列的屬性重設其預先安裝值。  
  
 一般而言，未呼叫的方法<xref:System.Messaging.MessageQueueInstaller>從程式碼; 內通常稱為只能由 InstallUtil.exe 安裝公用程式。 此公用程式會自動呼叫<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法之後安裝失敗復原任何變更，安裝程序已經做。  
  
 應用程式的安裝常式使用的專案安裝程式<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>自動維護已安裝的元件的相關資訊。 此狀態資訊，這會傳遞至<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>為`savedState`參數，會持續更新公用程式會復原備份<xref:System.Messaging.MessageQueueInstaller>執行個體。 通常，不需要您的程式碼明確修改這個狀態資訊。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Transactional">
      <MemberSignature Language="C#" Value="public bool Transactional { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Transactional" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Transactional" />
      <MemberSignature Language="VB.NET" Value="Public Property Transactional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Transactional { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出佇列是否只接受做為交易的一部分傳送的訊息。</summary>
        <value>
          如果佇列只接受做為交易的一部分傳送的訊息，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以從本機交易佇列使用或不使用交易中擷取訊息。 如果您沒有指定在交易內容，訊息佇列為您建立單一的內部交易。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" />，包含電腦的後續安裝狀態。</param>
        <summary>藉由從登錄移除佇列資訊來移除安裝。 這個方法是解除安裝工具所使用的方法，解除安裝工具會自動呼叫適當的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Messaging.MessageQueueInstaller.UninstallAction%2A>是`Remove`，<xref:System.Messaging.MessageQueueInstaller.Uninstall%2A>也會刪除相關聯的佇列<xref:System.Messaging.MessageQueue>。  
  
 一般而言，未呼叫的方法<xref:System.Messaging.MessageQueueInstaller>從程式碼; 內通常稱為只能由 InstallUtil.exe 安裝公用程式 （如果您在解除安裝模式）。 此公用程式會自動呼叫<xref:System.Messaging.MessageQueueInstaller.Uninstall%2A>還原系統所影響的預先安裝的狀態安裝的組件的方法。 這包括刪除正在解除安裝 MessageQueue 與相關聯的登錄資訊。  
  
 應用程式的解除安裝常式會使用專案安裝程式的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>自動維護已解除安裝元件的相關資訊。 此狀態資訊，這會傳遞至<xref:System.Messaging.MessageQueueInstaller.Uninstall%2A>為`savedState`參數，會持續更新公用程式會解除安裝每個<xref:System.Messaging.MessageQueueInstaller>執行個體。 通常，不需要您的程式碼明確修改這個狀態資訊。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出安裝程式在解除安裝期間如何處理佇列：移除、還原至預先安裝狀態或維持其目前的安裝狀態。</summary>
        <value>其中一個 <see cref="T:System.Configuration.Install.UninstallAction" /> 值，指出解除安裝 <see cref="T:System.Messaging.MessageQueue" /> 時，要讓佇列保持什麼狀態。 預設值為 <see langword="Remove" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您安裝佇列時，您可以選擇使用現有的佇列。 如果您這樣做，您必須決定佇列是否應該還原成預先安裝的狀態，或維持在其目前、 安裝後的狀態。 如果您選擇還原成預先安裝的狀態佇列，不會還原已從佇列刪除在安裝時的訊息。 您可以重設只佇列相關聯的屬性<xref:System.Messaging.MessageQueueInstaller>為其預先安裝的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.Install.UninstallAction" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否複製從佇列擷取的訊息至相關聯的日誌佇列。</summary>
        <value>
          <see langword="true" /> 表示複製從佇列擷取的訊息至日誌佇列，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 日誌佇列，可讓您持續追蹤的訊息，即使它們已從佇列擷取。 不過，兩種類型的訊息不會受到追蹤： 其接收時間計時器過期時，會從佇列中移除，以及從佇列中清除。  
  
 應該定期清除日誌佇列，才能移除不再需要的訊息。 訊息儲存在日誌佇列計數，朝日誌所在之電腦的配額。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>