<Type Name="PeekCompletedEventArgs" FullName="System.Messaging.PeekCompletedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="22d5d541c128ecfd35240c46666234a37dc16382" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36476851" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PeekCompletedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PeekCompletedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.PeekCompletedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class PeekCompletedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class PeekCompletedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type PeekCompletedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供 <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> 事件的資料。 當非同步窺視作業 (Asynchronous Peek Operation) 呼叫事件處理常式時，會將這個類別的執行個體 (Instance) 傳遞至處理常式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用事件通知 （讀取而不移除） 查看訊息以非同步方式從佇列時，您必須建立處理訊息的方法。 您的程式碼必須呼叫<xref:System.Messaging.MessageQueue.BeginPeek%2A>開始執行非同步處理序。 查看訊息，會通知您的應用程式透過<xref:System.Messaging.MessageQueue.PeekCompleted>事件。 執行個體<xref:System.Messaging.PeekCompletedEventArgs>傳入呼叫事件處理常式的事件委派。 與相關聯的資料<xref:System.Messaging.MessageQueue.PeekCompleted>事件包含在委派中<xref:System.Messaging.ReceiveCompletedEventArgs.AsyncResult%2A>參數。  
  
 有兩種方式來提供事件完成的通知： 事件通知和回呼。 <xref:System.Messaging.PeekCompletedEventArgs> 僅適用於事件通知。 比較回呼和事件通知的資訊，請參閱 < 事件與比較。回呼 」 MSDN 上。  
  
 <xref:System.Messaging.PeekCompletedEventArgs> 提供存取的訊息，透過起始查看非同步作業的結束<xref:System.Messaging.PeekCompletedEventArgs.Message%2A>成員。 這是替代存取訊息，而且行為就如同呼叫<xref:System.Messaging.MessageQueue.EndPeek%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列程式碼範例會建立事件處理常式<xref:System.Messaging.MessageQueue.PeekCompleted>事件並將它與事件委派使用<xref:System.Messaging.PeekCompletedEventHandler>。 此事件處理常式， `MyPeekCompleted`、 窺視訊息，並將其標籤至螢幕。  
  
 [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CPP/mqbeginpeek_noparms.cpp#1)]
 [!code-csharp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CS/mqbeginpeek_noparms.cs#1)]
 [!code-vb[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/VB/mqbeginpeek_noparms.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.PeekCompletedEventHandler" />
    <altmember cref="E:System.Messaging.MessageQueue.PeekCompleted" />
    <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
    <altmember cref="M:System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)" />
    <altmember cref="T:System.Messaging.Message" />
  </Docs>
  <Members>
    <Member MemberName="AsyncResult">
      <MemberSignature Language="C#" Value="public IAsyncResult AsyncResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IAsyncResult AsyncResult" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.PeekCompletedEventArgs.AsyncResult" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncResult As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IAsyncResult ^ AsyncResult { IAsyncResult ^ get(); void set(IAsyncResult ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncResult : IAsyncResult with get, set" Usage="System.Messaging.PeekCompletedEventArgs.AsyncResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定要求的非同步作業結果。</summary>
        <value>
          <see cref="T:System.IAsyncResult" />，包含與窺視作業相關聯的資料。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.PeekCompletedEventArgs.AsyncResult%2A> 指出正在進行中或已完成的非同步作業。 屬性包含資料，可協助判斷哪些數個潛在的非同步作業完成，並傳遞至事件處理常式時，可讓<xref:System.Messaging.MessageQueue.EndPeek%2A>存取已完成之作業相關聯的訊息。  
  
 當您呼叫<xref:System.Messaging.MessageQueue.BeginPeek%2A>、<xref:System.IAsyncResult>即使訊息時，如果有的話，具有尚未擷取因為作業未完成，立即傳回。 <xref:System.Messaging.PeekCompletedEventArgs.AsyncResult%2A>表示非同步作業的狀態。 <xref:System.Messaging.MessageQueue.BeginPeek%2A> 建立物件，因為它會修改整個作業，直到<xref:System.Messaging.MessageQueue.EndPeek%2A>完成它。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)" />
        <altmember cref="T:System.IAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Message" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.PeekCompletedEventArgs.Message" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Message As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Message { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : System.Messaging.Message" Usage="System.Messaging.PeekCompletedEventArgs.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與非同步窺視作業關聯的訊息。</summary>
        <value>
          <see cref="T:System.Messaging.Message" />，表示非同步窺視作業的結果。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.PeekCompletedEventArgs.Message%2A>屬性提供一種方法，用於擷取起始非同步查看作業結束的訊息。  
  
 <xref:System.Messaging.MessageQueue.EndPeek%2A?displayProperty=nameWithType> 第一次呼叫<xref:System.Messaging.PeekCompletedEventArgs.Message%2A>屬性唯讀，因此不需要呼叫<xref:System.Messaging.MessageQueue.EndPeek%2A>之前取得這個屬性的值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">無法擷取 <see cref="P:System.Messaging.PeekCompletedEventArgs.Message" />。 非同步作業可能已經逾時。</exception>
        <altmember cref="T:System.Messaging.PeekCompletedEventHandler" />
        <altmember cref="M:System.Messaging.MessageQueue.BeginPeek" />
        <altmember cref="M:System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
  </Members>
</Type>