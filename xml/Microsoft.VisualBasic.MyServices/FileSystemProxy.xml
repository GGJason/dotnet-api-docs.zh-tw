<Type Name="FileSystemProxy" FullName="Microsoft.VisualBasic.MyServices.FileSystemProxy">
  <TypeSignature Language="C#" Value="public class FileSystemProxy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FileSystemProxy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.MyServices.FileSystemProxy" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystemProxy" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemProxy" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供屬性和方法，以處理磁碟機、檔案和目錄。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出包含工作的範例`My.Computer.FileSystem`物件。  
  
|以|請參閱|  
|--------|---------|  
|從文字檔讀取|[如何：從文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
|從分隔的文字檔讀取|[如何：從逗號分隔文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|從固定寬度的文字檔讀取|[如何：從固定寬度的文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|從以多種格式的文字檔讀取|[如何：以多種格式從文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
|讀取二進位檔案|[如何：讀取二進位檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
|從文字檔讀取 <xref:System.IO.StreamReader>|[如何：以 StreamReader 從檔案讀取文字](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
|寫入文字檔|[如何：將文字寫入檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|附加至文字檔|[如何：附加至文字檔](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
|寫入至二進位檔案|[如何：寫入二進位檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
|寫入文字檔中**MyDocuments**目錄|[如何：將文字寫入我的文件目錄中的檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-in-the-my-documents-directory.md)|  
|寫入文字檔 `StreamWriter`|[如何：以 StreamWriter 將文字寫入檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
|將具有特定模式的檔案複製|[如何：將具有特定模式的檔案複製到目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md)|  
|將檔案複製到相同的目錄|[如何：在相同目錄內建立檔案複本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|將檔案複製到不同的目錄|[如何：於不同目錄內建立檔案複本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
|建立檔案|[如何：建立檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-file.md)|  
|刪除檔案|[如何：刪除檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
|尋找具有特定模式的檔案|[如何：尋找具有特定模式的檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
|移動檔案|[如何：移動檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
|重新命名檔案|[如何：重新命名檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
|將目錄複製到另一個目錄|[如何：將目錄複製到另一個目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
|建立目錄|[如何：建立一個目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
|尋找具有特定模式的子目錄|[如何：尋找具有特定模式的子目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
|取得目錄中檔案的集合|[如何：取得目錄的檔案集合](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|從讀取**MyDocuments**目錄|[如何：擷取我的文件目錄的內容](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-retrieve-the-contents-of-the-my-documents-directory.md)|  
|剖析檔案路徑|[如何：剖析檔案路徑](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 這個範例會檢查以判斷是否資料夾`C:\backup\logs`存在，並檢查其屬性。  
  
 [!code-vb[VbVbcnMyFileSystem#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#23)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
  </Docs>
  <Members>
    <Member MemberName="CombinePath">
      <MemberSignature Language="C#" Value="public string CombinePath (string baseDirectory, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string CombinePath(string baseDirectory, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CombinePath (baseDirectory As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ CombinePath(System::String ^ baseDirectory, System::String ^ relativePath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseDirectory" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseDirectory">
          <see langword="String" />。 要合併的第一個路徑。</param>
        <param name="relativePath">
          <see langword="String" />。 要合併的第二個路徑。</param>
        <summary>合併兩個路徑並傳回正確格式的路徑。</summary>
        <returns>指定之路徑的組合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會修剪多餘的斜線字元來建立格式正確的路徑。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.CombinePath`方法。  
  
|以|請參閱|  
|--------|---------|  
|結合的目錄路徑和檔案名稱|[如何：剖析檔案路徑](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 這個範例會結合目錄路徑和檔案名稱來建立格式正確的路徑。  
  
 [!code-vb[VbRefFile#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#3)]  
  
 這個範例會結合兩個路徑，建立格式正確的路徑。  
  
 [!code-vb[VbRefFile#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#4)]  
  
 這個範例會傳回`C:\Dir1\Dir2\Dir4\Dir5\File.txt`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="baseDirectory" /> 或 <paramref name="relativePath" /> 是格式不正確的路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將目錄複製至其他目錄。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要複製的目錄。</param>
        <param name="destinationDirectoryName">要複製目錄的目標位置。</param>
        <summary>將目錄複製至其他目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會複製目錄內容以及目錄本身。 如果目標目錄不存在，則會建立它。 如果具有相同名稱的目錄存在於目標位置，則會合併兩個目錄的內容。 您可以在作業期間指定目錄的新名稱。  
  
 目錄中的檔案複製時，例外狀況可能擲回造成特定的檔案。 這類例外狀況會擲回時，會將它們合併成單一的例外狀況的`Data`屬性會保留項目中的表單<xref:System.Collections.IDictionary>所在的檔案或目錄路徑是索引鍵和特定的例外狀況訊息會包含在對應的值。 使用`For…Each`列舉項目。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.CopyDirectory`方法。  
  
|以|請參閱|  
|--------|---------|  
|複製目錄|[如何：將目錄複製到另一個目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 下列範例會複製目錄`TestDirectory1`到`TestDirectory2`，覆寫現有檔案。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 取代`C:\TestDirectory1`和`C:\TestDirectory2`的路徑和名稱，您想要複製的目錄以及您要複製的位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">來源目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">來源路徑和目標路徑相同。</exception>
        <exception cref="T:System.InvalidOperationException">作業是循環的。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的資料夾名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">目的檔案存在，但無法存取它。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要複製的目錄。</param>
        <param name="destinationDirectoryName">要複製目錄的目標位置。</param>
        <param name="showUI">是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <summary>將目錄複製至其他目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會複製目錄內容以及目錄本身。 如果目標目錄不存在，則會建立它。 如果具有相同名稱的目錄存在於目標位置，則會合併兩個目錄的內容。 您可以在作業期間指定目錄的新名稱。  
  
 目錄中的檔案複製時，例外狀況可能擲回造成特定的檔案。 這類例外狀況會擲回時，會將它們合併成單一的例外狀況的`Data`屬性會保留項目中的表單<xref:System.Collections.IDictionary>所在的檔案或目錄路徑是索引鍵和特定的例外狀況訊息會包含在對應的值。 使用`For…Each`列舉項目。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.CopyDirectory`方法。  
  
|以|請參閱|  
|--------|---------|  
|複製目錄|[如何：將目錄複製到另一個目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 下列範例會複製目錄`TestDirectory1`到`TestDirectory2`，覆寫現有檔案。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 取代`C:\TestDirectory1`和`C:\TestDirectory2`的路徑和名稱，您想要複製的目錄以及您要複製的位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">來源目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">來源路徑和目標路徑相同。</exception>
        <exception cref="T:System.InvalidOperationException">作業是循環的。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的資料夾名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">目的檔案存在，但無法存取它。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="ShowUI" /> 設定為 <see langword="UIOption.AllDialogs" />，且使用者會取消作業，或是無法複製目錄中的一個或多個檔案。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要複製的目錄。</param>
        <param name="destinationDirectoryName">要複製目錄的目標位置。</param>
        <param name="overwrite">
          若要覆寫現有檔案，則為 <see langword="True" />，否則為 <see langword="False" />。 預設為 <see langword="False" />。</param>
        <summary>將目錄複製至其他目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會複製目錄內容以及目錄本身。 如果目標目錄不存在，則會建立它。 如果具有相同名稱的目錄存在於目標位置，則會合併兩個目錄的內容。 您可以在作業期間指定目錄的新名稱。  
  
 目錄中的檔案複製時，例外狀況可能擲回造成特定的檔案，例如檔案時合併過程`overwrite`設`False`。 這類例外狀況會擲回時，會將它們合併成單一的例外狀況的`Data`屬性會保留項目中的表單<xref:System.Collections.IDictionary>所在的檔案或目錄路徑是索引鍵和特定的例外狀況訊息會包含在對應的值。 使用`For…Each`列舉項目。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.CopyDirectory`方法。  
  
|以|請參閱|  
|--------|---------|  
|複製目錄|[如何：將目錄複製到另一個目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 下列範例會複製目錄`TestDirectory1`到`TestDirectory2`，覆寫現有檔案。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 取代`C:\TestDirectory1`和`C:\TestDirectory2`的路徑和名稱，您想要複製的目錄以及您要複製的位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">來源目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">來源路徑和目標路徑相同。</exception>
        <exception cref="T:System.InvalidOperationException">作業是循環的。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的資料夾名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">目的檔案存在，但無法存取它。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要複製的目錄。</param>
        <param name="destinationDirectoryName">要複製目錄的目標位置。</param>
        <param name="showUI">是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="onUserCancel">指定使用者在作業期間按一下 [取消] 時應該執行的動作。 預設為 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />。</param>
        <summary>將目錄複製至其他目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會複製目錄內容以及目錄本身。 如果目標目錄不存在，則會建立它。 如果具有相同名稱的目錄存在於目標位置，則會合併兩個目錄的內容。 您可以在作業期間指定目錄的新名稱。  
  
 目錄中的檔案複製時，例外狀況可能擲回造成特定的檔案。 這類例外狀況會擲回時，會將它們合併成單一的例外狀況的`Data`屬性會保留項目中的表單<xref:System.Collections.IDictionary>所在的檔案或目錄路徑是索引鍵和特定的例外狀況訊息會包含在對應的值。 使用`For…Each`列舉項目。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.CopyDirectory`方法。  
  
|以|請參閱|  
|--------|---------|  
|複製目錄|[如何：將目錄複製到另一個目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 下列範例會複製目錄`TestDirectory1`到`TestDirectory2`，覆寫現有檔案。  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 取代`C:\TestDirectory1`和`C:\TestDirectory2`的路徑和名稱，您想要複製的目錄以及您要複製的位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> 或 <paramref name="sourceDirectoryName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">來源目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">來源路徑和目標路徑相同。</exception>
        <exception cref="T:System.InvalidOperationException">作業是循環的。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的資料夾名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">目的檔案存在，但無法存取它。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="ShowUI" /> 設定為 <see langword="UIOption.AllDialogs" />，且使用者會取消作業，或是無法複製目錄中的一個或多個檔案。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將檔案複製至新的位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要複製的檔案。</param>
        <param name="destinationFileName">要在其中貼上複製檔案的位置</param>
        <summary>將檔案複製至新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` 不會保留 Ace （存取控制項目）。 新建立的檔案會將預設的 Ace 繼承建立所在的目錄。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.CopyFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|將檔案複製到相同的目錄。|[如何：在相同目錄內建立檔案複本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|將檔案複製到不同的目錄。|[如何：於不同目錄內建立檔案複本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 這個範例會將檔案複製`Test.txt`目錄`TestFiles2`不覆寫現有檔案。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 檔案路徑取代為您想要使用程式碼中的路徑。  
  
 這個範例會將檔案複製`Test.txt`目錄`TestFiles2`並將它重新命名`NewFile.txt`。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 檔案路徑取代為您想要使用程式碼中的路徑。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> 包含路徑資訊。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">來源檔案無效或不存在。</exception>
        <exception cref="T:System.IO.IOException">目標目錄中具有相同名稱的檔案正在使用中。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者未具備必要的使用權限。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">控制存取所有環境變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">控制存取登錄變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要複製的檔案。</param>
        <param name="destinationFileName">要在其中貼上複製檔案的位置</param>
        <param name="showUI">是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <summary>將檔案複製至新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` 不會保留 Ace （存取控制項目）。 新建立的檔案會將預設的 Ace 繼承建立所在的目錄。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.CopyFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|將檔案複製到相同的目錄。|[如何：在相同目錄內建立檔案複本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|將檔案複製到不同的目錄。|[如何：於不同目錄內建立檔案複本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 這個範例會將檔案複製`Test.txt`目錄`TestFiles2`不覆寫現有檔案。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 檔案路徑取代為您想要使用程式碼中的路徑。  
  
 這個範例會將檔案複製`Test.txt`目錄`TestFiles2`並將它重新命名`NewFile.txt`。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 檔案路徑取代為您想要使用程式碼中的路徑。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> 包含路徑資訊。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">來源檔案無效或不存在。</exception>
        <exception cref="T:System.IO.IOException">目的檔存在且 <paramref name="overwrite" /> 設定為 <see langword="False" />。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者未具備必要的使用權限。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">控制存取所有環境變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">控制存取登錄變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要複製的檔案。</param>
        <param name="destinationFileName">要在其中貼上複製檔案的位置</param>
        <param name="overwrite">
          如果應該覆寫現有的檔案則為 <see langword="True" />，否則為 <see langword="False" />。 預設為 <see langword="False" />。</param>
        <summary>將檔案複製至新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` 不會保留 Ace （存取控制項目）。 新建立的檔案會將預設的 Ace 繼承建立所在的目錄。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.CopyFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|將檔案複製到相同的目錄。|[如何：在相同目錄內建立檔案複本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|將檔案複製到不同的目錄。|[如何：於不同目錄內建立檔案複本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 這個範例會將檔案複製`Test.txt`目錄`TestFiles2`不覆寫現有檔案。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 檔案路徑取代為您想要使用程式碼中的路徑。  
  
 這個範例會將檔案複製`Test.txt`目錄`TestFiles2`並將它重新命名`NewFile.txt`。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 檔案路徑取代為您想要使用程式碼中的路徑。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> 包含路徑資訊。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">來源檔案無效或不存在。</exception>
        <exception cref="T:System.IO.IOException">目的檔存在且 <paramref name="overwrite" /> 設定為 <see langword="False" />。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者未具備必要的使用權限。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">控制存取所有環境變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">控制存取登錄變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要複製的檔案。</param>
        <param name="destinationFileName">要在其中貼上複製檔案的位置</param>
        <param name="showUI">是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="onUserCancel">指定使用者在作業期間按一下 [取消] 時應該執行的動作。 預設為 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />。</param>
        <summary>將檔案複製至新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` 不會保留 Ace （存取控制項目）。 新建立的檔案會將預設的 Ace 繼承建立所在的目錄。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.CopyFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|將檔案複製到相同的目錄。|[如何：在相同目錄內建立檔案複本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|將檔案複製到不同的目錄。|[如何：於不同目錄內建立檔案複本](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 這個範例會將檔案複製`Test.txt`目錄`TestFiles2`不覆寫現有檔案。  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 檔案路徑取代為您想要使用程式碼中的路徑。  
  
 這個範例會將檔案複製`Test.txt`目錄`TestFiles2`並將它重新命名`NewFile.txt`。  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 檔案路徑取代為您想要使用程式碼中的路徑。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> 包含路徑資訊。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> 或 <paramref name="sourceFileName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">來源檔案無效或不存在。</exception>
        <exception cref="T:System.IO.IOException">目的檔存在且 <paramref name="overwrite" /> 設定為 <see langword="False" />。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者未具備必要的使用權限。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="UICancelOption" /> 設為 <see langword="ThrowException" />，而且使用者已取消作業或發生未指定的 I/O 錯誤。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">控制存取所有環境變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">控制存取登錄變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public void CreateDirectory (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CreateDirectory(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDirectory (directory As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDirectory(System::String ^ directory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">目錄的名稱和位置。</param>
        <summary>建立目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目錄已經存在，則不會擲回例外狀況。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.CreateDirectory`方法。  
  
|以|請參閱|  
|--------|---------|  
|建立目錄|[如何：建立一個目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
  
   
  
## Examples  
 這個範例會建立目錄， `NewDirectory`，請在`C:\Documents and Settings\All Users\Documents`。  
  
 [!code-vb[VbVbcnMyFileSystem#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">目錄名稱的格式不正確。 例如，它包含不合法的字元或只是泛空白字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.PathTooLongException">目錄名稱太長。</exception>
        <exception cref="T:System.NotSupportedException">目錄名稱只是冒號 (:) </exception>
        <exception cref="T:System.IO.IOException">所要建立之目錄的父目錄是唯讀的。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者沒有建立目錄的權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="M:System.IO.Directory.CreateDirectory(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDirectory">
      <MemberSignature Language="C#" Value="public string CurrentDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentDirectory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrentDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前的目錄。</summary>
        <value>檔案 I/O 作業的目前目錄。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CurrentDirectory` 這是全系統環境變數。  
  
   
  
## Examples  
 這個範例會傳回目前的目錄，並顯示訊息方塊中。  
  
 [!code-vb[VbVbcnMyFileSystem#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#18)]  
  
 這個範例會將目前的目錄設定為`C:\TestDirectory`。  
  
 [!code-vb[VbVbcnMyFileSystem#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">路徑無效。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者缺乏必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>刪除目錄。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, onDirectoryNotEmpty As DeleteDirectoryOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="onDirectoryNotEmpty" Type="Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Parameters>
      <Docs>
        <param name="directory">要刪除的目錄。</param>
        <param name="onDirectoryNotEmpty">指定如果要刪除的目錄內包含檔案或目錄時，應該要如何處理。 預設為 <see langword="DeleteDirectoryOption.DeleteAllContents" />。</param>
        <summary>刪除目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例會刪除目錄`OldDirectory`才是空白。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 這個範例會刪除目錄`OldDirectory`和其所有內容。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 這個範例會刪除目錄`OldDirectory`及所有內容，要求使用者確認刪除，但不會傳送內容，**資源回收筒**。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 這個範例會刪除目錄`OldDirectory`及其所有內容，傳送至**資源回收筒**，但不會顯示作業的進度。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路徑是長度為零的字串、格式錯誤、只包含空白字元，或是包含無效的字元 (包括萬用字元 (Wildcard Character))。 路徑是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">目錄不存在，或此目錄為檔案。</exception>
        <exception cref="T:System.IO.IOException">目錄或子目錄中的檔案正在使用中。</exception>
        <exception cref="T:System.NotSupportedException">目錄名稱包含冒號 (:)。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.Security.SecurityException">使用者未具備必要的使用權限。</exception>
        <exception cref="T:System.OperationCanceledException">使用者取消作業或無法刪除目錄。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="directory">要刪除的目錄。</param>
        <param name="showUI">指定是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="recycle">指定已刪除的檔案是否要傳送至 [資源回收筒]。 預設為 <see langword="RecycleOption.DeletePermanently" />。</param>
        <summary>刪除目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`和`recycle`沒有使用者互動，例如 Windows 服務的應用程式中不支援參數。  
  
   
  
## Examples  
 這個範例會刪除目錄`OldDirectory`才是空白。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 這個範例會刪除目錄`OldDirectory`和其所有內容。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 這個範例會刪除目錄`OldDirectory`及所有內容，要求使用者確認刪除，但不會傳送內容，**資源回收筒**。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 這個範例會刪除目錄`OldDirectory`及其所有內容，傳送至**資源回收筒**，但不會顯示作業的進度。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路徑是長度為零的字串、格式錯誤、只包含空白字元，或是包含無效的字元 (包括萬用字元 (Wildcard Character))。 路徑是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">目錄不存在，或此目錄為檔案。</exception>
        <exception cref="T:System.IO.IOException">目錄或子目錄中的檔案正在使用中。</exception>
        <exception cref="T:System.NotSupportedException">目錄名稱包含冒號 (:)。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.Security.SecurityException">使用者未具備必要的使用權限。</exception>
        <exception cref="T:System.OperationCanceledException">使用者取消作業或無法刪除目錄。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="directory">要刪除的目錄。</param>
        <param name="showUI">指定是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="recycle">指定已刪除的檔案是否要傳送至 [資源回收筒]。 預設為 <see langword="RecycleOption.DeletePermanently" />。</param>
        <param name="onUserCancel">指定如果使用者按一下 [取消]，是否擲回例外狀況。</param>
        <summary>刪除目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`， `recycle`，和`onUserCancel`沒有使用者互動，例如 Windows 服務的應用程式中不支援參數。  
  
   
  
## Examples  
 這個範例會刪除目錄`OldDirectory`才是空白。  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 這個範例會刪除目錄`OldDirectory`和其所有內容。  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 這個範例會刪除目錄`OldDirectory`及所有內容，要求使用者確認刪除，但不會傳送內容，**資源回收筒**。  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 這個範例會刪除目錄`OldDirectory`及其所有內容，傳送至**資源回收筒**，但不會顯示作業的進度。  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路徑是長度為零的字串、格式錯誤、只包含空白字元，或是包含無效的字元 (包括萬用字元 (Wildcard Character))。 路徑是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">目錄不存在，或此目錄為檔案。</exception>
        <exception cref="T:System.IO.IOException">目錄或子目錄中的檔案正在使用中。</exception>
        <exception cref="T:System.NotSupportedException">目錄名稱包含冒號 (:)。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.Security.SecurityException">使用者未具備必要的使用權限。</exception>
        <exception cref="T:System.OperationCanceledException">使用者取消作業或無法刪除目錄。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>刪除檔案。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要刪除之檔案的檔名及路徑。</param>
        <summary>刪除檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出包含工作的範例`My.Computer.FileSystem.DeleteFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|若要刪除的檔案|[如何：刪除檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 這個範例會刪除檔案`Test.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 這個範例會刪除檔案`Test.txt`，並可讓使用者確認是否要刪除檔案。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 這個範例會刪除檔案`Test.txt`並將它傳送至**資源回收筒**。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它在必須指定檔案的地方含有結尾的斜線，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.IO.IOException">檔案正在使用中。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者沒有刪除檔案的使用權限，或者檔案是唯讀的。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="file">要刪除之檔案的檔名及路徑。</param>
        <param name="showUI">是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="recycle">已刪除的檔案是否要傳送至 [資源回收筒]。 預設為 <see langword="RecycleOption.DeletePermanently" />。</param>
        <summary>刪除檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`和`recycle`沒有使用者互動，例如 Windows 服務的應用程式中不支援參數。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.DeleteFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|若要刪除的檔案|[如何：刪除檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 這個範例會刪除檔案`Test.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 這個範例會刪除檔案`Test.txt`，並可讓使用者確認是否要刪除檔案。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 這個範例會刪除檔案`Test.txt`並將它傳送至**資源回收筒**。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它在必須指定檔案的地方含有結尾的斜線，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.IO.IOException">檔案正在使用中。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者沒有刪除檔案的使用權限，或者檔案是唯讀的。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="file">要刪除之檔案的檔名及路徑。</param>
        <param name="showUI">是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="recycle">已刪除的檔案是否要傳送至 [資源回收筒]。 預設為 <see langword="RecycleOption.DeletePermanently" />。</param>
        <param name="onUserCancel">指定是否在使用者取消作業時擲回例外狀況。 預設為 <see langword="UICancelOption.ThrowException" />。</param>
        <summary>刪除檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`， `recycle`，和`onUserCancel`沒有使用者互動，例如 Windows 服務的應用程式中不支援參數。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.DeleteFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|若要刪除的檔案|[如何：刪除檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 這個範例會刪除檔案`Test.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 這個範例會刪除檔案`Test.txt`，並可讓使用者確認是否要刪除檔案。  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 這個範例會刪除檔案`Test.txt`並將它傳送至**資源回收筒**。  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它在必須指定檔案的地方含有結尾的斜線，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.IO.IOException">檔案正在使用中。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者沒有刪除檔案的使用權限，或者檔案是唯讀的。</exception>
        <exception cref="T:System.OperationCanceledException">使用者取消作業並且 <paramref name="onUserCancel" /> 設為 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public bool DirectoryExists (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool DirectoryExists(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DirectoryExists (directory As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DirectoryExists(System::String ^ directory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">目錄的路徑。</param>
        <summary>如果指定的目錄存在，則傳回 <see langword="True" />。</summary>
        <returns>
          如果目錄存在則為 <see langword="True" />，否則為 <see langword="False" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此範例會判斷是否目錄`C:\backup\logs`存在，並檢查其屬性。  
  
 [!code-vb[VbRefFile#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="Drives">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt; Drives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.DriveInfo&gt; Drives" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Drives As ReadOnlyCollection(Of DriveInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ Drives { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>傳回所有可用磁碟機名稱的唯讀集合。</summary>
        <value>所有可用磁碟機的唯讀集合，做為 <see cref="T:System.IO.DriveInfo" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會傳回所有邏輯磁碟機。  
  
   
  
## Examples  
 此範例會在訊息方塊顯示可用的磁碟機名稱。  
  
 [!code-vb[VbRefFile#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <altmember cref="T:System.IO.DriveInfo" />
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public bool FileExists (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool FileExists(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileExists (file As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FileExists(System::String ^ file);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">檔案的名稱和路徑。</param>
        <summary>如果指定的檔案存在，則傳回 <see langword="True" />。</summary>
        <returns>如果檔案存在，則傳回 <see langword="True" />，否則這個方法會傳回 <see langword="False" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果應用程式沒有足夠的權限讀取指定的檔案，`FileExists`方法會傳回`False`，不論是否存在的路徑; 該方法不會擲回例外狀況。  
  
   
  
## Examples  
 這個範例會檢查以查看是否檔案`Check.txt`存在，並提供訊息方塊中的資訊。  
  
 [!code-vb[VbRefFile#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">檔案名稱以反斜線 (\\) 結尾。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindInFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回唯讀的字串集合，表示含有指定文字的檔案名稱。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="directory">要搜尋的目錄。</param>
        <param name="containsText">搜尋的文字。</param>
        <param name="ignoreCase">
          如果搜尋應該區分大小寫，則為 <see langword="True" />，否則為 <see langword="False" />。 預設為 <see langword="True" />。</param>
        <param name="searchType">是否包含子資料夾。 預設為 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
        <summary>傳回唯讀的字串集合，表示含有指定文字的檔案名稱。</summary>
        <returns>唯讀檔案名稱的集合，包含指定的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果找不到符合指定模式的檔案，會傳回空的集合。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.FindInFiles`方法。  
  
|以|請參閱|  
|--------|---------|  
|目錄中搜尋的檔案，其中包含特定字串|[逐步解說：在 Visual Basic 中管理檔案和目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 下列範例會搜尋目錄`C:\TestDir`包含字串的任何檔案`"sample string"`並顯示在結果`ListBox1`。  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 為了能夠，專案必須包含`ListBox`名為`ListBox1`。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 <c>\\.\</c&gt;)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">指定的目錄指向現有的檔案。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">指定的目錄路徑包含冒號 (:) 或格式無效。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者缺乏必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] fileWildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption, ParamArray fileWildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ fileWildcards);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="fileWildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">要搜尋的目錄。</param>
        <param name="containsText">搜尋的文字。</param>
        <param name="ignoreCase">
          如果搜尋應該區分大小寫，則為 <see langword="True" />，否則為 <see langword="False" />。 預設為 <see langword="True" />。</param>
        <param name="searchType">是否包含子資料夾。 預設為 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
        <param name="fileWildcards">要符合的模式。</param>
        <summary>傳回唯讀的字串集合，表示含有指定文字的檔案名稱。</summary>
        <returns>唯讀檔案名稱的集合，包含指定的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果找不到符合指定模式的檔案，會傳回空的集合。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.FindInFiles`方法。  
  
|以|請參閱|  
|--------|---------|  
|目錄中搜尋的檔案，其中包含特定字串|[逐步解說：在 Visual Basic 中管理檔案和目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 下列範例會搜尋目錄`C:\TestDir`包含字串的任何檔案`"sample string"`並顯示在結果`ListBox1`。  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 為了能夠，專案必須包含`ListBox`名為`ListBox1`。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 <c>\\.\</c&gt;)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">指定的目錄指向現有的檔案。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">指定的目錄路徑包含冒號 (:) 或格式無效。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者缺乏必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回字串的集合，表示目錄內子目錄的路徑名稱。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectories (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">目錄的名稱和路徑。</param>
        <summary>傳回字串的集合，表示目錄內子目錄的路徑名稱。</summary>
        <returns>在指定目錄內，子目錄路徑名稱的唯讀集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出包含工作的範例`My.Computer.FileSystem.GetDirectories`方法。  
  
|以|請參閱|  
|--------|---------|  
|清單具有特定模式的子目錄|[如何：尋找具有特定模式的子目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 下列範例會傳回包含文字的目錄結構中的所有目錄`Logs`名稱中將它們新增至`ListBox1`。  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 這個範例需要您有`ListBox`名為`ListBox1`表單上。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">指定的目錄指向現有的檔案。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者缺乏必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectories (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">目錄的名稱和路徑。</param>
        <param name="searchType">是否包含子資料夾。 預設為 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
        <param name="wildcards">要符合名稱的模式。</param>
        <summary>傳回字串的集合，表示目錄內子目錄的路徑名稱。</summary>
        <returns>在指定目錄內，子目錄路徑名稱的唯讀集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 `wildcards` 參數指定特定模式。 如果您想要在搜尋中包括子目錄的內容，請將 `searchType` 參數設定為 `SearchAllSubDirectories`。  
  
 如果找不到符合指定模式的目錄，則會傳回空集合。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.GetDirectories`方法。  
  
|以|請參閱|  
|--------|---------|  
|清單具有特定模式的子目錄|[如何：尋找具有特定模式的子目錄](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 下列範例會傳回包含文字的目錄結構中的所有目錄`Logs`名稱中將它們新增至`ListBox1`。  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 這個範例需要您有`ListBox`名為`ListBox1`表單上。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">一個或多個指定的萬用字元 (Wildcard Character) 為 <see langword="Nothing" />、空字串，或只包含空格。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">指定的目錄指向現有的檔案。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者缺乏必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryInfo">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo GetDirectoryInfo (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DirectoryInfo GetDirectoryInfo(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectoryInfo (directory As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::DirectoryInfo ^ GetDirectoryInfo(System::String ^ directory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">
          <see langword="String" />。 目錄的路徑。</param>
        <summary>傳回指定之路徑的 <see cref="T:System.IO.DirectoryInfo" /> 物件。</summary>
        <returns>
          指定之路徑的 <see cref="T:System.IO.DirectoryInfo" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目錄不存在，擲回例外狀況不直到第一次屬性<xref:System.IO.DirectoryInfo>存取物件。  
  
   
  
## Examples  
 這個範例會取得<xref:System.IO.DirectoryInfo>目錄物件`C:\Documents and Settings`和目錄的建立時間、 上次存取時間和上次寫入時間的顯示。  
  
 [!code-vb[VbRefFile#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">目錄路徑包含冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetDriveInfo">
      <MemberSignature Language="C#" Value="public System.IO.DriveInfo GetDriveInfo (string drive);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DriveInfo GetDriveInfo(string drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDriveInfo (drive As String) As DriveInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::DriveInfo ^ GetDriveInfo(System::String ^ drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DriveInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="drive">要檢查的磁碟機。</param>
        <summary>傳回指定之磁碟機的 <see cref="T:System.IO.DriveInfo" /> 物件。</summary>
        <returns>
          指定之磁碟機的 <see cref="T:System.IO.DriveInfo" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.DriveInfo>類別模型化的磁碟機，並提供方法和屬性來查詢磁碟機資訊。 使用<xref:System.IO.DriveInfo>來判斷哪些磁碟機可用，而且它們是哪種類型的磁碟機。 您也可以查詢來決定容量和可用空間的磁碟機上的屬性。  
  
   
  
## Examples  
 此範例會取得<xref:System.IO.DriveInfo>C 磁碟機的物件，並使用它來顯示磁碟機的相關資訊。  
  
 [!code-vb[VbRefFile#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#11)]  
  
 如需不同的磁碟機類型資訊，請參閱<xref:System.IO.DriveType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="drive" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.IO.DriveInfo" />
        <altmember cref="T:System.IO.DriveType" />
      </Docs>
    </Member>
    <Member MemberName="GetFileInfo">
      <MemberSignature Language="C#" Value="public System.IO.FileInfo GetFileInfo (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.FileInfo GetFileInfo(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFileInfo (file As String) As FileInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::FileInfo ^ GetFileInfo(System::String ^ file);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">檔案的名稱和路徑。</param>
        <summary>傳回指定之檔案的 <see cref="T:System.IO.FileInfo" /> 物件。</summary>
        <returns>
          指定之檔案的 <see cref="T:System.IO.FileInfo" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果檔案不存在; 不擲回例外狀況相反地，它將會擲回第一次存取物件的屬性。  
  
 下表列出的工作，包含範例`My.Computer.FileSystem.GetFileInfo`方法。  
  
|以|請參閱|  
|--------|---------|  
|判斷檔案的名稱和路徑|[如何：剖析檔案路徑](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 這個範例會擷取<xref:System.IO.FileInfo?displayProperty=nameWithType>檔案物件`MyLogFile.log`並使用它來報告檔案的完整名稱、 上次存取時間和長度。  
  
 [!code-vb[VbRefFile#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路徑名稱的格式不正確。 例如包含無效字元或只有泛空白字元。 檔案名稱具有斜線標記。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.NotSupportedException">路徑在字串中間包含一個冒號。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑太長。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者缺少對檔案的 ACL (存取控制清單) 存取。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.IO.FileInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回唯讀的字串集合，而該字串集合表示目錄內檔案的名稱。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFiles (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">要搜尋的目錄。</param>
        <summary>傳回唯讀的字串集合，而該字串集合表示目錄內檔案的名稱。</summary>
        <returns>所指定目錄中的唯讀檔案名稱集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果找不到符合指定模式的檔案，會傳回空的集合。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.GetFiles`方法。  
  
|以|請參閱|  
|--------|---------|  
|取得目錄中檔案的集合|[如何：取得目錄的檔案集合](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|在目錄中尋找具有特定模式的檔案|[如何：尋找具有特定模式的檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 下列範例會傳回目錄中的所有檔案，並將它們新增到 `ListBox1`。  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 這個範例需要您有`ListBox`名為`ListBox1`表單上。  
  
 這個範例會傳回所有檔案使用擴充功能在目錄中`.txt`並將其加入`ListBox1`。  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 這個範例需要您有`ListBox`名為`ListBox1`表單上。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">要搜尋的目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="directory" /> 指向現有的檔案。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者缺乏必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFiles (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">要搜尋的目錄。</param>
        <param name="searchType">是否包含子資料夾。 預設為 <see langword="SearchOption.SearchTopLevelOnly" />。</param>
        <param name="wildcards">要符合的模式。</param>
        <summary>傳回唯讀的字串集合，而該字串集合表示目錄內檔案的名稱。</summary>
        <returns>所指定目錄中的唯讀檔案名稱集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果找不到符合指定模式的檔案，會傳回空的集合。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.GetFiles`方法。  
  
|以|請參閱|  
|--------|---------|  
|取得目錄中檔案的集合|[如何：取得目錄的檔案集合](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|在目錄中尋找具有特定模式的檔案|[如何：尋找具有特定模式的檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 下列範例會傳回目錄中的所有檔案，並將它們新增到 `ListBox1`。  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 這個範例需要您有`ListBox`名為`ListBox1`表單上。  
  
 這個範例會傳回所有檔案使用擴充功能在目錄中`.txt`並將其加入`ListBox1`。  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 這個範例需要您有`ListBox`名為`ListBox1`表單上。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">要搜尋的目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="directory" /> 指向現有的檔案。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者缺乏必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public string GetName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetName(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">必要。 要剖析的路徑。 <see langword="String" />。</param>
        <summary>在提供的路徑之外剖析檔名。</summary>
        <returns>來自指定路徑的檔名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是字串作業。`FileSystem`不檢查。  
  
 `GetName`方法就會忽略發生在路徑結尾的斜線。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.GetFileName`方法。  
  
|以|請參閱|  
|--------|---------|  
|剖析檔案路徑|[如何：剖析檔案路徑](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 下列範例會剖析檔案路徑，並傳回檔案的名稱。  
  
 [!code-vb[VbVbcnMyFileSystem#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#21)]  
  
 取代路徑`C:\Testdirectory\Testfile`與您想要剖析的路徑。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParentPath">
      <MemberSignature Language="C#" Value="public string GetParentPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetParentPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParentPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetParentPath(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要檢查的路徑。</param>
        <summary>傳回提供之路徑的父路徑。</summary>
        <returns>所提供之路徑的父路徑。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這是字串作業。不會檢查檔案系統。  
  
   
  
## Examples  
 這個範例會取得的父系路徑`C:\Backups\Tmp\Test`。  
  
 [!code-vb[VbRefFile#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">路徑沒有父路徑，因為它是根路徑。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTempFileName();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在磁碟上以唯一命名方式建立零位元組的暫存檔案，然後傳回該檔案的完整路徑。</summary>
        <returns>
          <see langword="String" />，包含暫存檔案的完整路徑。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可以用來建立暫存檔案。  
  
   
  
## Examples  
 這個範例會建立暫存檔案，並傳回其路徑。  
  
 [!code-vb[VbVbcnMyFileSystem#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將目錄從某個位置移至另一個位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要移動的目錄其路徑。</param>
        <param name="destinationDirectoryName">來源目錄要移往之目錄的路徑。</param>
        <summary>將目錄從某個位置移至另一個位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果嘗試的目錄不存在的目錄中移動，就會建立與目標結構。  
  
   
  
## Examples  
 本範例將`Directory1`內`Directory2`。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 本範例將`Directory1`內`Directory2`，覆寫目錄，如果已經存在。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">來源是根目錄，或者來源路徑與目標路徑相同。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.InvalidOperationException">作業是循環的。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者未具備必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要移動的目錄其路徑。</param>
        <param name="destinationDirectoryName">來源目錄要移往之目錄的路徑。</param>
        <param name="showUI">指定是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <summary>將目錄從某個位置移至另一個位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果嘗試的目錄不存在的目錄中移動，就會建立與目標結構。  
  
   
  
## Examples  
 本範例將`Directory1`內`Directory2`。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 本範例將`Directory1`內`Directory2`，覆寫目錄，如果已經存在。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">目標目錄已經存在，而且 <paramref name="overwrite" /> 設定為 <see langword="False" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.InvalidOperationException">作業是循環的。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者未具備必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要移動的目錄其路徑。</param>
        <param name="destinationDirectoryName">來源目錄要移往之目錄的路徑。</param>
        <param name="overwrite">
          如果應該覆寫現有的目錄則為 <see langword="True" />，否則為 <see langword="False" />。 預設為 <see langword="False" />。</param>
        <summary>將目錄從某個位置移至另一個位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果嘗試的目錄不存在的目錄中移動，就會建立與目標結構。  
  
   
  
## Examples  
 本範例將`Directory1`內`Directory2`。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 本範例將`Directory1`內`Directory2`，覆寫目錄，如果已經存在。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">目標目錄已經存在，而且 <paramref name="overwrite" /> 設定為 <see langword="False" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.InvalidOperationException">作業是循環的。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者未具備必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">要移動的目錄其路徑。</param>
        <param name="destinationDirectoryName">來源目錄要移往之目錄的路徑。</param>
        <param name="showUI">指定是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="onUserCancel">指定是否在使用者取消作業時擲回例外狀況。 預設為 <see langword="UICancelOption.ThrowException" />。</param>
        <summary>將目錄從某個位置移至另一個位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果嘗試的目錄不存在的目錄中移動，就會建立與目標結構。  
  
   
  
## Examples  
 本範例將`Directory1`內`Directory2`。  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 本範例將`Directory1`內`Directory2`，覆寫目錄，如果已經存在。  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元，或者它是裝置路徑 (開頭為 \\\\.\\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> 或 <paramref name="destinationDirectoryName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="onUserCancel" /> 設為 <see langword="ThrowException" />，且無法複製檔案的子目錄。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="onUserCancel" /> 設定為 <see langword="ThrowException" />，而且使用者會取消作業，或是無法完成作業。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.InvalidOperationException">作業是循環的。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者未具備必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將檔案移至新的位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要移動的檔案其路徑。</param>
        <param name="destinationFileName">要移入檔案之目錄的路徑。</param>
        <summary>將檔案移至新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目標結構不存在，則會建立它。  
  
 `MoveFile`方法會保留 Ace （存取控制項目），只有當移動相同的磁碟區中的檔案。 這包括繼承的 Ace，變成直接 Ace 時移動 （直接 Ace 的優先順序高於繼承 Ace）。 如果磁碟區之間移動檔案，將不會複製 Ace。  
  
 下表列出的工作，包含範例`My.Computer.FileSystem.MoveFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|移動檔案|[如何：移動檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 這個範例會將檔案移`Test.txt`從`TestDir1`至`TestDir2`。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 這個範例會將檔案移`Test.txt`從`TestDir1`至`TestDir2`並將它重新命名`Test2.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">來源檔案無效或不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">控制存取所有環境變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">控制存取登錄變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要移動的檔案其路徑。</param>
        <param name="destinationFileName">要移入檔案之目錄的路徑。</param>
        <param name="showUI">指定是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <summary>將檔案移至新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目標結構不存在，則會建立它。  
  
 `MoveFile`方法會保留 Ace （存取控制項目），只有當移動相同的磁碟區中的檔案。 這包括繼承的 Ace，變成直接 Ace 時移動 （直接 Ace 的優先順序高於繼承 Ace）。 如果磁碟區之間移動檔案，將不會複製 Ace。  
  
 下表列出的工作，包含範例`My.Computer.FileSystem.MoveFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|移動檔案|[如何：移動檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 這個範例會將檔案移`Test.txt`從`TestDir1`至`TestDir2`。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 這個範例會將檔案移`Test.txt`從`TestDir1`至`TestDir2`並將它重新命名`Test2.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">來源檔案無效或不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">控制存取所有環境變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">控制存取登錄變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要移動的檔案其路徑。</param>
        <param name="destinationFileName">要移入檔案之目錄的路徑。</param>
        <param name="overwrite">
          若要覆寫現有檔案，則為 <see langword="True" />，否則為 <see langword="False" />。 預設為 <see langword="False" />。</param>
        <summary>將檔案移至新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目標結構不存在，則會建立它。  
  
 `MoveFile`方法會保留 Ace （存取控制項目），只有當移動相同的磁碟區中的檔案。 這包括繼承的 Ace，變成直接 Ace 時移動 （直接 Ace 的優先順序高於繼承 Ace）。 如果磁碟區之間移動檔案，將不會複製 Ace。  
  
 下表列出的工作，包含範例`My.Computer.FileSystem.MoveFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|移動檔案|[如何：移動檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 這個範例會將檔案移`Test.txt`從`TestDir1`至`TestDir2`。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 這個範例會將檔案移`Test.txt`從`TestDir1`至`TestDir2`並將它重新命名`Test2.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">來源檔案無效或不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">控制存取所有環境變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">控制存取登錄變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">要移動的檔案其路徑。</param>
        <param name="destinationFileName">要移入檔案之目錄的路徑。</param>
        <param name="showUI">指定是否要以視覺方式追蹤作業進度。 預設為 <see langword="UIOption.OnlyErrorDialogs" />。</param>
        <param name="onUserCancel">指定是否在使用者取消作業時擲回例外狀況。 預設為 <see langword="UICancelOption.ThrowException" />。</param>
        <summary>將檔案移至新的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目標結構不存在，則會建立它。  
  
 `MoveFile`方法會保留 Ace （存取控制項目），只有當移動相同的磁碟區中的檔案。 這包括繼承的 Ace，變成直接 Ace 時移動 （直接 Ace 的優先順序高於繼承 Ace）。 如果磁碟區之間移動檔案，將不會複製 Ace。  
  
 下表列出的工作，包含範例`My.Computer.FileSystem.MoveFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|移動檔案|[如何：移動檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 這個範例會將檔案移`Test.txt`從`TestDir1`至`TestDir2`。  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 這個範例會將檔案移`Test.txt`從`TestDir1`至`TestDir2`並將它重新命名`Test2.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">來源檔案無效或不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="onUserCancel" /> 設定為 <see langword="ThrowException" />，而且使用者已取消作業或發生未指定的 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">控制存取所有環境變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">控制存取登錄變數的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">控制相關使用者介面和剪貼簿的權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFieldParser">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="OpenTextFieldParser" /> 方法能讓您建立 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 物牛，而這個物件有助於輕鬆有效率地剖析結構化文字檔 (例如記錄檔)。 可以使用 <see langword="TextFieldParser" /> 物件，讀取分隔的和固定寬度的檔案。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要使用 <see langword="TextFieldParser" /> 開啟的檔案。</param>
        <summary><see langword="OpenTextFieldParser" /> 方法能讓您建立 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 物牛，而這個物件有助於輕鬆有效率地剖析結構化文字檔 (例如記錄檔)。 可以使用 <see langword="TextFieldParser" /> 物件，讀取分隔的和固定寬度的檔案。</summary>
        <returns>
          <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />，會讀取指定的檔案。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出包含工作的範例`My.Computer.FileSystem.OpenTextFieldParser`方法。  
  
|以|請參閱|  
|--------|---------|  
|從分隔的文字檔讀取|[如何：從逗號分隔文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|從固定寬度的文字檔讀取|[如何：從固定寬度的文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|從以多種格式的文字檔讀取|[如何：以多種格式從文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 這個範例會開啟`TextFieldParser.reader`並使用它來讀取`C:\TestFolder1\Test1.txt`。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">無法使用指定的格式剖析資料列。 例外狀況訊息指出造成例外狀況的文字行，而 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 屬性被指派至包含於該文字行中的文字。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一組套用至程式碼的安全性權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String, ParamArray fieldWidths As Integer()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">要使用 <see langword="TextFieldParser" /> 開啟的檔案。</param>
        <param name="fieldWidths">欄位的寬度。</param>
        <summary><see langword="OpenTextFieldParser" /> 方法能讓您建立 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 物牛，而這個物件有助於輕鬆有效率地剖析結構化文字檔 (例如記錄檔)。 可以使用 <see langword="TextFieldParser" /> 物件，讀取分隔的和固定寬度的檔案。</summary>
        <returns>
          <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />，會讀取指定的檔案。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出包含工作的範例`My.Computer.FileSystem.OpenTextFieldParser`方法。  
  
|以|請參閱|  
|--------|---------|  
|從分隔的文字檔讀取|[如何：從逗號分隔文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|從固定寬度的文字檔讀取|[如何：從固定寬度的文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|從以多種格式的文字檔讀取|[如何：以多種格式從文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 這個範例會開啟`TextFieldParser.reader`並使用它來讀取`C:\TestFolder1\Test1.txt`。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">無法使用指定的格式剖析資料列。 例外狀況訊息指出造成例外狀況的文字行，而 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 屬性被指派至包含於該文字行中的文字。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一組套用至程式碼的安全性權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String, ParamArray delimiters As String()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">要使用 <see langword="TextFieldParser" /> 開啟的檔案。</param>
        <param name="delimiters">欄位的分隔符號。</param>
        <summary><see langword="OpenTextFieldParser" /> 方法能讓您建立 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 物牛，而這個物件有助於輕鬆有效率地剖析結構化文字檔 (例如記錄檔)。 可以使用 <see langword="TextFieldParser" /> 物件，讀取分隔的和固定寬度的檔案。</summary>
        <returns>
          <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />，會讀取指定的檔案。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出包含工作的範例`My.Computer.FileSystem.OpenTextFieldParser`方法。  
  
|以|請參閱|  
|--------|---------|  
|從分隔的文字檔讀取|[如何：從逗號分隔文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|從固定寬度的文字檔讀取|[如何：從固定寬度的文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|從以多種格式的文字檔讀取|[如何：以多種格式從文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 這個範例會開啟`TextFieldParser.reader`並使用它來讀取`C:\TestFolder1\Test1.txt`。  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">無法使用指定的格式剖析資料列。 例外狀況訊息指出造成例外狀況的文字行，而 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 屬性被指派至包含於該文字行中的文字。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">描述一組套用至程式碼的安全性權限。 關聯的列舉型別：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileReader">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開啟 <see cref="T:System.IO.StreamReader" /> 物件，以便從檔案讀取。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileReader (file As String) As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要讀取的檔案。</param>
        <summary>開啟 <see cref="T:System.IO.StreamReader" /> 物件，以便從檔案讀取。</summary>
        <returns>
          會讀取檔案的 <see cref="T:System.IO.StreamReader" /> 物件</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有文字檔案可以讀取與<xref:System.IO.StreamReader>。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.OpenTextFileReader`方法。  
  
|以|請參閱|  
|--------|---------|  
|開啟的檔案 <xref:System.IO.StreamReader>|[如何：以 StreamReader 從檔案讀取文字](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 這個範例會開啟檔案`Testfile.txt`，讀取一行，並顯示中的一行`MessageBox`。  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">檔案名稱以反斜線 (\\) 結尾。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到指定的檔案。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏讀取檔案的必要使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">要讀取的檔案。</param>
        <param name="encoding">要用於檔案內容的編碼方式。 預設為 ASCII。</param>
        <summary>開啟 <see cref="T:System.IO.StreamReader" /> 物件，以便從檔案讀取。</summary>
        <returns>
          會讀取檔案的 <see cref="T:System.IO.StreamReader" /> 物件</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有文字檔案可以讀取與<xref:System.IO.StreamReader>。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.OpenTextFileReader`方法。  
  
|以|請參閱|  
|--------|---------|  
|開啟的檔案 <xref:System.IO.StreamReader>|[如何：以 StreamReader 從檔案讀取文字](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 這個範例會開啟檔案`Testfile.txt`，讀取一行，並顯示中的一行`MessageBox`。  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">檔案名稱以反斜線 (\\) 結尾。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到指定的檔案。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏讀取檔案的必要使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileWriter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開啟 <see cref="T:System.IO.StreamWriter" /> 物件，以便寫入指定的檔案。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileWriter (file As String, append As Boolean) As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">要寫入的檔案。</param>
        <param name="append">
          <see langword="True" /> 表示要將內容附加到檔案，<see langword="False" /> 表示要覆寫檔案的內容。 預設為 <see langword="False" />。</param>
        <summary>開啟 <see cref="T:System.IO.StreamWriter" /> 物件，以便寫入指定的檔案。</summary>
        <returns>
          要寫入到指定檔案的 <see cref="T:System.IO.StreamWriter" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `OpenTextFileWriter`方法開啟及初始化檔案資料流，然後傳回<xref:System.IO.StreamWriter>該資料流的物件。 您可以寫入資料流為依需求次數，並完成後將其關閉。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.StreamWriter.Close%2A>方法<xref:System.IO.StreamWriter>物件，並確定所有資料都會正確地都寫入至基礎資料流。  
  
 如果您要寫入檔案中只有少數的字串，則可能更容易使用<xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A>方法。  
  
 下表列出的工作，包含範例`My.Computer.FileSystem.OpenTextFileWriter`方法。  
  
|以|請參閱|  
|--------|---------|  
|將文字寫入至檔案 `StreamWriter`|[如何：以 StreamWriter 將文字寫入檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 這個範例會開啟<xref:System.IO.StreamWriter>與`My.Computer.FileSystem.OpenTextFileWriter`方法並使用它來寫入的字串到文字檔案與`WriteLine`方法`StreamWriter`類別。  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">檔案名稱以斜線結束。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">要寫入的檔案。</param>
        <param name="append">
          <see langword="True" /> 表示要附加至檔案內容，<see langword="False" /> 表示要覆寫檔案內容。 預設為 <see langword="False" />。</param>
        <param name="encoding">寫入檔案時使用的編碼方式。 預設為 ASCII。</param>
        <summary>開啟 <see cref="T:System.IO.StreamWriter" />，以便寫入指定的檔案。</summary>
        <returns>
          要寫入到指定檔案的 <see cref="T:System.IO.StreamWriter" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `OpenTextFileWriter`方法開啟及初始化檔案資料流，然後傳回<xref:System.IO.StreamWriter>該資料流的物件。 您可以寫入資料流為依需求次數，並完成後將其關閉。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.StreamWriter.Close%2A>方法<xref:System.IO.StreamWriter>物件，並確定所有資料都會正確地都寫入至基礎資料流。  
  
 如果您要寫入檔案中只有少數的字串，則可能更容易使用<xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A>方法。  
  
 下表列出的工作，包含範例`My.Computer.FileSystem.OpenTextFileWriter`方法。  
  
|以|請參閱|  
|--------|---------|  
|將文字寫入至檔案 `StreamWriter`|[如何：以 StreamWriter 將文字寫入檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 這個範例會開啟<xref:System.IO.StreamWriter>與`My.Computer.FileSystem.OpenTextFileWriter`方法並使用它來寫入的字串到文字檔案與`WriteLine`方法`StreamWriter`類別。  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">檔案名稱以斜線結束。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public byte[] ReadAllBytes (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance unsigned int8[] ReadAllBytes(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAllBytes (file As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ReadAllBytes(System::String ^ file);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要讀取的檔案。</param>
        <summary>以位元組陣列傳回檔案內容。</summary>
        <returns>
          <see langword="Byte" /> 陣列，其中包含檔案內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllBytes`方法`My.Computer.FileSystem`物件可讓您讀取二進位檔案。 檔案的內容會傳回做為位元組陣列。  
  
 請勿根據檔案名稱來判斷檔案內容。 例如，檔案 Form1.vb 可能不是 Visual Basic 來源檔案。 在應用程式中使用這些資料之前，請先驗證所有輸入值。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.ReadAllBytes`方法。  
  
|以|請參閱|  
|--------|---------|  
|讀取二進位檔案|[如何：讀取二進位檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
  
   
  
## Examples  
 這個範例會從檔案讀取 `C:/Documents and Settings/selfportrait.jpg.`  
  
 [!code-vb[VbVbcnMyFileSystem#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可將字串寫入緩衝區。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以 <see langword="String" /> 傳回文字檔內容。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAllText (file As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadAllText(System::String ^ file);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要讀取之檔案的名稱和路徑。</param>
        <summary>以 <see langword="String" /> 傳回文字檔內容。</summary>
        <returns>
          <see langword="String" />，其中包含檔案內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` 物件的 `My.Computer.FileSystem` 方法允許您從文字檔讀取。 檔案的內容會以字串形式傳回。  
  
 檔案編碼方式可以是指定檔案的內容是否例如 ASCII 或 utf-8 的編碼方式。 如果您從含擴充字元的檔案讀取，您需要指定檔案的編碼使用的另一個多載<xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText%2A>方法。  
  
 請勿根據檔案名稱來判斷檔案內容。 例如，檔案 Form1.vb 可能不是 Visual Basic 來源檔案。 在應用程式中使用這些資料之前，請先驗證所有輸入值。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.ReadAllText`方法。  
  
|以|請參閱|  
|--------|---------|  
|從文字檔讀取|[如何：從文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 這個範例會讀取內容，`Test.txt`成字串，然後顯示訊息方塊中。  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 這個範例會讀取 ASCII 檔案的內容`Test.txt`成字串，然後顯示訊息方塊中。  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可將字串寫入緩衝區。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadAllText(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">要讀取之檔案的名稱和路徑。</param>
        <param name="encoding">讀取檔案時使用的字元編碼方式。 預設為 UTF-8。</param>
        <summary>以 <see langword="String" /> 傳回文字檔內容。</summary>
        <returns>
          <see langword="String" />，其中包含檔案內容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` 物件的 `My.Computer.FileSystem` 方法允許您從文字檔讀取。 檔案的內容會以字串形式傳回。  
  
 檔案編碼方式可以是指定檔案的內容是否例如 ASCII 或 utf-8 的編碼方式。 如果您從含擴充字元的檔案讀取，您需要指定檔案的編碼方式。  
  
 請勿根據檔案名稱來判斷檔案內容。 例如，檔案 Form1.vb 可能不是 Visual Basic 來源檔案。 在應用程式中使用這些資料之前，請先驗證所有輸入值。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.ReadAllText`方法。  
  
|以|請參閱|  
|--------|---------|  
|從文字檔讀取|[如何：從文字檔讀取](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 這個範例會讀取內容，`Test.txt`成字串，然後顯示訊息方塊中。  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 這個範例會讀取 ASCII 檔案的內容`Test.txt`成字串，然後顯示訊息方塊中。  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可將字串寫入緩衝區。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
      </Docs>
    </Member>
    <Member MemberName="RenameDirectory">
      <MemberSignature Language="C#" Value="public void RenameDirectory (string directory, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameDirectory(string directory, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenameDirectory (directory As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RenameDirectory(System::String ^ directory, System::String ^ newName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">要重新命名的目錄路徑和名稱。</param>
        <param name="newName">目錄的新名稱。</param>
        <summary>重新命名目錄。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法無法用來移動目錄。使用`MoveDirectory`移動和重新命名目錄的方法。  
  
   
  
## Examples  
 這個範例會重新命名`Test`目錄`SecondTest`。  
  
 [!code-vb[VbVbcnMyFileSystem#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="newName" /> 包含路徑資訊。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> 為 <see langword="Nothing" />。  
  
 -或-  
  
 <paramref name="newName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">目錄不存在。</exception>
        <exception cref="T:System.IO.IOException">已存在 <paramref name="newName" /> 中所指定之名稱的檔案或目錄。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過 248 個字元。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者未具備必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="RenameFile">
      <MemberSignature Language="C#" Value="public void RenameFile (string file, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameFile(string file, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenameFile (file As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RenameFile(System::String ^ file, System::String ^ newName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">要重新命名的檔案。</param>
        <param name="newName">檔案的新名稱。</param>
        <summary>重新命名檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法無法用來移動檔案，請使用 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile%2A> 方法來移動並重新命名檔案。  
  
 下表列出的工作，包含範例`My.Computer.FileSystem.RenameFile`方法。  
  
|以|請參閱|  
|--------|---------|  
|重新命名檔案|[如何：重新命名檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
  
   
  
## Examples  
 這個範例會重新命名檔案`Test.txt`至`SecondTest.txt`。  
  
 [!code-vb[VbVbcnMyFileSystem#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#1)]  
  
 變更 「`C:\Test.txt`」 為您想要重新命名的檔案路徑和檔案名稱。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="newName" /> 包含路徑資訊，或以反斜線 (\\) 結尾。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" />。  
  
 -或-  
  
 <paramref name="newName" /> 為 <see langword="Nothing" /> 或空字串。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.IO.IOException">已存在 <paramref name="newName" /> 中所指定之名稱的檔案或目錄。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <exception cref="T:System.UnauthorizedAccessException">使用者未具備必要的使用權限。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="SpecialDirectories">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpecialDirectories As SpecialDirectoriesProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::MyServices::SpecialDirectoriesProxy ^ SpecialDirectories { Microsoft::VisualBasic::MyServices::SpecialDirectoriesProxy ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得可以提供用於存取常用參考目錄之屬性的物件。</summary>
        <value>這個屬性會傳回電腦的 <see cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 這個範例會傳回使用者的桌面目錄的檔案路徑，並顯示它。  
  
 [!code-vb[VbVbcnMyFileSystem#80](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#80)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytes">
      <MemberSignature Language="C#" Value="public void WriteAllBytes (string file, byte[] data, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllBytes(string file, unsigned int8[] data, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes(System.String,System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAllBytes (file As String, data As Byte(), append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllBytes(System::String ^ file, cli::array &lt;System::Byte&gt; ^ data, bool append);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">要將資料寫入其中的檔案其路徑和檔名。</param>
        <param name="data">要寫入檔案的資料。</param>
        <param name="append">
          <see langword="True" /> 表示要附加至檔案內容，<see langword="False" /> 表示要覆寫檔案內容。 預設為 <see langword="False" />。</param>
        <summary>將資料寫入二進位檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的路徑，但不包括檔案名稱，不是有效的<xref:System.IO.DirectoryNotFoundException>擲回例外狀況。 如果此路徑有效，但檔案不存在，則會建立檔案。  
  
> [!NOTE]
>  `WriteAllBytes`方法開啟的檔案、 寫入，，然後關閉它。 使用程式碼`WriteAllBytes`方法是使用程式碼，比簡單<xref:System.IO.BinaryWriter>物件。 不過，如果您將資料加入至檔案，使用迴圈，<xref:System.IO.BinaryWriter>物件可提供更佳的效能，因為您只需要開啟和關閉檔案一次。  
  
 下表列出的工作，包含範例`My.Computer.FileSystem.WriteAllBytes`方法。  
  
|以|請參閱|  
|--------|---------|  
|寫入至二進位檔案|[如何：寫入二進位檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
  
   
  
## Examples  
 這個範例會將附加的資料陣列`CustomerData`檔案`CollectedData`。  
  
 [!code-vb[VbVbcnMyFileSystem#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可將字串寫入緩衝區。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將文字寫入檔案。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAllText (file As String, text As String, append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllText(System::String ^ file, System::String ^ text, bool append);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">要寫入的檔案。</param>
        <param name="text">要寫入檔案的文字。</param>
        <param name="append">
          <see langword="True" /> 表示要將內容附加到檔案，<see langword="False" /> 表示要覆寫檔案的內容。 預設為 <see langword="False" />。</param>
        <summary>將文字寫入檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utf-8 編碼方式，用來寫入檔案。 若要指定不同的編碼方式，使用不同的多載的<xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A>方法。  
  
 如果指定的檔案不存在，則會建立該檔案。  
  
 如果指定的編碼不符合現有檔案的編碼，則會忽略指定的編碼。  
  
> [!NOTE]
>  `WriteAllText`方法開啟的檔案、 寫入，，然後關閉它。 使用程式碼`WriteAllText`方法是使用程式碼，比簡單<xref:System.IO.StreamWriter>物件。 不過，如果利用迴圈，將字串加入至檔案<xref:System.IO.StreamWriter>物件可提供更佳的效能，因為您只需要開啟和關閉檔案一次。 如需詳細資訊，請參閱 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> 方法。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.WriteAllText`方法。  
  
|以|請參閱|  
|--------|---------|  
|將文字寫入檔案中|[如何：將文字寫入檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|將文字附加至檔案|[如何：附加至文字檔](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 這個範例會將行寫入`"This is new text to be added."`檔案`Test.txt`，覆寫任何現有的文字檔案中。  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 此範例撰寫中的檔案名稱`Documents and Settings`資料夾`FileList.txt`，插入換行字元傳回之間應提高可讀性。  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可將字串寫入緩衝區。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllText(System::String ^ file, System::String ^ text, bool append, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">要寫入的檔案。</param>
        <param name="text">要寫入檔案的文字。</param>
        <param name="append">
          <see langword="True" /> 表示要將內容附加到檔案，<see langword="False" /> 表示要覆寫檔案的內容。 預設為 <see langword="False" />。</param>
        <param name="encoding">寫入檔案時要使用的編碼方式。 預設為 UTF-8。</param>
        <summary>將文字寫入檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的檔案不存在，則會建立該檔案。  
  
 如果指定的編碼不符合現有檔案的編碼，則會忽略指定的編碼。  
  
> [!NOTE]
>  `WriteAllText`方法開啟的檔案、 寫入，，然後關閉它。 使用程式碼`WriteAllText`方法是使用程式碼，比簡單<xref:System.IO.StreamWriter>物件。 不過，如果利用迴圈，將字串加入至檔案<xref:System.IO.StreamWriter>物件可提供更佳的效能，因為您只需要開啟和關閉檔案一次。 如需詳細資訊，請參閱 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> 方法。  
  
 下表列出包含工作的範例`My.Computer.FileSystem.WriteAllText`方法。  
  
|以|請參閱|  
|--------|---------|  
|將文字寫入檔案中|[如何：將文字寫入檔案](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|將文字附加至檔案|[如何：附加至文字檔](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 這個範例會將行寫入`"This is new text to be added."`檔案`Test.txt`，覆寫任何現有的文字檔案中。  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 此範例撰寫中的檔案名稱`Documents and Settings`資料夾`FileList.txt`，插入換行字元傳回之間應提高可讀性。  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">因下列其中一項原因而導致路徑無效：它是長度為零的字串、它只包含空白字元、它包含無效的字元、它是裝置路徑 (開頭為 \\\\.\\)，或者它的結尾含有斜線。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> 為 <see langword="Nothing" />。</exception>
        <exception cref="T:System.IO.FileNotFoundException">檔案不存在。</exception>
        <exception cref="T:System.IO.IOException">檔案正由另一個程序使用中，或發生 I/O 錯誤。</exception>
        <exception cref="T:System.IO.PathTooLongException">路徑超過系統定義的最大長度。</exception>
        <exception cref="T:System.NotSupportedException">路徑中的檔案或目錄名稱含有冒號 (:)，或者是無效的格式。</exception>
        <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可將字串寫入緩衝區。</exception>
        <exception cref="T:System.Security.SecurityException">使用者缺乏必要的使用權限來檢視路徑。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">控制存取檔案和資料夾的能力。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
  </Members>
</Type>