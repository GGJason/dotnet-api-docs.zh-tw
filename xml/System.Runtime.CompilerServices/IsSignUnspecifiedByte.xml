<Type Name="IsSignUnspecifiedByte" FullName="System.Runtime.CompilerServices.IsSignUnspecifiedByte">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e65669772e4fe8dcde7c38cca641d119217dfd32" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30476272" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsSignUnspecifiedByte" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsSignUnspecifiedByte extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsSignUnspecifiedByte" />
  <TypeSignature Language="VB.NET" Value="Public Class IsSignUnspecifiedByte" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsSignUnspecifiedByte abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示某個修飾詞既非 signed 也不是 unsigned。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某些程式語言，例如 c + +，辨識三個相異`char`值： `signed char`， `unsigned char`，和`char`。  為了區分的未修改`char`Microsoft c + + 編譯器會加入從其他型別的<xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte>修飾詞加入每個`char`發出的組件的類型。  
  
 編譯器會發出中繼資料，以變更預設行為不適用時，在 just-in-time (JIT) 編譯器，處理值的方式中的自訂修飾詞。  當 JIT 編譯器遇到的自訂修飾詞時，它會處理修飾詞指定的方式中的值。  編譯器可以套用的自訂修飾詞來方法、 參數和傳回值。  JIT 編譯器的必要修飾詞必須回應，但可以忽略的選擇性修飾詞。  
  
 您可以發出自訂修飾詞至中繼資料，使用下列技巧：  
  
-   使用中的方法<xref:System.Reflection.Emit.TypeBuilder>類別如<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。  
  
-   產生 Microsoft intermediate language (MSIL) 指令檔，其中包含呼叫`modopt`和`modreq`，然後將組合至檔案最[Ilasm.exe （IL 組譯工具）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。  
  
-   使用 unmanaged 的反映 API。  
  
   
  
## Examples  
 下列程式碼範例會建立使用中的類別的組件<xref:System.Reflection.Emit>命名空間並發出<xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte>該組件的修飾詞。  
  
 [!code-cpp[Runtime.CompilerServices.IsSignUnspecifiedByte#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsSignUnspecifiedByte/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>