<Type Name="IsConst" FullName="System.Runtime.CompilerServices.IsConst">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="16ca5bfe528a1557a6c1debf6aaf3dc5d8b9082a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsConst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsConst extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsConst" />
  <TypeSignature Language="VB.NET" Value="Public Class IsConst" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsConst abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="81805-101">表示修改的型別具有 <see langword="const" /> 修飾詞。</span>
      <span class="sxs-lookup">
        <span data-stu-id="81805-101">Indicates that the modified type has a <see langword="const" /> modifier.</span>
      </span>
      <span data-ttu-id="81805-102">這個類別無法被繼承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="81805-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81805-103">Microsoft c + + 編譯器會發出此修飾詞到針對任何參數，傳回型別、 中繼資料或物件宣告會宣告為`const`的原始程式碼中。</span><span class="sxs-lookup"><span data-stu-id="81805-103">The Microsoft C++ compiler emits this modifier into metadata for any parameter, return type, or object declaration declared as `const` in the source code.</span></span>  
  
 <span data-ttu-id="81805-104">編譯器會發出中繼資料，以變更預設行為不適用時，在 just-in-time (JIT) 編譯器，處理值的方式中的自訂修飾詞。</span><span class="sxs-lookup"><span data-stu-id="81805-104">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="81805-105">當 JIT 編譯器遇到的自訂修飾詞時，它會處理修飾詞指定的方式中的值。</span><span class="sxs-lookup"><span data-stu-id="81805-105">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="81805-106">編譯器可以套用的自訂修飾詞來方法、 參數和傳回值。</span><span class="sxs-lookup"><span data-stu-id="81805-106">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="81805-107">JIT 編譯器的必要修飾詞必須回應，但可以忽略的選擇性修飾詞。</span><span class="sxs-lookup"><span data-stu-id="81805-107">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="81805-108">您可以發出自訂修飾詞至中繼資料，使用下列技巧：</span><span class="sxs-lookup"><span data-stu-id="81805-108">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="81805-109">使用中的方法<xref:System.Reflection.Emit.TypeBuilder>類別如<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="81805-109">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="81805-110">產生 Microsoft intermediate language (MSIL) 指令檔，其中包含呼叫`modopt`和`modreq`，然後將組合至檔案最[Ilasm.exe （IL 組譯工具）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="81805-110">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="81805-111">使用 unmanaged 的反映 API。</span><span class="sxs-lookup"><span data-stu-id="81805-111">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81805-112">下列範例示範如何發出<xref:System.Runtime.CompilerServices.IsConst>使用反映的組件的物件。</span><span class="sxs-lookup"><span data-stu-id="81805-112">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsConst> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsConst#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsConst/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>