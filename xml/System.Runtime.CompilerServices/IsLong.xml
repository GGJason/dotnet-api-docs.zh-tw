<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f0ff9e7ca9b500686e20b077aeaf036990a624ae" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30476132" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f0bcb-101">表示修改的整數是標準 C++ <see langword="long" /> 值。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f0bcb-101">Indicates that a modified integer is a standard C++ <see langword="long" /> value.</span>
      </span>
      <span data-ttu-id="f0bcb-102">這個類別無法被繼承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f0bcb-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0bcb-103">C + + 標準指出`long`值和整數值是不同的類型。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-103">The C++ standard indicates that a `long` value and an integer value are distinct types.</span></span>  <span data-ttu-id="f0bcb-104">不過，它們都表示使用`ELEMENT_TYPE_I4`組件中。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-104">However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.</span></span>  <span data-ttu-id="f0bcb-105">為了區分`long`從 c + + 中的整數，Microsoft c + + 編譯器會加入<xref:System.Runtime.CompilerServices.IsLong>修飾詞加入的任何執行個體`long`執行個體時 emited。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-105">To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsLong> modifier to any instance of a `long` when the instance is emited.</span></span>  <span data-ttu-id="f0bcb-106">此程序是非常重要的維護語言層級型別安全。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-106">This process is critically important for maintaining language-level type safety.</span></span>  
  
 <span data-ttu-id="f0bcb-107">編譯器會發出中繼資料，以變更預設行為不適用時，在 just-in-time (JIT) 編譯器，處理值的方式中的自訂修飾詞。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-107">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="f0bcb-108">當 JIT 編譯器遇到的自訂修飾詞時，它會處理修飾詞指定的方式中的值。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-108">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="f0bcb-109">編譯器可以套用的自訂修飾詞來方法、 參數和傳回值。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-109">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="f0bcb-110">JIT 編譯器的必要修飾詞必須回應，但可以忽略的選擇性修飾詞。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-110">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="f0bcb-111">您可以發出自訂修飾詞至中繼資料，使用下列技巧：</span><span class="sxs-lookup"><span data-stu-id="f0bcb-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="f0bcb-112">使用中的方法<xref:System.Reflection.Emit.TypeBuilder>類別如<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="f0bcb-113">產生 Microsoft intermediate language (MSIL) 指令檔，其中包含呼叫`modopt`和`modreq`，然後將組合至檔案最[Ilasm.exe （IL 組譯工具）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="f0bcb-114">使用 unmanaged 的反映 API。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-114">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f0bcb-115">下列範例示範如何發出<xref:System.Runtime.CompilerServices.IsLong>使用反映的組件的物件。</span><span class="sxs-lookup"><span data-stu-id="f0bcb-115">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsLong> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>