<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IsVolatile.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f15331286c57dd871587d77292a69a44ec47fd1d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f15331286c57dd871587d77292a69a44ec47fd1d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>Marks a field as volatile.</source>
          <target state="translated">將欄位標記為暫時性 (Volatile)。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>This class cannot be inherited.</source>
          <target state="translated">這個類別無法被繼承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source><ph id="ph1">`IsVolatile`</ph> is used only in custom modifiers of method signatures to indicate that the field it marks is volatile.</source>
          <target state="translated"><ph id="ph1">`IsVolatile`</ph> 是只能用在方法簽章的自訂修飾詞，表示它會將標示欄位是變動性。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>Any compiler that imports metadata with one or more fields marked as volatile must use instructions prefixed with <ph id="ph1">`volatile.`</ph> to access such fields.</source>
          <target state="translated">中繼資料匯入一個或多個欄位標記為 volatile 任何編譯器必須使用加上的指示<ph id="ph1">`volatile.`</ph>存取這類欄位。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>The classes in <ph id="ph1">&lt;xref:System.Runtime.CompilerServices&gt;</ph> are for compiler writers' use only.</source>
          <target state="translated">中的類別<ph id="ph1">&lt;xref:System.Runtime.CompilerServices&gt;</ph>編譯器撰寫者僅供使用。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</source>
          <target state="translated">編譯器會發出中繼資料，以變更預設行為不適用時，在 just-in-time (JIT) 編譯器，處理值的方式中的自訂修飾詞。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</source>
          <target state="translated">當 JIT 編譯器遇到的自訂修飾詞時，它會處理修飾詞指定的方式中的值。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>Compilers can apply custom modifiers to methods, parameters, and return values.</source>
          <target state="translated">編譯器可以套用的自訂修飾詞來方法、 參數和傳回值。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>The JIT compiler must respond to required modifiers but can ignore optional modifiers.</source>
          <target state="translated">JIT 編譯器的必要修飾詞必須回應，但可以忽略的選擇性修飾詞。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</source>
          <target state="translated">C + + 編譯器可以發出來描述如何 byte，應該要視為 JIT 編譯器以 c + + 與不相容的方式處理位元組中預設的自訂修飾詞。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>You can emit custom modifiers into metadata using one of the following techniques:</source>
          <target state="translated">您可以發出自訂修飾詞至中繼資料，使用下列技巧：</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>Using methods in the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class such as <ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph>.</source>
          <target state="translated">使用中的方法<ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph>類別如<ph id="ph2">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;</ph>，和<ph id="ph5">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <ph id="ph1">`modopt`</ph> and <ph id="ph2">`modreq`</ph>, and assembling the file with the <bpt id="p1">[</bpt>Ilasm.exe (IL Assembler)<ept id="p1">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>.</source>
          <target state="translated">產生 Microsoft intermediate language (MSIL) 指令檔，其中包含呼叫<ph id="ph1">`modopt`</ph>和<ph id="ph2">`modreq`</ph>，然後將組合至檔案最<bpt id="p1">[</bpt>Ilasm.exe （IL 組譯工具）<ept id="p1">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.IsVolatile">
          <source>Using the unmanaged reflection API.</source>
          <target state="translated">使用 unmanaged 的反映 API。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>