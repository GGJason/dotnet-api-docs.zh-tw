<Type Name="SpeakProgressEventArgs" FullName="System.Speech.Synthesis.SpeakProgressEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="11c53433ec9c440cab6a320698ef0e9d9f5cdf8d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30528832" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeakProgressEventArgs extends System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeakProgressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeakProgressEventArgs&#xA;Inherits PromptEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeakProgressEventArgs : System::Speech::Synthesis::PromptEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Synthesis.PromptEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>從 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" /> 事件傳回資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 執行個體<xref:System.Speech.Synthesis.SpeakProgressEventArgs>時，會建立<xref:System.Speech.Synthesis.SpeechSynthesizer>物件引發<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>事件。 <xref:System.Speech.Synthesis.SpeechSynthesizer>引發這個事件，它使用任何的提示字元中，說出每個新字<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>，或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法。  
  
 傳回的資料為基礎的語音合成標記語言 (SSML) 程式碼產生。 針對傳回的值<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>包含空格的字元和程式碼所產生的 SSML 標記的內容。  
  
   
  
## Examples  
 下列範例會示範可從取得的資訊<xref:System.Speech.Synthesis.SpeakProgressEventArgs>。 請注意如何<xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>， <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>， <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>，和<xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>方法會影響<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>其加入** \<p >**， **  \< /p >**， ** \<s >**，和** \</s >** 產生 SSML 標記。 此外，"30%"，其中每個文字的讀出這個數字的字串 （30%） 的輸出中有兩個項目。 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>和<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>為每個項目相同，且代表字元"30%。 不過，<xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A>變更以反映讀出的文字"30"和"percent"由<xref:System.Speech.Synthesis.SpeechSynthesizer>。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt containing a paragraph and two sentences.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.StartParagraph();  
        builder.StartSentence();  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.EndSentence();  
        builder.StartSentence();  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.EndSentence();  
        builder.EndParagraph();  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character postion to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("CharPos: {0}   CharCount: {1}   AudioPos: {2}    \"{3}\"",  
        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得事件的音訊位置。</summary>
        <value>傳回在音訊輸出資料流中的事件位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>正規化對應如何要讀出數字的數字。 例如，合成器說出 「 四個 2 千三個 「 數字 」 4003"。 它會引發<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>口語的文字，然後傳回每個事件<xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A>的每個字。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterCount">
      <MemberSignature Language="C#" Value="public int CharacterCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterCount" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得在引發事件之前剛說出的文字中的字元數。</summary>
        <value>傳回在引發事件之前剛說出的文字中的字元數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>正規化對應如何要讀出數字的數字。 例如，合成器說出 「 四個 2 千三個 「 數字 」 4003"。 它會引發<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>口語的每個事件。 不過，<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>的三個單字的每個屬性都是相同。 在此情況下，它是中的字元計數中的數字 」 4003"文字的提示字元中，四個。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterPosition">
      <MemberSignature Language="C#" Value="public int CharacterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterPosition { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得從提示開頭到剛說出的文字的第一個字母之前位置的字元和空格數。</summary>
        <value>傳回從提示開頭到剛說出的文字的第一個字母之前位置的字元和空格數。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>納入 XML 標記，包括其封入方括號字元的計數。 當使用任何<xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>， <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>， <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>， <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>，或<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>方法，將內容加入至 SSML 提示，其中包含開頭和結尾`speak`項目。 開啟`speak`項目新增 82 字元的位移，並以空格<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>的所有文字和提示字元中的字母。 例如，在下列程式碼片段，<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>的第一個單字"this"是 82。  
  
```csharp  
builder.AppendText("This is a test");  
Synthesizer.Speak(builder);  
```  
  
 在上述範例中<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>單字的 「 測試 」 是 92。 在下列程式碼片段<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>單字的 「 測試 」 為 23 個字元更高版本 (115) 因為開啟** \<prosody 音高 ="high">** 它之前的標記包含 23 字元和空格 （兩個逸出字元"\\」 不會計算)。  
  
```csharp  
builder.AppendSsmlMarkup("This is a <prosody pitch=\"high\"> test </prosody>.");   
Synthesizer.Speak(builder);  
```  
  
 如果您使用<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>方法將內容新增到提示，藉由指定的檔案，開啟`xml`宣告和`speak`檔案中的項目不會使用或計算。 在開啟之後檔案中的第一個字元`speak`標記會在位置 82 是否在提示字元中的第一個內容。  
  
 相較之下，字串參數<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法並不會新增到 SSML 提示之前讀出來。 因此，<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>的第一個單字"this"，在下列程式碼片段為零。  
  
```csharp  
Synthesizer.Speak("This is a test.");  
```  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>正規化對應如何要讀出數字的數字。 例如，合成器說出 「 四個 2 千三個 「 數字 」 4003"。 它會引發<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>事件每三個讀出的文字。 不過，<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>的三個單字的每個屬性都是相同。 它是中的數字 」 4003"文字的提示字元的第一個字元前的位置。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Speech.Synthesis.PromptBuilder>和 XML 檔案使用的 SSML 內容附加至<xref:System.Xml.XmlReader>。 範例輸出的播放 WAV 檔案的語音。 包含 SSML 的 XML 檔案的內容會出現下列程式碼範例。  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a path to the file that contains SSML.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.ssml");  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress: {0} {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
  
```  
  
```xml  
<!-- The following are the contents of the file Weather.ssml.   
Note that because of the <p> tag and the space that follows it,   
that the character position of the first word "The" will be 86. -->  
  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <p> The weather forecast for today is partly cloudy with   
some sun breaks. </p>  
  
  <break strength="medium" />  
  
  <p> Tonight's weather will be cloudy with a 30% chance of   
showers. </p>  
  
</speak>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正好在引發事件時所讀出的文字。</summary>
        <value>傳回正好在引發事件時所讀出的文字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>正規化對應如何要讀出數字的數字。 例如，合成器說出 「 四個 2 千三個 「 數字 」 4003"。 它會引發<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>口語的每個事件。 不過，<xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A>的三個單字的每個屬性都是相同。 它是從提示字元的文字"4003"。  
  
   
  
## Examples  
 下列範例說明如何<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>事件報告<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>和<xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A>屬性可包含數字的字串。  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("4003");  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress -    Character position:  {0}    Text:  {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>