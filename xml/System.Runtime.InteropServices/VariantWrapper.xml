<Type Name="VariantWrapper" FullName="System.Runtime.InteropServices.VariantWrapper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="756043660b69b0075e319179d9908a02a325c276" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30485012" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VariantWrapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit VariantWrapper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.VariantWrapper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VariantWrapper" />
  <TypeSignature Language="C++ CLI" Value="public ref class VariantWrapper sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="39409-101">將 <see langword="VT_VARIANT | VT_BYREF" /> 型別的資料從 Managed 封送處理成 Unmanaged 程式碼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="39409-101">Marshals data of type <see langword="VT_VARIANT | VT_BYREF" /> from managed to unmanaged code.</span>
      </span>
      <span data-ttu-id="39409-102">這個類別無法被繼承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="39409-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39409-103">目的<xref:System.Runtime.InteropServices.VariantWrapper>會封送處理至對應的 managed 型別時，將一個層級的間接取值`VARIANT`型別。</span><span class="sxs-lookup"><span data-stu-id="39409-103">The purpose of <xref:System.Runtime.InteropServices.VariantWrapper> is to add one level of indirection when marshaling a managed type to the corresponding `VARIANT` type.</span></span>  
  
 <span data-ttu-id="39409-104">您可以使用這個類別來包裝<xref:System.Object>，interop 封送處理器會傳遞做為`VT_VARIANT | VT_BYREF`。</span><span class="sxs-lookup"><span data-stu-id="39409-104">You can use this class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span> <span data-ttu-id="39409-105">在版本的.NET Framework 1.0 和 1.1 中，無法封送處理 variant 資料類型的`VT_VARIANT | VT_BYREF`至 unmanaged 程式碼。</span><span class="sxs-lookup"><span data-stu-id="39409-105">In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type `VT_VARIANT | VT_BYREF` to unmanaged code.</span></span> <span data-ttu-id="39409-106">Interop 封送處理器傳遞之 managed 型別的變數 (例如，`VT_BSTR | VT_BYREF`的<xref:System.String>，或`VT_I4 | VT_BYREF`的<xref:System.Int32>)，但不是`VT_VARIANT | VT_BYREF`。</span><span class="sxs-lookup"><span data-stu-id="39409-106">The interop marshaler passed a variant of the managed type (for example, `VT_BSTR | VT_BYREF` for <xref:System.String>, or `VT_I4 | VT_BYREF` for <xref:System.Int32>), but not `VT_VARIANT | VT_BYREF`.</span></span>  
  
 <span data-ttu-id="39409-107">使用的其中一個優點`VT_VARIANT | VT_BYREF`variant 型別是在方法呼叫時，可以變更的資料類型。</span><span class="sxs-lookup"><span data-stu-id="39409-107">One advantage of using `VT_VARIANT | VT_BYREF` variant types is that the type of data can be changed during a method call.</span></span> <span data-ttu-id="39409-108">例如，您可以傳遞`VT_VARIANT | VT_BYREF`variant 型別，其中包含`VT_BSTR`和 get 會傳回的變數，其中包含`VT_I4`方法呼叫之後。</span><span class="sxs-lookup"><span data-stu-id="39409-108">For example, you can pass a `VT_VARIANT | VT_BYREF` variant type that contains a `VT_BSTR` and get a variant returned that contains a `VT_I4` after a method call.</span></span> <span data-ttu-id="39409-109">因為 COM interop 封送處理器有無從得知何時傳遞`VT_BSTR | VT_BYREF`以及何時將`VT_VARIANT | VT_BYREF`，指向包含 variant`BSTR`的參數宣告為`VARIANT *`，您可以使用指示封送處理器<xref:System.Runtime.InteropServices.VariantWrapper>.</span><span class="sxs-lookup"><span data-stu-id="39409-109">Because the COM interop marshaler has no way of knowing when to pass `VT_BSTR | VT_BYREF` and when to pass `VT_VARIANT | VT_BYREF`, which points to a variant that contains a `BSTR` for parameters declared as `VARIANT *`, you can instruct the marshaler by using <xref:System.Runtime.InteropServices.VariantWrapper>.</span></span>  
  
 <span data-ttu-id="39409-110">請注意，不支援早期繫結。您可以使用<xref:System.Runtime.InteropServices.VariantWrapper>呼叫時，才<xref:System.Type.InvokeMember%2A>或具有以早期繫結方式呼叫僅分派介面。</span><span class="sxs-lookup"><span data-stu-id="39409-110">Note that early binding is not supported; you can use <xref:System.Runtime.InteropServices.VariantWrapper> only when calling <xref:System.Type.InvokeMember%2A> or with a Dispatch-only interface called in an early bound fashion.</span></span> <span data-ttu-id="39409-111">在 C# 中，您也必須使用`ref`關鍵字來指定`ByRef`語意類型的任何參數<xref:System.Runtime.InteropServices.VariantWrapper>。</span><span class="sxs-lookup"><span data-stu-id="39409-111">In C#, you must also use the `ref` keyword to specify `ByRef` semantics for any parameter of type <xref:System.Runtime.InteropServices.VariantWrapper>.</span></span> <span data-ttu-id="39409-112">在 Visual Basic 中`ByRef`語意會自動加入每個隱含晚期繫結呼叫。</span><span class="sxs-lookup"><span data-stu-id="39409-112">In Visual Basic, `ByRef` semantics are added automatically for every implicit late binding call.</span></span> <span data-ttu-id="39409-113">也請注意，巢狀<xref:System.Runtime.InteropServices.VariantWrapper>物件和陣列<xref:System.Runtime.InteropServices.VariantWrapper>不支援物件。</span><span class="sxs-lookup"><span data-stu-id="39409-113">Also note that nesting <xref:System.Runtime.InteropServices.VariantWrapper> objects and arrays of <xref:System.Runtime.InteropServices.VariantWrapper> objects is not supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39409-114">下列程式碼範例示範如何使用<xref:System.Runtime.InteropServices.VariantWrapper>類別來包裝<xref:System.Object>，interop 封送處理器會傳遞做為`VT_VARIANT | VT_BYREF`。</span><span class="sxs-lookup"><span data-stu-id="39409-114">The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VariantWrapper (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VariantWrapper(System::Object ^ obj);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="39409-115">要封送處理的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39409-115">The object to marshal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39409-116">為指定的 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 參數，初始化 <see cref="T:System.Object" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39409-116">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> class for the specified <see cref="T:System.Object" /> parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="39409-117">下列程式碼範例示範如何使用<xref:System.Runtime.InteropServices.VariantWrapper>類別來包裝<xref:System.Object>，interop 封送處理器會傳遞做為`VT_VARIANT | VT_BYREF`。</span><span class="sxs-lookup"><span data-stu-id="39409-117">The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrappedObject">
      <MemberSignature Language="C#" Value="public object WrappedObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WrappedObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WrappedObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ WrappedObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="39409-118">取得 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 物件所包裝的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39409-118">Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="39409-119">
            <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 物件所包裝的物件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39409-119">The object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>