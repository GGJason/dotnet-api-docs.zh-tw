<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b7f092c326960741597c424fa1d78d6a1e6ffcd" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48754964" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0b64e-101">提供用來處理方法呼叫的自訂包裝函式。</span><span class="sxs-lookup"><span data-stu-id="0b64e-101">Provides custom wrappers for handling method calls.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b64e-102">封送處理器會提供舊的功能與新的介面之間的橋樑。</span><span class="sxs-lookup"><span data-stu-id="0b64e-102">A marshaler provides a bridge between the functionality of old and new interfaces.</span></span> <span data-ttu-id="0b64e-103">自訂封送處理會提供下列優點：</span><span class="sxs-lookup"><span data-stu-id="0b64e-103">Custom marshaling provides the following benefits:</span></span>  
  
-   <span data-ttu-id="0b64e-104">它可讓用戶端應用程式都設計成使用舊的介面，也會使用實作新介面的伺服器。</span><span class="sxs-lookup"><span data-stu-id="0b64e-104">It enables client applications that were designed to work with an old interface to also work with servers that implement a new interface.</span></span>  
  
-   <span data-ttu-id="0b64e-105">它可讓用戶端應用程式建置目的為使用新的介面，以使用實作舊介面的伺服器。</span><span class="sxs-lookup"><span data-stu-id="0b64e-105">It enables client applications built to work with a new interface to work with servers that implement an old interface.</span></span>  
  
 <span data-ttu-id="0b64e-106">如果您有的介面所導入了不同的封送處理行為，或以不同方式來公開元件物件模型 (COM)，您可以設計自訂的封送處理器，而不是使用 interop 封送處理器。</span><span class="sxs-lookup"><span data-stu-id="0b64e-106">If you have an interface that introduces different marshaling behavior or that is exposed to the Component Object Model (COM) in a different way, you can design a custom marshaler instead of using the interop marshaler.</span></span> <span data-ttu-id="0b64e-107">藉由使用自訂封送處理器，您可以減少新的.NET Framework 元件與現有的 COM 元件之間的差異。</span><span class="sxs-lookup"><span data-stu-id="0b64e-107">By using a custom marshaler, you can minimize the distinction between new .NET Framework components and existing COM components.</span></span>  
  
 <span data-ttu-id="0b64e-108">例如，假設您正在開發名為的 managed 的介面`INew`。</span><span class="sxs-lookup"><span data-stu-id="0b64e-108">For example, suppose that you are developing a managed interface called `INew`.</span></span> <span data-ttu-id="0b64e-109">當這個介面會公開至 COM，透過標準 COM 可呼叫包裝函式 (CCW) 時，它會為受管理的介面具有相同的方法，並使用 interop 封送處理器內建的封送處理規則。</span><span class="sxs-lookup"><span data-stu-id="0b64e-109">When this interface is exposed to COM through a standard COM callable wrapper (CCW), it has the same methods as the managed interface and uses the marshaling rules built into the interop marshaler.</span></span> <span data-ttu-id="0b64e-110">現在，假設已知的 COM 介面，呼叫`IOld`已提供相同的功能`INew`介面。</span><span class="sxs-lookup"><span data-stu-id="0b64e-110">Now suppose that a well-known COM interface called `IOld` already provides the same functionality as the `INew` interface.</span></span> <span data-ttu-id="0b64e-111">藉由設計自訂封送處理器，您可以提供未受管理的實作`IOld`，只會委派呼叫的 managed 實作`INew`介面。</span><span class="sxs-lookup"><span data-stu-id="0b64e-111">By designing a custom marshaler, you can provide an unmanaged implementation of `IOld` that simply delegates the calls to the managed implementation of the `INew` interface.</span></span> <span data-ttu-id="0b64e-112">因此，自訂封送處理器會作為 managed 和 unmanaged 介面之間的橋樑。</span><span class="sxs-lookup"><span data-stu-id="0b64e-112">Therefore, the custom marshaler acts as a bridge between the managed and unmanaged interfaces.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0b64e-113">從 managed 程式碼呼叫 unmanaged 程式碼僅分派介面上時，不會叫用自訂封送處理器。</span><span class="sxs-lookup"><span data-stu-id="0b64e-113">Custom marshalers are not invoked when calling from managed code to unmanaged code on a dispatch-only interface.</span></span>  
  
## <a name="defining-the-marshaling-type"></a><span data-ttu-id="0b64e-114">定義封送處理類型</span><span class="sxs-lookup"><span data-stu-id="0b64e-114">Defining the Marshaling Type</span></span>  
 <span data-ttu-id="0b64e-115">您可以建立自訂封送處理器之前，您必須定義要封送處理的 managed 和 unmanaged 介面。</span><span class="sxs-lookup"><span data-stu-id="0b64e-115">Before you can build a custom marshaler, you must define the managed and unmanaged interfaces that will be marshaled.</span></span> <span data-ttu-id="0b64e-116">這些介面通常會執行相同的函式，但會以不同的方式公開 managed 和 unmanaged 物件。</span><span class="sxs-lookup"><span data-stu-id="0b64e-116">These interfaces commonly perform the same function but are exposed differently to managed and unmanaged objects.</span></span>  
  
 <span data-ttu-id="0b64e-117">Managed 的編譯器會產生中繼資料，從 managed 的介面，產生的介面看起來像任何其他受管理的介面。</span><span class="sxs-lookup"><span data-stu-id="0b64e-117">A managed compiler produces a managed interface from metadata, and the resulting interface looks like any other managed interface.</span></span> <span data-ttu-id="0b64e-118">下列範例示範典型的介面。</span><span class="sxs-lookup"><span data-stu-id="0b64e-118">The following example shows a typical interface.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 <span data-ttu-id="0b64e-119">定義 unmanaged 型別在介面定義語言 (IDL)，並使用 Microsoft 介面定義語言 (MIDL) 編譯器進行編譯。</span><span class="sxs-lookup"><span data-stu-id="0b64e-119">You define the unmanaged type in Interface Definition Language (IDL) and compile it with the Microsoft Interface Definition Language (MIDL) compiler.</span></span> <span data-ttu-id="0b64e-120">定義在 library 陳述式中的介面，並將它指派的通用唯一識別碼 (UUID) 屬性，與介面識別碼，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="0b64e-120">You define the interface within a library statement and assign it an interface ID with the universal unique identifier (UUID) attribute, as the following example demonstrates.</span></span>  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 <span data-ttu-id="0b64e-121">MIDL 編譯器會產生數個輸出檔案。</span><span class="sxs-lookup"><span data-stu-id="0b64e-121">The MIDL compiler produces several output files.</span></span> <span data-ttu-id="0b64e-122">如果介面定義在 Old.idl，輸出檔 Old_i.c 定義`const`變數與介面識別項 (IID) 的介面，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="0b64e-122">If the interface is defined in Old.idl, the output file Old_i.c defines a `const` variable with the interface identifier (IID) of the interface, as the following example demonstrates.</span></span>  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 <span data-ttu-id="0b64e-123">Old.h 檔案也會由 MIDL 產生。</span><span class="sxs-lookup"><span data-stu-id="0b64e-123">The Old.h file is also produced by MIDL.</span></span> <span data-ttu-id="0b64e-124">它包含 c + + 的定義可以包含在您的 c + + 程式碼的介面。</span><span class="sxs-lookup"><span data-stu-id="0b64e-124">It contains a C++ definition of the interface that can be included in your C++ source code.</span></span>  
  
## <a name="implementing-the-icustommarshaler-interface"></a><span data-ttu-id="0b64e-125">實作 ICustomMarshaler 介面</span><span class="sxs-lookup"><span data-stu-id="0b64e-125">Implementing the ICustomMarshaler Interface</span></span>  
 <span data-ttu-id="0b64e-126">您的自訂封送處理器必須實作<xref:System.Runtime.InteropServices.ICustomMarshaler>介面，以提供適當的包裝函式以執行階段。</span><span class="sxs-lookup"><span data-stu-id="0b64e-126">Your custom marshaler must implement the <xref:System.Runtime.InteropServices.ICustomMarshaler> interface to provide the appropriate wrappers to the runtime.</span></span>  
  
 <span data-ttu-id="0b64e-127">下列 C# 程式碼會顯示所有的自訂封送處理器必須實作的基底介面。</span><span class="sxs-lookup"><span data-stu-id="0b64e-127">The following C# code displays the base interface that must be implemented by all custom marshalers.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 <span data-ttu-id="0b64e-128"><xref:System.Runtime.InteropServices.ICustomMarshaler>介面包含可提供轉換支援、 清理支援，以及要封送處理資料的相關資訊的方法。</span><span class="sxs-lookup"><span data-stu-id="0b64e-128">The <xref:System.Runtime.InteropServices.ICustomMarshaler> interface includes methods that provide conversion support, cleanup support, and information about the data to be marshaled.</span></span>  
  
|<span data-ttu-id="0b64e-129">作業類型</span><span class="sxs-lookup"><span data-stu-id="0b64e-129">Type of operation</span></span>|<span data-ttu-id="0b64e-130">ICustomMarshaler 方法</span><span class="sxs-lookup"><span data-stu-id="0b64e-130">ICustomMarshaler method</span></span>|<span data-ttu-id="0b64e-131">描述</span><span class="sxs-lookup"><span data-stu-id="0b64e-131">Description</span></span>|  
|-----------------------|-----------------------------|-----------------|  
|<span data-ttu-id="0b64e-132">（從原生至 managed 程式碼） 轉換</span><span class="sxs-lookup"><span data-stu-id="0b64e-132">Conversion (from native to managed code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|<span data-ttu-id="0b64e-133">將原生資料指標封送到受管理的物件。</span><span class="sxs-lookup"><span data-stu-id="0b64e-133">Marshals a pointer to native data into a managed object.</span></span> <span data-ttu-id="0b64e-134">這個方法傳回的自訂執行階段可呼叫包裝函式 (RCW) 可以封送處理傳遞做為引數的 unmanaged 的介面。</span><span class="sxs-lookup"><span data-stu-id="0b64e-134">This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</span></span> <span data-ttu-id="0b64e-135">封送處理器應傳回自訂 RCW，該型別的執行的個體。</span><span class="sxs-lookup"><span data-stu-id="0b64e-135">The marshaler should return an instance of the custom RCW for that type.</span></span>|  
|<span data-ttu-id="0b64e-136">（從原生至 managed 程式碼） 轉換</span><span class="sxs-lookup"><span data-stu-id="0b64e-136">Conversion (from managed to native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|<span data-ttu-id="0b64e-137">將 managed 的物件封送至原生資料的指標。</span><span class="sxs-lookup"><span data-stu-id="0b64e-137">Marshals a managed object into a pointer to native data.</span></span> <span data-ttu-id="0b64e-138">這個方法傳回的自訂 COM 可呼叫包裝函式 (CCW) 可以封送處理 managed 的介面做為引數傳遞。</span><span class="sxs-lookup"><span data-stu-id="0b64e-138">This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</span></span> <span data-ttu-id="0b64e-139">封送處理器應傳回自訂 CCW，該型別的執行的個體。</span><span class="sxs-lookup"><span data-stu-id="0b64e-139">The marshaler should return an instance of the custom CCW for that type.</span></span>|  
|<span data-ttu-id="0b64e-140">清除 （的原生程式碼）</span><span class="sxs-lookup"><span data-stu-id="0b64e-140">Cleanup (of native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|<span data-ttu-id="0b64e-141">可讓以清除所傳回之原生資料 (CCW) 封送處理器<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0b64e-141">Enables the marshaler to clean up the native data (the CCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> method.</span></span>|  
|<span data-ttu-id="0b64e-142">清除 （的 managed 程式碼）</span><span class="sxs-lookup"><span data-stu-id="0b64e-142">Cleanup (of managed code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|<span data-ttu-id="0b64e-143">可讓以清除所傳回的受管理資料 (RCW)，封送處理器<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0b64e-143">Enables the marshaler to clean up the managed data (the RCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> method.</span></span>|  
|<span data-ttu-id="0b64e-144">資訊 （原生程式碼）</span><span class="sxs-lookup"><span data-stu-id="0b64e-144">Information (about native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|<span data-ttu-id="0b64e-145">傳回要封送處理之 unmanaged 資料的大小。</span><span class="sxs-lookup"><span data-stu-id="0b64e-145">Returns the size of the unmanaged data to be marshaled.</span></span>|  
  
### <a name="conversion"></a><span data-ttu-id="0b64e-146">轉換</span><span class="sxs-lookup"><span data-stu-id="0b64e-146">Conversion</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="0b64e-147">將原生資料指標封送到受管理的物件。</span><span class="sxs-lookup"><span data-stu-id="0b64e-147">Marshals a pointer to native data into a managed object.</span></span> <span data-ttu-id="0b64e-148">這個方法傳回的自訂執行階段可呼叫包裝函式 (RCW) 可以封送處理傳遞做為引數的 unmanaged 的介面。</span><span class="sxs-lookup"><span data-stu-id="0b64e-148">This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</span></span> <span data-ttu-id="0b64e-149">封送處理器應傳回自訂 RCW，該型別的執行的個體。</span><span class="sxs-lookup"><span data-stu-id="0b64e-149">The marshaler should return an instance of the custom RCW for that type.</span></span>  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="0b64e-150">將 managed 的物件封送至原生資料的指標。</span><span class="sxs-lookup"><span data-stu-id="0b64e-150">Marshals a managed object into a pointer to native data.</span></span> <span data-ttu-id="0b64e-151">這個方法傳回的自訂 COM 可呼叫包裝函式 (CCW) 可以封送處理 managed 的介面做為引數傳遞。</span><span class="sxs-lookup"><span data-stu-id="0b64e-151">This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</span></span> <span data-ttu-id="0b64e-152">封送處理器應傳回自訂 CCW，該型別的執行的個體。</span><span class="sxs-lookup"><span data-stu-id="0b64e-152">The marshaler should return an instance of the custom CCW for that type.</span></span>  
  
### <a name="cleanup"></a><span data-ttu-id="0b64e-153">清除</span><span class="sxs-lookup"><span data-stu-id="0b64e-153">Cleanup</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="0b64e-154">可讓以清除所傳回之原生資料 (CCW) 封送處理器<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0b64e-154">Enables the marshaler to clean up the native data (the CCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> method.</span></span>  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="0b64e-155">可讓以清除所傳回的受管理資料 (RCW)，封送處理器<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="0b64e-155">Enables the marshaler to clean up the managed data (the RCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> method.</span></span>  
  
### <a name="size-information"></a><span data-ttu-id="0b64e-156">大小的資訊</span><span class="sxs-lookup"><span data-stu-id="0b64e-156">Size Information</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="0b64e-157">傳回要封送處理之 unmanaged 資料的大小。</span><span class="sxs-lookup"><span data-stu-id="0b64e-157">Returns the size of the unmanaged data to be marshaled.</span></span>  
  
## <a name="implementing-the-getinstance-method"></a><span data-ttu-id="0b64e-158">實作 GetInstance 方法</span><span class="sxs-lookup"><span data-stu-id="0b64e-158">Implementing the GetInstance Method</span></span>  
 <span data-ttu-id="0b64e-159">除了實作<xref:System.Runtime.InteropServices.ICustomMarshaler>介面，必須實作自訂封送處理器`static`方法呼叫`GetInstance`可接受<xref:System.String>做為參數且傳回型別<xref:System.Runtime.InteropServices.ICustomMarshaler>。</span><span class="sxs-lookup"><span data-stu-id="0b64e-159">In addition to implementing the <xref:System.Runtime.InteropServices.ICustomMarshaler> interface, custom marshalers must implement a `static` method called `GetInstance` that accepts a <xref:System.String> as a parameter and has a return type of <xref:System.Runtime.InteropServices.ICustomMarshaler>.</span></span> <span data-ttu-id="0b64e-160">這`static`方法由 common language runtime 的 COM interop 層級的自訂封送處理器執行個體具現化呼叫。</span><span class="sxs-lookup"><span data-stu-id="0b64e-160">This `static` method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler.</span></span> <span data-ttu-id="0b64e-161">傳遞至字串`GetInstance`方法可用來自訂傳回自訂封送處理器的 cookie。</span><span class="sxs-lookup"><span data-stu-id="0b64e-161">The string that is passed to `GetInstance` is a cookie that the method can use to customize the returned custom marshaler.</span></span>  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a><span data-ttu-id="0b64e-162">套用 MarshalAsAttribute</span><span class="sxs-lookup"><span data-stu-id="0b64e-162">Applying MarshalAsAttribute</span></span>  
 <span data-ttu-id="0b64e-163">若要使用自訂封送處理器，您必須套用<xref:System.Runtime.InteropServices.MarshalAsAttribute>屬性的參數或已封送處理的欄位。</span><span class="sxs-lookup"><span data-stu-id="0b64e-163">To use a custom marshaler, you must apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute to the parameter or field that is being marshaled.</span></span>  
  
 <span data-ttu-id="0b64e-164">您也必須傳遞<xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType>列舉值，以<xref:System.Runtime.InteropServices.MarshalAsAttribute>建構函式。</span><span class="sxs-lookup"><span data-stu-id="0b64e-164">You must also pass the <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> enumeration value to the <xref:System.Runtime.InteropServices.MarshalAsAttribute> constructor.</span></span> <span data-ttu-id="0b64e-165">此外，您必須指定<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>欄位使用具名參數的下列其中之一：</span><span class="sxs-lookup"><span data-stu-id="0b64e-165">In addition, you must specify the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field with one of the following named parameters:</span></span>  
  
-   <span data-ttu-id="0b64e-166"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> （必要）： 自訂封送處理器的組件限定名稱。</span><span class="sxs-lookup"><span data-stu-id="0b64e-166"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (required): The assembly-qualified name of the custom marshaler.</span></span> <span data-ttu-id="0b64e-167">此名稱應包含的命名空間和類別的自訂封送處理器。</span><span class="sxs-lookup"><span data-stu-id="0b64e-167">The name should include the namespace and class of the custom marshaler.</span></span> <span data-ttu-id="0b64e-168">如果它用在組件中未定義自訂封送處理器，您必須指定它定義所在的組件名稱。</span><span class="sxs-lookup"><span data-stu-id="0b64e-168">If the custom marshaler is not defined in the assembly it is used in, you must specify the name of the assembly in which it is defined.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="0b64e-169">您可以使用<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>欄位，而不是<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>欄位。</span><span class="sxs-lookup"><span data-stu-id="0b64e-169">You can use the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> field instead of the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field.</span></span> <span data-ttu-id="0b64e-170"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> 採用型別所指定的工作變得更容易。</span><span class="sxs-lookup"><span data-stu-id="0b64e-170"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> takes a type that is easier to specify.</span></span>  
  
-   <span data-ttu-id="0b64e-171"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> （選擇性）： 傳遞給自訂封送處理器的 cookie。</span><span class="sxs-lookup"><span data-stu-id="0b64e-171"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (optional): A cookie that is passed to the custom marshaler.</span></span> <span data-ttu-id="0b64e-172">您可以使用 cookie 來提供封送處理器的其他資訊。</span><span class="sxs-lookup"><span data-stu-id="0b64e-172">You can use the cookie to provide additional information to the marshaler.</span></span> <span data-ttu-id="0b64e-173">例如，如果相同的封送處理器會用來提供包裝函式的數目，cookie 會識別特定的包裝函式。</span><span class="sxs-lookup"><span data-stu-id="0b64e-173">For example, if the same marshaler is used to provide a number of wrappers, the cookie identifies a specific wrapper.</span></span> <span data-ttu-id="0b64e-174">Cookie 會傳遞至`GetInstance`封送處理器的方法。</span><span class="sxs-lookup"><span data-stu-id="0b64e-174">The cookie is passed to the `GetInstance` method of the marshaler.</span></span>  
  
 <span data-ttu-id="0b64e-175"><xref:System.Runtime.InteropServices.MarshalAsAttribute>屬性識別的自訂封送處理器，因此它可以啟用適當的包裝函式。</span><span class="sxs-lookup"><span data-stu-id="0b64e-175">The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute identifies the custom marshaler so it can activate the appropriate wrapper.</span></span> <span data-ttu-id="0b64e-176">Common language runtime 的 interop 服務接著會檢查屬性，並自訂封送處理器第一次會建立要封送處理引數 （參數或欄位） 的需求。</span><span class="sxs-lookup"><span data-stu-id="0b64e-176">The common language runtime's interop service then examines the attribute and creates the custom marshaler the first time the argument (parameter or field) needs to be marshaled.</span></span>  
  
 <span data-ttu-id="0b64e-177">執行階段接著會呼叫<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>和<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>啟用正確的包裝函式來處理呼叫的自訂封送處理器上的方法。</span><span class="sxs-lookup"><span data-stu-id="0b64e-177">The runtime then calls the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> and <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> methods on the custom marshaler to activate the correct wrapper to handle the call.</span></span>  
  
## <a name="using-a-custom-marshaler"></a><span data-ttu-id="0b64e-178">使用自訂封送處理器</span><span class="sxs-lookup"><span data-stu-id="0b64e-178">Using a Custom Marshaler</span></span>  
 <span data-ttu-id="0b64e-179">完成自訂封送處理器時，您可以使用它的自訂包裝函式的特定型別。</span><span class="sxs-lookup"><span data-stu-id="0b64e-179">When the custom marshaler is complete, you can use it as a custom wrapper for a particular type.</span></span> <span data-ttu-id="0b64e-180">下列範例顯示定義`IUserData`managed 的介面：</span><span class="sxs-lookup"><span data-stu-id="0b64e-180">The following example shows the definition of the `IUserData` managed interface:</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 <span data-ttu-id="0b64e-181">在下列範例中，`IUserData`介面會使用`NewOldMarshaler`若要啟用將未受管理的用戶端應用程式的自訂封送處理器`IOld`介面`DoSomeStuff`方法。</span><span class="sxs-lookup"><span data-stu-id="0b64e-181">In the following example, the `IUserData` interface uses the `NewOldMarshaler` custom marshaler to enable unmanaged client applications to pass an `IOld` interface to the `DoSomeStuff` method.</span></span> <span data-ttu-id="0b64e-182">受管理的描述`DoSomeStuff`方法會採用`INew`介面，如上述範例中中, 所示，而未受管理的版本`DoSomeStuff`採用`IOld`介面指標，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="0b64e-182">The managed description of the `DoSomeStuff` method takes an `INew` interface, as shown in the previous example, whereas the unmanaged version of `DoSomeStuff` takes an `IOld` interface pointer, as shown in the following example.</span></span>  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 <span data-ttu-id="0b64e-183">類型程式庫所匯出的 managed 的定義產生`IUserData`產生的未受管理的定義，而不是標準的定義範例所示。</span><span class="sxs-lookup"><span data-stu-id="0b64e-183">The type library that is generated by exporting the managed definition of `IUserData` yields the unmanaged definition shown in this example instead of the standard definition.</span></span> <span data-ttu-id="0b64e-184"><xref:System.Runtime.InteropServices.MarshalAsAttribute>套用至屬性`INew`引數中的 managed 定義`DoSomeStuff`方法表示的引數使用自訂封送處理器，如下列範例所示。</span><span class="sxs-lookup"><span data-stu-id="0b64e-184">The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute applied to the `INew` argument in the managed definition of the `DoSomeStuff` method indicates that the argument uses a custom marshaler, as the following example shows.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 <span data-ttu-id="0b64e-185">在上一個範例中，第一個參數提供給<xref:System.Runtime.InteropServices.MarshalAsAttribute>屬性是<xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType>列舉值`UnmanagedType.CustomMarshaler`。</span><span class="sxs-lookup"><span data-stu-id="0b64e-185">In the previous examples, the first parameter provided to the <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute is the <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> enumeration value `UnmanagedType.CustomMarshaler`.</span></span>  
  
 <span data-ttu-id="0b64e-186">第二個參數是<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>欄位，以提供自訂封送處理器的組件限定名稱。</span><span class="sxs-lookup"><span data-stu-id="0b64e-186">The second parameter is the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field, which provides the assembly-qualified name of the custom marshaler.</span></span> <span data-ttu-id="0b64e-187">此名稱所組成的命名空間和類別的自訂封送處理器 (`MarshalType="MyCompany.NewOldMarshaler"`)。</span><span class="sxs-lookup"><span data-stu-id="0b64e-187">This name consists of the namespace and class of the custom marshaler (`MarshalType="MyCompany.NewOldMarshaler"`).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj"><span data-ttu-id="0b64e-188">要終結的 Managed 物件。</span><span class="sxs-lookup"><span data-stu-id="0b64e-188">The managed object to be destroyed.</span></span></param>
        <summary><span data-ttu-id="0b64e-189">針對不需要的 Managed 資料執行必要的清除。</span><span class="sxs-lookup"><span data-stu-id="0b64e-189">Performs necessary cleanup of the managed data when it is no longer needed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData"><span data-ttu-id="0b64e-190">要終結的 Unmanaged 資料指標。</span><span class="sxs-lookup"><span data-stu-id="0b64e-190">A pointer to the unmanaged data to be destroyed.</span></span></param>
        <summary><span data-ttu-id="0b64e-191">針對不需要的 Unmanaged 資料執行必要的清除。</span><span class="sxs-lookup"><span data-stu-id="0b64e-191">Performs necessary cleanup of the unmanaged data when it is no longer needed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b64e-192">傳回要封送處理的原生資料 (Native Data) 的大小。</span><span class="sxs-lookup"><span data-stu-id="0b64e-192">Returns the size of the native data to be marshaled.</span></span></summary>
        <returns><span data-ttu-id="0b64e-193">原生資料的大小 (以位元組為單位)。</span><span class="sxs-lookup"><span data-stu-id="0b64e-193">The size, in bytes, of the native data.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj"><span data-ttu-id="0b64e-194">要轉換的 Managed 物件。</span><span class="sxs-lookup"><span data-stu-id="0b64e-194">The managed object to be converted.</span></span></param>
        <summary><span data-ttu-id="0b64e-195">將 Managed 資料轉換為 Unmanaged 資料。</span><span class="sxs-lookup"><span data-stu-id="0b64e-195">Converts the managed data to unmanaged data.</span></span></summary>
        <returns><span data-ttu-id="0b64e-196">Managed 物件之 COM 檢視的指標。</span><span class="sxs-lookup"><span data-stu-id="0b64e-196">A pointer to the COM view of the managed object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData"><span data-ttu-id="0b64e-197">要包裝的 Unmanaged 資料指標。</span><span class="sxs-lookup"><span data-stu-id="0b64e-197">A pointer to the unmanaged data to be wrapped.</span></span></param>
        <summary><span data-ttu-id="0b64e-198">將 Unmanaged 資料轉換為 Managed 資料。</span><span class="sxs-lookup"><span data-stu-id="0b64e-198">Converts the unmanaged data to managed data.</span></span></summary>
        <returns><span data-ttu-id="0b64e-199">代表 COM 資料之 Managed 檢視的物件。</span><span class="sxs-lookup"><span data-stu-id="0b64e-199">An object that represents the managed view of the COM data.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>