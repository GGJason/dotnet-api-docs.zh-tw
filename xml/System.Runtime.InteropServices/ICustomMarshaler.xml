<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="03ef26878dc74066eb80a36c6aa1a51c27cec8e3" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58711414" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供用來處理方法呼叫的自訂包裝函式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 封送處理器會提供舊的功能與新的介面之間的橋樑。 自訂封送處理會提供下列優點：  
  
-   它可讓用戶端應用程式都設計成使用舊的介面，也會使用實作新介面的伺服器。  
  
-   它可讓用戶端應用程式建置目的為使用新的介面，以使用實作舊介面的伺服器。  
  
 如果您有的介面所導入了不同的封送處理行為，或以不同方式來公開元件物件模型 (COM)，您可以設計自訂的封送處理器，而不是使用 interop 封送處理器。 藉由使用自訂封送處理器，您可以減少新的.NET Framework 元件與現有的 COM 元件之間的差異。  
  
 例如，假設您正在開發名為的 managed 的介面`INew`。 當這個介面會公開至 COM，透過標準 COM 可呼叫包裝函式 (CCW) 時，它會為受管理的介面具有相同的方法，並使用 interop 封送處理器內建的封送處理規則。 現在，假設已知的 COM 介面，呼叫`IOld`已提供相同的功能`INew`介面。 藉由設計自訂封送處理器，您可以提供未受管理的實作`IOld`，只會委派呼叫的 managed 實作`INew`介面。 因此，自訂封送處理器會作為 managed 和 unmanaged 介面之間的橋樑。  
  
> [!NOTE]
>  從 managed 程式碼呼叫 unmanaged 程式碼僅分派介面上時，不會叫用自訂封送處理器。  
  
## <a name="defining-the-marshaling-type"></a>定義封送處理類型  
 您可以建立自訂封送處理器之前，您必須定義要封送處理的 managed 和 unmanaged 介面。 這些介面通常會執行相同的函式，但會以不同的方式公開 managed 和 unmanaged 物件。  
  
 Managed 的編譯器會產生中繼資料，從 managed 的介面，產生的介面看起來像任何其他受管理的介面。 下列範例示範典型的介面。  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 定義 unmanaged 型別在介面定義語言 (IDL)，並使用 Microsoft 介面定義語言 (MIDL) 編譯器進行編譯。 定義在 library 陳述式中的介面，並將它指派的通用唯一識別碼 (UUID) 屬性，與介面識別碼，如下列範例所示。  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 MIDL 編譯器會產生數個輸出檔案。 如果介面定義在 Old.idl，輸出檔 Old_i.c 定義`const`變數與介面識別項 (IID) 的介面，如下列範例所示。  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 Old.h 檔案也會由 MIDL 產生。 它包含 c + + 的定義可以包含在您的 c + + 程式碼的介面。  
  
## <a name="implementing-the-icustommarshaler-interface"></a>實作 ICustomMarshaler 介面  
 您的自訂封送處理器必須實作<xref:System.Runtime.InteropServices.ICustomMarshaler>介面，以提供適當的包裝函式以執行階段。  
  
 下列 C# 程式碼會顯示所有的自訂封送處理器必須實作的基底介面。  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler>介面包含可提供轉換支援、 清理支援，以及要封送處理資料的相關資訊的方法。  
  
|作業類型|ICustomMarshaler 方法|描述|  
|-----------------------|-----------------------------|-----------------|  
|（從原生至 managed 程式碼） 轉換|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|將原生資料指標封送到受管理的物件。 這個方法傳回的自訂執行階段可呼叫包裝函式 (RCW) 可以封送處理傳遞做為引數的 unmanaged 的介面。 封送處理器應傳回自訂 RCW，該型別的執行的個體。|  
|（從原生至 managed 程式碼） 轉換|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|將 managed 的物件封送至原生資料的指標。 這個方法傳回的自訂 COM 可呼叫包裝函式 (CCW) 可以封送處理 managed 的介面做為引數傳遞。 封送處理器應傳回自訂 CCW，該型別的執行的個體。|  
|清除 （的原生程式碼）|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|可讓以清除所傳回之原生資料 (CCW) 封送處理器<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>方法。|  
|清除 （的 managed 程式碼）|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|可讓以清除所傳回的受管理資料 (RCW)，封送處理器<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>方法。|  
|資訊 （原生程式碼）|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|傳回要封送處理之 unmanaged 資料的大小。|  
  
### <a name="conversion"></a>轉換  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 將原生資料指標封送到受管理的物件。 這個方法傳回的自訂執行階段可呼叫包裝函式 (RCW) 可以封送處理傳遞做為引數的 unmanaged 的介面。 封送處理器應傳回自訂 RCW，該型別的執行的個體。  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 將 managed 的物件封送至原生資料的指標。 這個方法傳回的自訂 COM 可呼叫包裝函式 (CCW) 可以封送處理 managed 的介面做為引數傳遞。 封送處理器應傳回自訂 CCW，該型別的執行的個體。  
  
### <a name="cleanup"></a>清除  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 可讓以清除所傳回之原生資料 (CCW) 封送處理器<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>方法。  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 可讓以清除所傳回的受管理資料 (RCW)，封送處理器<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>方法。  
  
### <a name="size-information"></a>大小的資訊  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 傳回要封送處理之 unmanaged 資料的大小。  
  
## <a name="implementing-the-getinstance-method"></a>實作 GetInstance 方法  
 除了實作<xref:System.Runtime.InteropServices.ICustomMarshaler>介面，必須實作自訂封送處理器`static`方法呼叫`GetInstance`可接受<xref:System.String>做為參數且傳回型別<xref:System.Runtime.InteropServices.ICustomMarshaler>。 這`static`方法由 common language runtime 的 COM interop 層級的自訂封送處理器執行個體具現化呼叫。 傳遞至字串`GetInstance`方法可用來自訂傳回自訂封送處理器的 cookie。  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>套用 MarshalAsAttribute  
 若要使用自訂封送處理器，您必須套用<xref:System.Runtime.InteropServices.MarshalAsAttribute>屬性的參數或已封送處理的欄位。  
  
 您也必須傳遞<xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType>列舉值，以<xref:System.Runtime.InteropServices.MarshalAsAttribute>建構函式。 此外，您必須指定<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>欄位使用具名參數的下列其中之一：  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> （必要）：自訂封送處理器的組件限定名稱。 此名稱應包含的命名空間和類別的自訂封送處理器。 如果它用在組件中未定義自訂封送處理器，您必須指定它定義所在的組件名稱。  
  
    > [!NOTE]
    >  您可以使用<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>欄位，而不是<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>欄位。 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> 採用型別所指定的工作變得更容易。  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> （選擇性）：Cookie 傳遞給自訂封送處理器。 您可以使用 cookie 來提供封送處理器的其他資訊。 例如，如果相同的封送處理器會用來提供包裝函式的數目，cookie 會識別特定的包裝函式。 Cookie 會傳遞至`GetInstance`封送處理器的方法。  
  
 <xref:System.Runtime.InteropServices.MarshalAsAttribute>屬性識別的自訂封送處理器，因此它可以啟用適當的包裝函式。 Common language runtime 的 interop 服務接著會檢查屬性，並自訂封送處理器第一次會建立要封送處理引數 （參數或欄位） 的需求。  
  
 執行階段接著會呼叫<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>和<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>啟用正確的包裝函式來處理呼叫的自訂封送處理器上的方法。  
  
## <a name="using-a-custom-marshaler"></a>使用自訂封送處理器  
 完成自訂封送處理器時，您可以使用它的自訂包裝函式的特定型別。 下列範例顯示定義`IUserData`managed 的介面：  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 在下列範例中，`IUserData`介面會使用`NewOldMarshaler`若要啟用將未受管理的用戶端應用程式的自訂封送處理器`IOld`介面`DoSomeStuff`方法。 受管理的描述`DoSomeStuff`方法會採用`INew`介面，如上述範例中中, 所示，而未受管理的版本`DoSomeStuff`採用`IOld`介面指標，如下列範例所示。  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 類型程式庫所匯出的 managed 的定義產生`IUserData`產生的未受管理的定義，而不是標準的定義範例所示。 <xref:System.Runtime.InteropServices.MarshalAsAttribute>套用至屬性`INew`引數中的 managed 定義`DoSomeStuff`方法表示的引數使用自訂封送處理器，如下列範例所示。  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 在上一個範例中，第一個參數提供給<xref:System.Runtime.InteropServices.MarshalAsAttribute>屬性是<xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType>列舉值`UnmanagedType.CustomMarshaler`。  
  
 第二個參數是<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>欄位，以提供自訂封送處理器的組件限定名稱。 此名稱所組成的命名空間和類別的自訂封送處理器 (`MarshalType="MyCompany.NewOldMarshaler"`)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">要終結的 Managed 物件。</param>
        <summary>針對不需要的 Managed 資料執行必要的清除。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">要終結的 Unmanaged 資料指標。</param>
        <summary>針對不需要的 Unmanaged 資料執行必要的清除。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回要封送處理的原生資料 (Native Data) 的大小。</summary>
        <returns>原生資料的大小 (以位元組為單位)。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">要轉換的 Managed 物件。</param>
        <summary>將 Managed 資料轉換為 Unmanaged 資料。</summary>
        <returns>Managed 物件之 COM 檢視的指標。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">要包裝的 Unmanaged 資料指標。</param>
        <summary>將 Unmanaged 資料轉換為 Managed 資料。</summary>
        <returns>代表 COM 資料之 Managed 檢視的物件。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>