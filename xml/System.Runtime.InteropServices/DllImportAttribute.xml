<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DllImportAttribute.xml" source-language="en-US" target-language="zh-TW">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac523e3cd02f7b0f8ccc396f11c5abc9af18628f6b7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23e3cd02f7b0f8ccc396f11c5abc9af18628f6b7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</source>
          <target state="translated">表示由 Unmanaged 動態連結程式庫 (DLL) 公開做為靜態進入點的屬性化方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You can apply this attribute to methods.</source>
          <target state="translated">您可以將此屬性套用至方法。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute provides the information needed to call a function exported from an unmanaged DLL.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>屬性會提供呼叫從 unmanaged 的 DLL 匯出的函式所需的資訊。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>As a minimum requirement, you must supply the name of the DLL containing the entry point.</source>
          <target state="translated">最小需求，您必須提供包含進入點 DLL 的名稱。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the <ph id="ph1">`Declare`</ph> statement.</source>
          <target state="translated">這個屬性直接套用到 C# 和 c + + 方法的定義;不過，Visual Basic 編譯器會發出此屬性使用時<ph id="ph1">`Declare`</ph>陳述式。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>For complex method definitions that include <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>, <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>, or <ph id="ph6">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields, you apply this attribute directly to Visual Basic method definitions.</source>
          <target state="translated">針對複雜的方法定義，包括<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>， <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>， <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>， <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>， <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>，或<ph id="ph6">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>欄位，這個屬性直接套用到 Visual Basic 方法定義。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> JScript does not support this attribute.</source>
          <target state="translated"><bpt id="p1">**</bpt>請注意<ept id="p1">**</ept>JScript 不支援這個屬性。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</source>
          <target state="translated">若要從 JScript 程式存取 unmanaged 的 API 方法，您可以使用 C# 或 Visual Basic 包裝函式類別。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>For additional information about using the platform invoke service to access functions in unmanaged DLLs, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</source>
          <target state="translated">如需有關使用平台叫用服務，以存取 unmanaged Dll 中的函式，請參閱<bpt id="p1">[</bpt>使用 Unmanaged DLL 函式<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> does not support marshaling of generic types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>不支援封送處理泛型類型。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>屬性匯入 Win32<ph id="ph2">`MessageBox`</ph>函式。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The code example then calls the imported method.</source>
          <target state="translated">然後程式碼範例會呼叫匯入的方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The name of the DLL that contains the unmanaged method.</source>
          <target state="translated">包含 Unmanaged 方法的 DLL 名稱。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>This can include an assembly display name, if the DLL is included in an assembly.</source>
          <target state="translated">如果 DLL 包含在組件中，這個名稱可能會包括組件顯示名稱。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.DllImportAttribute" /&gt;</ph> class with the name of the DLL containing the method to import.</source>
          <target state="translated">使用含有要匯入方法的 DLL 名稱，來初始化 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.DllImportAttribute" /&gt;</ph> 類別的新執行個體。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>If an unmanaged DLL file is included in an assembly, for example, by using the linker or the <ph id="ph1">`/linkresource`</ph> compiler option, you can specify the assembly display name as part of <ph id="ph2">`dllName`</ph>.</source>
          <target state="translated">如果 unmanaged 的 DLL 檔案中包含組件，例如，使用連結器或<ph id="ph1">`/linkresource`</ph>編譯器選項，您可以指定組件顯示名稱的一部分<ph id="ph2">`dllName`</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>For example, if an unmanaged DLL named <ph id="ph1">`unmanaged.dll`</ph> is included in a managed assembly named <ph id="ph2">`MyAssembly`</ph>, the attribute might be specified as shown in the following code.</source>
          <target state="translated">例如，如果名為 unmanaged DLL<ph id="ph1">`unmanaged.dll`</ph>隨附於名為 managed 組件<ph id="ph2">`MyAssembly`</ph>，可能會指定屬性，如下列程式碼所示。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>屬性匯入 Win32<ph id="ph2">`MessageBox`</ph>函式。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The code example then calls the imported method.</source>
          <target state="translated">然後程式碼範例會呼叫匯入的方法。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</source>
          <target state="translated">將 Unicode 字元轉換成 ANSI 字元時，啟用或停用最適合對應行為。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>If <ph id="ph1">`true`</ph>, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</source>
          <target state="translated">如果<ph id="ph1">`true`</ph>、 自動調整已啟用對應的行為; 否則自動調整對應已停用。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is <ph id="ph2">`true`</ph> by default.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>欄位是<ph id="ph2">`true`</ph>預設。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Settings for this field override the any level settings for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType&gt;</ph> attribute.</source>
          <target state="translated">這個欄位的設定會覆寫任何層級設定<ph id="ph1">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType&gt;</ph>屬性。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
          <target state="translated">Common language runtime 將轉換為任何 managed 傳遞至 unmanaged 的方法執行時在 Windows 98 或 Windows me 上的 Unicode 字元的 ANSI 字元</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
          <target state="translated">自動調整的對應可讓提供關閉比對的字元完全相符項目存在時，interop 封送處理器。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
          <target state="translated">例如，封送處理器著作權將 Unicode 字元轉換為 'c' 之 unmanaged 方法接受 ANSI 字元。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
          <target state="translated">某些字元缺少的自動調整的表示法。這些字元稱為無法對應。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
          <target state="translated">無法對應的字元通常會轉換成預設值 '？ 'ANSI 字元。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
          <target state="translated">特定的 Unicode 字元轉換成危險的字元，例如反斜線 '<ph id="ph1">\\</ph>' 字元，可以不小心變更路徑。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
          <target state="translated">藉由設定<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>欄位設為<ph id="ph2">`true`</ph>，您可以藉由擲回例外狀況發出信號給呼叫者無法對應的字元是否存在。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
          <target state="translated">您無法變更所提供的預設值<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>和<ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>欄位時將傳遞 managed 的陣列的項目 ANSI 字元或 LPSTRs 未受管理的安全陣列。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
          <target state="translated">一定會啟用自動調整的對應並擲回任何例外狀況。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Be aware that this combination can compromise your security model.</source>
          <target state="translated">請注意這種組合可能會危害您的安全性模型。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">在某些情況下，使用 Visual Basic 開發人員<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>，而不是<ph id="ph2">`Declare`</ph>陳述式，以便在 managed 程式碼中定義的 DLL 函式。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>欄位是一個例子。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</source>
          <target state="translated">下列範例示範如何套用嚴格藉由指定 ANSI 字元集、 停用自動調整的對應行為，並擲回例外狀況未對應 Unicode 字元的字元對應安全性平台叫用的方法定義。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>Indicates the calling convention of an entry point.</source>
          <target state="translated">指示進入點的呼叫慣例。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>You set this field to one of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> enumeration members.</source>
          <target state="translated">您將此欄位設定為其中一個<ph id="ph1">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph>列舉成員。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>The default value for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>, which in turn defaults to <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph> convention.</source>
          <target state="translated">預設值為<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>欄位是<ph id="ph2">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>，因而會預設至<ph id="ph3">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph>慣例。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>For more information, see Calling Convention in the MSDN library.</source>
          <target state="translated">如需詳細資訊，請參閱 MSDN library 中的呼叫慣例。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">在某些情況下，使用 Visual Basic 開發人員<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>，而不是<ph id="ph2">`Declare`</ph>陳述式，以便在 managed 程式碼中定義的 DLL 函式。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>欄位是一個例子。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>System.Runtime.InteropServices.DllImportAttribute#1</source>
          <target state="translated">System.Runtime.InteropServices.DllImportAttribute#1</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>Indicates how to marshal string parameters to the method and controls name mangling.</source>
          <target state="translated">指示如何將字串參數封送處理到方法和控制項函式名稱改變 (Name Mangling)。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>Use this field with a member of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</source>
          <target state="translated">使用此欄位的成員<ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph>列舉以指定的字串參數的封送處理行為，並指定要叫用 （指定的確切名稱或名稱結尾"A"或"W"） 的進入點名稱。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The default enumeration member for C# and Visual Basic is <ph id="ph1">`CharSet.Ansi`</ph> and the default enumeration member for C++ is <ph id="ph2">`CharSet.None`</ph>, which is equivalent to <ph id="ph3">`CharSet.Ansi`</ph>.</source>
          <target state="translated">預設列舉成員，C# 和 Visual Basic 是<ph id="ph1">`CharSet.Ansi`</ph>和預設列舉成員，c + + 是<ph id="ph2">`CharSet.None`</ph>，這相當於<ph id="ph3">`CharSet.Ansi`</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>In Visual Basic, you use the <ph id="ph1">`Declare`</ph> statement to specify the <ph id="ph2">`CharSet`</ph> field.</source>
          <target state="translated">在 Visual Basic 中，您會使用<ph id="ph1">`Declare`</ph>陳述式來指定<ph id="ph2">`CharSet`</ph>欄位。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field influences the behavior of the <ph id="ph2">`CharSet`</ph> field in determining which entry-point name to invoke.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>欄位會影響行為的<ph id="ph2">`CharSet`</ph>欄位在決定要叫用哪一個進入點名稱。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>For a detailed description and examples of the string marshaling and name matching behavior associated with the <ph id="ph1">`CharSet`</ph> field, see <bpt id="p1">[</bpt>Specifying a Character Set<ept id="p1">](~/docs/framework/interop/specifying-a-character-set.md)</ept>.</source>
          <target state="translated">詳細的描述和封送處理字串和名稱符合相關聯的行為的範例<ph id="ph1">`CharSet`</ph>欄位中，請參閱<bpt id="p1">[</bpt>指定字元集<ept id="p1">](~/docs/framework/interop/specifying-a-character-set.md)</ept>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>屬性匯入 Win32<ph id="ph2">`MessageBox`</ph>函式。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The code example then calls the imported method.</source>
          <target state="translated">然後程式碼範例會呼叫匯入的方法。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>Indicates the name or ordinal of the DLL entry point to be called.</source>
          <target state="translated">指示要呼叫的 DLL 進入點 (Entry Point) 的名稱或序數。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</source>
          <target state="translated">您可以藉由提供表示包含進入點的 dll 名稱的字串中指定的進入點名稱，或您可以根據其序數識別進入點。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>Ordinals are prefixed with the # sign, for example, #1.</source>
          <target state="translated">序數會加上 # 符號，例如 #1。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>If you omit this field, the common language runtime uses the name of the.NET method marked with the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>.</source>
          <target state="translated">如果您省略此欄位時，common language runtime 會使用標示為.net 方法的名稱<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>For additional information, see <bpt id="p1">[</bpt>Identifying Functions in DLLs<ept id="p1">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>.</source>
          <target state="translated">如需詳細資訊，請參閱<bpt id="p1">[</bpt>識別 Dll 中的函式<ept id="p1">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>For examples showing how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> field, see <bpt id="p1">[</bpt>Specifying an Entry Point<ept id="p1">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>.</source>
          <target state="translated">如需範例示範如何使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph>欄位中，請參閱<bpt id="p1">[</bpt>指定進入點<ept id="p1">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">下列程式碼範例示範如何使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>屬性匯入 Win32<ph id="ph2">`MessageBox`</ph>函式。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> property to specify the function to import and then changes the name to <ph id="ph2">`MyNewMessageBoxMethod`</ph>.</source>
          <target state="translated">此程式碼範例會使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph>屬性來指定要匯入的函式，然後再變更名稱以<ph id="ph2">`MyNewMessageBoxMethod`</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Controls whether the <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /&gt;</ph> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</source>
          <target state="translated">控制 <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /&gt;</ph> 欄位是否會導致 Common Language Runtime 搜尋 Unmanaged DLL 以取得不是指定名稱的進入點名稱。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>If <ph id="ph1">`false`</ph>, the entry point name appended with the letter A is invoked when the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field is set to <ph id="ph3">`CharSet.Ansi`</ph>, and the entry-point name appended with the letter W is invoked when the <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field is set to the <ph id="ph5">`CharSet.Unicode`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`false`</ph>，加上字母 A 的進入點名稱會叫用時<ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph>欄位設定為<ph id="ph3">`CharSet.Ansi`</ph>，並叫用進入點名稱加上字母 W 時<ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph>欄位設定為<ph id="ph5">`CharSet.Unicode`</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Typically, managed compilers set this field.</source>
          <target state="translated">一般來說，managed 的編譯器會將此欄位。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>The following table shows the relationship between the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> fields, based on default values imposed by the programming language.</source>
          <target state="translated">下表顯示之間的關聯性<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph>和<ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>欄位，根據程式語言所加諸的預設值。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>You can override the default setting, but do so with caution.</source>
          <target state="translated">您可以覆寫預設的設定，但這樣做時多加注意。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Language</source>
          <target state="translated">語言</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ANSI</source>
          <target state="translated">ANSI</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Unicode</source>
          <target state="translated">Unicode</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Auto</source>
          <target state="translated">自動</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Visual Basic</source>
          <target state="translated">Visual Basic</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=True</source>
          <target state="translated">ExactSpelling:=True</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=True</source>
          <target state="translated">ExactSpelling:=True</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=False</source>
          <target state="translated">ExactSpelling:=False</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>C#</source>
          <target state="translated">C#</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>C++</source>
          <target state="translated">C++</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">在某些情況下，使用 Visual Basic 開發人員<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>，而不是使用<ph id="ph2">`Declare`</ph>陳述式，以便在 managed 程式碼中定義的 DLL 函式。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>欄位是一個例子。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Indicates whether unmanaged methods that have <ph id="ph1">&lt;see langword="HRESULT" /&gt;</ph> or <ph id="ph2">&lt;see langword="retval" /&gt;</ph> return values are directly translated or whether <ph id="ph3">&lt;see langword="HRESULT" /&gt;</ph> or <ph id="ph4">&lt;see langword="retval" /&gt;</ph> return values are automatically converted to exceptions.</source>
          <target state="translated">指出是否直接轉譯具有 <ph id="ph1">&lt;see langword="HRESULT" /&gt;</ph> 或 <ph id="ph2">&lt;see langword="retval" /&gt;</ph> 傳回值的 Unmanaged 方法，或者是否將 <ph id="ph3">&lt;see langword="HRESULT" /&gt;</ph> 或 <ph id="ph4">&lt;see langword="retval" /&gt;</ph> 傳回值自動轉換成例外狀況。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`true`</ph> to directly translate unmanaged signatures with <ph id="ph3">`HRESULT`</ph> or <ph id="ph4">`retval`</ph> values; set it to <ph id="ph5">`false`</ph> to automatically convert <ph id="ph6">`HRESULT`</ph> or <ph id="ph7">`retval`</ph> values to exceptions.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>欄位設為<ph id="ph2">`true`</ph>直接轉譯 unmanaged 簽章<ph id="ph3">`HRESULT`</ph>或<ph id="ph4">`retval`</ph>值; 將它設定為<ph id="ph5">`false`</ph>可自動轉換<ph id="ph6">`HRESULT`</ph>或<ph id="ph7">`retval`</ph>例外狀況的值。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>By default, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">根據預設，<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>欄位是<ph id="ph2">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When <ph id="ph1">`true`</ph>, the resulting method signature returns an integer value that contains the <ph id="ph2">`HRESULT`</ph> value.</source>
          <target state="translated">當<ph id="ph1">`true`</ph>，所產生的方法簽章傳回整數值，其中包含<ph id="ph2">`HRESULT`</ph>值。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>In this case, you must manually inspect the return value and respond accordingly in your application.</source>
          <target state="translated">在此情況下，您必須以手動方式檢查傳回的值並據以回應應用程式中。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When you set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`false`</ph>, the resulting method signature contains a void return type instead of an integer (<ph id="ph3">`HRESULT`</ph>) return type.</source>
          <target state="translated">當您將<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>欄位設為<ph id="ph2">`false`</ph>，所產生的方法簽章包含 void 的傳回型別，而非整數 (<ph id="ph3">`HRESULT`</ph>) 傳回型別。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When the unmanaged method produces an <ph id="ph1">`HRESULT`</ph>, the runtime automatically ignores a return value of <ph id="ph2">`S_OK`</ph> (or 0) and does not throw an exception.</source>
          <target state="translated">當 unmanaged 的方法會產生<ph id="ph1">`HRESULT`</ph>，執行階段自動忽略傳回值為<ph id="ph2">`S_OK`</ph>（或 0） 並不會擲回例外狀況。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>For <ph id="ph1">`HRESULT`</ph>s other than <ph id="ph2">`S_OK`</ph>, the runtime automatically throws an exception that corresponds to the <ph id="ph3">`HRESULT`</ph>.</source>
          <target state="translated">如<ph id="ph1">`HRESULT`</ph>以外 s <ph id="ph2">`S_OK`</ph>，執行階段自動會擲回的例外狀況對應至<ph id="ph3">`HRESULT`</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Note that the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute only performs this conversion to methods that return an <ph id="ph2">`HRESULT`</ph>.</source>
          <target state="translated">請注意，<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>屬性只會執行這項轉換方法的傳回<ph id="ph2">`HRESULT`</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>You might decide to change the default error reporting behavior from <ph id="ph1">`HRESULT`</ph>s to exceptions in cases where exceptions better fit the error reporting structure of your application.</source>
          <target state="translated">您可能決定要變更預設的錯誤報告行為從<ph id="ph1">`HRESULT`</ph>s 例外狀況更適合的錯誤報告您的應用程式的結構案例中的例外狀況。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>This field is similar to the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>; however, in contrast to the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field, the default value for the attribute is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">這個欄位是類似於<ph id="ph1">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>; 不過，相對於<ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>欄位，預設值的屬性是<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">在某些情況下，使用 Visual Basic 開發人員<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>，而不是使用<ph id="ph2">`Declare`</ph>陳述式，以便在 managed 程式碼中定義的 DLL 函式。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>欄位是一個例子。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> to import the unmanaged <ph id="ph2">`SHAutoComplete`</ph> function once with the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field set to <ph id="ph4">`true`</ph> and again with the <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field set to <ph id="ph6">`false`</ph>.</source>
          <target state="translated">下列程式碼範例使用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>匯入 unmanaged<ph id="ph2">`SHAutoComplete`</ph>函式一次與<ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>欄位設定為<ph id="ph4">`true`</ph>再<ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>欄位設定為<ph id="ph6">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>This code example causes the <ph id="ph1">`SHAutoComplete`</ph> function to generate any errors with an exception one time and an <ph id="ph2">`HRESULT`</ph> the next.</source>
          <target state="translated">下列程式碼範例會導致<ph id="ph1">`SHAutoComplete`</ph>函式來產生任何錯誤，一次發生例外狀況和<ph id="ph2">`HRESULT`</ph>下一步。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>Indicates whether the callee calls the <ph id="ph1">&lt;see langword="SetLastError" /&gt;</ph> Win32 API function before returning from the attributed method.</source>
          <target state="translated">指示自屬性方法傳回之前，被呼叫端是否呼叫 <ph id="ph1">&lt;see langword="SetLastError" /&gt;</ph> Win32 應用程式開發介面函式。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source><ph id="ph1">`true`</ph> to indicate that the callee will call <ph id="ph2">`SetLastError`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`true`</ph> 表示被呼叫端會呼叫<ph id="ph2">`SetLastError`</ph>，否則<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">預設值為 <ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>The runtime marshaler calls <ph id="ph1">`GetLastError`</ph> and caches the value returned to prevent it from being overwritten by other API calls.</source>
          <target state="translated">執行階段封送處理器呼叫<ph id="ph1">`GetLastError`</ph>和快取以避免遭到覆寫其他應用程式開發介面呼叫所傳回的值。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>You can retrieve the error code by calling <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>.</source>
          <target state="translated">您可以藉由呼叫擷取錯誤碼<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">在某些情況下，使用 Visual Basic 開發人員<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>，而不是使用<ph id="ph2">`Declare`</ph>陳述式，以便在 managed 程式碼中定義的 DLL 函式。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>欄位是一個例子。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</source>
          <target state="translated">在無法對應的 Unicode 字元轉換為 ANSI "?" 字元時，啟用或停用例外狀況的擲回。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source><ph id="ph1">`true`</ph> to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; <ph id="ph2">`false`</ph> to indicate that the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is disabled.</source>
          <target state="translated"><ph id="ph1">`true`</ph> 表示例外狀況擲回 interop 封送處理器會將轉換無法對應的字元; 每次<ph id="ph2">`false`</ph>表示<ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>則會停用。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>This field is <ph id="ph1">`false`</ph> by default.</source>
          <target state="translated">這個欄位是<ph id="ph1">`false`</ph>預設。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
          <target state="translated">Common language runtime 將轉換為任何 managed 傳遞至 unmanaged 的方法執行時在 Windows 98 或 Windows me 上的 Unicode 字元的 ANSI 字元</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
          <target state="translated">自動調整的對應可讓提供關閉比對的字元完全相符項目存在時，interop 封送處理器。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
          <target state="translated">例如，封送處理器著作權將 Unicode 字元轉換為 'c' 之 unmanaged 方法接受 ANSI 字元。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
          <target state="translated">某些字元缺少的自動調整的表示法。這些字元稱為無法對應。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
          <target state="translated">無法對應的字元通常會轉換成預設值 '？ 'ANSI 字元。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
          <target state="translated">特定的 Unicode 字元轉換成危險的字元，例如反斜線 '<ph id="ph1">\\</ph>' 字元，可以不小心變更路徑。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
          <target state="translated">藉由設定<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>欄位設為<ph id="ph2">`true`</ph>，您可以藉由擲回例外狀況發出信號給呼叫者無法對應的字元是否存在。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
          <target state="translated">您無法變更所提供的預設值<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>和<ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>欄位時將傳遞 managed 的陣列的項目 ANSI 字元或 LPSTRs 未受管理的安全陣列。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
          <target state="translated">一定會啟用自動調整的對應並擲回任何例外狀況。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Be aware that this combination can compromise your security model.</source>
          <target state="translated">請注意這種組合可能會危害您的安全性模型。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> to define a DLL function in managed code, instead of using the <ph id="ph2">`Declare`</ph> statement.</source>
          <target state="translated">在某些情況下，使用 Visual Basic 開發人員<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>DLL 函式定義在 managed 程式碼，而不是使用<ph id="ph2">`Declare`</ph>陳述式。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is one of those cases.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph>欄位是一個例子。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</source>
          <target state="translated">下列範例示範如何套用嚴格藉由指定 ANSI 字元集、 停用自動調整的對應行為，並擲回例外狀況未對應 Unicode 字元的字元對應安全性平台叫用的方法定義。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>Gets the name of the DLL file that contains the entry point.</source>
          <target state="translated">取得包含進入點的 DLL 檔案名稱。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>The name of the DLL file that contains the entry point.</source>
          <target state="translated">包含進入點的 DLL 檔案名稱。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>You can provide a full or relative path.</source>
          <target state="translated">您可以提供完整或相對路徑。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</source>
          <target state="translated">如果您不提供任何路徑，DLL 必須是目前路徑中在執行階段，除非以其他方式載入 DLL。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</source>
          <target state="translated">請注意，不過，使用完整的路徑，可能導致誤差如果移動 DLL。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>