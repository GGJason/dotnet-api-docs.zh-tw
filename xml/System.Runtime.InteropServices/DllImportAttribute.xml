<Type Name="DllImportAttribute" FullName="System.Runtime.InteropServices.DllImportAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f4469ed6eb0893368ed6b1c6583d42ccb3162bb0" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37470226" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DllImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DllImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.DllImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DllImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DllImportAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type DllImportAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="43e2b-101">指出由 Unmanaged 動態連結程式庫 (DLL) 公開做為靜態進入點的屬性化方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="43e2b-101">Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43e2b-102">您可以將此屬性套用至方法中。</span><span class="sxs-lookup"><span data-stu-id="43e2b-102">You can apply this attribute to methods.</span></span>  
  
 <span data-ttu-id="43e2b-103"><xref:System.Runtime.InteropServices.DllImportAttribute>屬性會提供呼叫從 unmanaged DLL 匯出的函式所需的資訊。</span><span class="sxs-lookup"><span data-stu-id="43e2b-103">The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL.</span></span> <span data-ttu-id="43e2b-104">最小需求，您必須提供包含進入點的 dll 名稱。</span><span class="sxs-lookup"><span data-stu-id="43e2b-104">As a minimum requirement, you must supply the name of the DLL containing the entry point.</span></span>  
  
 <span data-ttu-id="43e2b-105">此屬性直接套用到 C# 和 c + + 方法的定義;不過，Visual Basic 編譯器會發出這個屬性使用時`Declare`陳述式。</span><span class="sxs-lookup"><span data-stu-id="43e2b-105">You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement.</span></span> <span data-ttu-id="43e2b-106">如需包含複雜的方法定義<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>， <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>， <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>， <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>， <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>，或<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位，這個屬性直接套用到 Visual Basic 方法定義。</span><span class="sxs-lookup"><span data-stu-id="43e2b-106">For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.</span></span>  
  
 <span data-ttu-id="43e2b-107">**請注意**JScript 不支援這個屬性。</span><span class="sxs-lookup"><span data-stu-id="43e2b-107">**Note** JScript does not support this attribute.</span></span> <span data-ttu-id="43e2b-108">若要從 JScript 程式存取未受管理的 API 方法，您可以使用 C# 或 Visual Basic 包裝函式類別。</span><span class="sxs-lookup"><span data-stu-id="43e2b-108">You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</span></span>  
  
 <span data-ttu-id="43e2b-109">如需有關使用平台叫用服務來存取 unmanaged Dll 中的函式，請參閱 <<c0> [ 使用 Unmanaged DLL 函式](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="43e2b-109">For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43e2b-110"><xref:System.Runtime.InteropServices.DllImportAttribute>不支援封送處理泛型型別。</span><span class="sxs-lookup"><span data-stu-id="43e2b-110">The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43e2b-111">下列程式碼範例示範如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>屬性，以匯入 Win32`MessageBox`函式。</span><span class="sxs-lookup"><span data-stu-id="43e2b-111">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="43e2b-112">程式碼範例接著會呼叫匯入的方法。</span><span class="sxs-lookup"><span data-stu-id="43e2b-112">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DllImportAttribute (string dllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dllName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DllImportAttribute(System::String ^ dllName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.DllImportAttribute : string -&gt; System.Runtime.InteropServices.DllImportAttribute" Usage="new System.Runtime.InteropServices.DllImportAttribute dllName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dllName">
          <span data-ttu-id="43e2b-113">包含 Unmanaged 方法的 DLL 名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-113">The name of the DLL that contains the unmanaged method.</span>
          </span>
          <span data-ttu-id="43e2b-114">如果 DLL 包含在組件中，這個名稱可能會包括組件顯示名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-114">This can include an assembly display name, if the DLL is included in an assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43e2b-115">使用含有要匯入方法的 DLL 名稱，來初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-115">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43e2b-116">如果 unmanaged 的 DLL 檔案中包含組件，例如，藉由使用連結器或`/linkresource`編譯器選項時，您可以指定組件顯示名稱的一部分`dllName`。</span><span class="sxs-lookup"><span data-stu-id="43e2b-116">If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`.</span></span> <span data-ttu-id="43e2b-117">例如，如果名為 unmanaged DLL`unmanaged.dll`包含在名為 managed 組件`MyAssembly`，可能會指定屬性，如下列程式碼所示。</span><span class="sxs-lookup"><span data-stu-id="43e2b-117">For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="43e2b-118">下列程式碼範例示範如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>屬性，以匯入 Win32`MessageBox`函式。</span><span class="sxs-lookup"><span data-stu-id="43e2b-118">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="43e2b-119">程式碼範例接著會呼叫匯入的方法。</span><span class="sxs-lookup"><span data-stu-id="43e2b-119">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BestFitMapping">
      <MemberSignature Language="C#" Value="public bool BestFitMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public bool BestFitMapping" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberSignature Language="VB.NET" Value="Public BestFitMapping As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool BestFitMapping;" />
      <MemberSignature Language="F#" Value="val mutable BestFitMapping : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43e2b-120">將 Unicode 字元轉換成 ANSI 字元時，啟用或停用最適合對應行為。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-120">Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43e2b-121">如果`true`、 最適合對應行為啟用; 否則自動調整對應已停用。</span><span class="sxs-lookup"><span data-stu-id="43e2b-121">If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</span></span> <span data-ttu-id="43e2b-122"><xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>欄位是`true`預設。</span><span class="sxs-lookup"><span data-stu-id="43e2b-122">The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default.</span></span> <span data-ttu-id="43e2b-123">此欄位的設定會覆寫的任何層級設定<xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType>屬性。</span><span class="sxs-lookup"><span data-stu-id="43e2b-123">Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> attribute.</span></span>  
  
 <span data-ttu-id="43e2b-124">Common language runtime 會將任何受管理傳遞給 unmanaged 的方法執行，在 Windows 98 或 Windows me 上的 Unicode 字元的 ANSI 字元</span><span class="sxs-lookup"><span data-stu-id="43e2b-124">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="43e2b-125">自動調整的對應可讓提供關閉比對的字元完全相符項目存在時，interop 封送處理器。</span><span class="sxs-lookup"><span data-stu-id="43e2b-125">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="43e2b-126">比方說，封送處理器著作權將 Unicode 字元轉換為 'c' 接受 ANSI 字元的 unmanaged 方法。</span><span class="sxs-lookup"><span data-stu-id="43e2b-126">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="43e2b-127">某些字元缺少的自動調整的表示法;這些字元稱為無法對應。</span><span class="sxs-lookup"><span data-stu-id="43e2b-127">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="43e2b-128">無法對應的字元通常會轉換成預設值 '？ 'ANSI 字元。</span><span class="sxs-lookup"><span data-stu-id="43e2b-128">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="43e2b-129">某些 Unicode 字元都轉換成危險的字元，例如反斜線 '\\' 字元，可以不小心變更路徑。</span><span class="sxs-lookup"><span data-stu-id="43e2b-129">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="43e2b-130">藉由設定<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位設為`true`，您可以藉由擲回例外狀況通知呼叫端無法對應的字元是否存在。</span><span class="sxs-lookup"><span data-stu-id="43e2b-130">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="43e2b-131">您無法變更所提供的預設值<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>和<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位傳遞 managed 的陣列的項目不是 ANSI 字元就 LPSTRs 到未受管理的安全陣列。</span><span class="sxs-lookup"><span data-stu-id="43e2b-131">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="43e2b-132">永遠啟用自動調整的對應，而且會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="43e2b-132">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="43e2b-133">請注意這種組合可能會危害您的安全性模型。</span><span class="sxs-lookup"><span data-stu-id="43e2b-133">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43e2b-134">在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是`Declare`陳述式，以定義在 managed 程式碼的 DLL 函式。</span><span class="sxs-lookup"><span data-stu-id="43e2b-134">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="43e2b-135">設定<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>欄位是其中一種情況。</span><span class="sxs-lookup"><span data-stu-id="43e2b-135">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is one of those cases.</span></span> <span data-ttu-id="43e2b-136">下列範例示範如何將套用最精確指定 ANSI 字元集、 停用最適合的對應行為，並擲回例外狀況未對應的 Unicode 字元的字元對應安全性平台叫用的方法定義。</span><span class="sxs-lookup"><span data-stu-id="43e2b-136">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public CallingConvention As CallingConvention " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CallingConvention CallingConvention;" />
      <MemberSignature Language="F#" Value="val mutable CallingConvention : System.Runtime.InteropServices.CallingConvention" Usage="System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CallingConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43e2b-137">指示進入點的呼叫慣例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-137">Indicates the calling convention of an entry point.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43e2b-138">您將此欄位設定為其中一個<xref:System.Runtime.InteropServices.CallingConvention>列舉型別成員。</span><span class="sxs-lookup"><span data-stu-id="43e2b-138">You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members.</span></span> <span data-ttu-id="43e2b-139">預設值<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>欄位是<xref:System.Runtime.InteropServices.CallingConvention.Winapi>，因而會預設以<xref:System.Runtime.InteropServices.CallingConvention.StdCall>慣例。</span><span class="sxs-lookup"><span data-stu-id="43e2b-139">The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.</span></span>  
  
 <span data-ttu-id="43e2b-140">如需詳細資訊，請參閱 MSDN library 中的呼叫慣例。</span><span class="sxs-lookup"><span data-stu-id="43e2b-140">For more information, see Calling Convention in the MSDN library.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43e2b-141">在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是`Declare`陳述式，以定義在 managed 程式碼的 DLL 函式。</span><span class="sxs-lookup"><span data-stu-id="43e2b-141">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="43e2b-142">設定<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>欄位是其中一種情況。</span><span class="sxs-lookup"><span data-stu-id="43e2b-142">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is one of those cases.</span></span>  
  
 <span data-ttu-id="43e2b-143">System.Runtime.InteropServices.DllImportAttribute#1</span><span class="sxs-lookup"><span data-stu-id="43e2b-143">System.Runtime.InteropServices.DllImportAttribute#1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CallingConvention" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43e2b-144">指示如何將字串參數封送處理到方法和控制項函式名稱改變 (Name Mangling)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-144">Indicates how to marshal string parameters to the method and controls name mangling.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43e2b-145">使用此欄位的成員<xref:System.Runtime.InteropServices.CharSet>列舉指定的字串參數封送處理行為，並指定要叫用 （提供的確切名稱或名稱，結尾"A"或"W"） 的進入點名稱。</span><span class="sxs-lookup"><span data-stu-id="43e2b-145">Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</span></span> <span data-ttu-id="43e2b-146">預設列舉成員，C# 和 Visual Basic 就`CharSet.Ansi`c + + 的預設列舉成員，而且`CharSet.None`，這相當於`CharSet.Ansi`。</span><span class="sxs-lookup"><span data-stu-id="43e2b-146">The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`.</span></span> <span data-ttu-id="43e2b-147">在 Visual Basic 中，您可以使用`Declare`陳述式來指定`CharSet`欄位。</span><span class="sxs-lookup"><span data-stu-id="43e2b-147">In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.</span></span>  
  
 <span data-ttu-id="43e2b-148"><xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>欄位會影響行為的`CharSet`欄位判斷要叫用哪一個進入點名稱。</span><span class="sxs-lookup"><span data-stu-id="43e2b-148">The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke.</span></span> <span data-ttu-id="43e2b-149">詳細的描述和封送處理字串和名稱比對行為相關聯的範例`CharSet`欄位中，請參閱 <<c2> [ 指定字元集](~/docs/framework/interop/specifying-a-character-set.md)。</span><span class="sxs-lookup"><span data-stu-id="43e2b-149">For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43e2b-150">下列程式碼範例示範如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>屬性，以匯入 Win32`MessageBox`函式。</span><span class="sxs-lookup"><span data-stu-id="43e2b-150">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="43e2b-151">程式碼範例接著會呼叫匯入的方法。</span><span class="sxs-lookup"><span data-stu-id="43e2b-151">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public string EntryPoint;" />
      <MemberSignature Language="ILAsm" Value=".field public string EntryPoint" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public EntryPoint As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EntryPoint;" />
      <MemberSignature Language="F#" Value="val mutable EntryPoint : string" Usage="System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43e2b-152">指示要呼叫的 DLL 進入點 (Entry Point) 的名稱或序數。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-152">Indicates the name or ordinal of the DLL entry point to be called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43e2b-153">您可以藉由提供表示包含進入點的 dll 名稱的字串中指定的進入點名稱，或您可以根據其序數識別進入點。</span><span class="sxs-lookup"><span data-stu-id="43e2b-153">You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</span></span> <span data-ttu-id="43e2b-154">序數會加上 # 符號，例如，#1。</span><span class="sxs-lookup"><span data-stu-id="43e2b-154">Ordinals are prefixed with the # sign, for example, #1.</span></span> <span data-ttu-id="43e2b-155">如果您省略此欄位時，common language runtime 會使用以標記的.net 方法的名稱<xref:System.Runtime.InteropServices.DllImportAttribute>。</span><span class="sxs-lookup"><span data-stu-id="43e2b-155">If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span>  
  
 <span data-ttu-id="43e2b-156">如需詳細資訊，請參閱[用來識別 Dll 中函式](~/docs/framework/interop/identifying-functions-in-dlls.md)。</span><span class="sxs-lookup"><span data-stu-id="43e2b-156">For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md).</span></span> <span data-ttu-id="43e2b-157">如需範例示範如何使用<xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint>欄位中，請參閱 <<c2> [ 指定進入點](~/docs/framework/interop/specifying-an-entry-point.md)。</span><span class="sxs-lookup"><span data-stu-id="43e2b-157">For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43e2b-158">下列程式碼範例示範如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>屬性，以匯入 Win32`MessageBox`函式。</span><span class="sxs-lookup"><span data-stu-id="43e2b-158">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="43e2b-159">此程式碼範例會使用<xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint>屬性來指定要匯入的函式，然後將名稱變更為`MyNewMessageBoxMethod`。</span><span class="sxs-lookup"><span data-stu-id="43e2b-159">The code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> property to specify the function to import and then changes the name to `MyNewMessageBoxMethod`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExactSpelling">
      <MemberSignature Language="C#" Value="public bool ExactSpelling;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ExactSpelling" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberSignature Language="VB.NET" Value="Public ExactSpelling As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ExactSpelling;" />
      <MemberSignature Language="F#" Value="val mutable ExactSpelling : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43e2b-160">控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 欄位是否會導致 Common Language Runtime 搜尋 Unmanaged DLL 以取得不是指定名稱的進入點名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-160">Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43e2b-161">如果`false`，加上字母 A 的進入點名稱會叫用時<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType>欄位設定為`CharSet.Ansi`，並叫用進入點名稱加上字母 W 時<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType>欄位設定為`CharSet.Unicode`。</span><span class="sxs-lookup"><span data-stu-id="43e2b-161">If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to the `CharSet.Unicode`.</span></span> <span data-ttu-id="43e2b-162">一般來說，managed 的編譯器會設定此欄位。</span><span class="sxs-lookup"><span data-stu-id="43e2b-162">Typically, managed compilers set this field.</span></span>  
  
 <span data-ttu-id="43e2b-163">下表顯示之間的關聯性<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet>和<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>的程式設計語言所加諸的預設值為基礎的欄位。</span><span class="sxs-lookup"><span data-stu-id="43e2b-163">The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language.</span></span> <span data-ttu-id="43e2b-164">您可以覆寫預設設定，但這樣做時請小心。</span><span class="sxs-lookup"><span data-stu-id="43e2b-164">You can override the default setting, but do so with caution.</span></span>  
  
|<span data-ttu-id="43e2b-165">Language</span><span class="sxs-lookup"><span data-stu-id="43e2b-165">Language</span></span>|<span data-ttu-id="43e2b-166">ANSI</span><span class="sxs-lookup"><span data-stu-id="43e2b-166">ANSI</span></span>|<span data-ttu-id="43e2b-167">Unicode</span><span class="sxs-lookup"><span data-stu-id="43e2b-167">Unicode</span></span>|<span data-ttu-id="43e2b-168">Auto</span><span class="sxs-lookup"><span data-stu-id="43e2b-168">Auto</span></span>|  
|--------------|----------|-------------|----------|  
|<span data-ttu-id="43e2b-169">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="43e2b-169">Visual Basic</span></span>|<span data-ttu-id="43e2b-170">ExactSpelling:=True</span><span class="sxs-lookup"><span data-stu-id="43e2b-170">ExactSpelling:=True</span></span>|<span data-ttu-id="43e2b-171">ExactSpelling:=True</span><span class="sxs-lookup"><span data-stu-id="43e2b-171">ExactSpelling:=True</span></span>|<span data-ttu-id="43e2b-172">ExactSpelling:=False</span><span class="sxs-lookup"><span data-stu-id="43e2b-172">ExactSpelling:=False</span></span>|  
|<span data-ttu-id="43e2b-173">C#</span><span class="sxs-lookup"><span data-stu-id="43e2b-173">C#</span></span>|<span data-ttu-id="43e2b-174">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="43e2b-174">ExactSpelling=false</span></span>|<span data-ttu-id="43e2b-175">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="43e2b-175">ExactSpelling=false</span></span>|<span data-ttu-id="43e2b-176">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="43e2b-176">ExactSpelling=false</span></span>|  
|<span data-ttu-id="43e2b-177">C++</span><span class="sxs-lookup"><span data-stu-id="43e2b-177">C++</span></span>|<span data-ttu-id="43e2b-178">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="43e2b-178">ExactSpelling=false</span></span>|<span data-ttu-id="43e2b-179">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="43e2b-179">ExactSpelling=false</span></span>|<span data-ttu-id="43e2b-180">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="43e2b-180">ExactSpelling=false</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="43e2b-181">在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`陳述式，以定義在 managed 程式碼的 DLL 函式。</span><span class="sxs-lookup"><span data-stu-id="43e2b-181">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="43e2b-182">設定<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>欄位是其中一種情況。</span><span class="sxs-lookup"><span data-stu-id="43e2b-182">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="public bool PreserveSig;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PreserveSig" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberSignature Language="VB.NET" Value="Public PreserveSig As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool PreserveSig;" />
      <MemberSignature Language="F#" Value="val mutable PreserveSig : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43e2b-183">指出是否直接轉譯具有 <see langword="HRESULT" /> 或 <see langword="retval" /> 傳回值的 Unmanaged 方法，或者是否將 <see langword="HRESULT" /> 或 <see langword="retval" /> 傳回值自動轉換成例外狀況。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-183">Indicates whether unmanaged methods that have <see langword="HRESULT" /> or <see langword="retval" /> return values are directly translated or whether <see langword="HRESULT" /> or <see langword="retval" /> return values are automatically converted to exceptions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43e2b-184">設定<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位設為`true`直接轉換使用的 unmanaged 簽章`HRESULT`或是`retval`值，將它設定為`false`將自動轉換`HRESULT`或`retval`例外狀況的值。</span><span class="sxs-lookup"><span data-stu-id="43e2b-184">Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions.</span></span> <span data-ttu-id="43e2b-185">根據預設，<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位是`true`。</span><span class="sxs-lookup"><span data-stu-id="43e2b-185">By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.</span></span>  
  
 <span data-ttu-id="43e2b-186">當`true`，產生的方法簽章傳回整數值，其中包含`HRESULT`值。</span><span class="sxs-lookup"><span data-stu-id="43e2b-186">When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.</span></span>  <span data-ttu-id="43e2b-187">在此情況下，您必須以手動方式檢查傳回的值，並據以回應應用程式中。</span><span class="sxs-lookup"><span data-stu-id="43e2b-187">In this case, you must manually inspect the return value and respond accordingly in your application.</span></span>  
  
 <span data-ttu-id="43e2b-188">當您設定<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位設為`false`，產生的方法簽章含有 void 的傳回型別，而不是整數 (`HRESULT`) 傳回型別。</span><span class="sxs-lookup"><span data-stu-id="43e2b-188">When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.</span></span>  <span data-ttu-id="43e2b-189">當 unmanaged 的方法會產生`HRESULT`，執行階段會自動忽略傳回值為`S_OK`（或 0） 和不擲回例外狀況。</span><span class="sxs-lookup"><span data-stu-id="43e2b-189">When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.</span></span>  <span data-ttu-id="43e2b-190">針對`HRESULT`以外的 s `S_OK`，執行階段會自動擲回例外狀況對應至`HRESULT`。</span><span class="sxs-lookup"><span data-stu-id="43e2b-190">For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.</span></span>  <span data-ttu-id="43e2b-191">請注意，<xref:System.Runtime.InteropServices.DllImportAttribute>屬性只會執行這項轉換方法會傳回`HRESULT`。</span><span class="sxs-lookup"><span data-stu-id="43e2b-191">Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.</span></span>  
  
 <span data-ttu-id="43e2b-192">若要變更預設的錯誤報告的行為，您可能會決定`HRESULT`s 例外狀況更適合的錯誤報告應用程式結構的案例中的例外狀況。</span><span class="sxs-lookup"><span data-stu-id="43e2b-192">You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application.</span></span>  
  
 <span data-ttu-id="43e2b-193">這個欄位是類似<xref:System.Runtime.InteropServices.PreserveSigAttribute>; 不過，相對於<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位中，預設值為屬性`false`。</span><span class="sxs-lookup"><span data-stu-id="43e2b-193">This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`.</span></span>  
  
 <span data-ttu-id="43e2b-194">在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`陳述式，以定義在 managed 程式碼的 DLL 函式。</span><span class="sxs-lookup"><span data-stu-id="43e2b-194">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="43e2b-195">設定<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位是其中一種情況。</span><span class="sxs-lookup"><span data-stu-id="43e2b-195">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43e2b-196">下列程式碼範例會使用<xref:System.Runtime.InteropServices.DllImportAttribute>匯入 unmanaged`SHAutoComplete`函式一次與<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位設定為`true`，再<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="43e2b-196">The following code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute> to import the unmanaged `SHAutoComplete` function once with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `true` and again with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `false`.</span></span>  <span data-ttu-id="43e2b-197">下列程式碼範例會導致`SHAutoComplete`函式來產生任何錯誤，並一次發生例外狀況和`HRESULT`下一步。</span><span class="sxs-lookup"><span data-stu-id="43e2b-197">This code example causes the `SHAutoComplete` function to generate any errors with an exception one time and an `HRESULT` the next.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetLastError">
      <MemberSignature Language="C#" Value="public bool SetLastError;" />
      <MemberSignature Language="ILAsm" Value=".field public bool SetLastError" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberSignature Language="VB.NET" Value="Public SetLastError As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool SetLastError;" />
      <MemberSignature Language="F#" Value="val mutable SetLastError : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43e2b-198">指示自屬性方法傳回之前，被呼叫端是否呼叫 <see langword="SetLastError" /> Win32 應用程式開發介面函式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-198">Indicates whether the callee calls the <see langword="SetLastError" /> Win32 API function before returning from the attributed method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43e2b-199">`true` 表示被呼叫者會呼叫`SetLastError`; 否則`false`。</span><span class="sxs-lookup"><span data-stu-id="43e2b-199">`true` to indicate that the callee will call `SetLastError`; otherwise, `false`.</span></span> <span data-ttu-id="43e2b-200">預設值為 `false`。</span><span class="sxs-lookup"><span data-stu-id="43e2b-200">The default is `false`.</span></span>  
  
 <span data-ttu-id="43e2b-201">執行階段會封送處理器呼叫`GetLastError`並快取以避免遭到覆寫其他 API 呼叫傳回的值。</span><span class="sxs-lookup"><span data-stu-id="43e2b-201">The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls.</span></span> <span data-ttu-id="43e2b-202">您可以藉由呼叫擷取錯誤碼<xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>。</span><span class="sxs-lookup"><span data-stu-id="43e2b-202">You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43e2b-203">在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`陳述式，以定義在 managed 程式碼的 DLL 函式。</span><span class="sxs-lookup"><span data-stu-id="43e2b-203">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="43e2b-204">設定<xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>欄位是其中一種情況。</span><span class="sxs-lookup"><span data-stu-id="43e2b-204">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      </Docs>
    </Member>
    <Member MemberName="ThrowOnUnmappableChar">
      <MemberSignature Language="C#" Value="public bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ThrowOnUnmappableChar" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberSignature Language="VB.NET" Value="Public ThrowOnUnmappableChar As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="F#" Value="val mutable ThrowOnUnmappableChar : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43e2b-205">在無法對應的 Unicode 字元轉換為 ANSI "?" 字元時，啟用或停用例外狀況的擲回。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-205">Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43e2b-206">`true` 表示發生例外狀況時，interop 封送處理器會將轉換無法對應的字元; 每次`false`表示<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>會停用欄位。</span><span class="sxs-lookup"><span data-stu-id="43e2b-206">`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled.</span></span> <span data-ttu-id="43e2b-207">這個欄位是`false`預設。</span><span class="sxs-lookup"><span data-stu-id="43e2b-207">This field is `false` by default.</span></span>  
  
 <span data-ttu-id="43e2b-208">Common language runtime 會將任何受管理傳遞給 unmanaged 的方法執行，在 Windows 98 或 Windows me 上的 Unicode 字元的 ANSI 字元</span><span class="sxs-lookup"><span data-stu-id="43e2b-208">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="43e2b-209">自動調整的對應可讓提供關閉比對的字元完全相符項目存在時，interop 封送處理器。</span><span class="sxs-lookup"><span data-stu-id="43e2b-209">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="43e2b-210">比方說，封送處理器著作權將 Unicode 字元轉換為 'c' 接受 ANSI 字元的 unmanaged 方法。</span><span class="sxs-lookup"><span data-stu-id="43e2b-210">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="43e2b-211">某些字元缺少的自動調整的表示法;這些字元稱為無法對應。</span><span class="sxs-lookup"><span data-stu-id="43e2b-211">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="43e2b-212">無法對應的字元通常會轉換成預設值 '？ 'ANSI 字元。</span><span class="sxs-lookup"><span data-stu-id="43e2b-212">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="43e2b-213">某些 Unicode 字元都轉換成危險的字元，例如反斜線 '\\' 字元，可以不小心變更路徑。</span><span class="sxs-lookup"><span data-stu-id="43e2b-213">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="43e2b-214">藉由設定<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位設為`true`，您可以藉由擲回例外狀況通知呼叫端無法對應的字元是否存在。</span><span class="sxs-lookup"><span data-stu-id="43e2b-214">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="43e2b-215">您無法變更所提供的預設值<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>和<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位傳遞 managed 的陣列的項目不是 ANSI 字元就 LPSTRs 到未受管理的安全陣列。</span><span class="sxs-lookup"><span data-stu-id="43e2b-215">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="43e2b-216">永遠啟用自動調整的對應，而且會擲回任何例外狀況。</span><span class="sxs-lookup"><span data-stu-id="43e2b-216">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="43e2b-217">請注意這種組合可能會危害您的安全性模型。</span><span class="sxs-lookup"><span data-stu-id="43e2b-217">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43e2b-218">在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>定義在 managed 程式碼，而不是使用中的 DLL 函式`Declare`陳述式。</span><span class="sxs-lookup"><span data-stu-id="43e2b-218">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute> to define a DLL function in managed code, instead of using the `Declare` statement.</span></span> <span data-ttu-id="43e2b-219">設定<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位是其中一種情況。</span><span class="sxs-lookup"><span data-stu-id="43e2b-219">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is one of those cases.</span></span> <span data-ttu-id="43e2b-220">下列範例示範如何將套用最精確指定 ANSI 字元集、 停用最適合的對應行為，並擲回例外狀況未對應的 Unicode 字元的字元對應安全性平台叫用的方法定義。</span><span class="sxs-lookup"><span data-stu-id="43e2b-220">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43e2b-221">取得包含進入點的 DLL 檔案名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-221">Gets the name of the DLL file that contains the entry point.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="43e2b-222">包含進入點的 DLL 檔案名稱。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43e2b-222">The name of the DLL file that contains the entry point.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43e2b-223">您可以提供完整或相對路徑。</span><span class="sxs-lookup"><span data-stu-id="43e2b-223">You can provide a full or relative path.</span></span> <span data-ttu-id="43e2b-224">如果您不提供任何路徑，DLL 必須是目前路徑中在執行階段，除非以其他方式載入 DLL。</span><span class="sxs-lookup"><span data-stu-id="43e2b-224">If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</span></span> <span data-ttu-id="43e2b-225">請注意，不過，使用完整的路徑可能會造成不正確的地方如果 DLL 被移動。</span><span class="sxs-lookup"><span data-stu-id="43e2b-225">Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>