<Type Name="DllImportAttribute" FullName="System.Runtime.InteropServices.DllImportAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="de7a53beeda19e530806d2978aadf945a5d39e91" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52247529" /></Metadata><TypeSignature Language="C#" Value="public sealed class DllImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DllImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.DllImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DllImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DllImportAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type DllImportAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示由 Unmanaged 動態連結程式庫 (DLL) 公開做為靜態進入點的屬性化方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以將此屬性套用至方法中。  
  
 <xref:System.Runtime.InteropServices.DllImportAttribute>屬性會提供呼叫從 unmanaged DLL 匯出的函式所需的資訊。 最小需求，您必須提供包含進入點的 dll 名稱。  
  
 此屬性直接套用到 C# 和 c + + 方法的定義;不過，Visual Basic 編譯器會發出這個屬性使用時`Declare`陳述式。 如需包含複雜的方法定義<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>， <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>， <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>， <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>， <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>，或<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位，這個屬性直接套用到 Visual Basic 方法定義。  
  
 **請注意**JScript 不支援這個屬性。 若要從 JScript 程式存取未受管理的 API 方法，您可以使用 C# 或 Visual Basic 包裝函式類別。  
  
 如需有關使用平台叫用服務來存取 unmanaged Dll 中的函式，請參閱 <<c0> [ 使用 Unmanaged DLL 函式](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)。  
  
> [!NOTE]
>  <xref:System.Runtime.InteropServices.DllImportAttribute>不支援封送處理泛型型別。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>屬性，以匯入 Win32`MessageBox`函式。  程式碼範例接著會呼叫匯入的方法。  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DllImportAttribute (string dllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dllName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DllImportAttribute(System::String ^ dllName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.DllImportAttribute : string -&gt; System.Runtime.InteropServices.DllImportAttribute" Usage="new System.Runtime.InteropServices.DllImportAttribute dllName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dllName">包含 Unmanaged 方法的 DLL 名稱。 如果 DLL 包含在組件中，這個名稱可能會包括組件顯示名稱。</param>
        <summary>使用含有要匯入方法的 DLL 名稱，來初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 unmanaged 的 DLL 檔案中包含組件，例如，藉由使用連結器或`/linkresource`編譯器選項時，您可以指定組件顯示名稱的一部分`dllName`。 例如，如果名為 unmanaged DLL`unmanaged.dll`包含在名為 managed 組件`MyAssembly`，可能會指定屬性，如下列程式碼所示。  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>屬性，以匯入 Win32`MessageBox`函式。  程式碼範例接著會呼叫匯入的方法。  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BestFitMapping">
      <MemberSignature Language="C#" Value="public bool BestFitMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public bool BestFitMapping" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberSignature Language="VB.NET" Value="Public BestFitMapping As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool BestFitMapping;" />
      <MemberSignature Language="F#" Value="val mutable BestFitMapping : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>將 Unicode 字元轉換成 ANSI 字元時，啟用或停用最適合對應行為。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`true`、 最適合對應行為啟用; 否則自動調整對應已停用。 <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>欄位是`true`預設。 此欄位的設定會覆寫的任何層級設定<xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType>屬性。  
  
 Common language runtime 會將任何受管理傳遞給 unmanaged 的方法執行，在 Windows 98 或 Windows me 上的 Unicode 字元的 ANSI 字元 自動調整的對應可讓提供關閉比對的字元完全相符項目存在時，interop 封送處理器。 比方說，封送處理器著作權將 Unicode 字元轉換為 'c' 接受 ANSI 字元的 unmanaged 方法。 某些字元缺少的自動調整的表示法;這些字元稱為無法對應。 無法對應的字元通常會轉換成預設值 '？ 'ANSI 字元。  
  
> [!CAUTION]
>  某些 Unicode 字元都轉換成危險的字元，例如反斜線 '\\' 字元，可以不小心變更路徑。 藉由設定<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位設為`true`，您可以藉由擲回例外狀況通知呼叫端無法對應的字元是否存在。  
  
> [!CAUTION]
>  您無法變更所提供的預設值<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>和<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位傳遞 managed 的陣列的項目不是 ANSI 字元就 LPSTRs 到未受管理的安全陣列。 永遠啟用自動調整的對應，而且會擲回任何例外狀況。 請注意這種組合可能會危害您的安全性模型。  
  
   
  
## Examples  
 在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是`Declare`陳述式，以定義在 managed 程式碼的 DLL 函式。 設定<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>欄位是其中一種情況。 下列範例示範如何將套用最精確指定 ANSI 字元集、 停用最適合的對應行為，並擲回例外狀況未對應的 Unicode 字元的字元對應安全性平台叫用的方法定義。  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a">Interop 封送處理</related>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public CallingConvention As CallingConvention " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CallingConvention CallingConvention;" />
      <MemberSignature Language="F#" Value="val mutable CallingConvention : System.Runtime.InteropServices.CallingConvention" Usage="System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CallingConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示進入點的呼叫慣例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您將此欄位設定為其中一個<xref:System.Runtime.InteropServices.CallingConvention>列舉型別成員。 預設值<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>欄位是<xref:System.Runtime.InteropServices.CallingConvention.Winapi>，因而會預設以<xref:System.Runtime.InteropServices.CallingConvention.StdCall>慣例。  
  
 如需詳細資訊，請參閱 MSDN library 中的呼叫慣例。  
  
   
  
## Examples  
 在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是`Declare`陳述式，以定義在 managed 程式碼的 DLL 函式。 設定<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>欄位是其中一種情況。  
  
 System.Runtime.InteropServices.DllImportAttribute#1  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CallingConvention" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示如何將字串參數封送處理到方法和控制項函式名稱改變 (Name Mangling)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此欄位的成員<xref:System.Runtime.InteropServices.CharSet>列舉指定的字串參數封送處理行為，並指定要叫用 （提供的確切名稱或名稱，結尾"A"或"W"） 的進入點名稱。 預設列舉成員，C# 和 Visual Basic 就`CharSet.Ansi`c + + 的預設列舉成員，而且`CharSet.None`，這相當於`CharSet.Ansi`。 在 Visual Basic 中，您可以使用`Declare`陳述式來指定`CharSet`欄位。  
  
 <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>欄位會影響行為的`CharSet`欄位判斷要叫用哪一個進入點名稱。 詳細的描述和封送處理字串和名稱比對行為相關聯的範例`CharSet`欄位中，請參閱 <<c2> [ 指定字元集](~/docs/framework/interop/specifying-a-character-set.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>屬性，以匯入 Win32`MessageBox`函式。  程式碼範例接著會呼叫匯入的方法。  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public string EntryPoint;" />
      <MemberSignature Language="ILAsm" Value=".field public string EntryPoint" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public EntryPoint As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EntryPoint;" />
      <MemberSignature Language="F#" Value="val mutable EntryPoint : string" Usage="System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示要呼叫的 DLL 進入點 (Entry Point) 的名稱或序數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以藉由提供表示包含進入點的 dll 名稱的字串中指定的進入點名稱，或您可以根據其序數識別進入點。 序數會加上 # 符號，例如，#1。 如果您省略此欄位時，common language runtime 會使用以標記的.net 方法的名稱<xref:System.Runtime.InteropServices.DllImportAttribute>。  
  
 如需詳細資訊，請參閱[用來識別 Dll 中函式](~/docs/framework/interop/identifying-functions-in-dlls.md)。 如需範例示範如何使用<xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint>欄位中，請參閱 <<c2> [ 指定進入點](~/docs/framework/interop/specifying-an-entry-point.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Runtime.InteropServices.DllImportAttribute>屬性，以匯入 Win32`MessageBox`函式。  此程式碼範例會使用<xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint>屬性來指定要匯入的函式，然後將名稱變更為`MyNewMessageBoxMethod`。  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExactSpelling">
      <MemberSignature Language="C#" Value="public bool ExactSpelling;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ExactSpelling" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberSignature Language="VB.NET" Value="Public ExactSpelling As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ExactSpelling;" />
      <MemberSignature Language="F#" Value="val mutable ExactSpelling : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 欄位是否會導致 Common Language Runtime 搜尋 Unmanaged DLL 以取得不是指定名稱的進入點名稱。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`false`，加上字母 A 的進入點名稱會叫用時<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType>欄位設定為`CharSet.Ansi`，並叫用進入點名稱加上字母 W 時<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType>欄位設定為`CharSet.Unicode`。 一般來說，managed 的編譯器會設定此欄位。  
  
 下表顯示之間的關聯性<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet>和<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>的程式設計語言所加諸的預設值為基礎的欄位。 您可以覆寫預設設定，但這樣做時請小心。  
  
|語言|ANSI|Unicode|自動|  
|--------------|----------|-------------|----------|  
|Visual Basic|ExactSpelling:=True|ExactSpelling:=True|ExactSpelling:=False|  
|C#|ExactSpelling=false|ExactSpelling=false|ExactSpelling=false|  
|C++|ExactSpelling=false|ExactSpelling=false|ExactSpelling=false|  
  
   
  
## Examples  
 在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`陳述式，以定義在 managed 程式碼的 DLL 函式。 設定<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>欄位是其中一種情況。  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="public bool PreserveSig;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PreserveSig" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberSignature Language="VB.NET" Value="Public PreserveSig As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool PreserveSig;" />
      <MemberSignature Language="F#" Value="val mutable PreserveSig : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指出是否直接轉譯具有 <see langword="HRESULT" /> 或 <see langword="retval" /> 傳回值的 Unmanaged 方法，或者是否將 <see langword="HRESULT" /> 或 <see langword="retval" /> 傳回值自動轉換成例外狀況。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位設為`true`直接轉換使用的 unmanaged 簽章`HRESULT`或是`retval`值，將它設定為`false`將自動轉換`HRESULT`或`retval`例外狀況的值。 根據預設，<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位是`true`。  
  
 當`true`，產生的方法簽章傳回整數值，其中包含`HRESULT`值。  在此情況下，您必須以手動方式檢查傳回的值，並據以回應應用程式中。  
  
 當您設定<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位設為`false`，產生的方法簽章含有 void 的傳回型別，而不是整數 (`HRESULT`) 傳回型別。  當 unmanaged 的方法會產生`HRESULT`，執行階段會自動忽略傳回值為`S_OK`（或 0） 和不擲回例外狀況。  針對`HRESULT`以外的 s `S_OK`，執行階段會自動擲回例外狀況對應至`HRESULT`。  請注意，<xref:System.Runtime.InteropServices.DllImportAttribute>屬性只會執行這項轉換方法會傳回`HRESULT`。  
  
 若要變更預設的錯誤報告的行為，您可能會決定`HRESULT`s 例外狀況更適合的錯誤報告應用程式結構的案例中的例外狀況。  
  
 這個欄位是類似<xref:System.Runtime.InteropServices.PreserveSigAttribute>; 不過，相對於<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位中，預設值為屬性`false`。  
  
 在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`陳述式，以定義在 managed 程式碼的 DLL 函式。 設定<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位是其中一種情況。  
  
   
  
## Examples  
 下列程式碼範例會使用<xref:System.Runtime.InteropServices.DllImportAttribute>匯入 unmanaged`SHAutoComplete`函式一次與<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位設定為`true`，再<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>欄位設定為`false`。  下列程式碼範例會導致`SHAutoComplete`函式來產生任何錯誤，並一次發生例外狀況和`HRESULT`下一步。  
  
 [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetLastError">
      <MemberSignature Language="C#" Value="public bool SetLastError;" />
      <MemberSignature Language="ILAsm" Value=".field public bool SetLastError" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberSignature Language="VB.NET" Value="Public SetLastError As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool SetLastError;" />
      <MemberSignature Language="F#" Value="val mutable SetLastError : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示自屬性方法傳回之前，被呼叫端是否呼叫 <see langword="SetLastError" /> Win32 應用程式開發介面函式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true` 表示被呼叫者會呼叫`SetLastError`; 否則`false`。 預設值為 `false`。  
  
 執行階段會封送處理器呼叫`GetLastError`並快取以避免遭到覆寫其他 API 呼叫傳回的值。 您可以藉由呼叫擷取錯誤碼<xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>。  
  
   
  
## Examples  
 在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>，而不是使用`Declare`陳述式，以定義在 managed 程式碼的 DLL 函式。 設定<xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>欄位是其中一種情況。  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      </Docs>
    </Member>
    <Member MemberName="ThrowOnUnmappableChar">
      <MemberSignature Language="C#" Value="public bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ThrowOnUnmappableChar" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberSignature Language="VB.NET" Value="Public ThrowOnUnmappableChar As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="F#" Value="val mutable ThrowOnUnmappableChar : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在無法對應的 Unicode 字元轉換為 ANSI "?" 字元時，啟用或停用例外狀況的擲回。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true` 表示發生例外狀況時，interop 封送處理器會將轉換無法對應的字元; 每次`false`表示<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>會停用欄位。 這個欄位是`false`預設。  
  
 Common language runtime 會將任何受管理傳遞給 unmanaged 的方法執行，在 Windows 98 或 Windows me 上的 Unicode 字元的 ANSI 字元 自動調整的對應可讓提供關閉比對的字元完全相符項目存在時，interop 封送處理器。 比方說，封送處理器著作權將 Unicode 字元轉換為 'c' 接受 ANSI 字元的 unmanaged 方法。 某些字元缺少的自動調整的表示法;這些字元稱為無法對應。 無法對應的字元通常會轉換成預設值 '？ 'ANSI 字元。  
  
> [!CAUTION]
>  某些 Unicode 字元都轉換成危險的字元，例如反斜線 '\\' 字元，可以不小心變更路徑。 藉由設定<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位設為`true`，您可以藉由擲回例外狀況通知呼叫端無法對應的字元是否存在。  
  
> [!CAUTION]
>  您無法變更所提供的預設值<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>和<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位傳遞 managed 的陣列的項目不是 ANSI 字元就 LPSTRs 到未受管理的安全陣列。 永遠啟用自動調整的對應，而且會擲回任何例外狀況。 請注意這種組合可能會危害您的安全性模型。  
  
   
  
## Examples  
 在某些情況下，使用 Visual Basic 開發人員<xref:System.Runtime.InteropServices.DllImportAttribute>定義在 managed 程式碼，而不是使用中的 DLL 函式`Declare`陳述式。 設定<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar>欄位是其中一種情況。 下列範例示範如何將套用最精確指定 ANSI 字元集、 停用最適合的對應行為，並擲回例外狀況未對應的 Unicode 字元的字元對應安全性平台叫用的方法定義。  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a">Interop 封送處理</related>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得包含進入點的 DLL 檔案名稱。</summary>
        <value>包含進入點的 DLL 檔案名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以提供完整或相對路徑。 如果您不提供任何路徑，DLL 必須是目前路徑中在執行階段，除非以其他方式載入 DLL。 請注意，不過，使用完整的路徑可能會造成不正確的地方如果 DLL 被移動。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>