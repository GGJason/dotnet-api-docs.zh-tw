<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="db9d17e61314349383ef30525e10979ba1b06e55" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57930007" /></Metadata><TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>讓您控制記憶體中類別或結構之資料欄位的實際配置。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以將此屬性套用至類別或結構中。  
  
 Common language runtime 會控制資料欄位的類別或結構，在受管理的記憶體中的實體配置。 不過，如果您想要將類型傳遞至 unmanaged 程式碼，您可以使用<xref:System.Runtime.InteropServices.StructLayoutAttribute>屬性來控制非受控的類型的配置。 屬性搭配使用的<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>強制要循序配置其出現的順序中的成員。 Blittable 類型<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>控制兩個 managed 記憶體中的配置和版面配置 unmanaged 記憶體中的。 非 blittable 類型，它會控制配置，當類別或結構會封送處理至 unmanaged 程式碼，但不會控制在受管理的記憶體配置。 屬性搭配使用的<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>來控制每個資料成員的精確位置。 這會影響 managed 和 unmanaged 兩種版面配置，blittable 和非 blittable 類型。 使用<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>需要您使用<xref:System.Runtime.InteropServices.FieldOffsetAttribute>屬性來指出每個欄位的型別內的位置。  
  
 適用於 C#、 Visual Basic 和 c + + 編譯器<xref:System.Runtime.InteropServices.LayoutKind.Sequential>預設結構的配置值。 對於類別而言，您必須套用<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>明確值。 [Tlbimp.exe （型別程式庫匯入工具）](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)也適用於<xref:System.Runtime.InteropServices.StructLayoutAttribute>屬性，因為它一律會套用<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>時匯入類型程式庫的值。  
  
   
  
## Examples  
 下列範例示範 managed 的宣告`GetSystemTime`函式，並定義`MySystemTime`類別<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>版面配置。 `GetSystemTime` 取得系統時間，並列印至主控台。  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (類型程式庫匯入工具)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="layoutKind">代表其中一個 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值的 16 位元整數，指定類別或結構的排列方式。</param>
        <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 列舉成員初始化 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式為基礎的 16 位元整數代表每個<xref:System.Runtime.InteropServices.LayoutKind>列舉成員。 [Tlbimp.exe （型別程式庫匯入工具）](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)會使用這個建構函式。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
        <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (類型程式庫匯入工具)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">其中一個列舉值，指定類別或結構的排列方式。</param>
        <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 列舉成員初始化 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 針對可讀取的程式碼較不容易出錯，一律使用這個建構函式。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示根據預設，類別中的字串資料欄位應該封送處理為 <see langword="LPWSTR" />，還是 <see langword="LPSTR" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`CharSet`欄位設定為<xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>，所有的字串引數都會轉換成 Unicode 字元 (`LPWSTR`) 傳遞至 unmanaged 實作之前。 如果欄位設定為<xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>，將字串轉換為 ANSI 字串 (`LPSTR`)。 如果`CharSet`欄位設定為<xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>，轉換為平台相依 (在 Windows 98 和 Windows Me 和更新版本上的為 Unicode 的 ANSI)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>控制記憶體中類別或結構之資料欄位的對齊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>欄位控制項類型的欄位，在記憶體中的對齊方式。  它會影響兩者<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>和<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>。 根據預設，值會是 0，指出預設的封裝大小為目前的平台。 值<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>必須是 0、 1、 2、 4、 8、 16、 32、 64 或 128:  
  
 類型執行個體欄位對齊藉由使用下列規則：  
  
-   類型的對齊是其最大項目的大小 (1、 2、 4、 8 等等，位元組為單位) 或指定的封裝大小，取其較小。  
  
-   每個欄位必須配合欄位本身的大小 (1、 2、 4、 8 等等，位元組為單位) 或類型的對齊，取其較小。  因為類型的預設對齊是其最大的項目，也就是大於或等於為所有其他欄位長度的大小，這通常表示欄位會對齊其大小。 比方說，即使最大的欄位型別中的 64 位元 （8 個位元組） 整數或組件欄位設為 8、<xref:System.Byte>欄位對齊 1 個位元組的界限<xref:System.Int16>對齊 2 位元組界限上的欄位和<xref:System.Int32>欄位對齊 4 位元組的界限。  
  
-   為滿足的對齊需求的欄位之間加入填補。  
  
 例如，請考慮下列結構，其中包含兩個<xref:System.Byte>欄位和一個<xref:System.Int32>時的各種值搭配使用的欄位<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>欄位。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  若要成功編譯的 C# 範例，您必須指定`/unsafe`編譯器參數。  
  
 如果您指定預設的封裝大小，則結構的大小是 8 個位元組。 因為位元組必須對齊一個位元組的界限，兩個位元組會佔用的記憶體，前兩個位元組。 類型的預設對齊是 4 個位元組，也就是其最大欄位大小，因為`i3`，有兩個位元組，後面接著 [整數] 欄位留白。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 如果<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設為 2，結構的大小為 6 個位元組。 為之前，兩個位元組所佔用的前兩個位元組的記憶體。 因為欄位現在對齊 2 位元組界限上，沒有任何第二個位元組整數之間的填補量。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 如果<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設為 4，結構的大小會是預設案例中，其中其最大欄位大小所定義類型的對齊方式，與相同`i3`，這是 4。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 如果<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設為 8，結構的大小是仍然相同預設情況下，因為`i3`欄位對齊 4 位元組界限，也就是小於組件欄位所指定的 8 位元組界限。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 若要另一個範例，請考慮下列結構，其中包含兩個位元組的欄位、 一個 32 位元帶正負號的整數欄位、 一個單一元素位元組陣列和十進位值。 預設的封裝大小，與結構的大小會是 28 個位元組。 兩個位元組佔滿前的兩個位元組的記憶體，後面接著兩個位元組填補，後面接著的整數。 接下來是填補的一個位元組陣列，後面接著三個位元組。 最後， <xref:System.Decimal>  欄位中，d5，將 4 位元組界限上對齊，因為十進位值包含四個<xref:System.Int32>欄位，因此其對齊根據最大大小的欄位，而不是大小<xref:System.Decimal>整體結構。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 如果<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設為 2，結構的大小是 24 個位元組。 相較於預設的對齊方式，因為此類型的對齊方式現在是 4，而不是 2，已被移除兩個位元組整數之間的填補兩個位元組。 和三個位元組之後的填補`a4`已取代一個位元組的填補，因為`d5`現在 2 位元組界限，而不是 4 位元組界限上對齊。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 如果<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>設為 8，結構的大小是相同的預設情況下，因為在此結構中的對齊需求小於 8。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack>欄位通常用於結構匯出期間磁碟和網路寫入作業。 欄位也經常用於平台叫用和 interop 的作業。  
  
 有時候，欄位用來產生更緊密的封裝大小減少記憶體需求。 不過，這種使用方式需要仔細考量的實際的硬體限制，而且實際上可能會降低效能。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示結構或類別的絕對大小。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此欄位必須是等於或大於的總大小，以位元組為單位的類別或結構成員。 此欄位主要是供編譯器寫入器會想要擴充直接、 未受管理的存取權的結構所佔用的記憶體。 比方說，您可以在使用未在中繼資料中直接表示等位時，使用此欄位。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值，指定類別或結構的排列方式。</summary>
        <value>其中一個列舉值，指定類別或結構的排列方式。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>