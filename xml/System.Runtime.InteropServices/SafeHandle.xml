<Type Name="SafeHandle" FullName="System.Runtime.InteropServices.SafeHandle">
  <TypeSignature Language="C#" Value="public abstract class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit SafeHandle extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.SafeHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SafeHandle&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SafeHandle abstract : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Handles</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3a0eb-101">表示作業系統控制代碼的包裝函式類別 (Wrapper Class)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-101">Represents a wrapper class for operating system handles.</span></span> <span data-ttu-id="3a0eb-102">這個類別必須被繼承。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-102">This class must be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-103"><xref:System.Runtime.InteropServices.SafeHandle>類別會提供重要的最終處理的控制代碼資源，導致無法控制代碼，從提前透過記憶體回收收回及 windows 參考非預期的 unmanaged 的物件，所以正在回收。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-103">The <xref:System.Runtime.InteropServices.SafeHandle> class provides critical finalization of handle resources, preventing handles from being reclaimed prematurely by garbage collection and from being recycled by Windows to reference unintended unmanaged objects.</span></span>  
  
 <span data-ttu-id="3a0eb-104">本主題包含下列章節：</span><span class="sxs-lookup"><span data-stu-id="3a0eb-104">This topic includes the following sections:</span></span>  
  
 <span data-ttu-id="3a0eb-105">[為什麼 SafeHandle 嗎？](#Why) </span><span class="sxs-lookup"><span data-stu-id="3a0eb-105">[Why SafeHandle?](#Why) </span></span>  
 <span data-ttu-id="3a0eb-106">[SafeHandle 的用途](#Does) </span><span class="sxs-lookup"><span data-stu-id="3a0eb-106">[What SafeHandle does](#Does) </span></span>  
 [<span data-ttu-id="3a0eb-107">衍生自 SafeHandle 類別</span><span class="sxs-lookup"><span data-stu-id="3a0eb-107">Classes derived from SafeHandle</span></span>](#Derived)  
  
<a name="Why"></a>   
## <a name="why-safehandle"></a><span data-ttu-id="3a0eb-108">為什麼 SafeHandle 嗎？</span><span class="sxs-lookup"><span data-stu-id="3a0eb-108">Why SafeHandle?</span></span>  
 <span data-ttu-id="3a0eb-109">.NET Framework 2.0 版中，所有的作業系統控制代碼只封裝在之前<xref:System.IntPtr>managed 包裝函式物件。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-109">Before the .NET Framework version 2.0, all operating system handles could only be encapsulated in the <xref:System.IntPtr> managed wrapper object.</span></span> <span data-ttu-id="3a0eb-110">雖然這是便利的方式，與原生程式碼交互操作時，控制代碼可洩漏的非同步例外狀況，例如意外中止的執行緒或堆疊溢位。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-110">While this was a convenient way to interoperate with native code, handles could be leaked by asynchronous exceptions, such as a thread aborting unexpectedly or a stack overflow.</span></span> <span data-ttu-id="3a0eb-111">這些非同步例外狀況的阻礙清除作業系統資源，而且幾乎任何地方發生在您的應用程式。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-111">These asynchronous exceptions are an obstacle to cleaning up operating system resources, and they can occur almost anywhere in your app.</span></span>  
  
 <span data-ttu-id="3a0eb-112">雖然覆寫<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法允許清除 unmanaged 資源，當物件已進行記憶體回收，在某些情況下，最終處理物件可以記憶體回收所回收執行的平台內的方法時叫用呼叫。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-112">Although overrides to the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method allow cleanup of unmanaged resources when an object is being garbage collected, in some circumstances, finalizable objects can be reclaimed by garbage collection while executing a method within a platform invoke call.</span></span> <span data-ttu-id="3a0eb-113">如果完成項會釋放控制代碼傳遞至該平台叫用呼叫，它可能會導致處理損毀。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-113">If a finalizer frees the handle passed to that platform invoke call, it could lead to handle corruption.</span></span> <span data-ttu-id="3a0eb-114">控制代碼，也可以回收時您的方法會封鎖在平台叫用呼叫，例如做為讀取檔案。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-114">The handle could also be reclaimed while your method is blocked during a platform invoke call, such as while reading a file.</span></span>  
  
 <span data-ttu-id="3a0eb-115">更嚴重，因為 Windows 會積極地回收控制代碼，控制代碼可能會回收，並指向可能包含機密資料的另一個資源。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-115">More critically, because Windows aggressively recycles handles, a handle could be recycled and point to another resource that might contain sensitive data.</span></span> <span data-ttu-id="3a0eb-116">這稱為回收攻擊和可以可能會損毀資料，會造成安全性威脅。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-116">This is known as a recycle attack and can potentially corrupt data and be a security threat.</span></span>  
  
<a name="Does"></a>   
## <a name="what-safehandle-does"></a><span data-ttu-id="3a0eb-117">SafeHandle 的用途</span><span class="sxs-lookup"><span data-stu-id="3a0eb-117">What SafeHandle does</span></span>  
 <span data-ttu-id="3a0eb-118"><xref:System.Runtime.InteropServices.SafeHandle>類別簡化了數個這些物件存留期的問題，並且已整合平台叫用的作業系統資源不會外洩。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-118">The <xref:System.Runtime.InteropServices.SafeHandle> class simplifies several of these object lifetime issues, and is integrated with platform invoke so that operating system resources are not leaked.</span></span> <span data-ttu-id="3a0eb-119"><xref:System.Runtime.InteropServices.SafeHandle>類別會由指派和釋放控制代碼，而不會中斷中解析物件存留期的問題。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-119">The <xref:System.Runtime.InteropServices.SafeHandle> class resolves object lifetime issues by assigning and releasing handles without interruption.</span></span> <span data-ttu-id="3a0eb-120">它包含重要的完成項，以確保控制代碼已關閉，並保證在非預期的期間執行<xref:System.AppDomain>卸載，即使在平台叫用呼叫時的情況下會被假設為損毀的狀態。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-120">It contains a critical finalizer that ensures that the handle is closed and is guaranteed to run during unexpected <xref:System.AppDomain> unloads, even in cases when the platform invoke call is assumed to be in a corrupted state.</span></span>  
  
 <span data-ttu-id="3a0eb-121">因為<xref:System.Runtime.InteropServices.SafeHandle>繼承自<xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>，任何重要的完成項之前，先呼叫非關鍵的完成項。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-121">Because <xref:System.Runtime.InteropServices.SafeHandle> inherits from <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>, all the noncritical finalizers are called before any of the critical finalizers.</span></span> <span data-ttu-id="3a0eb-122">不再即時相同記憶體回收行程期間的物件上呼叫完成項。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-122">The finalizers are called on objects that are no longer live during the same garbage collection pass.</span></span> <span data-ttu-id="3a0eb-123">例如，<xref:System.IO.FileStream>物件可以執行一般的完成項，來清除現有緩衝的資料，而不會遭到洩露或回收的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-123">For example, a <xref:System.IO.FileStream> object can run a normal finalizer to flush out existing buffered data without the risk of the handle being leaked or recycled.</span></span> <span data-ttu-id="3a0eb-124">這個非常弱的順序之間重大和非關鍵性的完成項不是一般用途。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-124">This very weak ordering between critical and noncritical finalizers is not intended for general use.</span></span> <span data-ttu-id="3a0eb-125">它主要是為了協助藉由使用這些程式庫来使用現有的程式庫的移轉存在<xref:System.Runtime.InteropServices.SafeHandle>而不會變更其語意。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-125">It exists primarily to assist in the migration of existing libraries by allowing those libraries to use <xref:System.Runtime.InteropServices.SafeHandle> without altering their semantics.</span></span> <span data-ttu-id="3a0eb-126">此外，重要的完成項，以及任何呼叫，例如<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType>方法，必須在限制的執行區域。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-126">Additionally, the critical finalizer and anything it calls, such as the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType> method, must be in a constrained execution region.</span></span> <span data-ttu-id="3a0eb-127">這會造成何種程式碼可以寫入的完成項呼叫圖形中的條件約束。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-127">This imposes constraints on what code can be written within the finalizer's call graph.</span></span>  
  
 <span data-ttu-id="3a0eb-128">平台叫用作業會自動遞增參考計數的控制代碼會由封裝<xref:System.Runtime.InteropServices.SafeHandle>和遞減它們完成時。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-128">Platform invoke operations automatically increment the reference count of handles encapsulated by a <xref:System.Runtime.InteropServices.SafeHandle> and decrement them upon completion.</span></span> <span data-ttu-id="3a0eb-129">這可確保不會回收或意外地關閉此控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-129">This ensures that the handle will not be recycled or closed unexpectedly.</span></span>  
  
 <span data-ttu-id="3a0eb-130">建構時，您可以指定基礎控制代碼的擁有權<xref:System.Runtime.InteropServices.SafeHandle>物件所提供的值`ownsHandle`引數中的<xref:System.Runtime.InteropServices.SafeHandle>類別建構函式。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-130">You can specify ownership of the underlying handle when constructing <xref:System.Runtime.InteropServices.SafeHandle> objects by supplying a value to the `ownsHandle` argument in the <xref:System.Runtime.InteropServices.SafeHandle> class constructor.</span></span> <span data-ttu-id="3a0eb-131">這會控制是否<xref:System.Runtime.InteropServices.SafeHandle>已在處置物件之後，物件將會釋放控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-131">This controls whether the <xref:System.Runtime.InteropServices.SafeHandle> object will release the handle after the object has been disposed.</span></span>  <span data-ttu-id="3a0eb-132">這是適用於罕見的存留期需求的控制代碼或使用其存留期由其他人所控制的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-132">This is useful for handles with peculiar lifetime requirements or for consuming a handle whose lifetime is controlled by someone else.</span></span>  
  
<a name="Derived"></a>   
## <a name="classes-derived-from-safehandle"></a><span data-ttu-id="3a0eb-133">衍生自 SafeHandle 類別</span><span class="sxs-lookup"><span data-stu-id="3a0eb-133">Classes derived from SafeHandle</span></span>  
 <span data-ttu-id="3a0eb-134"><xref:System.Runtime.InteropServices.SafeHandle> 是抽象的包裝函式類別的作業系統控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-134"><xref:System.Runtime.InteropServices.SafeHandle> is an abstract wrapper class for operating system handles.</span></span> <span data-ttu-id="3a0eb-135">從這個類別衍生並不容易。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-135">Deriving from this class is difficult.</span></span> <span data-ttu-id="3a0eb-136">請改用 <xref:Microsoft.Win32.SafeHandles> 命名空間中的衍生類別，這些類別可為下列各項提供安全的控制代碼：</span><span class="sxs-lookup"><span data-stu-id="3a0eb-136">Instead, use the derived classes in the <xref:Microsoft.Win32.SafeHandles> namespace that provide safe handles for the following:</span></span>  
  
-   <span data-ttu-id="3a0eb-137">檔案 (<xref:Microsoft.Win32.SafeHandles.SafeFileHandle>類別)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-137">Files (the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class).</span></span>  
  
-   <span data-ttu-id="3a0eb-138">記憶體對應檔案 (<xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle>類別)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-138">Memory mapped files (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> class).</span></span>  
  
-   <span data-ttu-id="3a0eb-139">管道 (<xref:Microsoft.Win32.SafeHandles.SafePipeHandle>類別)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-139">Pipes (the <xref:Microsoft.Win32.SafeHandles.SafePipeHandle> class).</span></span>  
  
-   <span data-ttu-id="3a0eb-140">記憶體的檢視 (<xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle>類別)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-140">Memory views (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> class).</span></span>  
  
-   <span data-ttu-id="3a0eb-141">加密建構 ( <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>， <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>， <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>，和<xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle>類別)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-141">Cryptography constructs (the <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, and <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> classes).</span></span>  
  
-   <span data-ttu-id="3a0eb-142">處理程序 (<xref:Microsoft.Win32.SafeHandles.SafeProcessHandle>類別)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-142">Processes (the <xref:Microsoft.Win32.SafeHandles.SafeProcessHandle> class).</span></span>  
  
-   <span data-ttu-id="3a0eb-143">登錄機碼 (<xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle>類別)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-143">Registry keys (the <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> class).</span></span>  
  
-   <span data-ttu-id="3a0eb-144">等候控制代碼 (<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>類別)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-144">Wait handles (the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a0eb-145">下列程式碼範例會建立自訂的作業系統檔案控制代碼，衍生自安全控制代碼<xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-145">The following code example creates a custom safe handle for an operating system file handle, deriving from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>.</span></span> <span data-ttu-id="3a0eb-146">它會從檔案讀取位元組，並顯示其十六進位值。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-146">It reads bytes from a file and displays their hexadecimal values.</span></span> <span data-ttu-id="3a0eb-147">它也包含錯誤，測試控管，造成執行緒中止，但會釋放控制代碼值。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-147">It also contains a fault testing harness that causes the thread to abort, but the handle value is freed.</span></span>  <span data-ttu-id="3a0eb-148">當使用<xref:System.IntPtr>來代表控制代碼，此控制代碼偶爾會外洩發生非同步執行緒中止。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-148">When using an <xref:System.IntPtr> to represent handles, the handle is occasionally leaked due to the asynchronous thread abort.</span></span>  
  
 <span data-ttu-id="3a0eb-149">您必須在已編譯的應用程式相同的資料夾中的文字檔。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-149">You will need a text file in the same folder as the compiled application.</span></span> <span data-ttu-id="3a0eb-150">假設您命名 「 HexViewer 」 應用程式時，便會是命令列使用方式：</span><span class="sxs-lookup"><span data-stu-id="3a0eb-150">Assuming that you name the application "HexViewer", the command line usage is:</span></span>  
  
 `HexViewer <filename> -Fault`  
  
 <span data-ttu-id="3a0eb-151">選擇性地指定`-Fault`嘗試刻意遺漏中止特定視窗中的執行緒控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-151">Optionally specify `-Fault` to intentionally attempt to leak the handle by aborting the thread in a certain window.</span></span> <span data-ttu-id="3a0eb-152">您可以使用 Windows Perform.exe 工具來監視時插入錯誤的控制代碼計數。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-152">Use the Windows Perform.exe tool to monitor handle counts while injecting faults.</span></span>  
  
 [!code-csharp[SafeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="3a0eb-153">針對繼承者完全信任。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-153">for full trust for inheritors.</span></span> <span data-ttu-id="3a0eb-154">這個成員無法繼承由部分信任程式碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-154">This member cannot be inherited by partially trusted code.</span></span></permission>
    <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="3a0eb-155">需要完全信任立即呼叫者。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-155">requires full trust for the immediate caller.</span></span> <span data-ttu-id="3a0eb-156">這個成員無法供部分信任或安全性透明程式碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-156">This member cannot be used by partially trusted or transparent code.</span></span></permission>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="3a0eb-157">若要建立類別，衍生自<see cref="T:System.Runtime.InteropServices.SafeHandle" />，您必須知道如何建立和釋放作業系統控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-157">To create a class derived from <see cref="T:System.Runtime.InteropServices.SafeHandle" />, you must know how to create and free an operating system handle.</span></span> <span data-ttu-id="3a0eb-158">此程序是不同的類型不同的控制代碼，因為某些使用[CloseHandle](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx)函式，而其他則使用更特定的功能，例如[unmapviewoffile 在](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx)或[FindClose](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx).</span><span class="sxs-lookup"><span data-stu-id="3a0eb-158">This process is different for different handle types because some use the [CloseHandle](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx) function, while others use more specific functions such as [UnmapViewOfFile](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx) or [FindClose](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx).</span></span> <span data-ttu-id="3a0eb-159">基於這個理由，您必須建立的衍生的類別<see cref="T:System.Runtime.InteropServices.SafeHandle" />每個您想要將包裝在安全控制代碼的作業系統控制代碼類型。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-159">For this reason, you must create a derived class of <see cref="T:System.Runtime.InteropServices.SafeHandle" /> for each operating system handle type that you want to wrap in a safe handle.</span></span>  
  
 <span data-ttu-id="3a0eb-160">當您繼承自 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 時，您必須覆寫下列成員：<see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> 和 <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-160">When you inherit from <see cref="T:System.Runtime.InteropServices.SafeHandle" />, you must override the following members: <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> and <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />.</span></span>  
  
 <span data-ttu-id="3a0eb-161">您也應該提供值，表示無效的控制代碼的值，這個值與基底建構函式會呼叫預設建構函式和<see cref="T:System.Boolean" />值，指出是否已擁有原生控制代碼<see cref="T:System.Runtime.InteropServices.SafeHandle" />，因此應該被釋放時<see cref="T:System.Runtime.InteropServices.SafeHandle" />已經過處置。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-161">You should also provide a default constructor that calls the base constructor with a value that represent an invalid handle value, and a <see cref="T:System.Boolean" /> value indicating whether the native handle is owned by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> and consequently should be freed when that <see cref="T:System.Runtime.InteropServices.SafeHandle" /> has been disposed.</span></span></para>
    </block>
    <altmember cref="N:Microsoft.Win32.SafeHandles" />
    <altmember cref="T:System.Runtime.InteropServices.CriticalHandle" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle (IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int invalidHandleValue, bool ownsHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (invalidHandleValue As IntPtr, ownsHandle As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle(IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="invalidHandleValue" Type="System.IntPtr" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidHandleValue"><span data-ttu-id="3a0eb-162">無效控制代碼的值 (通常是 0 或 -1)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-162">The value of an invalid handle (usually 0 or -1).</span></span>  <span data-ttu-id="3a0eb-163">您的 <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> 實作應該會針對這個值，傳回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-163">Your implementation of <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> should return <see langword="true" /> for this value.</span></span></param>
        <param name="ownsHandle">
          <span data-ttu-id="3a0eb-164"><see langword="true" /> 表示確實讓 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 在結束階段釋放控制代碼，否則為 <see langword="false" /> (不建議)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-164"><see langword="true" /> to reliably let <see cref="T:System.Runtime.InteropServices.SafeHandle" /> release the handle during the finalization phase; otherwise, <see langword="false" /> (not recommended).</span></span></param>
        <summary><span data-ttu-id="3a0eb-165">使用指定的無效控制代碼值，初始化 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-165">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class with the specified invalid handle value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-166">如果`ownsHandle`參數是`false`，<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>絕不會呼叫; 因此，不建議使用這個參數的值作為您的程式碼可能會遺漏資源。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-166">If the `ownsHandle` parameter is `false`, <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> is never called; thus, it is not recommended to use this parameter value as your code may leak resources.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="3a0eb-167">衍生類別位於沒有 Unmanaged 程式碼存取權限的組件中。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-167">The derived class resides in an assembly without unmanaged code access permission.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="3a0eb-168">針對繼承者完全信任。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-168">for full trust for inheritors.</span></span> <span data-ttu-id="3a0eb-169">這個成員無法繼承由部分信任程式碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-169">This member cannot be inherited by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="3a0eb-170">需要完全信任立即呼叫者。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-170">requires full trust for the immediate caller.</span></span> <span data-ttu-id="3a0eb-171">這個成員無法供部分信任或安全性透明程式碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-171">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a0eb-172">標記要釋出和釋放資源的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-172">Marks the handle for releasing and freeing resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-173">呼叫<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法可讓要釋放資源。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-173">Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="3a0eb-174">這可能不會發生立即其他執行緒正在使用相同的安全控制代碼物件，但只要不再是這樣將會發生。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-174">This might not happen immediately if other threads are using the same safe handle object, but will happen as soon as that is no longer the case.</span></span> <span data-ttu-id="3a0eb-175">雖然大部分的類別使用<xref:System.Runtime.InteropServices.SafeHandle>類別不需要提供完成項，這有時是必要 （例如，清除檔案緩衝區，或者撰寫一些資料放回記憶體）。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-175">Although most classes that use the <xref:System.Runtime.InteropServices.SafeHandle> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="3a0eb-176">在此情況下，類別可以提供一定會先執行完成項<xref:System.Runtime.InteropServices.SafeHandle>重要的完成項執行。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-176">In this case, the class can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="3a0eb-177">呼叫<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法，當您完成使用<xref:System.Runtime.InteropServices.SafeHandle>物件。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-177">Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a0eb-178">請務必呼叫<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>您釋放最後一個參考之前<xref:System.Runtime.InteropServices.SafeHandle>物件。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-178">Always call <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="3a0eb-179">否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Runtime.InteropServices.SafeHandle> 物件的 <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-179">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-180">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-180">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-181">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-181">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-182">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-182">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousAddRef">
      <MemberSignature Language="C#" Value="public void DangerousAddRef (ref bool success);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousAddRef(bool&amp; success) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousAddRef (ByRef success As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousAddRef(bool % success);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="success" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="success">
          <span data-ttu-id="3a0eb-183">如果成功遞增參考計數器，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-183"><see langword="true" /> if the reference counter was successfully incremented; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="3a0eb-184">手動遞增 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 執行個體上的參考計數器。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-184">Manually increments the reference counter on <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instances.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-185"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>方法會防止 common language runtime 回收控制代碼所使用的記憶體 (這會發生於執行階段會呼叫<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>方法)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-185">The <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> method prevents the common language runtime from reclaiming memory used by a handle (which occurs when the runtime calls the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method).</span></span> <span data-ttu-id="3a0eb-186">您可以使用這個方法，以手動的參考計數的遞增<xref:System.Runtime.InteropServices.SafeHandle>執行個體。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-186">You can use this method to manually increment the reference count on a <xref:System.Runtime.InteropServices.SafeHandle> instance.</span></span> <span data-ttu-id="3a0eb-187"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 傳回布林值，使用`ref`參數 (`success`)，指出是否已成功遞增參考計數。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-187"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> returns a Boolean value using a `ref` parameter (`success`) that indicates whether the reference count was incremented successfully.</span></span> <span data-ttu-id="3a0eb-188">這可讓您的程式邏輯，來備份失敗時。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-188">This allows your program logic to back out in case of failure.</span></span> <span data-ttu-id="3a0eb-189">您應該設定`success`至`false`之前先呼叫<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-189">You should set `success` to `false` before calling <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span> <span data-ttu-id="3a0eb-190">如果`success`是`true`，比對的呼叫來避免資源流失<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>對應呼叫<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-190">If `success` is `true`, avoid resource leaks by matching the call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> with a corresponding call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3a0eb-191">此方法適用於進階使用者，而且必須謹慎使用。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-191">This method is intended for advanced users and must always be used carefully.</span></span> <span data-ttu-id="3a0eb-192">若要避免控制代碼資源流失，務必限制的執行區域 (CER)，執行緒中止無法插斷處理內部呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-192">To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-193">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-193">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-194">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-194">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-195">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-195">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      </Docs>
    </Member>
    <Member MemberName="DangerousGetHandle">
      <MemberSignature Language="C#" Value="public IntPtr DangerousGetHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int DangerousGetHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function DangerousGetHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr DangerousGetHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a0eb-196">傳回 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 欄位的值。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-196">Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span></span></summary>
        <returns><span data-ttu-id="3a0eb-197"><see langword="IntPtr" />，代表 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 欄位的值。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-197">An <see langword="IntPtr" /> representing the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span></span> <span data-ttu-id="3a0eb-198">如果這個控制代碼已經用 <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /> 標記為無效，則這個方法仍會傳回原始的控制代碼值，不過這個值可能為過時的值。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-198">If the handle has been marked invalid with <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />, this method still returns the original handle value, which can be a stale value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-199">您可以使用這個方法來擷取實際的控制代碼值的執行個體從<xref:System.Runtime.InteropServices.SafeHandle>衍生的類別。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-199">You can use this method to retrieve the actual handle value from an instance of the <xref:System.Runtime.InteropServices.SafeHandle> derived class.</span></span> <span data-ttu-id="3a0eb-200">這個方法所需的回溯相容性因為.NET Framework 中的許多屬性會傳回`IntPtr`處理類型。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-200">This method is needed for backwards compatibility because many properties in the .NET Framework return `IntPtr` handle types.</span></span> <span data-ttu-id="3a0eb-201">`IntPtr` 控制代碼類型是用來代表指標或控點的特定平台類型。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-201">`IntPtr` handle types are platform-specific types used to represent a pointer or a handle.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3a0eb-202">使用<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>方法可能會造成安全性風險，因為，如果已標示為無效的控制代碼<xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>，<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>仍然會傳回原始、 過時的控制代碼值。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-202">Using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> method can pose security risks because, if the handle has been marked as invalid with <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>, <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> still returns the original, potentially stale handle value.</span></span> <span data-ttu-id="3a0eb-203">傳回的控制代碼，也可以在任何時間點回收。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-203">The returned handle can also be recycled at any point.</span></span> <span data-ttu-id="3a0eb-204">最佳，這表示控制代碼可能會突然停止運作。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-204">At best, this means the handle might suddenly stop working.</span></span> <span data-ttu-id="3a0eb-205">最糟的情況，如果控制代碼或控制代碼所代表的資源會公開至不受信任的程式碼，這可能會導致重複使用或傳回的控制代碼上回收安全性攻擊。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-205">At worst, if the handle or the resource that the handle represents is exposed to untrusted code, this can lead to a recycling security attack on the reused or returned handle.</span></span> <span data-ttu-id="3a0eb-206">例如，不受信任的呼叫端可以查詢傳回的資料只是控制代碼上，並接收完全不相關的資源資訊。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-206">For example, an untrusted caller can query data on the handle just returned and receive information for an entirely unrelated resource.</span></span> <span data-ttu-id="3a0eb-207">請參閱<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>和<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>方法，如需有關使用<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>methodsafely。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-207">See the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> and the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> methods for more information about using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> methodsafely.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-208">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-208">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-209">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-209">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-210">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-210">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousRelease">
      <MemberSignature Language="C#" Value="public void DangerousRelease ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousRelease() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousRelease ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousRelease();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a0eb-211">手動遞減 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 執行個體上的參考計數器。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-211">Manually decrements the reference counter on a <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-212"><xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>方法是對應項目來<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-212">The <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method is the counterpart to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span> <span data-ttu-id="3a0eb-213">您應該一律符合呼叫<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>成功呼叫的方法<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-213">You should always match a call to the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method with a successful call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3a0eb-214">此方法適用於進階使用者，而且必須謹慎使用。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-214">This method is intended for advanced users and must always be used carefully.</span></span> <span data-ttu-id="3a0eb-215">若要避免控制代碼資源流失，務必限制的執行區域 (CER)，執行緒中止無法插斷處理內部呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-215">To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</span></span> <span data-ttu-id="3a0eb-216">在相同的方式也不符合<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>呼叫可能會造成資源流失，不符合的<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>呼叫可能會導致無效的控制代碼狀態會顯示其他執行緒。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-216">In the same way that unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> calls can cause resource leaks, unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls can cause invalid handle states to become visible to other threads.</span></span> <span data-ttu-id="3a0eb-217">不會公開<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>或<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>不受信任的程式碼的呼叫。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-217">Do not expose <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> or <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls to untrusted code.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-218">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-218">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-219">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-219">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-220">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-220">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a0eb-221">釋放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 類別所使用的資源。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-221">Releases the resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a0eb-222">釋放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 類別所使用的所有資源。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-222">Releases all resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-223">呼叫<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法可讓要釋放資源。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-223">Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="3a0eb-224">這可能不會發生立即其他執行緒正在使用相同的執行個體的安全控制代碼，但只要不再是這樣將會發生。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-224">This might not happen immediately if other threads are using the same instance of the safe handle, but will happen as soon as that is no longer the case.</span></span> <span data-ttu-id="3a0eb-225">雖然最類別使用<xref:System.Runtime.InteropServices.SafeHandle>不需要提供完成項，這有時是必要 （例如，排清出檔案緩衝區，或將某些資料寫回記憶體）。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-225">Although most classes using <xref:System.Runtime.InteropServices.SafeHandle> do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="3a0eb-226">在此情況下，它們可以提供一定會先執行完成項<xref:System.Runtime.InteropServices.SafeHandle>重要的完成項執行。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-226">In this case, they can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="3a0eb-227">呼叫<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法，當您完成使用<xref:System.Runtime.InteropServices.SafeHandle>物件。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-227">Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="3a0eb-228"><xref:System.Runtime.InteropServices.SafeHandle.Close%2A>方法會使<xref:System.Runtime.InteropServices.SafeHandle>中無法使用的狀態物件。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-228">The <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method leaves the <xref:System.Runtime.InteropServices.SafeHandle> object in an unusable state.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a0eb-229">請務必呼叫<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>或<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法之前您釋放最後一個參考<xref:System.Runtime.InteropServices.SafeHandle>物件。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-229">Always call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="3a0eb-230">否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Runtime.InteropServices.SafeHandle> 物件的 <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-230">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-231">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-231">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-232">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-232">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-233">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-233">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="3a0eb-234"><see langword="true" /> 表示一般處置作業，而 <see langword="false" /> 則表示完成控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-234"><see langword="true" /> for a normal dispose operation; <see langword="false" /> to finalize the handle.</span></span></param>
        <summary><span data-ttu-id="3a0eb-235">釋放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 類別所使用的 Unmanaged 資源，指定是否要執行一般處置作業。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-235">Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class specifying whether to perform a normal dispose operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-236">您應該永遠不會明確地呼叫<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法`disposing`參數設定為`false`。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-236">You should never explicitly call the <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method with the `disposing` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-237">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-237">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-238">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-238">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-239">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-239">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SafeHandle ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a0eb-240">釋放與控制代碼相關的所有資源。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-240">Frees all resources associated with the handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-241"><xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A>方法是解構函式<xref:System.Runtime.InteropServices.SafeHandle>類別。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-241">The <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method is the destructor for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span> <span data-ttu-id="3a0eb-242">應用程式程式碼不應該直接呼叫這個方法。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-242">Application code should not call this method directly.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-243">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-243">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-244">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-244">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-245">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-245">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="handle">
      <MemberSignature Language="C#" Value="protected IntPtr handle;" />
      <MemberSignature Language="ILAsm" Value=".field family native int handle" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.SafeHandle.handle" />
      <MemberSignature Language="VB.NET" Value="Protected handle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: IntPtr handle;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a0eb-246">指定要包裝的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-246">Specifies the handle to be wrapped.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-247">公開不公開控制代碼 (也就是說，衍生的類別之外)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-247">Do not expose the handle publicly (that is, outside of the derived class).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a0eb-248">取得值，指出控制代碼是否已關閉。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-248">Gets a value indicating whether the handle is closed.</span></span></summary>
        <value>
          <span data-ttu-id="3a0eb-249">如果控制代碼已關閉，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-249"><see langword="true" /> if the handle is closed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-250"><xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A>方法傳回值，指出是否<xref:System.Runtime.InteropServices.SafeHandle>物件的控制代碼不再與原生資源相關聯。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-250">The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a value indicating whether the <xref:System.Runtime.InteropServices.SafeHandle> object's handle is no longer associated with a native resource.</span></span> <span data-ttu-id="3a0eb-251">這不同於的定義<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>屬性，計算是否一律視為指定的控制代碼無效。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-251">This differs from the definition of the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property, which computes whether a given handle is always considered invalid.</span></span> <span data-ttu-id="3a0eb-252"><xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A>方法會傳回`true`值在下列情況：</span><span class="sxs-lookup"><span data-stu-id="3a0eb-252">The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a `true` value in the following cases:</span></span>  
  
-   <span data-ttu-id="3a0eb-253"><xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>呼叫方法。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-253">The <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method was called.</span></span>  
  
-   <span data-ttu-id="3a0eb-254"><xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>方法或<xref:System.Runtime.InteropServices.SafeHandle.Close%2A>而呼叫方法，且沒有參考至<xref:System.Runtime.InteropServices.SafeHandle>其他執行緒上的物件。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-254">The <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method or <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method was called and there are no references to the <xref:System.Runtime.InteropServices.SafeHandle> object on other threads.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-255">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-255">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-256">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-256">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-257">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-257">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsInvalid">
      <MemberSignature Language="C#" Value="public abstract bool IsInvalid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInvalid" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsInvalid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsInvalid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a0eb-258">在衍生類別中覆寫時，取得值以指出這個控制代碼值是否無效。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-258">When overridden in a derived class, gets a value indicating whether the handle value is invalid.</span></span></summary>
        <value>
          <span data-ttu-id="3a0eb-259">如果控制代碼值無效，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-259"><see langword="true" /> if the handle value is invalid; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-260">在衍生的類別必須實作<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>屬性，以便決定是否需要重大的最終處理，通用語言執行平台。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-260">Derived classes must implement the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property so that the common language runtime can determine whether critical finalization is required.</span></span> <span data-ttu-id="3a0eb-261">在衍生的類別必須提供符合它們支援的控制代碼的一般類型的實作 （0 或-1 無效）。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-261">Derived classes must provide an implementation that suits the general type of handle they support (0 or -1 is invalid).</span></span> <span data-ttu-id="3a0eb-262">這些類別可以再進一步衍生特定的安全控制代碼類型。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-262">These classes can then be further derived for specific safe handle types.</span></span>  
  
 <span data-ttu-id="3a0eb-263">不同於<xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A>屬性，報告是否<xref:System.Runtime.InteropServices.SafeHandle>物件已經完成使用基礎控制代碼，<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>屬性計算是否一律視為指定的控制代碼值無效。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-263">Unlike the <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> property, which reports whether the <xref:System.Runtime.InteropServices.SafeHandle> object has finished using the underlying handle, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property calculates whether the given handle value is always considered invalid.</span></span> <span data-ttu-id="3a0eb-264">因此，<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>屬性一律會傳回相同值的任何一個控制代碼值。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-264">Therefore, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property always returns the same value for any one handle value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a0eb-265">下列範例會檢查已成功開啟檔案。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-265">The following example checks if a file was opened successfully.</span></span> <span data-ttu-id="3a0eb-266">這個程式碼範例是針對所提供之較大範例的一部分<xref:System.Runtime.InteropServices.SafeHandle>類別。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-266">This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 [!code-csharp[SafeHandle#2](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-267">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-267">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-268">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-268">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-269">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-269">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="protected abstract bool ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReleaseHandle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ReleaseHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a0eb-270">在衍生類別中覆寫時，執行釋放控制代碼所需的程式碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-270">When overridden in a derived class, executes the code required to free the handle.</span></span></summary>
        <returns>
          <span data-ttu-id="3a0eb-271">如果成功釋放控制代碼，則為 <see langword="true" />；如果發生嚴重失敗的事件，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-271"><see langword="true" /> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false" />.</span></span> <span data-ttu-id="3a0eb-272">在這種情況下，它會產生 [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed 偵錯助理。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-272">In this case, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-273"><xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>方法保證只有一次，而且只有當此控制代碼所定義的有效呼叫<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-273">The <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method is guaranteed to be called only once and only if the handle is valid as defined by the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property.</span></span> <span data-ttu-id="3a0eb-274">實作這個方法在您<xref:System.Runtime.InteropServices.SafeHandle>衍生類別，執行釋放控制代碼所需的任何程式碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-274">Implement this method in your <xref:System.Runtime.InteropServices.SafeHandle> derived classes to execute any code that is required to free the handle.</span></span> <span data-ttu-id="3a0eb-275">因為其中一個函式的<xref:System.Runtime.InteropServices.SafeHandle>是保證的資源流失，您的實作中的程式碼防護<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>必須永遠不會失敗。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-275">Because one of the functions of <xref:System.Runtime.InteropServices.SafeHandle> is to guarantee prevention of resource leaks, the code in your implementation of <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> must never fail.</span></span> <span data-ttu-id="3a0eb-276">記憶體回收行程呼叫<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>正常完成之物件的回收一次執行之後。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-276">The garbage collector calls <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> after normal finalizers have been run for objects that were garbage collected at the same time.</span></span> <span data-ttu-id="3a0eb-277">記憶體回收行程可以保證叫用此方法的資源，並且方法不會中斷時正在進行中。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-277">The garbage collector guarantees the resources to invoke this method and that the method will not be interrupted while it is in progress.</span></span> <span data-ttu-id="3a0eb-278">這個方法會在執行個體 （以及它以靜態方式判斷呼叫歷程圖中的方法） 的建構階段準備做為限制的執行區域 (CER)。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-278">This method will be prepared as a constrained execution region (CER) at instance construction time (along with all the methods in its statically determinable call graph).</span></span> <span data-ttu-id="3a0eb-279">雖然這會防止執行緒中止插斷，但您仍然必須小心，不要導入任何錯誤路徑，在您覆寫<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-279">Although this prevents thread abort interrupts, you must still be careful not to introduce any fault paths in your overridden <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method.</span></span> <span data-ttu-id="3a0eb-280">特別是，套用<xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute>屬性設定為您從呼叫任何方法<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-280">In particular, apply the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to any methods you call from <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>.</span></span> <span data-ttu-id="3a0eb-281">在大部分情況下應使用此程式碼：</span><span class="sxs-lookup"><span data-stu-id="3a0eb-281">In most cases this code should be:</span></span>  
  
 `ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)`  
  
 <span data-ttu-id="3a0eb-282">此外，對於簡單的清除 (例如，呼叫 Win32 API`CloseHandle`上的檔案控制代碼) 為單一平台叫用呼叫，您可以檢查傳回的值。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-282">Additionally, for simple cleanup (for example, calling the Win32 API `CloseHandle` on a file handle) you can check the return value for the single platform invoke call.</span></span> <span data-ttu-id="3a0eb-283">複雜的清除，您可能使用大量的程式邏輯和多個方法呼叫，其中有些可能會失敗。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-283">For complex cleanup, you may have a lot of program logic and many method calls, some of which might fail.</span></span> <span data-ttu-id="3a0eb-284">您必須確定您的程式邏輯具有回溯程式碼，針對每個這種情況。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-284">You must ensure that your program logic has fallback code for each of those cases.</span></span>  
  
 <span data-ttu-id="3a0eb-285">如果<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>傳回`false`基於任何理由，它會產生[releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed 偵錯助理。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-285">If <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> returns `false` for any reason, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.</span></span>  <span data-ttu-id="3a0eb-286">這可協助您偵測出無法嘗試釋放資源的情況。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-286">This helps you detect cases where your attempt to release resources fails.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a0eb-287">下列程式碼範例釋放的控制代碼，而且是提供之較大範例的一部分<xref:System.Runtime.InteropServices.SafeHandle>類別。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-287">The following code example releases the handle and is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 [!code-csharp[SafeHandle#3](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-288">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-288">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-289">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-289">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-290">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-290">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetHandle">
      <MemberSignature Language="C#" Value="protected void SetHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="3a0eb-291">要使用的既有控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-291">The pre-existing handle to use.</span></span></param>
        <summary><span data-ttu-id="3a0eb-292">將控制代碼設定為指定的既有控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-292">Sets the handle to the specified pre-existing handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-293">使用<xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A>方法只有在必須支援既有控制代碼 （例如，如果在結構中傳回的控制代碼） 的.NET Framework COM interop 的基礎結構不支援封送處理因為輸出結構中的控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-293">Use the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method only if you need to support a pre-existing handle (for example, if the handle is returned in a structure) because the .NET Framework COM interop infrastructure does not support marshaling output handles in a structure.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-294">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-294">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-295">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-295">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-296">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-296">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetHandleAsInvalid">
      <MemberSignature Language="C#" Value="public void SetHandleAsInvalid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetHandleAsInvalid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHandleAsInvalid ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetHandleAsInvalid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a0eb-297">將控制代碼標記為不再使用。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-297">Marks a handle as no longer used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a0eb-298">呼叫<xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>方法只有在您知道您的控制代碼不再參考的資源時。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-298">Call the <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method only when you know that your handle no longer references a resource.</span></span> <span data-ttu-id="3a0eb-299">如此一來，不會變更的值<xref:System.Runtime.InteropServices.SafeHandle.handle>欄位; 它只標記的控制代碼，為已關閉。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-299">Doing so does not change the value of the <xref:System.Runtime.InteropServices.SafeHandle.handle> field; it only marks the handle as closed.</span></span> <span data-ttu-id="3a0eb-300">控制代碼，則可能會包含過時的值。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-300">The handle might then contain a potentially stale value.</span></span> <span data-ttu-id="3a0eb-301">這個呼叫的效果是，不會嘗試釋放資源。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-301">The effect of this call is that no attempt is made to free the resources.</span></span>  
  
 <span data-ttu-id="3a0eb-302">如同<xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A>方法，請使用<xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>只有當您需要支援既有控制代碼。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-302">As with the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method, use <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> only if you need to support a pre-existing handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3a0eb-303">呼叫 unmanaged 程式碼的權限。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-303">for permission to call unmanaged code.</span></span> <span data-ttu-id="3a0eb-304">安全性動作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="3a0eb-304">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3a0eb-305">相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3a0eb-305">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>