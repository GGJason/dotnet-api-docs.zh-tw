<Type Name="OutAttribute" FullName="System.Runtime.InteropServices.OutAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a5f667aa9e088c1293983294fb45fd08504295c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30478342" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.OutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a9f22-101">表示資料應從被呼叫端封送處理至呼叫端。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a9f22-101">Indicates that data should be marshaled from callee back to caller.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9f22-102">您可以將此屬性套用至參數。</span><span class="sxs-lookup"><span data-stu-id="a9f22-102">You can apply this attribute to parameters.</span></span>  
  
 <span data-ttu-id="a9f22-103"><xref:System.Runtime.InteropServices.OutAttribute>是選擇性的。</span><span class="sxs-lookup"><span data-stu-id="a9f22-103">The <xref:System.Runtime.InteropServices.OutAttribute> is optional.</span></span> <span data-ttu-id="a9f22-104">COM interop 支援的屬性，並只平台叫用。</span><span class="sxs-lookup"><span data-stu-id="a9f22-104">The attribute is supported for COM interop and platform invoke only.</span></span> <span data-ttu-id="a9f22-105">如果沒有明確設定，interop 封送處理器會假設規則根據參數類型、 依參考或值，是否傳遞的參數和型別是否 blittable 或非 blittable。</span><span class="sxs-lookup"><span data-stu-id="a9f22-105">In the absence of explicit settings, the interop marshaler assumes rules based on the parameter type, whether the parameter is passed by reference or by value, and whether the type is blittable or non-blittable.</span></span> <span data-ttu-id="a9f22-106">例如，<xref:System.Text.StringBuilder>類別一律假定為 In/Out 和假設的傳值方式傳遞的字串陣列中。</span><span class="sxs-lookup"><span data-stu-id="a9f22-106">For example, the <xref:System.Text.StringBuilder> class is always assumed to be In/Out and an array of strings passed by value is assumed to be In.</span></span>  
  
 <span data-ttu-id="a9f22-107">僅向外行為絕不會是預設的封送處理行為的參數。</span><span class="sxs-lookup"><span data-stu-id="a9f22-107">Out-only behavior is never a default marshaling behavior for parameters.</span></span> <span data-ttu-id="a9f22-108">您可以套用<xref:System.Runtime.InteropServices.OutAttribute>由參考傳遞至將 In/Out 行為變更為僅向外行為，相當於使用的值和參考型別`out`C# 中的關鍵字。</span><span class="sxs-lookup"><span data-stu-id="a9f22-108">You can apply the <xref:System.Runtime.InteropServices.OutAttribute> to value and reference types passed by reference to change In/Out behavior to Out-only behavior, which is equivalent to using the `out` keyword in C#.</span></span> <span data-ttu-id="a9f22-109">比方說，為僅向外，可以變更值，預設封送處理做為在專用的參數，所傳遞的陣列。</span><span class="sxs-lookup"><span data-stu-id="a9f22-109">For example, arrays passed by value, marshaled as In-only parameters by default, can be changed to Out-only.</span></span> <span data-ttu-id="a9f22-110">不過，此行為不會永遠提供預期的語意時類型包括所有 blittable 項目或欄位，因為 interop 封送處理器會使用釘選。</span><span class="sxs-lookup"><span data-stu-id="a9f22-110">However, the behavior does not always provide expected semantics when the types include all-blittable elements or fields because the interop marshaler uses pinning.</span></span> <span data-ttu-id="a9f22-111">如果您不在意在將資料傳遞至被呼叫端，則僅向外封送處理可以提供非 blittable 類型的較佳效能。</span><span class="sxs-lookup"><span data-stu-id="a9f22-111">If you do not care about passing data into the callee, Out-only marshaling can provide better performance for non-blittable types.</span></span>  
  
 <span data-ttu-id="a9f22-112">結合<xref:System.Runtime.InteropServices.InAttribute>和<xref:System.Runtime.InteropServices.OutAttribute>是特別有用時套用至陣列和格式化，非 blittable 類型。</span><span class="sxs-lookup"><span data-stu-id="a9f22-112">Combining the <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> is particularly useful when applied to arrays and formatted, non-blittable types.</span></span> <span data-ttu-id="a9f22-113">呼叫端會看到只在您套用這兩個屬性時，這些類型對被呼叫端的變更。</span><span class="sxs-lookup"><span data-stu-id="a9f22-113">Callers see the changes a callee makes to these types only when you apply both attributes.</span></span> <span data-ttu-id="a9f22-114">由於這些類型需要複製封送處理期間，您可以使用<xref:System.Runtime.InteropServices.InAttribute>和<xref:System.Runtime.InteropServices.OutAttribute>以減少不必要的複本。</span><span class="sxs-lookup"><span data-stu-id="a9f22-114">Since these types require copying during marshaling, you can use <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> to reduce unnecessary copies.</span></span>  
  
 <span data-ttu-id="a9f22-115">如需有關的效果<xref:System.Runtime.InteropServices.OutAttribute>上封送處理行為，請參閱[方向屬性](http://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2)。</span><span class="sxs-lookup"><span data-stu-id="a9f22-115">For more information on the effect of <xref:System.Runtime.InteropServices.OutAttribute> on marshaling behavior, see [Directional Attributes](http://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9f22-116">下列範例示範如何套用<xref:System.Runtime.InteropServices.InAttribute>和<xref:System.Runtime.InteropServices.OutAttribute>平台叫用傳遞為參數陣列的原型。</span><span class="sxs-lookup"><span data-stu-id="a9f22-116">The following example shows how to apply the <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> to a platform invoke prototype that passes an array as a parameter.</span></span> <span data-ttu-id="a9f22-117">方向屬性的組合可讓呼叫端看到被呼叫端所做的變更。</span><span class="sxs-lookup"><span data-stu-id="a9f22-117">The combination of directional attributes allows the caller to see the changes made by the callee.</span></span>  
  
 [!code-cpp[Interop InOutParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR/Interop InOutParameters/CPP/inout.cpp#1)]
 [!code-csharp[Interop InOutParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR/Interop InOutParameters/CS/inout.cs#1)]
 [!code-vb[Interop InOutParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Interop InOutParameters/VB/inout.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.InAttribute" />
    <altmember cref="T:System.Text.StringBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.OutAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a9f22-118">初始化 <see cref="T:System.Runtime.InteropServices.OutAttribute" /> 類別的新執行個體。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9f22-118">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.OutAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>