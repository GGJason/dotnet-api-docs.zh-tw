<Type Name="EventHandlerService" FullName="System.Windows.Forms.Design.EventHandlerService">
  <TypeSignature Language="C#" Value="public sealed class EventHandlerService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventHandlerService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.EventHandlerService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventHandlerService" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventHandlerService sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6cde3-101">提供系統化方法來管理目前文件的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="6cde3-101">Provides a systematic way to manage event handlers for the current document.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cde3-102">開發人員可能想要撰寫程式碼中處理事件的特定類型的一個位置。</span><span class="sxs-lookup"><span data-stu-id="6cde3-102">Developers may want to be able to write code in one place that handles events of a certain type.</span></span>  
  
 <span data-ttu-id="6cde3-103">此外，開發人員可能需要全域變更的特定事件或事件，可能會分散在設計工具的元件類型的處理常式的行為。</span><span class="sxs-lookup"><span data-stu-id="6cde3-103">Also, developers may need to globally change the behavior of the handlers for specific events or types of events, which may be distributed among designer components.</span></span>  
  
 <span data-ttu-id="6cde3-104">典型的專案的設計工具是許多不同的物件，因此可能很有用來列出並儲存這些事件中的通用位置參考。</span><span class="sxs-lookup"><span data-stu-id="6cde3-104">The designers for a typical project are many different objects so it can be useful to list and store reference to these events from a common place.</span></span>  
  
 <span data-ttu-id="6cde3-105">此服務會實作 「 事件堆疊 」，其中包含目前的資料集的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="6cde3-105">This service implements an "event stack" that contains the current set of event handlers.</span></span> <span data-ttu-id="6cde3-106">堆疊可能有各種不同類型的處理常式的堆疊上。</span><span class="sxs-lookup"><span data-stu-id="6cde3-106">The stack may have a variety of different types of handlers on the stack.</span></span>  
  
 <span data-ttu-id="6cde3-107">比方說，設計工具可能會推入，或加入處理常式鍵盤和滑鼠處理常式至堆疊。</span><span class="sxs-lookup"><span data-stu-id="6cde3-107">For example, a designer might push, or add, a keyboard handler and a mouse handler onto the stack.</span></span> <span data-ttu-id="6cde3-108">當設計工具要求的事件處理常式時，服務就會符合您所要求的類別在堆疊上發現的最上層的處理常式。</span><span class="sxs-lookup"><span data-stu-id="6cde3-108">When a designer requests an event handler, the service will find the topmost handler on the stack that matches the class you requested.</span></span>  
  
 <span data-ttu-id="6cde3-109">這種方式可以任何事件配置，來擴充服務，它也可讓特定類型的事件處理常式来被取代。</span><span class="sxs-lookup"><span data-stu-id="6cde3-109">This way the service can be extended to any eventing scheme, and it also allows specific types of event handlers to be replaced.</span></span> <span data-ttu-id="6cde3-110">例如，您可以取代滑鼠事件處理常式，而不會影響功能表事件處理常式或鍵盤事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="6cde3-110">For example, you can replace mouse event handlers without affecting menu event handlers or keyboard event handlers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventHandlerService (System.Windows.Forms.Control focusWnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control focusWnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (focusWnd As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventHandlerService(System::Windows::Forms::Control ^ focusWnd);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="focusWnd" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="focusWnd"><span data-ttu-id="6cde3-111">正在設計的 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6cde3-111">The <see cref="T:System.Windows.Forms.Control" /> which is being designed.</span></span></param>
        <summary><span data-ttu-id="6cde3-112">初始化 <see cref="T:System.Windows.Forms.Design.EventHandlerService" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="6cde3-112">Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.EventHandlerService" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EventHandlerChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EventHandlerChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EventHandlerChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ EventHandlerChanged;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Forms.Design.IEventHandlerService.EventHandlerChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cde3-113">引發 OnEventHandlerChanged 事件。</span><span class="sxs-lookup"><span data-stu-id="6cde3-113">Fires an OnEventHandlerChanged event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusWindow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control FocusWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control FocusWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.EventHandlerService.FocusWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FocusWindow As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ FocusWindow { System::Windows::Forms::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.Design.IEventHandlerService.FocusWindow</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cde3-114">取得事件處理常式所附加至的控制項。</span><span class="sxs-lookup"><span data-stu-id="6cde3-114">Gets the control to which event handlers are attached.</span></span></summary>
        <value><span data-ttu-id="6cde3-115">透過建構函式 (Constructor) 而附加的 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="6cde3-115">The <see cref="T:System.Windows.Forms.Control" /> which was attached through the constructor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHandler">
      <MemberSignature Language="C#" Value="public object GetHandler (Type handlerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetHandler(class System.Type handlerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHandler (handlerType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetHandler(Type ^ handlerType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.GetHandler(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handlerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="handlerType"><span data-ttu-id="6cde3-116">要取得的處理常式型別。</span><span class="sxs-lookup"><span data-stu-id="6cde3-116">The type of the handler to get.</span></span></param>
        <summary><span data-ttu-id="6cde3-117">取得指定型別的目前現用事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="6cde3-117">Gets the currently active event handler of the specified type.</span></span></summary>
        <returns><span data-ttu-id="6cde3-118">處理常式的執行個體；如果沒有所要求型別的處理常式，則為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6cde3-118">An instance of the handler, or <see langword="null" /> if there is no handler of the requested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cde3-119">因為其他元件在將它變更，您不應快取此值。</span><span class="sxs-lookup"><span data-stu-id="6cde3-119">You should never cache this value because other components are free to change it.</span></span> <span data-ttu-id="6cde3-120">這個呼叫是相當快速，不過，特別是針對案例時一律要求相同類型的處理常式。</span><span class="sxs-lookup"><span data-stu-id="6cde3-120">This call is fairly quick, however, especially for cases when you are always asking for the same type of handler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopHandler">
      <MemberSignature Language="C#" Value="public void PopHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PopHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PopHandler(System::Object ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PopHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="6cde3-121">要從堆疊移除的處理常式。</span><span class="sxs-lookup"><span data-stu-id="6cde3-121">The handler to remove from the stack.</span></span></param>
        <summary><span data-ttu-id="6cde3-122">從堆疊移除指定的處理常式。</span><span class="sxs-lookup"><span data-stu-id="6cde3-122">Pops the given handler off of the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cde3-123">如果此處理常式不是在堆疊上最上層的元件，這會顯示所有的處理常式和處理常式。</span><span class="sxs-lookup"><span data-stu-id="6cde3-123">If the handler is not the topmost component on the stack, this will pop all handlers up to and including handler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushHandler">
      <MemberSignature Language="C#" Value="public void PushHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PushHandler(System::Object ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PushHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="6cde3-124">要加入至堆疊的處理常式。</span><span class="sxs-lookup"><span data-stu-id="6cde3-124">The handler to add to the stack.</span></span></param>
        <summary><span data-ttu-id="6cde3-125">將新的事件處理常式推入至堆疊。</span><span class="sxs-lookup"><span data-stu-id="6cde3-125">Pushes a new event handler on the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cde3-126">這個處理常式將供要求相容的處理常式類型的所有元件。</span><span class="sxs-lookup"><span data-stu-id="6cde3-126">This handler will be used by all components that request a compatible handler type.</span></span> <span data-ttu-id="6cde3-127">如果這個處理常式不支援要求的型別，則將使用在堆疊上的下一個處理常式。</span><span class="sxs-lookup"><span data-stu-id="6cde3-127">If this handler does not support the requested type, the next handler on the stack will be used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>