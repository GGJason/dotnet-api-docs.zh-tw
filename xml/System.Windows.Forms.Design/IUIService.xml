<Type Name="IUIService" FullName="System.Windows.Forms.Design.IUIService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c3481f64f3044a15db7f9161c6a24b5743df03ff" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39890740" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IUIService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUIService" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.IUIService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IUIService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IUIService" />
  <TypeSignature Language="F#" Value="type IUIService = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.Guid("06A9C74B-5E32-4561-BE73-381B37869F4F")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>能夠與裝載 (Host) 設計工具的開發環境物件之使用者介面互動。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Design.IUIService> 可以顯示錯誤訊息、 顯示對話方塊，以及透過取得環境屬性的主應用程式，例如對話方塊和色彩配置的字型<xref:System.Windows.Forms.Design.IUIService.Styles%2A>字典屬性。  
  
   
  
## Examples  
 下列程式碼範例會建立提供呼叫方法的設計工具動詞命令功能表命令的設計工具<xref:System.Windows.Forms.Design.IUIService>。 若要使用的範例中，編譯組件、 範例程式碼，並在 Windows Forms 應用程式中新增組件的參考。 如果您使用 Visual Studio 中，`IUIServiceExampleControl`會自動新增至**工具箱**。 新增的執行個體`IUIServiceExampleControl`至<xref:System.Windows.Forms.Form>。 若要存取叫用的設計工具動詞命令<xref:System.Windows.Forms.Design.IUIService>方法，是以滑鼠右鍵按一下控制項的介面上或按一下控制項的智慧標籤圖像 （glyph） 和從智慧標籤面板中選取項目。  
  
 [!code-cpp[IUIServiceExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#1)]
 [!code-csharp[IUIServiceExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#1)]
 [!code-vb[IUIServiceExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanShowComponentEditor">
      <MemberSignature Language="C#" Value="public bool CanShowComponentEditor (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanShowComponentEditor(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.CanShowComponentEditor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanShowComponentEditor (component As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanShowComponentEditor(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="abstract member CanShowComponentEditor : obj -&gt; bool" Usage="iUIService.CanShowComponentEditor component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">元件，要檢查是否支援 <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" /> 的顯示。</param>
        <summary>指示元件是否可以顯示 <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" />。</summary>
        <returns>如果指定的元件可以顯示元件編輯器表單，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 元件編輯器可以顯示類似的屬性頁從元件物件模型 (COM) 元件編輯器表單。  
  
 這個方法會檢查以判斷指定的元件是否有<xref:System.ComponentModel.ComponentEditor>可以顯示<xref:System.Windows.Forms.Design.ComponentEditorForm>。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Design.IUIService.ShowComponentEditor(System.Object,System.Windows.Forms.IWin32Window)" />
      </Docs>
    </Member>
    <Member MemberName="GetDialogOwnerWindow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IWin32Window GetDialogOwnerWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.IWin32Window GetDialogOwnerWindow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.GetDialogOwnerWindow" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDialogOwnerWindow () As IWin32Window" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::IWin32Window ^ GetDialogOwnerWindow();" />
      <MemberSignature Language="F#" Value="abstract member GetDialogOwnerWindow : unit -&gt; System.Windows.Forms.IWin32Window" Usage="iUIService.GetDialogOwnerWindow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IWin32Window</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得顯示對話方塊時應該當做擁有人的視窗。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.IWin32Window" />，指出視窗擁有任何子對話方塊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有些對話方塊的擁有者應用程式做為父代，並不會顯示在 工作清單。 這個方法會傳回<xref:System.Windows.Forms.IWin32Window>指出應該是對話方塊的這類的整合式的開發環境從繁衍的擁有者的視窗。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUIDirty">
      <MemberSignature Language="C#" Value="public void SetUIDirty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUIDirty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.SetUIDirty" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetUIDirty ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetUIDirty();" />
      <MemberSignature Language="F#" Value="abstract member SetUIDirty : unit -&gt; unit" Usage="iUIService.SetUIDirty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>設定指示 UI 已經變更的旗標。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會指示 UI 已經變更，應該要重新整理。 請務必指出需要重新整理，每當工具列或功能表項目的狀態變更時。 大部分的開發環境會快取的快的速度，這些項目狀態，並需要知道在需要更新時。 這個方法會呼叫，比方說之後選取設計工具的檢視，以啟用 剪下和複製功能表項目內的物件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowComponentEditor">
      <MemberSignature Language="C#" Value="public bool ShowComponentEditor (object component, System.Windows.Forms.IWin32Window parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowComponentEditor(object component, class System.Windows.Forms.IWin32Window parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowComponentEditor(System.Object,System.Windows.Forms.IWin32Window)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowComponentEditor (component As Object, parent As IWin32Window) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShowComponentEditor(System::Object ^ component, System::Windows::Forms::IWin32Window ^ parent);" />
      <MemberSignature Language="F#" Value="abstract member ShowComponentEditor : obj * System.Windows.Forms.IWin32Window -&gt; bool" Usage="iUIService.ShowComponentEditor (component, parent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="parent" Type="System.Windows.Forms.IWin32Window" />
      </Parameters>
      <Docs>
        <param name="component">元件，要為其顯示 <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" />。</param>
        <param name="parent">
          <see cref="T:System.Windows.Forms.IWin32Window" />，做為任何對話方塊的父代。</param>
        <summary>嘗試顯示元件的 <see cref="T:System.Windows.Forms.Design.ComponentEditorForm" />。</summary>
        <returns>如果嘗試成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.Design.ComponentEditorForm>類似於屬性頁從元件物件模型 (COM)。  
  
 如果元件不支援元件編輯器<xref:System.ArgumentException>就會擲回。 若要避免這個問題，請確定呼叫<xref:System.Windows.Forms.Design.IUIService.CanShowComponentEditor%2A>第一次。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">元件不支援元件編輯器。</exception>
        <altmember cref="M:System.Windows.Forms.Design.IUIService.CanShowComponentEditor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowDialog (System.Windows.Forms.Form form);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Windows.Forms.DialogResult ShowDialog(class System.Windows.Forms.Form form) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowDialog(System.Windows.Forms.Form)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DialogResult ShowDialog(System::Windows::Forms::Form ^ form);" />
      <MemberSignature Language="F#" Value="abstract member ShowDialog : System.Windows.Forms.Form -&gt; System.Windows.Forms.DialogResult" Usage="iUIService.ShowDialog form" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="form" Type="System.Windows.Forms.Form" />
      </Parameters>
      <Docs>
        <param name="form">要顯示的 <see cref="T:System.Windows.Forms.Form" />。</param>
        <summary>嘗試在對話方塊中顯示指定的表單。</summary>
        <returns>其中一個 <see cref="T:System.Windows.Forms.DialogResult" /> 值，指出對話方塊傳回的結果碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例會嘗試取得的執行個體<xref:System.Windows.Forms.Design.IUIService>類別，並叫用服務的<xref:System.Windows.Forms.Design.IUIService.ShowDialog%2A>方法。  
  
 [!code-cpp[IUIServiceExample#4](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#4)]
 [!code-csharp[IUIServiceExample#4](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#4)]
 [!code-vb[IUIServiceExample#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DialogResult" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowError">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在訊息方塊中顯示指定的錯誤訊息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowError">
      <MemberSignature Language="C#" Value="public void ShowError (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowError(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowError (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowError(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="abstract member ShowError : Exception -&gt; unit" Usage="iUIService.ShowError ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">要顯示的 <see cref="T:System.Exception" />。</param>
        <summary>在訊息方塊顯示指定的例外狀況和例外狀況的相關資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個方法可讓訊息方塊顯示畫面來適當地整合與開發環境。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowError">
      <MemberSignature Language="C#" Value="public void ShowError (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowError(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowError(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowError (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowError(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member ShowError : string -&gt; unit" Usage="iUIService.ShowError message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要顯示的錯誤訊息。</param>
        <summary>在訊息方塊中顯示指定的錯誤訊息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個方法可讓訊息方塊顯示畫面來適當地整合與開發環境。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowError">
      <MemberSignature Language="C#" Value="public void ShowError (Exception ex, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowError(class System.Exception ex, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowError(System.Exception,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowError (ex As Exception, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowError(Exception ^ ex, System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member ShowError : Exception * string -&gt; unit" Usage="iUIService.ShowError (ex, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">要顯示的 <see cref="T:System.Exception" />。</param>
        <param name="message">要顯示的訊息，提供例外狀況相關資訊。</param>
        <summary>在訊息方塊顯示指定的例外狀況和例外狀況的相關資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用這個方法可讓訊息方塊顯示畫面來適當地整合與開發環境。  
  
   
  
## Examples  
 下列程式碼範例會嘗試取得的執行個體<xref:System.Windows.Forms.Design.IUIService>，並叫用服務的<xref:System.Windows.Forms.Design.IUIService.ShowError%2A>方法。  
  
 [!code-cpp[IUIServiceExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#3)]
 [!code-csharp[IUIServiceExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#3)]
 [!code-vb[IUIServiceExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowMessage">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在訊息方塊中顯示指定的訊息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowMessage">
      <MemberSignature Language="C#" Value="public void ShowMessage (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowMessage(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowMessage (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowMessage(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member ShowMessage : string -&gt; unit" Usage="iUIService.ShowMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要顯示的訊息。</param>
        <summary>在訊息方塊中顯示指定的訊息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可確保訊息方塊顯示正確整合在開發環境。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.Design.IUIService.ShowMessage%2A>方法，以顯示訊息方塊。  
  
 [!code-cpp[IUIServiceExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#2)]
 [!code-csharp[IUIServiceExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#2)]
 [!code-vb[IUIServiceExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowMessage">
      <MemberSignature Language="C#" Value="public void ShowMessage (string message, string caption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowMessage(string message, string caption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowMessage (message As String, caption As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowMessage(System::String ^ message, System::String ^ caption);" />
      <MemberSignature Language="F#" Value="abstract member ShowMessage : string * string -&gt; unit" Usage="iUIService.ShowMessage (message, caption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="caption" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要顯示的訊息。</param>
        <param name="caption">訊息方塊的標題。</param>
        <summary>以指定的標題在訊息方塊中顯示指定的訊息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可確保訊息方塊顯示正確整合在開發環境。  
  
   
  
## Examples  
 下列程式碼範例會嘗試取得的執行個體<xref:System.Windows.Forms.Design.IUIService>，並叫用服務的<xref:System.Windows.Forms.Design.IUIService.ShowMessage%2A>方法。  
  
 [!code-cpp[IUIServiceExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#2)]
 [!code-csharp[IUIServiceExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#2)]
 [!code-vb[IUIServiceExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowMessage">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowMessage (string message, string caption, System.Windows.Forms.MessageBoxButtons buttons);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Windows.Forms.DialogResult ShowMessage(string message, string caption, valuetype System.Windows.Forms.MessageBoxButtons buttons) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowMessage(System.String,System.String,System.Windows.Forms.MessageBoxButtons)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowMessage (message As String, caption As String, buttons As MessageBoxButtons) As DialogResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DialogResult ShowMessage(System::String ^ message, System::String ^ caption, System::Windows::Forms::MessageBoxButtons buttons);" />
      <MemberSignature Language="F#" Value="abstract member ShowMessage : string * string * System.Windows.Forms.MessageBoxButtons -&gt; System.Windows.Forms.DialogResult" Usage="iUIService.ShowMessage (message, caption, buttons)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="buttons" Type="System.Windows.Forms.MessageBoxButtons" />
      </Parameters>
      <Docs>
        <param name="message">要顯示的訊息。</param>
        <param name="caption">對話方塊的標題。</param>
        <param name="buttons">其中一個 <see cref="T:System.Windows.Forms.MessageBoxButtons" /> 值：<see cref="F:System.Windows.Forms.MessageBoxButtons.OK" />、<see cref="F:System.Windows.Forms.MessageBoxButtons.OKCancel" />、<see cref="F:System.Windows.Forms.MessageBoxButtons.YesNo" /> 或 <see cref="F:System.Windows.Forms.MessageBoxButtons.YesNoCancel" />。</param>
        <summary>以指定的標題在訊息方塊中顯示指定的訊息，並且在對話方塊上放上按鈕。</summary>
        <returns>其中一個 <see cref="T:System.Windows.Forms.DialogResult" /> 值，指出對話方塊傳回的結果碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可確保訊息方塊顯示正確整合在開發環境。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Windows.Forms.Design.IUIService.ShowMessage%2A>方法，以顯示訊息方塊。  
  
 [!code-cpp[IUIServiceExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#2)]
 [!code-csharp[IUIServiceExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#2)]
 [!code-vb[IUIServiceExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DialogResult" />
        <altmember cref="T:System.Windows.Forms.MessageBox" />
      </Docs>
    </Member>
    <Member MemberName="ShowToolWindow">
      <MemberSignature Language="C#" Value="public bool ShowToolWindow (Guid toolWindow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowToolWindow(valuetype System.Guid toolWindow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.IUIService.ShowToolWindow(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowToolWindow (toolWindow As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShowToolWindow(Guid toolWindow);" />
      <MemberSignature Language="F#" Value="abstract member ShowToolWindow : Guid -&gt; bool" Usage="iUIService.ShowToolWindow toolWindow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toolWindow" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="toolWindow">工具視窗的 <see cref="T:System.Guid" /> 識別項。 這可以是自訂的 <see cref="T:System.Guid" />，或者 <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> 的其中一個預先定義值。</param>
        <summary>顯示指定的工具視窗。</summary>
        <returns>如果已順利顯示工具視窗，則為 <see langword="true" />，如果無法顯示或找不到此視窗，則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例會嘗試取得的執行個體<xref:System.Windows.Forms.Design.IUIService>，並叫用服務的<xref:System.Windows.Forms.Design.IUIService.ShowToolWindow%2A>方法。  
  
 [!code-cpp[IUIServiceExample#5](~/samples/snippets/cpp/VS_Snippets_Winforms/IUIServiceExample/CPP/class1.cpp#5)]
 [!code-csharp[IUIServiceExample#5](~/samples/snippets/csharp/VS_Snippets_Winforms/IUIServiceExample/CS/class1.cs#5)]
 [!code-vb[IUIServiceExample#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IUIServiceExample/VB/class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.StandardToolWindows" />
      </Docs>
    </Member>
    <Member MemberName="Styles">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary Styles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Styles" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.IUIService.Styles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Styles As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IDictionary ^ Styles { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Styles : System.Collections.IDictionary" Usage="System.Windows.Forms.Design.IUIService.Styles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得主應用程式環境特定的樣式集合。</summary>
        <value>包含樣式設定的 <see cref="T:System.Collections.IDictionary" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 字典可以提供從主機環境的資訊。 最低限度，這包含適用於標準的 UI 文字和色彩來反白顯示使用的字型。 這些必要樣式"DialogFont 」 和 「 HighlightColor"。  
  
 這些樣式的值可能會擷取使用樣式做為字典中，存取當做索引子使用索引鍵的字典索引鍵。 例如: (物件，實作<xref:System.Windows.Forms.Design.IUIService>)。樣式 [（樣式名稱字串以引號括住）]。  
  
   
  
## Examples  
 下列程式碼範例會從主機環境取得對話方塊字型。  
  
 [!code-cpp[Classic IUIService.Styles Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic IUIService.Styles Example/CPP/source.cpp#1)]
 [!code-csharp[Classic IUIService.Styles Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic IUIService.Styles Example/CS/source.cs#1)]
 [!code-vb[Classic IUIService.Styles Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic IUIService.Styles Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
  </Members>
</Type>